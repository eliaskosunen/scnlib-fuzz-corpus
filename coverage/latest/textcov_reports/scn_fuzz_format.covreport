_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|    418|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  3.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  5.37M|{
 3803|  5.37M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|  5.37M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|  5.37M|    }
 3806|  5.37M|    else if constexpr (sizeof(U) == 2) {
 3807|  5.37M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|  5.37M|    }
 3809|  5.37M|    else {
 3810|       |        // utf-32
 3811|  5.37M|        static_assert(sizeof(U) == 4);
 3812|  5.37M|        SCN_UNUSED(ch);
 3813|  5.37M|        return 1;
 3814|  5.37M|    }
 3815|  5.37M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  5.37M|{
 3767|  5.37M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  5.37M|    SCN_GCC_COMPAT_PUSH
 3770|  5.37M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  5.37M|    constexpr char lengths[] =
 3772|  5.37M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  5.37M|        "\1\1\1\1\1\1\1\1"
 3774|  5.37M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  5.37M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  5.37M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  5.37M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  5.37M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  5.37M|    SCN_GCC_COMPAT_POP
 3781|  5.37M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  4.96M|{
 4009|  4.96M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|  4.96M|        return decode_utf8_code_point_exhaustive(input);
 4011|  4.96M|    }
 4012|  4.96M|    else if constexpr (sizeof(CharT) == 2) {
 4013|  4.96M|        return decode_utf16_code_point_exhaustive(input);
 4014|  4.96M|    }
 4015|  4.96M|    else {
 4016|  4.96M|        SCN_EXPECT(input.size() == 1);
 4017|  4.96M|        auto cp = static_cast<char32_t>(input.front());
 4018|  4.96M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|  4.96M|            return invalid_code_point;
 4020|  4.96M|        }
 4021|  4.96M|        return cp;
 4022|  4.96M|    }
 4023|  4.96M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  4.96M|{
 3822|  4.96M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  4.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  4.96M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  4.96M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  4.96M|    };
 3827|       |
 3828|  4.96M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 4.43M, False: 526k]
  ------------------
 3829|  4.43M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 36, False: 4.43M]
  ------------------
 3830|     36|            SCN_UNLIKELY_ATTR
 3831|     36|            return invalid_code_point;
 3832|     36|        }
 3833|  4.43M|        return static_cast<char32_t>(input[0]);
 3834|  4.43M|    }
 3835|       |
 3836|   526k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 503k, False: 23.0k]
  ------------------
 3837|   503k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 12, False: 503k]
  ------------------
 3838|     12|            SCN_UNLIKELY_ATTR
 3839|     12|            return invalid_code_point;
 3840|     12|        }
 3841|   503k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 6.22k, False: 497k]
  ------------------
 3842|  6.22k|            SCN_UNLIKELY_ATTR
 3843|  6.22k|            return invalid_code_point;
 3844|  6.22k|        }
 3845|       |
 3846|   497k|        char32_t cp{};
 3847|   497k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|   497k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|   497k|        return cp;
 3850|   503k|    }
 3851|       |
 3852|  23.0k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 15.9k, False: 7.08k]
  ------------------
 3853|  15.9k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 6, False: 15.9k]
  ------------------
 3854|      6|            SCN_UNLIKELY_ATTR
 3855|      6|            return invalid_code_point;
 3856|      6|        }
 3857|  15.9k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 4.59k, False: 11.3k]
  ------------------
 3858|  15.9k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 288, False: 11.0k]
  ------------------
 3859|  4.88k|            SCN_UNLIKELY_ATTR
 3860|  4.88k|            return invalid_code_point;
 3861|  4.88k|        }
 3862|       |
 3863|  11.0k|        char32_t cp{};
 3864|  11.0k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  11.0k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  11.0k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  11.0k|        return cp;
 3868|  15.9k|    }
 3869|       |
 3870|  7.08k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 7.08k, False: 0]
  ------------------
 3871|  7.08k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 7.08k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  7.08k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 1.34k, False: 5.73k]
  ------------------
 3876|  1.34k|            SCN_UNLIKELY_ATTR
 3877|  1.34k|            return invalid_code_point;
 3878|  1.34k|        }
 3879|  5.73k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 510, False: 5.22k]
  ------------------
 3880|  5.73k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 537, False: 4.69k]
  ------------------
 3881|  5.73k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 231, False: 4.46k]
  ------------------
 3882|  1.27k|            SCN_UNLIKELY_ATTR
 3883|  1.27k|            return invalid_code_point;
 3884|  1.27k|        }
 3885|       |
 3886|  4.46k|        char32_t cp{};
 3887|  4.46k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  4.46k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  4.46k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  4.46k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  4.46k|        return cp;
 3892|  5.73k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|   546k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   546k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   546k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  1.87M|{
 3695|  1.87M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3695:19): [Folded - Ignored]
  |  Branch (3695:19): [Folded - Ignored]
  ------------------
 3696|  1.87M|                                          decltype(first), decltype(last)> &&
 3697|  1.87M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3697:19): [Folded - Ignored]
  ------------------
 3698|  1.87M|        return {first, last};
 3699|  1.87M|    }
 3700|  1.87M|    else {
 3701|  1.87M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  1.87M|                                       to_address(first), to_address(last)))};
 3703|  1.87M|    }
 3704|  1.87M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  5.66M|{
  322|  5.66M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  5.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  5.66M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  5.74M|{
  302|  5.74M|    return p;
  303|  5.74M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  1.14M|{
 3726|  1.14M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3726:19): [Folded - Ignored]
  |  Branch (3726:19): [Folded - Ignored]
  ------------------
 3727|  1.14M|                      typename std::basic_string_view<CharT>::iterator,
 3728|  1.14M|                      decltype(it)> &&
 3729|  1.14M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3729:19): [Folded - Ignored]
  ------------------
 3730|  1.14M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  1.14M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  1.14M|        return it;
 3732|  1.14M|    }
 3733|  1.14M|    else {
 3734|  1.14M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|  1.14M|    }
 3736|  1.14M|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.32k|{
 8863|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.32k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.32k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5391|  8.65k|{
 5392|  8.65k|    detail::check_scan_arg_types<Args...>();
 5393|  8.65k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.65k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5130|  8.65k|{
 5131|  8.65k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  8.65k|                  "Scan argument types must be default constructible");
 5133|  8.65k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  8.65k|                  "Scan argument types must be Destructible");
 5135|  8.65k|    static_assert(
 5136|  8.65k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  8.65k|        "Scan argument types must not be references");
 5138|  8.65k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5344|  8.65k|    {
 5345|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  8.65k|    {
 5356|  8.65k|        return {detail::make_arg<
 5357|  8.65k|            kind, Context,
 5358|  8.65k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.65k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.65k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5165|  8.65k|{
 5166|  8.65k|    return make_value<Context>(value).ref_value;
 5167|  8.65k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5115|  8.65k|{
 5116|  8.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.65k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.65k|                                  needs_context_tag>) {
 5120|  8.65k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.65k|    }
 5122|  8.65k|    else {
 5123|  8.65k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.65k|            value, context_tag<Context>{}));
 5125|  8.65k|    }
 5126|  8.65k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4983|  8.65k|    {
 4984|  8.65k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (4984:23): [Folded - Ignored]
  |  Branch (4984:23): [Folded - Ignored]
  ------------------
 4985|  8.65k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (4985:23): [Folded - Ignored]
  ------------------
 4986|  8.65k|            return val;
 4987|  8.65k|        }
 4988|  8.65k|        else if constexpr (is_type_disabled<char_type>) {
 4989|  8.65k|            return unscannable_disabled{val};
 4990|  8.65k|        }
 4991|  8.65k|        else {
 4992|  8.65k|            SCN_UNUSED(val);
 4993|  8.65k|            return unscannable_char{};
 4994|  8.65k|        }
 4995|  8.65k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5084|  8.65k|{
 5085|  8.65k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  8.65k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  8.65k|    constexpr bool scannable_char =
 5089|  8.65k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  8.65k|    static_assert(scannable_char,
 5091|  8.65k|                  "Cannot scan an argument of an unsupported character "
 5092|  8.65k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  8.65k|    constexpr bool scannable_const =
 5095|  8.65k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  8.65k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  8.65k|    constexpr bool scannable_disabled =
 5099|  8.65k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  8.65k|    static_assert(scannable_disabled,
 5101|  8.65k|                  "Cannot scan an argument that has been disabled by "
 5102|  8.65k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  8.65k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  8.65k|    static_assert(
 5106|  8.65k|        scannable,
 5107|  8.65k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  8.65k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  8.65k|    return arg_value{arg};
 5111|  8.65k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4897|  8.65k|    {
 4898|  8.65k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8649|  38.9k|{
 8650|  38.9k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  38.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8651|  38.9k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8586|  38.9k|{
 8587|  38.9k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  38.9k|    auto result = vscan_impl(buffer, format, args);
 8590|  38.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  38.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.6k, False: 1.26k]
  |  |  ------------------
  ------------------
 8591|  37.6k|        return unexpected(result.error());
 8592|  37.6k|    }
 8593|  1.26k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  38.9k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4715|  77.8k|{
 4716|  77.8k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|  77.8k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|  77.8k|                  "\n"
 4720|  77.8k|                  "Unsupported range type given as input to a scanning "
 4721|  77.8k|                  "function.\n"
 4722|  77.8k|                  "A range needs to have a character type (value type) "
 4723|  77.8k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|  77.8k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|  77.8k|                  "to be included.\n"
 4726|  77.8k|                  "See the scnlib documentation for more details.");
 4727|  77.8k|    static_assert(
 4728|  77.8k|        !std::is_same_v<T, custom_char_traits>,
 4729|  77.8k|        "\n"
 4730|  77.8k|        "Unsupported range type given as input to a scanning "
 4731|  77.8k|        "function.\n"
 4732|  77.8k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|  77.8k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|  77.8k|        "not supported.");
 4735|  77.8k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|  77.8k|                  "\n"
 4737|  77.8k|                  "Unsupported range type given as input to a scanning "
 4738|  77.8k|                  "function.\n"
 4739|  77.8k|                  "file_marker_found cannot be used as an "
 4740|  77.8k|                  "source range type to scn::scan.\n"
 4741|  77.8k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|  77.8k|                  "and do not provide an explicit source range, "
 4743|  77.8k|                  "or use scn::scan with a FILE* directly.");
 4744|  77.8k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|  77.8k|                  "\n"
 4746|  77.8k|                  "Unsupported range type given as input to a scanning "
 4747|  77.8k|                  "function.\n"
 4748|  77.8k|                  "In order to be scannable, a range needs to satisfy "
 4749|  77.8k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|  77.8k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|  77.8k|                  "\n"
 4752|  77.8k|                  "Unsupported range type given as input to a scanning "
 4753|  77.8k|                  "function.\n"
 4754|  77.8k|                  "A range needs to model forward_range and have a valid "
 4755|  77.8k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|  77.8k|                  "Examples of scannable ranges are std::string, "
 4757|  77.8k|                  "std::string_view, "
 4758|  77.8k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|  77.8k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|  77.8k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|  77.8k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4607|  77.8k|{
 4608|  77.8k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4608:19): [Folded - Ignored]
  ------------------
 4609|  77.8k|        return r;
 4610|       |        // return make_string_scan_buffer(r);
 4611|  77.8k|    }
 4612|  77.8k|    else {
 4613|  77.8k|        return invalid_char_type{};
 4614|  77.8k|    }
 4615|  77.8k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1593|   237k|    {
 1594|   237k|        return has_value();
 1595|   237k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|   474k|    {
  481|   474k|        return m_has_value;
  482|   474k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1599|   234k|    {
 1600|   234k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   234k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   234k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   234k|        return this->get_unexpected().error();
 1602|   234k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   234k|    {
  464|   234k|        return m_unexpected;
  465|   234k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|  1.39M|    {
  357|  1.39M|        return m_unexpected;
  358|  1.39M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|   783k|    {
  343|   783k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   783k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   783k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  75.3k|    {
 1472|  75.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|  75.3k|    {
  443|  75.3k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|   813k|    {
  352|   813k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   813k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   813k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  77.8k|    {
 1173|  77.8k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5918|  2.53k|{
 5919|  2.53k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  2.53k|                      ranges::iterator_t<SourceRange>>) {
 5921|  2.53k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  2.53k|    }
 5923|  2.53k|    else {
 5924|  2.53k|        auto it = ranges::begin(source);
 5925|  2.53k|        while (n > 0) {
 5926|  2.53k|            --n;
 5927|  2.53k|            ++it;
 5928|  2.53k|        }
 5929|  2.53k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  2.53k|    }
 5931|  2.53k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  2.53k|    {
 2720|  2.53k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  2.53k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  2.53k|    {
 2701|  2.53k|        return decay_copy(t.begin());
 2702|  2.53k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1944|   110k|{
 1945|   110k|    return SCN_FWD(t);
  ------------------
  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|   110k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5905|  2.53k|{
 5906|  2.53k|    return ranges::end(source);
 5907|  2.53k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  2.53k|    {
 2777|  2.53k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  2.53k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  2.53k|    {
 2759|  2.53k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  2.53k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3311|   771k|    {
 3312|   771k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1648|  2.85k|    {
 1649|  2.85k|        return value();
 1650|  2.85k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1622|  2.85k|    {
 1623|  2.85k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.85k|        return this->get_value();
 1625|  2.85k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  2.85k|    {
  447|  2.85k|        return m_value;
  448|  2.85k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  2.53k|    {
 1426|  2.53k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  2.53k|    {
  433|  2.53k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7970|  8.65k|    {
 7971|  8.65k|        return m_str;
 7972|  8.65k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.65k|    {
 5422|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5374|  8.65k|    {
 5375|  8.65k|        return m_argptrs;
 5376|  8.65k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5473|  77.8k|    {
 5474|  77.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  8.65k|{
 8816|  8.65k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.50k, False: 150]
  |  |  ------------------
  ------------------
 8817|  8.50k|        return unexpected(result.error());
 8818|  8.50k|    }
 8819|    150|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    150|    static_cast<    \
  |  |  929|    150|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    150|    static_cast<    \
  |  |  929|    150|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.65k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1593|  77.8k|    {
 1594|  77.8k|        return has_value();
 1595|  77.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   155k|    {
  481|   155k|        return m_has_value;
  482|   155k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1599|  75.3k|    {
 1600|  75.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  75.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  75.3k|        return this->get_unexpected().error();
 1602|  75.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  75.3k|    {
  464|  75.3k|        return m_unexpected;
  465|  75.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  8.50k|    {
 1472|  8.50k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.50k|    {
  443|  8.50k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.65k|    {
 1173|  8.65k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|  2.53k|    {
 1649|  2.53k|        return value();
 1650|  2.53k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.53k|    {
 1623|  2.53k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.53k|        return this->get_value();
 1625|  2.53k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.53k|    {
  447|  2.53k|        return m_value;
  448|  2.53k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5825|    150|    {
 5826|    150|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5676|  2.53k|    {
 5677|  2.53k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5611|    150|    {
 5612|    150|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|    150|    {
 1426|    150|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|    150|    {
  433|    150|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5369|  8.65k|    {
 5370|  8.65k|        return m_args;
 5371|  8.65k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7686|  77.8k|{
 7687|  77.8k|    return s;
 7688|  77.8k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7663|  77.8k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.65k|    {
 7967|  8.65k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.32k|{
 8930|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.32k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.32k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8667|  38.9k|{
 8668|  38.9k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  38.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8669|  38.9k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8602|  38.9k|{
 8603|  38.9k|#if !SCN_DISABLE_LOCALE
 8604|  38.9k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  38.9k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  38.9k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  38.9k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  38.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  38.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.6k, False: 1.26k]
  |  |  ------------------
  ------------------
 8611|  37.6k|        return unexpected(result.error());
 8612|  37.6k|    }
 8613|  1.26k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  38.9k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.32k|{
 8863|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.32k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.32k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5391|  8.65k|{
 5392|  8.65k|    detail::check_scan_arg_types<Args...>();
 5393|  8.65k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.65k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5130|  25.9k|{
 5131|  25.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  25.9k|                  "Scan argument types must be default constructible");
 5133|  25.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  25.9k|                  "Scan argument types must be Destructible");
 5135|  25.9k|    static_assert(
 5136|  25.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  25.9k|        "Scan argument types must not be references");
 5138|  25.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5344|  8.65k|    {
 5345|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  8.65k|    {
 5356|  8.65k|        return {detail::make_arg<
 5357|  8.65k|            kind, Context,
 5358|  8.65k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.65k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.65k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5165|  8.65k|{
 5166|  8.65k|    return make_value<Context>(value).ref_value;
 5167|  8.65k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5115|  8.65k|{
 5116|  8.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.65k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.65k|                                  needs_context_tag>) {
 5120|  8.65k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.65k|    }
 5122|  8.65k|    else {
 5123|  8.65k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.65k|            value, context_tag<Context>{}));
 5125|  8.65k|    }
 5126|  8.65k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4954|  8.65k|    {                                                                        \
 4955|  8.65k|        return val;                                                          \
 4956|  8.65k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5084|  25.9k|{
 5085|  25.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  25.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  25.9k|    constexpr bool scannable_char =
 5089|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  25.9k|    static_assert(scannable_char,
 5091|  25.9k|                  "Cannot scan an argument of an unsupported character "
 5092|  25.9k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  25.9k|    constexpr bool scannable_const =
 5095|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  25.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  25.9k|    constexpr bool scannable_disabled =
 5099|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  25.9k|    static_assert(scannable_disabled,
 5101|  25.9k|                  "Cannot scan an argument that has been disabled by "
 5102|  25.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  25.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  25.9k|    static_assert(
 5106|  25.9k|        scannable,
 5107|  25.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  25.9k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  25.9k|    return arg_value{arg};
 5111|  25.9k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4897|  25.9k|    {
 4898|  25.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7970|  8.65k|    {
 7971|  8.65k|        return m_str;
 7972|  8.65k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.65k|    {
 5422|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5374|  8.65k|    {
 5375|  8.65k|        return m_argptrs;
 5376|  8.65k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  8.65k|{
 8816|  8.65k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.65k, False: 0]
  |  |  ------------------
  ------------------
 8817|  8.65k|        return unexpected(result.error());
 8818|  8.65k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.65k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  8.65k|    {
 1472|  8.65k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.65k|    {
  443|  8.65k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.65k|    {
 1173|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5369|  8.65k|    {
 5370|  8.65k|        return m_args;
 5371|  8.65k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.65k|    {
 7967|  8.65k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.32k|{
 8930|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.32k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.32k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.32k|{
 8863|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.32k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.32k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5391|  8.65k|{
 5392|  8.65k|    detail::check_scan_arg_types<Args...>();
 5393|  8.65k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.65k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5130|  25.9k|{
 5131|  25.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  25.9k|                  "Scan argument types must be default constructible");
 5133|  25.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  25.9k|                  "Scan argument types must be Destructible");
 5135|  25.9k|    static_assert(
 5136|  25.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  25.9k|        "Scan argument types must not be references");
 5138|  25.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5344|  8.65k|    {
 5345|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  8.65k|    {
 5356|  8.65k|        return {detail::make_arg<
 5357|  8.65k|            kind, Context,
 5358|  8.65k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.65k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.65k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5165|  8.65k|{
 5166|  8.65k|    return make_value<Context>(value).ref_value;
 5167|  8.65k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5115|  8.65k|{
 5116|  8.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.65k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.65k|                                  needs_context_tag>) {
 5120|  8.65k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.65k|    }
 5122|  8.65k|    else {
 5123|  8.65k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.65k|            value, context_tag<Context>{}));
 5125|  8.65k|    }
 5126|  8.65k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4954|  8.65k|    {                                                                        \
 4955|  8.65k|        return val;                                                          \
 4956|  8.65k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5084|  25.9k|{
 5085|  25.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  25.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  25.9k|    constexpr bool scannable_char =
 5089|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  25.9k|    static_assert(scannable_char,
 5091|  25.9k|                  "Cannot scan an argument of an unsupported character "
 5092|  25.9k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  25.9k|    constexpr bool scannable_const =
 5095|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  25.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  25.9k|    constexpr bool scannable_disabled =
 5099|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  25.9k|    static_assert(scannable_disabled,
 5101|  25.9k|                  "Cannot scan an argument that has been disabled by "
 5102|  25.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  25.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  25.9k|    static_assert(
 5106|  25.9k|        scannable,
 5107|  25.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  25.9k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  25.9k|    return arg_value{arg};
 5111|  25.9k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4897|  25.9k|    {
 4898|  25.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7970|  8.65k|    {
 7971|  8.65k|        return m_str;
 7972|  8.65k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.65k|    {
 5422|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5374|  8.65k|    {
 5375|  8.65k|        return m_argptrs;
 5376|  8.65k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  8.65k|{
 8816|  8.65k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.65k, False: 0]
  |  |  ------------------
  ------------------
 8817|  8.65k|        return unexpected(result.error());
 8818|  8.65k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.65k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  8.65k|    {
 1472|  8.65k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.65k|    {
  443|  8.65k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.65k|    {
 1173|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5369|  8.65k|    {
 5370|  8.65k|        return m_args;
 5371|  8.65k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.65k|    {
 7967|  8.65k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.32k|{
 8930|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.32k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.32k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.32k|{
 8863|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.32k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.32k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5391|  8.65k|{
 5392|  8.65k|    detail::check_scan_arg_types<Args...>();
 5393|  8.65k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.65k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5130|  25.9k|{
 5131|  25.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  25.9k|                  "Scan argument types must be default constructible");
 5133|  25.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  25.9k|                  "Scan argument types must be Destructible");
 5135|  25.9k|    static_assert(
 5136|  25.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  25.9k|        "Scan argument types must not be references");
 5138|  25.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5344|  8.65k|    {
 5345|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  8.65k|    {
 5356|  8.65k|        return {detail::make_arg<
 5357|  8.65k|            kind, Context,
 5358|  8.65k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.65k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.65k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5165|  8.65k|{
 5166|  8.65k|    return make_value<Context>(value).ref_value;
 5167|  8.65k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5115|  8.65k|{
 5116|  8.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.65k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.65k|                                  needs_context_tag>) {
 5120|  8.65k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.65k|    }
 5122|  8.65k|    else {
 5123|  8.65k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.65k|            value, context_tag<Context>{}));
 5125|  8.65k|    }
 5126|  8.65k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4954|  8.65k|    {                                                                        \
 4955|  8.65k|        return val;                                                          \
 4956|  8.65k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5084|  25.9k|{
 5085|  25.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  25.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  25.9k|    constexpr bool scannable_char =
 5089|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  25.9k|    static_assert(scannable_char,
 5091|  25.9k|                  "Cannot scan an argument of an unsupported character "
 5092|  25.9k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  25.9k|    constexpr bool scannable_const =
 5095|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  25.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  25.9k|    constexpr bool scannable_disabled =
 5099|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  25.9k|    static_assert(scannable_disabled,
 5101|  25.9k|                  "Cannot scan an argument that has been disabled by "
 5102|  25.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  25.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  25.9k|    static_assert(
 5106|  25.9k|        scannable,
 5107|  25.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  25.9k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  25.9k|    return arg_value{arg};
 5111|  25.9k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4897|  25.9k|    {
 4898|  25.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7970|  8.65k|    {
 7971|  8.65k|        return m_str;
 7972|  8.65k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.65k|    {
 5422|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5374|  8.65k|    {
 5375|  8.65k|        return m_argptrs;
 5376|  8.65k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  8.65k|{
 8816|  8.65k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.65k, False: 0]
  |  |  ------------------
  ------------------
 8817|  8.65k|        return unexpected(result.error());
 8818|  8.65k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.65k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  8.65k|    {
 1472|  8.65k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.65k|    {
  443|  8.65k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.65k|    {
 1173|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5369|  8.65k|    {
 5370|  8.65k|        return m_args;
 5371|  8.65k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.65k|    {
 7967|  8.65k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.32k|{
 8930|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.32k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.32k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.32k|{
 8863|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.32k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.32k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5391|  8.65k|{
 5392|  8.65k|    detail::check_scan_arg_types<Args...>();
 5393|  8.65k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.65k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5130|  25.9k|{
 5131|  25.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  25.9k|                  "Scan argument types must be default constructible");
 5133|  25.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  25.9k|                  "Scan argument types must be Destructible");
 5135|  25.9k|    static_assert(
 5136|  25.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  25.9k|        "Scan argument types must not be references");
 5138|  25.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5344|  8.65k|    {
 5345|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  8.65k|    {
 5356|  8.65k|        return {detail::make_arg<
 5357|  8.65k|            kind, Context,
 5358|  8.65k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.65k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.65k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5165|  8.65k|{
 5166|  8.65k|    return make_value<Context>(value).ref_value;
 5167|  8.65k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5115|  8.65k|{
 5116|  8.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.65k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.65k|                                  needs_context_tag>) {
 5120|  8.65k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.65k|    }
 5122|  8.65k|    else {
 5123|  8.65k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.65k|            value, context_tag<Context>{}));
 5125|  8.65k|    }
 5126|  8.65k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4954|  8.65k|    {                                                                        \
 4955|  8.65k|        return val;                                                          \
 4956|  8.65k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5084|  25.9k|{
 5085|  25.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  25.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  25.9k|    constexpr bool scannable_char =
 5089|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  25.9k|    static_assert(scannable_char,
 5091|  25.9k|                  "Cannot scan an argument of an unsupported character "
 5092|  25.9k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  25.9k|    constexpr bool scannable_const =
 5095|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  25.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  25.9k|    constexpr bool scannable_disabled =
 5099|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  25.9k|    static_assert(scannable_disabled,
 5101|  25.9k|                  "Cannot scan an argument that has been disabled by "
 5102|  25.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  25.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  25.9k|    static_assert(
 5106|  25.9k|        scannable,
 5107|  25.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  25.9k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  25.9k|    return arg_value{arg};
 5111|  25.9k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4897|  25.9k|    {
 4898|  25.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7970|  8.65k|    {
 7971|  8.65k|        return m_str;
 7972|  8.65k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.65k|    {
 5422|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5374|  8.65k|    {
 5375|  8.65k|        return m_argptrs;
 5376|  8.65k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  8.65k|{
 8816|  8.65k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.65k, False: 0]
  |  |  ------------------
  ------------------
 8817|  8.65k|        return unexpected(result.error());
 8818|  8.65k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.65k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  8.65k|    {
 1472|  8.65k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.65k|    {
  443|  8.65k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.65k|    {
 1173|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5369|  8.65k|    {
 5370|  8.65k|        return m_args;
 5371|  8.65k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.65k|    {
 7967|  8.65k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.32k|{
 8930|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.32k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.32k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8862|  4.32k|{
 8863|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.32k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.32k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5391|  8.65k|{
 5392|  8.65k|    detail::check_scan_arg_types<Args...>();
 5393|  8.65k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.65k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5130|  25.9k|{
 5131|  25.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  25.9k|                  "Scan argument types must be default constructible");
 5133|  25.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  25.9k|                  "Scan argument types must be Destructible");
 5135|  25.9k|    static_assert(
 5136|  25.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  25.9k|        "Scan argument types must not be references");
 5138|  25.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5344|  8.65k|    {
 5345|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5355|  8.65k|    {
 5356|  8.65k|        return {detail::make_arg<
 5357|  8.65k|            kind, Context,
 5358|  8.65k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.65k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.65k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5165|  8.65k|{
 5166|  8.65k|    return make_value<Context>(value).ref_value;
 5167|  8.65k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5115|  8.65k|{
 5116|  8.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.65k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.65k|                                  needs_context_tag>) {
 5120|  8.65k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.65k|    }
 5122|  8.65k|    else {
 5123|  8.65k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.65k|            value, context_tag<Context>{}));
 5125|  8.65k|    }
 5126|  8.65k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4954|  8.65k|    {                                                                        \
 4955|  8.65k|        return val;                                                          \
 4956|  8.65k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5084|  25.9k|{
 5085|  25.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  25.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  25.9k|    constexpr bool scannable_char =
 5089|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  25.9k|    static_assert(scannable_char,
 5091|  25.9k|                  "Cannot scan an argument of an unsupported character "
 5092|  25.9k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  25.9k|    constexpr bool scannable_const =
 5095|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  25.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  25.9k|    constexpr bool scannable_disabled =
 5099|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  25.9k|    static_assert(scannable_disabled,
 5101|  25.9k|                  "Cannot scan an argument that has been disabled by "
 5102|  25.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  25.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  25.9k|    static_assert(
 5106|  25.9k|        scannable,
 5107|  25.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  25.9k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  25.9k|    return arg_value{arg};
 5111|  25.9k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4897|  25.9k|    {
 4898|  25.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7970|  8.65k|    {
 7971|  8.65k|        return m_str;
 7972|  8.65k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.65k|    {
 5422|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5374|  8.65k|    {
 5375|  8.65k|        return m_argptrs;
 5376|  8.65k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8815|  8.65k|{
 8816|  8.65k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.65k, False: 0]
  |  |  ------------------
  ------------------
 8817|  8.65k|        return unexpected(result.error());
 8818|  8.65k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.65k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  8.65k|    {
 1472|  8.65k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  442|  8.65k|    {
  443|  8.65k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.65k|    {
 1173|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5369|  8.65k|    {
 5370|  8.65k|        return m_args;
 5371|  8.65k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.65k|    {
 7967|  8.65k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8929|  4.32k|{
 8930|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.32k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.32k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8862|  4.32k|{
 8863|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.32k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.32k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5391|  8.65k|{
 5392|  8.65k|    detail::check_scan_arg_types<Args...>();
 5393|  8.65k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.65k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5130|  25.9k|{
 5131|  25.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  25.9k|                  "Scan argument types must be default constructible");
 5133|  25.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  25.9k|                  "Scan argument types must be Destructible");
 5135|  25.9k|    static_assert(
 5136|  25.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  25.9k|        "Scan argument types must not be references");
 5138|  25.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5344|  8.65k|    {
 5345|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  8.65k|    {
 5356|  8.65k|        return {detail::make_arg<
 5357|  8.65k|            kind, Context,
 5358|  8.65k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.65k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.65k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5165|  8.65k|{
 5166|  8.65k|    return make_value<Context>(value).ref_value;
 5167|  8.65k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5115|  8.65k|{
 5116|  8.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.65k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.65k|                                  needs_context_tag>) {
 5120|  8.65k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.65k|    }
 5122|  8.65k|    else {
 5123|  8.65k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.65k|            value, context_tag<Context>{}));
 5125|  8.65k|    }
 5126|  8.65k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4954|  8.65k|    {                                                                        \
 4955|  8.65k|        return val;                                                          \
 4956|  8.65k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5084|  25.9k|{
 5085|  25.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  25.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  25.9k|    constexpr bool scannable_char =
 5089|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  25.9k|    static_assert(scannable_char,
 5091|  25.9k|                  "Cannot scan an argument of an unsupported character "
 5092|  25.9k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  25.9k|    constexpr bool scannable_const =
 5095|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  25.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  25.9k|    constexpr bool scannable_disabled =
 5099|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  25.9k|    static_assert(scannable_disabled,
 5101|  25.9k|                  "Cannot scan an argument that has been disabled by "
 5102|  25.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  25.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  25.9k|    static_assert(
 5106|  25.9k|        scannable,
 5107|  25.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  25.9k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  25.9k|    return arg_value{arg};
 5111|  25.9k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4897|  25.9k|    {
 4898|  25.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7970|  8.65k|    {
 7971|  8.65k|        return m_str;
 7972|  8.65k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.65k|    {
 5422|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5374|  8.65k|    {
 5375|  8.65k|        return m_argptrs;
 5376|  8.65k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8815|  8.65k|{
 8816|  8.65k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.85k, False: 796]
  |  |  ------------------
  ------------------
 8817|  7.85k|        return unexpected(result.error());
 8818|  7.85k|    }
 8819|    796|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    796|    static_cast<    \
  |  |  929|    796|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    796|    static_cast<    \
  |  |  929|    796|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.65k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1471|  7.85k|    {
 1472|  7.85k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  7.85k|    {
  622|  7.85k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  7.85k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  7.85k|    {
  685|  7.85k|        scn::detail::construct_at(unexpected_ptr(),
  686|  7.85k|                                  std::forward<Args>(args)...);
  687|  7.85k|        m_has_value = false;
  688|  7.85k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  387|  50.2k|{
  388|  50.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  50.2k|        T(std::forward<Args>(args)...);
  390|  50.2k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  15.7k|    {
  714|  15.7k|        return reinterpret_cast<unexpected<E>*>(
  715|  15.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  15.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  15.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.65k|    {
 1173|  8.65k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5825|    796|    {
 5826|    796|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5611|    880|    {
 5612|    880|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1425|    796|    {
 1426|    796|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|    796|    {
  612|    796|        construct(std::forward<Args>(args)...);
  613|    796|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|    796|    {
  678|    796|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|    796|        m_has_value = true;
  680|    796|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|    796|{
  388|    796|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|    796|        T(std::forward<Args>(args)...);
  390|    796|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5817|    796|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  1.59k|    {
  702|  1.59k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.59k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  1.59k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5821|  1.59k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5369|  8.65k|    {
 5370|  8.65k|        return m_args;
 5371|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5366|  8.65k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.65k|    {
 7967|  8.65k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  8.65k|    {
  627|  8.65k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 796, False: 7.85k]
  ------------------
  628|    796|            destroy_value();
  629|    796|        }
  630|  7.85k|        else {
  631|  7.85k|            destroy_unexpected();
  632|  7.85k|        }
  633|  8.65k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  8.65k|    {
  671|  8.65k|        return m_has_value;
  672|  8.65k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|    796|    {
  692|    796|        scn::detail::destroy_at(value_ptr());
  693|    796|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  393|    796|{
  394|    796|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|    796|        for (auto& elem : *p) {
  396|    796|            scn::detail::destroy_at(&elem);
  397|    796|        }
  398|    796|    }
  399|    796|    else {
  400|    796|        p->~T();
  401|    796|    }
  402|    796|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  7.85k|    {
  696|  7.85k|        scn::detail::destroy_at(unexpected_ptr());
  697|  7.85k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  393|  50.2k|{
  394|  50.2k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  50.2k|        for (auto& elem : *p) {
  396|  50.2k|            scn::detail::destroy_at(&elem);
  397|  50.2k|        }
  398|  50.2k|    }
  399|  50.2k|    else {
  400|  50.2k|        p->~T();
  401|  50.2k|    }
  402|  50.2k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8929|  4.32k|{
 8930|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.32k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.32k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8862|  4.32k|{
 8863|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.32k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.32k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5391|  8.65k|{
 5392|  8.65k|    detail::check_scan_arg_types<Args...>();
 5393|  8.65k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.65k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5130|  25.9k|{
 5131|  25.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  25.9k|                  "Scan argument types must be default constructible");
 5133|  25.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  25.9k|                  "Scan argument types must be Destructible");
 5135|  25.9k|    static_assert(
 5136|  25.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  25.9k|        "Scan argument types must not be references");
 5138|  25.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5344|  8.65k|    {
 5345|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  8.65k|    {
 5356|  8.65k|        return {detail::make_arg<
 5357|  8.65k|            kind, Context,
 5358|  8.65k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.65k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.65k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5165|  8.65k|{
 5166|  8.65k|    return make_value<Context>(value).ref_value;
 5167|  8.65k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5115|  8.65k|{
 5116|  8.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.65k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.65k|                                  needs_context_tag>) {
 5120|  8.65k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.65k|    }
 5122|  8.65k|    else {
 5123|  8.65k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.65k|            value, context_tag<Context>{}));
 5125|  8.65k|    }
 5126|  8.65k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4954|  8.65k|    {                                                                        \
 4955|  8.65k|        return val;                                                          \
 4956|  8.65k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5084|  25.9k|{
 5085|  25.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  25.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  25.9k|    constexpr bool scannable_char =
 5089|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  25.9k|    static_assert(scannable_char,
 5091|  25.9k|                  "Cannot scan an argument of an unsupported character "
 5092|  25.9k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  25.9k|    constexpr bool scannable_const =
 5095|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  25.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  25.9k|    constexpr bool scannable_disabled =
 5099|  25.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  25.9k|    static_assert(scannable_disabled,
 5101|  25.9k|                  "Cannot scan an argument that has been disabled by "
 5102|  25.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  25.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  25.9k|    static_assert(
 5106|  25.9k|        scannable,
 5107|  25.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  25.9k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  25.9k|    return arg_value{arg};
 5111|  25.9k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4897|  25.9k|    {
 4898|  25.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7970|  8.65k|    {
 7971|  8.65k|        return m_str;
 7972|  8.65k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.65k|    {
 5422|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5374|  8.65k|    {
 5375|  8.65k|        return m_argptrs;
 5376|  8.65k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8815|  8.65k|{
 8816|  8.65k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.85k, False: 796]
  |  |  ------------------
  ------------------
 8817|  7.85k|        return unexpected(result.error());
 8818|  7.85k|    }
 8819|    796|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    796|    static_cast<    \
  |  |  929|    796|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    796|    static_cast<    \
  |  |  929|    796|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.65k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1471|  7.85k|    {
 1472|  7.85k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  7.85k|    {
  622|  7.85k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  7.85k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  7.85k|    {
  685|  7.85k|        scn::detail::construct_at(unexpected_ptr(),
  686|  7.85k|                                  std::forward<Args>(args)...);
  687|  7.85k|        m_has_value = false;
  688|  7.85k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  15.7k|    {
  714|  15.7k|        return reinterpret_cast<unexpected<E>*>(
  715|  15.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  15.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  15.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.65k|    {
 1173|  8.65k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5825|    796|    {
 5826|    796|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5611|    880|    {
 5612|    880|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1425|    796|    {
 1426|    796|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|    796|    {
  612|    796|        construct(std::forward<Args>(args)...);
  613|    796|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|    796|    {
  678|    796|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|    796|        m_has_value = true;
  680|    796|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|    796|{
  388|    796|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|    796|        T(std::forward<Args>(args)...);
  390|    796|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5817|    796|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  1.59k|    {
  702|  1.59k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.59k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  1.59k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5821|  1.59k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5369|  8.65k|    {
 5370|  8.65k|        return m_args;
 5371|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5366|  8.65k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.65k|    {
 7967|  8.65k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  8.65k|    {
  627|  8.65k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 796, False: 7.85k]
  ------------------
  628|    796|            destroy_value();
  629|    796|        }
  630|  7.85k|        else {
  631|  7.85k|            destroy_unexpected();
  632|  7.85k|        }
  633|  8.65k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  8.65k|    {
  671|  8.65k|        return m_has_value;
  672|  8.65k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|    796|    {
  692|    796|        scn::detail::destroy_at(value_ptr());
  693|    796|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  393|    796|{
  394|    796|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|    796|        for (auto& elem : *p) {
  396|    796|            scn::detail::destroy_at(&elem);
  397|    796|        }
  398|    796|    }
  399|    796|    else {
  400|    796|        p->~T();
  401|    796|    }
  402|    796|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  7.85k|    {
  696|  7.85k|        scn::detail::destroy_at(unexpected_ptr());
  697|  7.85k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8929|  4.32k|{
 8930|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.32k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.32k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.32k|{
 8863|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.32k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.32k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5391|  8.65k|{
 5392|  8.65k|    detail::check_scan_arg_types<Args...>();
 5393|  8.65k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.65k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5130|  8.65k|{
 5131|  8.65k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  8.65k|                  "Scan argument types must be default constructible");
 5133|  8.65k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  8.65k|                  "Scan argument types must be Destructible");
 5135|  8.65k|    static_assert(
 5136|  8.65k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  8.65k|        "Scan argument types must not be references");
 5138|  8.65k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5344|  8.65k|    {
 5345|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  8.65k|    {
 5356|  8.65k|        return {detail::make_arg<
 5357|  8.65k|            kind, Context,
 5358|  8.65k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.65k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.65k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5165|  8.65k|{
 5166|  8.65k|    return make_value<Context>(value).ref_value;
 5167|  8.65k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5115|  8.65k|{
 5116|  8.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.65k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.65k|                                  needs_context_tag>) {
 5120|  8.65k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.65k|    }
 5122|  8.65k|    else {
 5123|  8.65k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.65k|            value, context_tag<Context>{}));
 5125|  8.65k|    }
 5126|  8.65k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4954|  8.65k|    {                                                                        \
 4955|  8.65k|        return val;                                                          \
 4956|  8.65k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5084|  8.65k|{
 5085|  8.65k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  8.65k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  8.65k|    constexpr bool scannable_char =
 5089|  8.65k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  8.65k|    static_assert(scannable_char,
 5091|  8.65k|                  "Cannot scan an argument of an unsupported character "
 5092|  8.65k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  8.65k|    constexpr bool scannable_const =
 5095|  8.65k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  8.65k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  8.65k|    constexpr bool scannable_disabled =
 5099|  8.65k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  8.65k|    static_assert(scannable_disabled,
 5101|  8.65k|                  "Cannot scan an argument that has been disabled by "
 5102|  8.65k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  8.65k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  8.65k|    static_assert(
 5106|  8.65k|        scannable,
 5107|  8.65k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  8.65k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  8.65k|    return arg_value{arg};
 5111|  8.65k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4897|  8.65k|    {
 4898|  8.65k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7970|  8.65k|    {
 7971|  8.65k|        return m_str;
 7972|  8.65k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.65k|    {
 5422|  8.65k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5374|  8.65k|    {
 5375|  8.65k|        return m_argptrs;
 5376|  8.65k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8815|  8.65k|{
 8816|  8.65k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.85k, False: 796]
  |  |  ------------------
  ------------------
 8817|  7.85k|        return unexpected(result.error());
 8818|  7.85k|    }
 8819|    796|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    796|    static_cast<    \
  |  |  929|    796|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    796|    static_cast<    \
  |  |  929|    796|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.65k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1471|  7.85k|    {
 1472|  7.85k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  7.85k|    {
  443|  7.85k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.65k|    {
 1173|  8.65k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5825|    796|    {
 5826|    796|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5611|    796|    {
 5612|    796|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1425|    796|    {
 1426|    796|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|    796|    {
  433|    796|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5369|  8.65k|    {
 5370|  8.65k|        return m_args;
 5371|  8.65k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.65k|    {
 7967|  8.65k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.32k|{
 8930|  4.32k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.32k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.32k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.32k|    static_cast<    \
  |  |  929|  4.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.32k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5130|  17.3k|{
 5131|  17.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  17.3k|                  "Scan argument types must be default constructible");
 5133|  17.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  17.3k|                  "Scan argument types must be Destructible");
 5135|  17.3k|    static_assert(
 5136|  17.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  17.3k|        "Scan argument types must not be references");
 5138|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5084|  17.3k|{
 5085|  17.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  17.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  17.3k|    constexpr bool scannable_char =
 5089|  17.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  17.3k|    static_assert(scannable_char,
 5091|  17.3k|                  "Cannot scan an argument of an unsupported character "
 5092|  17.3k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  17.3k|    constexpr bool scannable_const =
 5095|  17.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  17.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  17.3k|    constexpr bool scannable_disabled =
 5099|  17.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  17.3k|    static_assert(scannable_disabled,
 5101|  17.3k|                  "Cannot scan an argument that has been disabled by "
 5102|  17.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  17.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  17.3k|    static_assert(
 5106|  17.3k|        scannable,
 5107|  17.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  17.3k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  17.3k|    return arg_value{arg};
 5111|  17.3k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4897|  17.3k|    {
 4898|  17.3k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8586|  77.8k|{
 8587|  77.8k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  77.8k|    auto result = vscan_impl(buffer, format, args);
 8590|  77.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.7k, False: 160]
  |  |  ------------------
  ------------------
 8591|  77.7k|        return unexpected(result.error());
 8592|  77.7k|    }
 8593|    160|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    160|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  77.8k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4715|   155k|{
 4716|   155k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|   155k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|   155k|                  "\n"
 4720|   155k|                  "Unsupported range type given as input to a scanning "
 4721|   155k|                  "function.\n"
 4722|   155k|                  "A range needs to have a character type (value type) "
 4723|   155k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|   155k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|   155k|                  "to be included.\n"
 4726|   155k|                  "See the scnlib documentation for more details.");
 4727|   155k|    static_assert(
 4728|   155k|        !std::is_same_v<T, custom_char_traits>,
 4729|   155k|        "\n"
 4730|   155k|        "Unsupported range type given as input to a scanning "
 4731|   155k|        "function.\n"
 4732|   155k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|   155k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|   155k|        "not supported.");
 4735|   155k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|   155k|                  "\n"
 4737|   155k|                  "Unsupported range type given as input to a scanning "
 4738|   155k|                  "function.\n"
 4739|   155k|                  "file_marker_found cannot be used as an "
 4740|   155k|                  "source range type to scn::scan.\n"
 4741|   155k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|   155k|                  "and do not provide an explicit source range, "
 4743|   155k|                  "or use scn::scan with a FILE* directly.");
 4744|   155k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|   155k|                  "\n"
 4746|   155k|                  "Unsupported range type given as input to a scanning "
 4747|   155k|                  "function.\n"
 4748|   155k|                  "In order to be scannable, a range needs to satisfy "
 4749|   155k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|   155k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|   155k|                  "\n"
 4752|   155k|                  "Unsupported range type given as input to a scanning "
 4753|   155k|                  "function.\n"
 4754|   155k|                  "A range needs to model forward_range and have a valid "
 4755|   155k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|   155k|                  "Examples of scannable ranges are std::string, "
 4757|   155k|                  "std::string_view, "
 4758|   155k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|   155k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|   155k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|   155k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4607|   155k|{
 4608|   155k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4608:19): [Folded - Ignored]
  ------------------
 4609|   155k|        return r;
 4610|       |        // return make_string_scan_buffer(r);
 4611|   155k|    }
 4612|   155k|    else {
 4613|   155k|        return invalid_char_type{};
 4614|   155k|    }
 4615|   155k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|   155k|    {
 1472|   155k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   155k|    {
  443|   155k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   155k|    {
 1173|   155k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5918|    320|{
 5919|    320|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|    320|                      ranges::iterator_t<SourceRange>>) {
 5921|    320|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|    320|    }
 5923|    320|    else {
 5924|    320|        auto it = ranges::begin(source);
 5925|    320|        while (n > 0) {
 5926|    320|            --n;
 5927|    320|            ++it;
 5928|    320|        }
 5929|    320|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|    320|    }
 5931|    320|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|    320|    {
 2720|    320|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|    320|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|    320|    {
 2701|    320|        return decay_copy(t.begin());
 2702|    320|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1944|  9.74k|{
 1945|  9.74k|    return SCN_FWD(t);
  ------------------
  |  |  930|  9.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  9.74k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5905|    320|{
 5906|    320|    return ranges::end(source);
 5907|    320|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|    320|    {
 2777|    320|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|    320|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|    320|    {
 2759|    320|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|    320|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3311|   481k|    {
 3312|   481k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|    320|    {
 1426|    320|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|    320|    {
  433|    320|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5473|   155k|    {
 5474|   155k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.2k, False: 68]
  |  |  ------------------
  ------------------
 8817|  17.2k|        return unexpected(result.error());
 8818|  17.2k|    }
 8819|     68|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     68|    static_cast<    \
  |  |  929|     68|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     68|    static_cast<    \
  |  |  929|     68|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1593|   155k|    {
 1594|   155k|        return has_value();
 1595|   155k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   311k|    {
  481|   311k|        return m_has_value;
  482|   311k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1599|   155k|    {
 1600|   155k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   155k|        return this->get_unexpected().error();
 1602|   155k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   155k|    {
  464|   155k|        return m_unexpected;
  465|   155k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  17.2k|    {
 1472|  17.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  17.2k|    {
  443|  17.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|    320|    {
 1649|    320|        return value();
 1650|    320|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|    320|    {
 1623|    320|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    320|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    320|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    320|        return this->get_value();
 1625|    320|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|    320|    {
  447|    320|        return m_value;
  448|    320|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5825|     68|    {
 5826|     68|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5676|    320|    {
 5677|    320|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5611|     68|    {
 5612|     68|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|     68|    {
 1426|     68|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|     68|    {
  433|     68|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7691|   155k|{
 7692|   155k|    return s;
 7693|   155k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7663|   155k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8602|  77.8k|{
 8603|  77.8k|#if !SCN_DISABLE_LOCALE
 8604|  77.8k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  77.8k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  77.8k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  77.8k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  77.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.7k, False: 160]
  |  |  ------------------
  ------------------
 8611|  77.7k|        return unexpected(result.error());
 8612|  77.7k|    }
 8613|    160|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    160|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  77.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 0]
  |  |  ------------------
  ------------------
 8817|  17.3k|        return unexpected(result.error());
 8818|  17.3k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  17.3k|    {
 1472|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  17.3k|    {
  443|  17.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 0]
  |  |  ------------------
  ------------------
 8817|  17.3k|        return unexpected(result.error());
 8818|  17.3k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  17.3k|    {
 1472|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  17.3k|    {
  443|  17.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 0]
  |  |  ------------------
  ------------------
 8817|  17.3k|        return unexpected(result.error());
 8818|  17.3k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  17.3k|    {
 1472|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  17.3k|    {
  443|  17.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 0]
  |  |  ------------------
  ------------------
 8817|  17.3k|        return unexpected(result.error());
 8818|  17.3k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  17.3k|    {
 1472|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  17.3k|    {
  443|  17.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 0]
  |  |  ------------------
  ------------------
 8817|  17.3k|        return unexpected(result.error());
 8818|  17.3k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  17.3k|    {
 1472|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  442|  17.3k|    {
  443|  17.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.2k, False: 84]
  |  |  ------------------
  ------------------
 8817|  17.2k|        return unexpected(result.error());
 8818|  17.2k|    }
 8819|     84|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     84|    static_cast<    \
  |  |  929|     84|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     84|    static_cast<    \
  |  |  929|     84|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1471|  17.2k|    {
 1472|  17.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  17.2k|    {
  622|  17.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  17.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  17.2k|    {
  685|  17.2k|        scn::detail::construct_at(unexpected_ptr(),
  686|  17.2k|                                  std::forward<Args>(args)...);
  687|  17.2k|        m_has_value = false;
  688|  17.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  34.4k|    {
  714|  34.4k|        return reinterpret_cast<unexpected<E>*>(
  715|  34.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  34.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  34.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5825|     84|    {
 5826|     84|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1425|     84|    {
 1426|     84|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|     84|    {
  612|     84|        construct(std::forward<Args>(args)...);
  613|     84|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|     84|    {
  678|     84|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|     84|        m_has_value = true;
  680|     84|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|     84|{
  388|     84|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|     84|        T(std::forward<Args>(args)...);
  390|     84|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5817|     84|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|    168|    {
  702|    168|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    168|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|    168|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5821|    168|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5366|  17.3k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  17.3k|    {
  627|  17.3k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 84, False: 17.2k]
  ------------------
  628|     84|            destroy_value();
  629|     84|        }
  630|  17.2k|        else {
  631|  17.2k|            destroy_unexpected();
  632|  17.2k|        }
  633|  17.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  17.3k|    {
  671|  17.3k|        return m_has_value;
  672|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|     84|    {
  692|     84|        scn::detail::destroy_at(value_ptr());
  693|     84|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  393|     84|{
  394|     84|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|     84|        for (auto& elem : *p) {
  396|     84|            scn::detail::destroy_at(&elem);
  397|     84|        }
  398|     84|    }
  399|     84|    else {
  400|     84|        p->~T();
  401|     84|    }
  402|     84|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  17.2k|    {
  696|  17.2k|        scn::detail::destroy_at(unexpected_ptr());
  697|  17.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.2k, False: 84]
  |  |  ------------------
  ------------------
 8817|  17.2k|        return unexpected(result.error());
 8818|  17.2k|    }
 8819|     84|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     84|    static_cast<    \
  |  |  929|     84|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     84|    static_cast<    \
  |  |  929|     84|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1471|  17.2k|    {
 1472|  17.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  17.2k|    {
  622|  17.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  17.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  17.2k|    {
  685|  17.2k|        scn::detail::construct_at(unexpected_ptr(),
  686|  17.2k|                                  std::forward<Args>(args)...);
  687|  17.2k|        m_has_value = false;
  688|  17.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  34.4k|    {
  714|  34.4k|        return reinterpret_cast<unexpected<E>*>(
  715|  34.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  34.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  34.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5825|     84|    {
 5826|     84|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1425|     84|    {
 1426|     84|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|     84|    {
  612|     84|        construct(std::forward<Args>(args)...);
  613|     84|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|     84|    {
  678|     84|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|     84|        m_has_value = true;
  680|     84|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|     84|{
  388|     84|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|     84|        T(std::forward<Args>(args)...);
  390|     84|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5817|     84|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|    168|    {
  702|    168|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    168|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|    168|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5821|    168|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5366|  17.3k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  17.3k|    {
  627|  17.3k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 84, False: 17.2k]
  ------------------
  628|     84|            destroy_value();
  629|     84|        }
  630|  17.2k|        else {
  631|  17.2k|            destroy_unexpected();
  632|  17.2k|        }
  633|  17.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  17.3k|    {
  671|  17.3k|        return m_has_value;
  672|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|     84|    {
  692|     84|        scn::detail::destroy_at(value_ptr());
  693|     84|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  393|     84|{
  394|     84|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|     84|        for (auto& elem : *p) {
  396|     84|            scn::detail::destroy_at(&elem);
  397|     84|        }
  398|     84|    }
  399|     84|    else {
  400|     84|        p->~T();
  401|     84|    }
  402|     84|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  17.2k|    {
  696|  17.2k|        scn::detail::destroy_at(unexpected_ptr());
  697|  17.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5130|  17.3k|{
 5131|  17.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  17.3k|                  "Scan argument types must be default constructible");
 5133|  17.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  17.3k|                  "Scan argument types must be Destructible");
 5135|  17.3k|    static_assert(
 5136|  17.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  17.3k|        "Scan argument types must not be references");
 5138|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5084|  17.3k|{
 5085|  17.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  17.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  17.3k|    constexpr bool scannable_char =
 5089|  17.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  17.3k|    static_assert(scannable_char,
 5091|  17.3k|                  "Cannot scan an argument of an unsupported character "
 5092|  17.3k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  17.3k|    constexpr bool scannable_const =
 5095|  17.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  17.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  17.3k|    constexpr bool scannable_disabled =
 5099|  17.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  17.3k|    static_assert(scannable_disabled,
 5101|  17.3k|                  "Cannot scan an argument that has been disabled by "
 5102|  17.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  17.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  17.3k|    static_assert(
 5106|  17.3k|        scannable,
 5107|  17.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  17.3k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  17.3k|    return arg_value{arg};
 5111|  17.3k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4897|  17.3k|    {
 4898|  17.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.2k, False: 84]
  |  |  ------------------
  ------------------
 8817|  17.2k|        return unexpected(result.error());
 8818|  17.2k|    }
 8819|     84|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     84|    static_cast<    \
  |  |  929|     84|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     84|    static_cast<    \
  |  |  929|     84|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1471|  17.2k|    {
 1472|  17.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  17.2k|    {
  443|  17.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5825|     84|    {
 5826|     84|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5611|     84|    {
 5612|     84|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1425|     84|    {
 1426|     84|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|     84|    {
  433|     84|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3563|   515k|    {
 3564|   515k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   515k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|   515k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  3.29M|    {
 3570|  3.29M|        return m_code == good;
 3571|  3.29M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|  61.1k|    {
 3581|  61.1k|        return m_code;
 3582|  61.1k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6176|  3.90k|    {
 6177|  3.90k|        return m_size;
 6178|  3.90k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6217|  4.00k|    {
 6218|  4.00k|        SCN_GCC_COMPAT_PUSH
 6219|  4.00k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6220|  4.00k|        switch (type) {
 6221|  1.75k|            case presentation_type::none:
  ------------------
  |  Branch (6221:13): [True: 1.75k, False: 2.25k]
  ------------------
 6222|  1.75k|                return 10;
 6223|     44|            case presentation_type::int_generic:
  ------------------
  |  Branch (6223:13): [True: 44, False: 3.96k]
  ------------------
 6224|     44|                return 0;
 6225|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6225:13): [True: 0, False: 4.00k]
  ------------------
 6226|      0|                return arbitrary_base;
 6227|       |
 6228|     38|            case presentation_type::int_binary:
  ------------------
  |  Branch (6228:13): [True: 38, False: 3.96k]
  ------------------
 6229|     38|                return 2;
 6230|     60|            case presentation_type::int_octal:
  ------------------
  |  Branch (6230:13): [True: 60, False: 3.94k]
  ------------------
 6231|     60|                return 8;
 6232|     24|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6232:13): [True: 24, False: 3.98k]
  ------------------
 6233|     48|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6233:13): [True: 24, False: 3.98k]
  ------------------
 6234|     48|                return 10;
 6235|  2.06k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6235:13): [True: 2.06k, False: 1.94k]
  ------------------
 6236|  2.06k|                return 16;
 6237|       |
 6238|      0|            default:
  ------------------
  |  Branch (6238:13): [True: 0, False: 4.00k]
  ------------------
 6239|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6240|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6241|  4.00k|        }
 6242|  4.00k|        SCN_GCC_COMPAT_POP
 6243|  4.00k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6255|  66.6k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6258|  8.37k|    {
 6259|  8.37k|        m_specs.align = align;
 6260|  8.37k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6267|    280|    {
 6268|    280|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|    280|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6268:23): [Folded - Ignored]
  ------------------
 6269|    280|            m_specs.localized = true;
 6270|    280|        }
 6271|      0|        else {
 6272|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6273|      0|        }
 6274|    280|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6277|  14.4k|    {
 6278|  14.4k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6278:13): [True: 0, False: 14.4k]
  |  Branch (6278:39): [True: 0, False: 0]
  ------------------
 6279|       |            // clang-format off
 6280|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6281|       |            // clang-format on
 6282|      0|        }
 6283|       |
 6284|  14.4k|        m_specs.width = width;
 6285|  14.4k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6287|  8.26k|    {
 6288|  8.26k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6288:13): [True: 118, False: 8.14k]
  ------------------
 6289|       |            // clang-format off
 6290|    118|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6291|       |            // clang-format on
 6292|    118|        }
 6293|       |
 6294|  8.14k|        m_specs.precision = prec;
 6295|  8.14k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6298|  76.8k|    {
 6299|  76.8k|        m_specs.type = type;
 6300|  76.8k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6303|  1.98M|    {
 6304|  1.98M|        const auto cp_value = static_cast<unsigned>(cp);
 6305|  1.98M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  1.98M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.74M, False: 240k]
  |  |  ------------------
  ------------------
 6306|  1.74M|            m_specs.charset_literals[cp_value / 8] |=
 6307|  1.74M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6308|  1.74M|        }
 6309|   240k|        else {
 6310|   240k|            m_specs.charset_has_nonascii = true;
 6311|   240k|        }
 6312|  1.98M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6315|  10.4k|    {
 6316|  10.4k|        const auto begin_value = static_cast<unsigned>(begin);
 6317|  10.4k|        const auto end_value = static_cast<unsigned>(end);
 6318|  10.4k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  10.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6319|       |
 6320|  10.4k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  10.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.86k, False: 4.53k]
  |  |  ------------------
  ------------------
 6321|       |            // No need to bit-twiddle with a mask, because with the
 6322|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6323|  5.86k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  5.86k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6324|   366k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6324:40): [True: 360k, False: 5.86k]
  ------------------
 6325|   360k|                m_specs.charset_literals[v / 8] |=
 6326|   360k|                    static_cast<unsigned char>(1ul << (v % 8));
 6327|   360k|            }
 6328|  5.86k|        }
 6329|  4.53k|        else {
 6330|  4.53k|            m_specs.charset_has_nonascii = true;
 6331|  4.53k|        }
 6332|  10.4k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6335|  2.09k|    {
 6336|  2.09k|        m_specs.charset_is_inverted = true;
 6337|  2.09k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6354|  37.8k|    {
 6355|  37.8k|        m_specs.regexp_flags = flags;
 6356|  37.8k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6360|  10.4k|    {
 6361|  10.4k|        SCN_UNLIKELY_ATTR
 6362|  10.4k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6363|  10.4k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6371|  2.06M|    {
 6372|  2.06M|        return static_cast<bool>(m_error);
 6373|  2.06M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|  61.1k|{
 3605|  61.1k|    return a.code() == b;
 3606|  61.1k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|  61.1k|{
 3609|  61.1k|    return !(a == b);
 3610|  61.1k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3903|   177k|{
 3904|   177k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3905|       |
 3906|   177k|    const auto is_trailing_code_unit = [](char ch) {
 3907|   177k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3908|   177k|    };
 3909|       |
 3910|   177k|    if (input.size() == 1) {
  ------------------
  |  Branch (3910:9): [True: 158k, False: 19.1k]
  ------------------
 3911|   158k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3912|   158k|        return static_cast<char32_t>(input[0]);
 3913|   158k|    }
 3914|       |
 3915|  19.1k|    if (input.size() == 2) {
  ------------------
  |  Branch (3915:9): [True: 18.4k, False: 678]
  ------------------
 3916|  18.4k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  18.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3917|  18.4k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  18.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3918|       |
 3919|  18.4k|        char32_t cp{};
 3920|  18.4k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3921|  18.4k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3922|  18.4k|        return cp;
 3923|  18.4k|    }
 3924|       |
 3925|    678|    if (input.size() == 3) {
  ------------------
  |  Branch (3925:9): [True: 460, False: 218]
  ------------------
 3926|    460|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|    460|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    460|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3927|    460|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    460|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    460|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3928|    460|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    460|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    460|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3929|       |
 3930|    460|        char32_t cp{};
 3931|    460|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3932|    460|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3933|    460|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3934|    460|        return cp;
 3935|    460|    }
 3936|       |
 3937|    218|    if (input.size() == 4) {
  ------------------
  |  Branch (3937:9): [True: 218, False: 0]
  ------------------
 3938|    218|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    218|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    218|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3939|    218|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    218|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    218|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3940|    218|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    218|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    218|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3941|    218|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    218|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    218|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3942|    218|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    218|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    218|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|       |
 3944|    218|        char32_t cp{};
 3945|    218|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3946|    218|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3947|    218|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3948|    218|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3949|    218|        return cp;
 3950|    218|    }
 3951|       |
 3952|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3953|       |    // gcc 7 thinks we'll get here, even when we won't
 3954|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3955|      0|#endif
 3956|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3957|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6106|  53.7k|{
 6107|  53.7k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6108|  53.7k|                                    static_cast<unsigned>(b));
 6109|  53.7k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6111|  4.89k|{
 6112|  4.89k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6113|  4.89k|                                    static_cast<unsigned>(b));
 6114|  4.89k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6126|  4.89k|{
 6127|  4.89k|    return a = a | b;
 6128|  4.89k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7058|    772|{
 7059|    772|    switch (type) {
 7060|    142|        case arg_type::none_type:
  ------------------
  |  Branch (7060:9): [True: 142, False: 630]
  ------------------
 7061|    142|            return arg_type_category::none;
 7062|       |
 7063|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7063:9): [True: 0, False: 772]
  ------------------
 7064|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 772]
  ------------------
 7065|     70|        case arg_type::int_type:
  ------------------
  |  Branch (7065:9): [True: 70, False: 702]
  ------------------
 7066|     70|        case arg_type::long_type:
  ------------------
  |  Branch (7066:9): [True: 0, False: 772]
  ------------------
 7067|     70|        case arg_type::llong_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 772]
  ------------------
 7068|     70|            return arg_type_category::integer;
 7069|       |
 7070|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 772]
  ------------------
 7071|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 772]
  ------------------
 7072|     70|        case arg_type::uint_type:
  ------------------
  |  Branch (7072:9): [True: 70, False: 702]
  ------------------
 7073|     70|        case arg_type::ulong_type:
  ------------------
  |  Branch (7073:9): [True: 0, False: 772]
  ------------------
 7074|     70|        case arg_type::ullong_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 772]
  ------------------
 7075|     70|            return arg_type_category::unsigned_integer;
 7076|       |
 7077|     70|        case arg_type::pointer_type:
  ------------------
  |  Branch (7077:9): [True: 70, False: 702]
  ------------------
 7078|     70|            return arg_type_category::pointer;
 7079|     70|        case arg_type::bool_type:
  ------------------
  |  Branch (7079:9): [True: 70, False: 702]
  ------------------
 7080|     70|            return arg_type_category::boolean;
 7081|     48|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7081:9): [True: 48, False: 724]
  ------------------
 7082|     70|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7082:9): [True: 22, False: 750]
  ------------------
 7083|     70|        case arg_type::code_point_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 772]
  ------------------
 7084|     70|            return arg_type_category::character;
 7085|       |
 7086|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 772]
  ------------------
 7087|     70|        case arg_type::double_type:
  ------------------
  |  Branch (7087:9): [True: 70, False: 702]
  ------------------
 7088|     70|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 772]
  ------------------
 7089|     70|            return arg_type_category::floating;
 7090|       |
 7091|     48|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7091:9): [True: 48, False: 724]
  ------------------
 7092|    118|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7092:9): [True: 70, False: 702]
  ------------------
 7093|    140|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7093:9): [True: 22, False: 750]
  ------------------
 7094|    210|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7094:9): [True: 70, False: 702]
  ------------------
 7095|    210|            return arg_type_category::string;
 7096|       |
 7097|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 772]
  ------------------
 7098|      0|            return arg_type_category::custom;
 7099|       |
 7100|      0|            SCN_CLANG_PUSH
 7101|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7102|      0|        default:
  ------------------
  |  Branch (7102:9): [True: 0, False: 772]
  ------------------
 7103|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7104|    772|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7105|    772|            SCN_CLANG_POP
 7106|    772|    }
 7107|       |
 7108|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|    772|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|    900|{
 3650|    900|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    900|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    900|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7144|  13.4k|{
 7145|  13.4k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.4k, False: 1.96k]
  |  |  ------------------
  ------------------
 7146|  11.4k|        return handler.on_error("Invalid type specifier for integer type");
 7147|  11.4k|    }
 7148|  1.96k|    if (specs.localized) {
  ------------------
  |  Branch (7148:9): [True: 80, False: 1.88k]
  ------------------
 7149|     80|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 72]
  |  |  ------------------
  ------------------
 7150|       |            // clang-format off
 7151|      8|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7152|       |            // clang-format on
 7153|      8|            return;
 7154|      8|        }
 7155|     72|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72]
  |  |  ------------------
  ------------------
 7156|       |            // clang-format off
 7157|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7158|       |            // clang-format on
 7159|      0|        }
 7160|     72|    }
 7161|  1.96k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1944|     58|{
 1945|     58|    return SCN_FWD(t);
  ------------------
  |  |  930|     58|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|     58|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  2.00k|{
 3650|  2.00k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  2.00k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7188|  6.72k|{
 7189|  6.72k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7189:9): [True: 5.83k, False: 882]
  ------------------
 7190|  6.72k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7190:10): [True: 98, False: 5.74k]
  ------------------
 7191|  5.83k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7191:10): [True: 5.64k, False: 94]
  ------------------
 7192|  5.74k|        SCN_UNLIKELY_ATTR
 7193|  5.74k|        return handler.on_error("Invalid type specifier for float type");
 7194|  5.74k|    }
 7195|  6.72k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  480|  24.4k|    {
  481|  24.4k|        return m_has_value;
  482|  24.4k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1593|  12.2k|    {
 1594|  12.2k|        return has_value();
 1595|  12.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  446|  12.2k|    {
  447|  12.2k|        return m_value;
  448|  12.2k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1622|  12.2k|    {
 1623|  12.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  12.2k|        return this->get_value();
 1625|  12.2k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1658|  12.2k|    {
 1659|  12.2k|        return std::move(value());
 1660|  12.2k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3649|  6.55k|{
 3650|  6.55k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  6.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  6.55k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3649|  3.83k|{
 3650|  3.83k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  3.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  3.83k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3649|    210|{
 3650|    210|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    210|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    210|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3649|    354|{
 3650|    354|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    354|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3649|  1.00k|{
 3650|  1.00k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.00k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7200|  19.9k|{
 7201|  19.9k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7201:9): [True: 2.58k, False: 17.4k]
  ------------------
 7202|  19.9k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7202:9): [True: 666, False: 16.7k]
  ------------------
 7203|  19.9k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7203:9): [True: 3.44k, False: 13.2k]
  ------------------
 7204|  19.9k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7204:9): [True: 11.4k, False: 1.80k]
  ------------------
 7205|  19.9k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7205:9): [True: 1.06k, False: 732]
  ------------------
 7206|  19.2k|        return;
 7207|  19.2k|    }
 7208|    732|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7208:9): [True: 204, False: 528]
  ------------------
 7209|    204|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 186]
  |  |  ------------------
  ------------------
 7210|       |            // clang-format off
 7211|     18|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7212|       |            // clang-format on
 7213|     18|        }
 7214|    186|        return;
 7215|    204|    }
 7216|    528|    SCN_UNLIKELY_ATTR
 7217|    528|    handler.on_error("Invalid type specifier for string");
 7218|    528|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3649|  4.34k|{
 3650|  4.34k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  4.34k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3649|     34|{
 3650|     34|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     34|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|     34|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7234|  6.72k|{
 7235|  6.72k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7235:9): [True: 5.83k, False: 882]
  ------------------
 7236|  6.72k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7236:9): [True: 5.60k, False: 234]
  ------------------
 7237|  6.72k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7237:9): [True: 5.58k, False: 20]
  ------------------
 7238|  6.72k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7238:9): [True: 5.56k, False: 18]
  ------------------
 7239|  6.72k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7239:9): [True: 5.54k, False: 18]
  ------------------
 7240|  6.72k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7240:9): [True: 5.54k, False: 8]
  ------------------
 7241|  6.72k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7241:9): [True: 5.51k, False: 24]
  ------------------
 7242|  6.72k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7242:9): [True: 5.50k, False: 10]
  ------------------
 7243|  5.50k|        SCN_UNLIKELY_ATTR
 7244|  5.50k|        return handler.on_error("Invalid type specifier for boolean");
 7245|  5.50k|    }
 7246|  6.72k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7166|  6.66k|{
 7167|  6.66k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7167:9): [True: 5.72k, False: 940]
  ------------------
 7168|  6.66k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7168:9): [True: 0, False: 940]
  ------------------
 7169|  5.72k|        SCN_UNLIKELY_ATTR
 7170|  5.72k|        return handler.on_error("Invalid type specifier for character type");
 7171|  5.72k|    }
 7172|  6.66k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7223|  6.66k|{
 7224|  6.66k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7224:9): [True: 5.80k, False: 860]
  ------------------
 7225|  6.66k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7225:9): [True: 5.79k, False: 8]
  ------------------
 7226|  5.79k|        SCN_UNLIKELY_ATTR
 7227|  5.79k|        return handler.on_error("Invalid type specifier for pointer");
 7228|  5.79k|    }
 7229|  6.66k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA70_KcEEEDaDpOT_:
 3649|     34|{
 3650|     34|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     34|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|     34|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   135k|{
 3711|   135k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|   135k|                                          const CharT*, const CharT*>) {
 3713|   135k|        return {first, last};
 3714|   135k|    }
 3715|   135k|    else {
 3716|   135k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   135k|    }
 3718|   135k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   319M|{
 3711|   319M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|   319M|                                          const CharT*, const CharT*>) {
 3713|   319M|        return {first, last};
 3714|   319M|    }
 3715|   319M|    else {
 3716|   319M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   319M|    }
 3718|   319M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  1.84M|    {
 3326|  1.84M|        return m_iterator;
 3327|  1.84M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  2.17M|    {
 3330|  2.17M|        return m_sentinel;
 3331|  2.17M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|   992k|    {
 3326|   992k|        return m_iterator;
 3327|   992k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|   639M|    {
 3330|   639M|        return m_sentinel;
 3331|   639M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7986|   122k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1206|     74|{
 1207|     74|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|     74|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|  1.42k|    {
  357|  1.42k|        return m_unexpected;
  358|  1.42k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3649|  5.12k|{
 3650|  5.12k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  5.12k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|  26.1k|    {
  343|  26.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  26.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  26.1k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|  81.4k|    {
 1472|  81.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  82.4k|    {
  443|  82.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   111k|    {
 1173|   111k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|  22.2k|    {
 1426|  22.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  22.2k|    {
  433|  22.2k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1593|   112k|    {
 1594|   112k|        return has_value();
 1595|   112k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|   222k|    {
  481|   222k|        return m_has_value;
  482|   222k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1599|  81.5k|    {
 1600|  81.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  81.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  81.5k|        return this->get_unexpected().error();
 1602|  81.5k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  81.5k|    {
  464|  81.5k|        return m_unexpected;
  465|  81.5k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|  19.4k|    {
 1659|  19.4k|        return std::move(value());
 1660|  19.4k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|  28.4k|    {
 1623|  28.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  28.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  28.4k|        return this->get_value();
 1625|  28.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|  28.4k|    {
  447|  28.4k|        return m_value;
  448|  28.4k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|  27.3k|    {
 1472|  27.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  28.1k|    {
  443|  28.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  44.0k|    {
 1173|  44.0k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|  14.7k|    {
 1426|  14.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  14.7k|    {
  433|  14.7k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1593|  44.9k|    {
 1594|  44.9k|        return has_value();
 1595|  44.9k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|  87.3k|    {
  481|  87.3k|        return m_has_value;
  482|  87.3k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1599|  27.3k|    {
 1600|  27.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  27.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  27.3k|        return this->get_unexpected().error();
 1602|  27.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  27.3k|    {
  464|  27.3k|        return m_unexpected;
  465|  27.3k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|  12.5k|    {
 1659|  12.5k|        return std::move(value());
 1660|  12.5k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|  15.0k|    {
 1623|  15.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  15.0k|        return this->get_value();
 1625|  15.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|  15.0k|    {
  447|  15.0k|        return m_value;
  448|  15.0k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  8.49k|    {
 1833|  8.49k|        return detail::transform_error_impl(std::move(*this),
 1834|  8.49k|                                            std::forward<F>(f));
 1835|  8.49k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  8.49k|{
 1319|  8.49k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  8.49k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  8.49k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  8.49k|            return result(*std::forward<Exp>(exp));
 1323|  8.49k|        }
 1324|       |
 1325|  8.49k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  8.49k|        return result(unexpect, monostate{});
 1327|  8.49k|    }
 1328|  8.49k|    else {
 1329|  8.49k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  8.49k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.49k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.49k, False: 0]
  |  |  ------------------
  ------------------
 1331|  8.49k|                   ? result(*std::forward<Exp>(exp))
 1332|  8.49k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  8.49k|    }
 1336|  8.49k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  75.8k|    {
  481|  75.8k|        return m_has_value;
  482|  75.8k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|  10.3k|    {
 1659|  10.3k|        return std::move(value());
 1660|  10.3k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|  35.0k|    {
 1623|  35.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  35.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  35.0k|        return this->get_value();
 1625|  35.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  35.0k|    {
  447|  35.0k|        return m_value;
  448|  35.0k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1609|    104|    {
 1610|    104|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    104|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    104|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|    104|        return std::move(this->get_unexpected().error());
 1612|    104|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|    104|    {
  464|    104|        return m_unexpected;
  465|    104|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|    932|    {
 1482|    932|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|   344k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6182|  2.69k|    {
 6183|  2.69k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  2.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6184|  2.69k|        CharT r{};
 6185|  2.69k|        std::memcpy(&r, m_data, m_size);
 6186|  2.69k|        return r;
 6187|  2.69k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  342|    758|    {
  343|    758|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    758|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|    758|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|    832|    {
  352|    832|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    832|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|    832|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6191|    540|    {
 6192|    540|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6193|    540|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2957|     58|    {
 2958|     58|        return fn::impl(std::forward<T>(t));
 2959|     58|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2948|     58|    {
 2949|     58|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2950|     58|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2925|     58|    {
 2926|     58|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|     58|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2891|     58|    {
 2892|     58|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     58|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|     58|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  342|     74|    {
  343|     74|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|     74|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|     74|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  342|      8|    {
  343|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  356|  17.3k|    {
  357|  17.3k|        return m_unexpected;
  358|  17.3k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  3.15k|    {
  352|  3.15k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.15k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  3.15k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  342|  27.0k|    {
  343|  27.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  27.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  27.0k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  356|  27.0k|    {
  357|  27.0k|        return m_unexpected;
  358|  27.0k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  351|  27.0k|    {
  352|  27.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  27.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  27.0k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1206|    514|{
 1207|    514|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|    514|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  342|  2.63k|    {
  343|  2.63k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.63k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  2.63k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1206|  1.12k|{
 1207|  1.12k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|  1.12k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  77.4k|{
  322|  77.4k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  77.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  77.4k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3341|   127k|    {
 3342|   127k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|   127k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|    252|    {
 1472|    252|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|    252|    {
  443|    252|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  40.6k|    {
 1173|  40.6k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|  40.4k|    {
 1426|  40.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  40.4k|    {
  433|  40.4k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1593|  30.2k|    {
 1594|  30.2k|        return has_value();
 1595|  30.2k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1648|  24.7k|    {
 1649|  24.7k|        return value();
 1650|  24.7k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1425|  5.77k|    {
 1426|  5.77k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  5.77k|    {
  433|  5.77k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  6.16k|    {
 1173|  6.16k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|    384|    {
 1472|    384|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    384|    {
  443|    384|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1593|  1.98k|    {
 1594|  1.98k|        return has_value();
 1595|  1.98k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  480|  10.6k|    {
  481|  10.6k|        return m_has_value;
  482|  10.6k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEERT_v:
 1648|    282|    {
 1649|    282|        return value();
 1650|    282|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1622|  4.16k|    {
 1623|  4.16k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  4.16k|        return this->get_value();
 1625|  4.16k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  446|  4.16k|    {
  447|  4.16k|        return m_value;
  448|  4.16k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1832|  2.44k|    {
 1833|  2.44k|        return detail::transform_error_impl(std::move(*this),
 1834|  2.44k|                                            std::forward<F>(f));
 1835|  2.44k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1318|  2.44k|{
 1319|  2.44k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.44k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.44k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.44k|            return result(*std::forward<Exp>(exp));
 1323|  2.44k|        }
 1324|       |
 1325|  2.44k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.44k|        return result(unexpect, monostate{});
 1327|  2.44k|    }
 1328|  2.44k|    else {
 1329|  2.44k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.44k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.44k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.36k, False: 74]
  |  |  ------------------
  ------------------
 1331|  2.44k|                   ? result(*std::forward<Exp>(exp))
 1332|  2.44k|                   : result(unexpect,
 1333|     74|                            trivial_invoke(std::forward<F>(f),
 1334|     74|                                           std::forward<Exp>(exp).error()));
 1335|  2.44k|    }
 1336|  2.44k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1658|  3.88k|    {
 1659|  3.88k|        return std::move(value());
 1660|  3.88k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1425|  3.52k|    {
 1426|  3.52k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  3.52k|    {
  433|  3.52k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  9.34k|    {
 1173|  9.34k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1609|    288|    {
 1610|    288|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    288|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    288|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|    288|        return std::move(this->get_unexpected().error());
 1612|    288|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  463|    288|    {
  464|    288|        return m_unexpected;
  465|    288|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1481|  1.39k|    {
 1482|  1.39k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  5.25k|    {
  443|  5.25k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|     74|    {
 1472|     74|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|     74|    {
  443|     74|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  23.3k|    {
 1173|  23.3k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  23.3k|    {
 1426|  23.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  23.3k|    {
  433|  23.3k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1593|  23.3k|    {
 1594|  23.3k|        return has_value();
 1595|  23.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|  46.7k|    {
  481|  46.7k|        return m_has_value;
  482|  46.7k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1599|     74|    {
 1600|     74|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     74|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     74|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|     74|        return this->get_unexpected().error();
 1602|     74|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|     74|    {
  464|     74|        return m_unexpected;
  465|     74|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  23.3k|    {
 1659|  23.3k|        return std::move(value());
 1660|  23.3k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  23.3k|    {
 1623|  23.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  23.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  23.3k|        return this->get_value();
 1625|  23.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|  23.3k|    {
  447|  23.3k|        return m_value;
  448|  23.3k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|  3.85k|    {
 1472|  3.85k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|    474|    {
 1472|    474|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    688|    {
  443|    688|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  6.47k|    {
 1173|  6.47k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  4.27k|    {
 1472|  4.27k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  4.27k|    {
  443|  4.27k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1593|  5.93k|    {
 1594|  5.93k|        return has_value();
 1595|  5.93k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  480|  11.6k|    {
  481|  11.6k|        return m_has_value;
  482|  11.6k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1599|  2.07k|    {
 1600|  2.07k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  2.07k|        return this->get_unexpected().error();
 1602|  2.07k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  463|  2.87k|    {
  464|  2.87k|        return m_unexpected;
  465|  2.87k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1425|  1.08k|    {
 1426|  1.08k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|  1.08k|    {
  433|  1.08k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.08k|    {
 1173|  1.08k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1622|  1.51k|    {
 1623|  1.51k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  1.51k|        return this->get_value();
 1625|  1.51k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  446|  1.51k|    {
  447|  1.51k|        return m_value;
  448|  1.51k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1593|    820|    {
 1594|    820|        return has_value();
 1595|    820|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  480|  2.16k|    {
  481|  2.16k|        return m_has_value;
  482|  2.16k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    820|    {
 1173|    820|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1658|  1.08k|    {
 1659|  1.08k|        return std::move(value());
 1660|  1.08k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1622|  1.08k|    {
 1623|  1.08k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  1.08k|        return this->get_value();
 1625|  1.08k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  446|  1.08k|    {
  447|  1.08k|        return m_value;
  448|  1.08k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3329|   183k|    {
 3330|   183k|        return m_sentinel;
 3331|   183k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1832|  1.73k|    {
 1833|  1.73k|        return detail::transform_error_impl(std::move(*this),
 1834|  1.73k|                                            std::forward<F>(f));
 1835|  1.73k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1318|  1.73k|{
 1319|  1.73k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  1.73k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  1.73k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  1.73k|            return result(*std::forward<Exp>(exp));
 1323|  1.73k|        }
 1324|       |
 1325|  1.73k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  1.73k|        return result(unexpect, monostate{});
 1327|  1.73k|    }
 1328|  1.73k|    else {
 1329|  1.73k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  1.73k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.73k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.51k, False: 214]
  |  |  ------------------
  ------------------
 1331|  1.73k|                   ? result(*std::forward<Exp>(exp))
 1332|  1.73k|                   : result(unexpect,
 1333|    214|                            trivial_invoke(std::forward<F>(f),
 1334|    214|                                           std::forward<Exp>(exp).error()));
 1335|  1.73k|    }
 1336|  1.73k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1425|  1.51k|    {
 1426|  1.51k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  1.51k|    {
  433|  1.51k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1481|    214|    {
 1482|    214|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1658|  1.51k|    {
 1659|  1.51k|        return std::move(value());
 1660|  1.51k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3325|   360k|    {
 3326|   360k|        return m_iterator;
 3327|   360k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1425|    820|    {
 1426|    820|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|    820|    {
  433|    820|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1832|    820|    {
 1833|    820|        return detail::transform_error_impl(std::move(*this),
 1834|    820|                                            std::forward<F>(f));
 1835|    820|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1318|    820|{
 1319|    820|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    820|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    820|        if (SCN_LIKELY(exp.has_value())) {
 1322|    820|            return result(*std::forward<Exp>(exp));
 1323|    820|        }
 1324|       |
 1325|    820|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    820|        return result(unexpect, monostate{});
 1327|    820|    }
 1328|    820|    else {
 1329|    820|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    820|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    820|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 820, False: 0]
  |  |  ------------------
  ------------------
 1331|    820|                   ? result(*std::forward<Exp>(exp))
 1332|    820|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    820|    }
 1336|    820|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  480|  1.64k|    {
  481|  1.64k|        return m_has_value;
  482|  1.64k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1658|    820|    {
 1659|    820|        return std::move(value());
 1660|    820|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1622|    820|    {
 1623|    820|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    820|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    820|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    820|        return this->get_value();
 1625|    820|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  446|    820|    {
  447|    820|        return m_value;
  448|    820|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1425|    820|    {
 1426|    820|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|    820|    {
  433|    820|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    820|    {
 1173|    820|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1593|    820|    {
 1594|    820|        return has_value();
 1595|    820|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.64k|    {
  481|  1.64k|        return m_has_value;
  482|  1.64k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1658|    820|    {
 1659|    820|        return std::move(value());
 1660|    820|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1622|    820|    {
 1623|    820|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    820|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    820|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    820|        return this->get_value();
 1625|    820|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    820|    {
  447|    820|        return m_value;
  448|    820|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1832|    804|    {
 1833|    804|        return detail::transform_error_impl(std::move(*this),
 1834|    804|                                            std::forward<F>(f));
 1835|    804|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1318|    804|{
 1319|    804|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    804|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    804|        if (SCN_LIKELY(exp.has_value())) {
 1322|    804|            return result(*std::forward<Exp>(exp));
 1323|    804|        }
 1324|       |
 1325|    804|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    804|        return result(unexpect, monostate{});
 1327|    804|    }
 1328|    804|    else {
 1329|    804|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    804|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    804|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 804]
  |  |  ------------------
  ------------------
 1331|    804|                   ? result(*std::forward<Exp>(exp))
 1332|    804|                   : result(unexpect,
 1333|    804|                            trivial_invoke(std::forward<F>(f),
 1334|    804|                                           std::forward<Exp>(exp).error()));
 1335|    804|    }
 1336|    804|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1609|    804|    {
 1610|    804|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    804|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    804|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|    804|        return std::move(this->get_unexpected().error());
 1612|    804|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3643|  1.32k|    {
 3644|  1.32k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3311|   126k|    {
 3312|   126k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  1.55k|    {
 2720|  1.55k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  1.55k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  1.55k|    {
 2701|  1.55k|        return decay_copy(t.begin());
 2702|  1.55k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1944|  3.36k|{
 1945|  3.36k|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  3.36k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3325|  1.55k|    {
 3326|  1.55k|        return m_iterator;
 3327|  1.55k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  1.55k|    {
 2777|  1.55k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  1.55k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  1.55k|    {
 2759|  1.55k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  1.55k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3329|  1.55k|    {
 3330|  1.55k|        return m_sentinel;
 3331|  1.55k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_LPv0EEET_SA_:
 3311|  1.55k|    {
 3312|  1.55k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|     16|    {
 1472|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  621|     16|    {
  622|     16|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  684|     16|    {
  685|     16|        scn::detail::construct_at(unexpected_ptr(),
  686|     16|                                  std::forward<Args>(args)...);
  687|     16|        m_has_value = false;
  688|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|     48|    {
  714|     48|        return reinterpret_cast<unexpected<E>*>(
  715|     48|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     48|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|     48|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|     16|    {
 1173|     16|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1593|     16|    {
 1594|     16|        return has_value();
 1595|     16|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  670|     48|    {
  671|     48|        return m_has_value;
  672|     48|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1599|     16|    {
 1600|     16|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|     16|        return this->get_unexpected().error();
 1602|     16|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     16|    {
  654|     16|        return *unexpected_ptr();
  655|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  626|     16|    {
  627|     16|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 16]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     16|        else {
  631|     16|            destroy_unexpected();
  632|     16|        }
  633|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     16|    {
  696|     16|        scn::detail::destroy_at(unexpected_ptr());
  697|     16|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1593|  9.60k|    {
 1594|  9.60k|        return has_value();
 1595|  9.60k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  18.6k|    {
  481|  18.6k|        return m_has_value;
  482|  18.6k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1599|  4.99k|    {
 1600|  4.99k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  4.99k|        return this->get_unexpected().error();
 1602|  4.99k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  4.99k|    {
  464|  4.99k|        return m_unexpected;
  465|  4.99k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1658|  3.52k|    {
 1659|  3.52k|        return std::move(value());
 1660|  3.52k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1622|  4.08k|    {
 1623|  4.08k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  4.08k|        return this->get_value();
 1625|  4.08k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  4.08k|    {
  447|  4.08k|        return m_value;
  448|  4.08k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  1.01k|    {
 1472|  1.01k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.11k|    {
  443|  1.11k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  13.8k|    {
 1173|  13.8k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|  10.9k|    {
 1472|  10.9k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  10.9k|    {
  443|  10.9k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1593|  14.7k|    {
 1594|  14.7k|        return has_value();
 1595|  14.7k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  23.0k|    {
  481|  23.0k|        return m_has_value;
  482|  23.0k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1599|  5.49k|    {
 1600|  5.49k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  5.49k|        return this->get_unexpected().error();
 1602|  5.49k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  5.49k|    {
  464|  5.49k|        return m_unexpected;
  465|  5.49k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1425|  3.56k|    {
 1426|  3.56k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  3.56k|    {
  433|  3.56k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.56k|    {
 1173|  3.56k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1622|  1.84k|    {
 1623|  1.84k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  1.84k|        return this->get_value();
 1625|  1.84k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  1.84k|    {
  447|  1.84k|        return m_value;
  448|  1.84k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1593|  2.65k|    {
 1594|  2.65k|        return has_value();
 1595|  2.65k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  7.12k|    {
  481|  7.12k|        return m_has_value;
  482|  7.12k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.65k|    {
 1173|  2.65k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|  3.56k|    {
 1659|  3.56k|        return std::move(value());
 1660|  3.56k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|  3.56k|    {
 1623|  3.56k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.56k|        return this->get_value();
 1625|  3.56k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  3.56k|    {
  447|  3.56k|        return m_value;
  448|  3.56k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3216|   107k|    {
 3217|   107k|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 1.59k, False: 105k]
  ------------------
 3218|   107k|                   ? nullptr
 3219|   107k|                   : std::addressof(*ranges::begin(derived()));
 3220|   107k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|   107k|    {
 3001|   107k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|   107k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|   107k|    {
 2974|   107k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|   107k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3334|   107k|    {
 3335|   107k|        return m_iterator == m_sentinel;
 3336|   107k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3175|   213k|    {
 3176|   213k|        return static_cast<D&>(*this);
 3177|   213k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   105k|    {
 2720|   105k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   105k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   105k|    {
 2701|   105k|        return decay_copy(t.begin());
 2702|   105k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1425|  1.84k|    {
 1426|  1.84k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.84k|    {
  433|  1.84k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1425|  2.65k|    {
 1426|  2.65k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.65k|    {
  433|  2.65k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  2.65k|    {
 1833|  2.65k|        return detail::transform_error_impl(std::move(*this),
 1834|  2.65k|                                            std::forward<F>(f));
 1835|  2.65k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1318|  2.65k|{
 1319|  2.65k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.65k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.65k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.65k|            return result(*std::forward<Exp>(exp));
 1323|  2.65k|        }
 1324|       |
 1325|  2.65k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.65k|        return result(unexpect, monostate{});
 1327|  2.65k|    }
 1328|  2.65k|    else {
 1329|  2.65k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.65k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.65k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.65k, False: 0]
  |  |  ------------------
  ------------------
 1331|  2.65k|                   ? result(*std::forward<Exp>(exp))
 1332|  2.65k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  2.65k|    }
 1336|  2.65k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  480|  5.31k|    {
  481|  5.31k|        return m_has_value;
  482|  5.31k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1658|  2.65k|    {
 1659|  2.65k|        return std::move(value());
 1660|  2.65k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1622|  2.65k|    {
 1623|  2.65k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.65k|        return this->get_value();
 1625|  2.65k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  446|  2.65k|    {
  447|  2.65k|        return m_value;
  448|  2.65k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  2.65k|    {
 1426|  2.65k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.65k|    {
  433|  2.65k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.65k|    {
 1173|  2.65k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1593|  2.65k|    {
 1594|  2.65k|        return has_value();
 1595|  2.65k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.31k|    {
  481|  5.31k|        return m_has_value;
  482|  5.31k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  2.65k|    {
 1659|  2.65k|        return std::move(value());
 1660|  2.65k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  2.65k|    {
 1623|  2.65k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.65k|        return this->get_value();
 1625|  2.65k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.65k|    {
  447|  2.65k|        return m_value;
  448|  2.65k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1471|     32|    {
 1472|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  621|     32|    {
  622|     32|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  684|     32|    {
  685|     32|        scn::detail::construct_at(unexpected_ptr(),
  686|     32|                                  std::forward<Args>(args)...);
  687|     32|        m_has_value = false;
  688|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|     96|    {
  714|     96|        return reinterpret_cast<unexpected<E>*>(
  715|     96|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     96|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|     96|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|     32|    {
 1173|     32|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1593|     32|    {
 1594|     32|        return has_value();
 1595|     32|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  670|     96|    {
  671|     96|        return m_has_value;
  672|     96|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1599|     32|    {
 1600|     32|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|     32|        return this->get_unexpected().error();
 1602|     32|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     32|    {
  654|     32|        return *unexpected_ptr();
  655|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  626|     32|    {
  627|     32|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 32]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     32|        else {
  631|     32|            destroy_unexpected();
  632|     32|        }
  633|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     32|    {
  696|     32|        scn::detail::destroy_at(unexpected_ptr());
  697|     32|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  92.8k|    {
 2851|  92.8k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  92.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  92.8k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  92.8k|    {
 2832|  92.8k|        return t.data();
 2833|  92.8k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|  5.02k|    {
 1426|  5.02k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  5.02k|    {
  433|  5.02k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1471|   234k|    {
 1472|   234k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|   234k|    {
  443|   234k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   237k|    {
 1173|   237k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1425|  2.85k|    {
 1426|  2.85k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  2.85k|    {
  433|  2.85k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1206|  2.52k|{
 1207|  2.52k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|  2.52k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1832|    260|    {
 1833|    260|        return detail::transform_error_impl(std::move(*this),
 1834|    260|                                            std::forward<F>(f));
 1835|    260|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1318|    260|{
 1319|    260|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    260|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    260|        if (SCN_LIKELY(exp.has_value())) {
 1322|    260|            return result(*std::forward<Exp>(exp));
 1323|    260|        }
 1324|       |
 1325|    260|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    260|        return result(unexpect, monostate{});
 1327|    260|    }
 1328|    260|    else {
 1329|    260|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    260|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    260|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 260, False: 0]
  |  |  ------------------
  ------------------
 1331|    260|                   ? result(*std::forward<Exp>(exp))
 1332|    260|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    260|    }
 1336|    260|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1425|    260|    {
 1426|    260|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|    260|    {
  433|    260|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    260|    {
 1173|    260|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|    260|    {
 1594|    260|        return has_value();
 1595|    260|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|    520|    {
  481|    520|        return m_has_value;
  482|    520|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1658|    260|    {
 1659|    260|        return std::move(value());
 1660|    260|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1622|    260|    {
 1623|    260|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    260|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    260|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    260|        return this->get_value();
 1625|    260|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    260|    {
  447|    260|        return m_value;
  448|    260|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1818|    520|    {
 1819|    520|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|    520|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1318|    520|{
 1319|    520|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    520|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    520|        if (SCN_LIKELY(exp.has_value())) {
 1322|    520|            return result(*std::forward<Exp>(exp));
 1323|    520|        }
 1324|       |
 1325|    520|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    520|        return result(unexpect, monostate{});
 1327|    520|    }
 1328|    520|    else {
 1329|    520|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    520|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    520|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 520]
  |  |  ------------------
  ------------------
 1331|    520|                   ? result(*std::forward<Exp>(exp))
 1332|    520|                   : result(unexpect,
 1333|    520|                            trivial_invoke(std::forward<F>(f),
 1334|    520|                                           std::forward<Exp>(exp).error()));
 1335|    520|    }
 1336|    520|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1648|    564|    {
 1649|    564|        return value();
 1650|    564|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|      4|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|    256|    {
 2720|    256|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|    256|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|    256|    {
 2701|    256|        return decay_copy(t.begin());
 2702|    256|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|    250|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|    902|    {
 1833|    902|        return detail::transform_error_impl(std::move(*this),
 1834|    902|                                            std::forward<F>(f));
 1835|    902|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1318|    902|{
 1319|    902|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    902|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    902|        if (SCN_LIKELY(exp.has_value())) {
 1322|    902|            return result(*std::forward<Exp>(exp));
 1323|    902|        }
 1324|       |
 1325|    902|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    902|        return result(unexpect, monostate{});
 1327|    902|    }
 1328|    902|    else {
 1329|    902|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    902|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    902|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 902, False: 0]
  |  |  ------------------
  ------------------
 1331|    902|                   ? result(*std::forward<Exp>(exp))
 1332|    902|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    902|    }
 1336|    902|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|    902|    {
 1426|    902|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|    902|    {
  433|    902|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    902|    {
 1173|    902|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|    902|    {
 1594|    902|        return has_value();
 1595|    902|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.80k|    {
  481|  1.80k|        return m_has_value;
  482|  1.80k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|    902|    {
 1659|    902|        return std::move(value());
 1660|    902|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|    902|    {
 1623|    902|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    902|        return this->get_value();
 1625|    902|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    902|    {
  447|    902|        return m_value;
  448|    902|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1818|    932|    {
 1819|    932|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|    932|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1318|    932|{
 1319|    932|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    932|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    932|        if (SCN_LIKELY(exp.has_value())) {
 1322|    932|            return result(*std::forward<Exp>(exp));
 1323|    932|        }
 1324|       |
 1325|    932|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    932|        return result(unexpect, monostate{});
 1327|    932|    }
 1328|    932|    else {
 1329|    932|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    932|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    932|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 932]
  |  |  ------------------
  ------------------
 1331|    932|                   ? result(*std::forward<Exp>(exp))
 1332|    932|                   : result(unexpect,
 1333|    932|                            trivial_invoke(std::forward<F>(f),
 1334|    932|                                           std::forward<Exp>(exp).error()));
 1335|    932|    }
 1336|    932|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3643|    932|    {
 3644|    932|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|  8.92k|    {
 1649|  8.92k|        return value();
 1650|  8.92k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6692|  2.90k|{
 6693|  2.90k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6694|  2.90k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6695|       |
 6696|  2.90k|    auto start = begin;
 6697|  2.90k|    ++begin;
 6698|       |
 6699|  2.90k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.90k]
  |  |  ------------------
  ------------------
 6700|       |        // clang-format off
 6701|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6702|       |        // clang-format on
 6703|      0|        return {};
 6704|      0|    }
 6705|  2.90k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6705:9): [True: 330, False: 2.57k]
  ------------------
 6706|    330|        handler.on_charset_inverted();
 6707|    330|        ++begin;
 6708|    330|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330]
  |  |  ------------------
  ------------------
 6709|       |            // clang-format off
 6710|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6711|       |            // clang-format on
 6712|      0|            return {};
 6713|      0|        }
 6714|    330|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6714:13): [True: 6, False: 324]
  ------------------
 6715|      6|            handler.on_charset_single(char32_t{']'});
 6716|      6|            ++begin;
 6717|      6|        }
 6718|    330|    }
 6719|  2.57k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6719:14): [True: 0, False: 2.57k]
  ------------------
 6720|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6721|      0|    }
 6722|       |
 6723|   665k|    while (begin != end) {
  ------------------
  |  Branch (6723:12): [True: 665k, False: 0]
  ------------------
 6724|   665k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   665k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 665k]
  |  |  ------------------
  ------------------
 6725|      0|            break;
 6726|      0|        }
 6727|       |
 6728|   665k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 2.90k, False: 662k]
  ------------------
 6729|  2.90k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6730|  2.90k|        }
 6731|       |
 6732|   662k|        parse_presentation_set_literal(begin, end, handler);
 6733|   662k|    }
 6734|       |
 6735|      0|    SCN_UNLIKELY_ATTR
 6736|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6737|      0|    return {};
 6738|  2.90k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6656|   662k|{
 6657|   662k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   662k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   662k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6658|       |
 6659|   662k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6660|   662k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 662k]
  |  |  ------------------
  ------------------
 6661|      0|        return;
 6662|      0|    }
 6663|       |
 6664|   662k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6664:9): [True: 662k, False: 0]
  |  Branch (6664:25): [True: 3.22k, False: 658k]
  |  Branch (6664:49): [True: 3.22k, False: 0]
  ------------------
 6665|   662k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6665:9): [True: 3.12k, False: 96]
  ------------------
 6666|  3.12k|        ++begin;
 6667|       |
 6668|  3.12k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6669|  3.12k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  3.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.12k]
  |  |  ------------------
  ------------------
 6670|      0|            return;
 6671|      0|        }
 6672|       |
 6673|  3.12k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  3.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.12k]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6676|       |            // clang-format on
 6677|      0|            return;
 6678|      0|        }
 6679|       |
 6680|  3.12k|        handler.on_charset_range(cp_first, cp_second + 1);
 6681|  3.12k|        return;
 6682|  3.12k|    }
 6683|       |
 6684|   658k|    handler.on_charset_single(cp_first);
 6685|   658k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6632|   665k|{
 6633|   665k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   665k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   665k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6634|       |
 6635|   665k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6636|   665k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 665k]
  |  |  |  Branch (859:45): [True: 0, False: 665k]
  |  |  |  Branch (859:45): [True: 0, False: 665k]
  |  |  ------------------
  ------------------
 6637|      0|        handler.on_error("Invalid encoding in format string");
 6638|      0|        return invalid_code_point;
 6639|      0|    }
 6640|       |
 6641|   665k|    const auto cp =
 6642|   665k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6643|   665k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   665k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 665k]
  |  |  ------------------
  ------------------
 6644|      0|        handler.on_error("Invalid encoding in format string");
 6645|      0|        return invalid_code_point;
 6646|      0|    }
 6647|       |
 6648|   665k|    begin += len;
 6649|   665k|    return cp;
 6650|   665k|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  12.2k|    {
 1173|  12.2k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1425|  12.2k|    {
 1426|  12.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  432|  12.2k|    {
  433|  12.2k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6247|  13.2k|    {
 6248|  13.2k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6249|  13.2k|                charset_string_size};
 6250|  13.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1425|    564|    {
 1426|    564|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  432|    564|    {
  433|    564|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1425|  2.05k|    {
 1426|  2.05k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  432|  2.05k|    {
  433|  2.05k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4028|   177k|{
 4029|   177k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4029:19): [Folded - Ignored]
  ------------------
 4030|   177k|        return decode_utf8_code_point_exhaustive_valid(input);
 4031|   177k|    }
 4032|   177k|    else if constexpr (sizeof(CharT) == 2) {
 4033|   177k|        return decode_utf16_code_point_exhaustive_valid(input);
 4034|   177k|    }
 4035|   177k|    else {
 4036|   177k|        SCN_EXPECT(input.size() == 1);
 4037|   177k|        return static_cast<char32_t>(input.front());
 4038|   177k|    }
 4039|   177k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3906|  20.0k|    const auto is_trailing_code_unit = [](char ch) {
 3907|  20.0k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3908|  20.0k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6182|    674|    {
 6183|    674|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|    674|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    674|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6184|    674|        CharT r{};
 6185|    674|        std::memcpy(&r, m_data, m_size);
 6186|    674|        return r;
 6187|    674|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   319M|{
 3803|   319M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|   319M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|   319M|    }
 3806|   319M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3806:24): [Folded - Ignored]
  ------------------
 3807|   319M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|   319M|    }
 3809|   319M|    else {
 3810|       |        // utf-32
 3811|   319M|        static_assert(sizeof(U) == 4);
 3812|   319M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   319M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   319M|        return 1;
 3814|   319M|    }
 3815|   319M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   319M|{
 4009|   319M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|   319M|        return decode_utf8_code_point_exhaustive(input);
 4011|   319M|    }
 4012|   319M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4012:24): [Folded - Ignored]
  ------------------
 4013|   319M|        return decode_utf16_code_point_exhaustive(input);
 4014|   319M|    }
 4015|   319M|    else {
 4016|   319M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   319M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   319M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   319M|        auto cp = static_cast<char32_t>(input.front());
 4018|   319M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   319M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68.9k, False: 319M]
  |  |  ------------------
  ------------------
 4019|  68.9k|            return invalid_code_point;
 4020|  68.9k|        }
 4021|   319M|        return cp;
 4022|   319M|    }
 4023|   319M|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  34.5k|{
 3695|  34.5k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3695:19): [Folded - Ignored]
  |  Branch (3695:19): [Folded - Ignored]
  ------------------
 3696|  34.5k|                                          decltype(first), decltype(last)> &&
 3697|  34.5k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3697:19): [Folded - Ignored]
  ------------------
 3698|  34.5k|        return {first, last};
 3699|  34.5k|    }
 3700|  34.5k|    else {
 3701|  34.5k|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  34.5k|                                       to_address(first), to_address(last)))};
 3703|  34.5k|    }
 3704|  34.5k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|   103k|{
  322|   103k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   103k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|   183k|{
  302|   183k|    return p;
  303|   183k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  5.64k|{
 3726|  5.64k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3726:19): [Folded - Ignored]
  |  Branch (3726:19): [Folded - Ignored]
  ------------------
 3727|  5.64k|                      typename std::basic_string_view<CharT>::iterator,
 3728|  5.64k|                      decltype(it)> &&
 3729|  5.64k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3729:19): [Folded - Ignored]
  ------------------
 3730|  5.64k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  5.64k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  5.64k|        return it;
 3732|  5.64k|    }
 3733|  5.64k|    else {
 3734|  5.64k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|  5.64k|    }
 3736|  5.64k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  79.5k|{
  322|  79.5k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  79.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  79.5k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3341|  15.3k|    {
 3342|  15.3k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  15.3k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|    132|    {
 1472|    132|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|    132|    {
  443|    132|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  18.1k|    {
 1173|  18.1k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|  18.0k|    {
 1426|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  18.0k|    {
  433|  18.0k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1593|  5.08k|    {
 1594|  5.08k|        return has_value();
 1595|  5.08k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  31.3k|    {
  481|  31.3k|        return m_has_value;
  482|  31.3k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|  12.9k|    {
 1623|  12.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  12.9k|        return this->get_value();
 1625|  12.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  12.9k|    {
  447|  12.9k|        return m_value;
  448|  12.9k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1425|  2.17k|    {
 1426|  2.17k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  2.17k|    {
  433|  2.17k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.23k|    {
 1173|  2.23k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|     64|    {
 1472|     64|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|     64|    {
  443|     64|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1593|    660|    {
 1594|    660|        return has_value();
 1595|    660|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  480|  3.81k|    {
  481|  3.81k|        return m_has_value;
  482|  3.81k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1622|  1.51k|    {
 1623|  1.51k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  1.51k|        return this->get_value();
 1625|  1.51k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  446|  1.51k|    {
  447|  1.51k|        return m_value;
  448|  1.51k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1832|    928|    {
 1833|    928|        return detail::transform_error_impl(std::move(*this),
 1834|    928|                                            std::forward<F>(f));
 1835|    928|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1318|    928|{
 1319|    928|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    928|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    928|        if (SCN_LIKELY(exp.has_value())) {
 1322|    928|            return result(*std::forward<Exp>(exp));
 1323|    928|        }
 1324|       |
 1325|    928|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    928|        return result(unexpect, monostate{});
 1327|    928|    }
 1328|    928|    else {
 1329|    928|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    928|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    928|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 928, False: 0]
  |  |  ------------------
  ------------------
 1331|    928|                   ? result(*std::forward<Exp>(exp))
 1332|    928|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    928|    }
 1336|    928|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1658|  1.51k|    {
 1659|  1.51k|        return std::move(value());
 1660|  1.51k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1425|  1.19k|    {
 1426|  1.19k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  1.19k|    {
  433|  1.19k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.89k|    {
 1173|  2.89k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1609|     64|    {
 1610|     64|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     64|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     64|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|     64|        return std::move(this->get_unexpected().error());
 1612|     64|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  463|     64|    {
  464|     64|        return m_unexpected;
  465|     64|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1481|    530|    {
 1482|    530|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  1.70k|    {
  443|  1.70k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  7.24k|    {
 1173|  7.24k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  7.24k|    {
 1426|  7.24k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  7.24k|    {
  433|  7.24k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  7.93k|    {
 1833|  7.93k|        return detail::transform_error_impl(std::move(*this),
 1834|  7.93k|                                            std::forward<F>(f));
 1835|  7.93k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  7.93k|{
 1319|  7.93k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  7.93k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  7.93k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  7.93k|            return result(*std::forward<Exp>(exp));
 1323|  7.93k|        }
 1324|       |
 1325|  7.93k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  7.93k|        return result(unexpect, monostate{});
 1327|  7.93k|    }
 1328|  7.93k|    else {
 1329|  7.93k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  7.93k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  7.93k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.93k, False: 0]
  |  |  ------------------
  ------------------
 1331|  7.93k|                   ? result(*std::forward<Exp>(exp))
 1332|  7.93k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  7.93k|    }
 1336|  7.93k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|  12.9k|    {
 1659|  12.9k|        return std::move(value());
 1660|  12.9k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1609|    132|    {
 1610|    132|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    132|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    132|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|    132|        return std::move(this->get_unexpected().error());
 1612|    132|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|    132|    {
  464|    132|        return m_unexpected;
  465|    132|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|    860|    {
 1482|    860|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1593|  7.24k|    {
 1594|  7.24k|        return has_value();
 1595|  7.24k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|  14.4k|    {
  481|  14.4k|        return m_has_value;
  482|  14.4k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  7.24k|    {
 1659|  7.24k|        return std::move(value());
 1660|  7.24k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  7.24k|    {
 1623|  7.24k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  7.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  7.24k|        return this->get_value();
 1625|  7.24k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|  7.24k|    {
  447|  7.24k|        return m_value;
  448|  7.24k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|  1.17k|    {
 1472|  1.17k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|    170|    {
 1472|    170|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    234|    {
  443|    234|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.51k|    {
 1173|  2.51k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  1.69k|    {
 1472|  1.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  1.69k|    {
  443|  1.69k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1593|  2.29k|    {
 1594|  2.29k|        return has_value();
 1595|  2.29k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  480|  4.53k|    {
  481|  4.53k|        return m_has_value;
  482|  4.53k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1599|    806|    {
 1600|    806|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    806|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    806|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|    806|        return this->get_unexpected().error();
 1602|    806|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  463|  1.12k|    {
  464|  1.12k|        return m_unexpected;
  465|  1.12k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1425|    424|    {
 1426|    424|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|    424|    {
  433|    424|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    424|    {
 1173|    424|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1622|    584|    {
 1623|    584|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    584|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    584|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    584|        return this->get_value();
 1625|    584|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  446|    584|    {
  447|    584|        return m_value;
  448|    584|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1593|    318|    {
 1594|    318|        return has_value();
 1595|    318|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  480|    848|    {
  481|    848|        return m_has_value;
  482|    848|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    318|    {
 1173|    318|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1658|    424|    {
 1659|    424|        return std::move(value());
 1660|    424|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1622|    424|    {
 1623|    424|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    424|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    424|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    424|        return this->get_value();
 1625|    424|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  446|    424|    {
  447|    424|        return m_value;
  448|    424|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3329|  32.0k|    {
 3330|  32.0k|        return m_sentinel;
 3331|  32.0k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1832|    648|    {
 1833|    648|        return detail::transform_error_impl(std::move(*this),
 1834|    648|                                            std::forward<F>(f));
 1835|    648|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1318|    648|{
 1319|    648|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    648|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    648|        if (SCN_LIKELY(exp.has_value())) {
 1322|    648|            return result(*std::forward<Exp>(exp));
 1323|    648|        }
 1324|       |
 1325|    648|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    648|        return result(unexpect, monostate{});
 1327|    648|    }
 1328|    648|    else {
 1329|    648|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    648|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    648|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 584, False: 64]
  |  |  ------------------
  ------------------
 1331|    648|                   ? result(*std::forward<Exp>(exp))
 1332|    648|                   : result(unexpect,
 1333|     64|                            trivial_invoke(std::forward<F>(f),
 1334|     64|                                           std::forward<Exp>(exp).error()));
 1335|    648|    }
 1336|    648|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1425|    584|    {
 1426|    584|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|    584|    {
  433|    584|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1481|     64|    {
 1482|     64|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1658|    584|    {
 1659|    584|        return std::move(value());
 1660|    584|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3325|  34.5k|    {
 3326|  34.5k|        return m_iterator;
 3327|  34.5k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1425|    318|    {
 1426|    318|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|    318|    {
  433|    318|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1832|    318|    {
 1833|    318|        return detail::transform_error_impl(std::move(*this),
 1834|    318|                                            std::forward<F>(f));
 1835|    318|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1318|    318|{
 1319|    318|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    318|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    318|        if (SCN_LIKELY(exp.has_value())) {
 1322|    318|            return result(*std::forward<Exp>(exp));
 1323|    318|        }
 1324|       |
 1325|    318|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    318|        return result(unexpect, monostate{});
 1327|    318|    }
 1328|    318|    else {
 1329|    318|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    318|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    318|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 318, False: 0]
  |  |  ------------------
  ------------------
 1331|    318|                   ? result(*std::forward<Exp>(exp))
 1332|    318|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    318|    }
 1336|    318|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  480|    636|    {
  481|    636|        return m_has_value;
  482|    636|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1658|    318|    {
 1659|    318|        return std::move(value());
 1660|    318|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1622|    318|    {
 1623|    318|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    318|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    318|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    318|        return this->get_value();
 1625|    318|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  446|    318|    {
  447|    318|        return m_value;
  448|    318|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1425|    318|    {
 1426|    318|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|    318|    {
  433|    318|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    318|    {
 1173|    318|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1593|    318|    {
 1594|    318|        return has_value();
 1595|    318|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  480|    636|    {
  481|    636|        return m_has_value;
  482|    636|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1658|    318|    {
 1659|    318|        return std::move(value());
 1660|    318|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1622|    318|    {
 1623|    318|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    318|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    318|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    318|        return this->get_value();
 1625|    318|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    318|    {
  447|    318|        return m_value;
  448|    318|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1832|    318|    {
 1833|    318|        return detail::transform_error_impl(std::move(*this),
 1834|    318|                                            std::forward<F>(f));
 1835|    318|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1318|    318|{
 1319|    318|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    318|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    318|        if (SCN_LIKELY(exp.has_value())) {
 1322|    318|            return result(*std::forward<Exp>(exp));
 1323|    318|        }
 1324|       |
 1325|    318|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    318|        return result(unexpect, monostate{});
 1327|    318|    }
 1328|    318|    else {
 1329|    318|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    318|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    318|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 318]
  |  |  ------------------
  ------------------
 1331|    318|                   ? result(*std::forward<Exp>(exp))
 1332|    318|                   : result(unexpect,
 1333|    318|                            trivial_invoke(std::forward<F>(f),
 1334|    318|                                           std::forward<Exp>(exp).error()));
 1335|    318|    }
 1336|    318|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1609|    318|    {
 1610|    318|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    318|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    318|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|    318|        return std::move(this->get_unexpected().error());
 1612|    318|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3643|    530|    {
 3644|    530|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3311|  12.2k|    {
 3312|  12.2k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|    248|    {
 2720|    248|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|    248|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|    248|    {
 2701|    248|        return decay_copy(t.begin());
 2702|    248|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1944|    598|{
 1945|    598|    return SCN_FWD(t);
  ------------------
  |  |  930|    598|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|    598|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3325|    248|    {
 3326|    248|        return m_iterator;
 3327|    248|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|    248|    {
 2777|    248|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|    248|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|    248|    {
 2759|    248|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|    248|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3329|    248|    {
 3330|    248|        return m_sentinel;
 3331|    248|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_LPv0EEET_SA_:
 3311|    248|    {
 3312|    248|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1593|  3.00k|    {
 1594|  3.00k|        return has_value();
 1595|  3.00k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.79k|    {
  481|  5.79k|        return m_has_value;
  482|  5.79k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1599|  1.60k|    {
 1600|  1.60k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.60k|        return this->get_unexpected().error();
 1602|  1.60k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.60k|    {
  464|  1.60k|        return m_unexpected;
  465|  1.60k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1658|  1.19k|    {
 1659|  1.19k|        return std::move(value());
 1660|  1.19k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1622|  1.19k|    {
 1623|  1.19k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  1.19k|        return this->get_value();
 1625|  1.19k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  1.19k|    {
  447|  1.19k|        return m_value;
  448|  1.19k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|    986|    {
 1472|    986|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.11k|    {
  443|  1.11k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  16.3k|    {
 1173|  16.3k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|  10.1k|    {
 1472|  10.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  10.1k|    {
  443|  10.1k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1593|  17.1k|    {
 1594|  17.1k|        return has_value();
 1595|  17.1k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  28.3k|    {
  481|  28.3k|        return m_has_value;
  482|  28.3k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1599|  5.22k|    {
 1600|  5.22k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  5.22k|        return this->get_unexpected().error();
 1602|  5.22k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  5.22k|    {
  464|  5.22k|        return m_unexpected;
  465|  5.22k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1425|  3.37k|    {
 1426|  3.37k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  3.37k|    {
  433|  3.37k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.37k|    {
 1173|  3.37k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1622|  5.05k|    {
 1623|  5.05k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  5.05k|        return this->get_value();
 1625|  5.05k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  5.05k|    {
  447|  5.05k|        return m_value;
  448|  5.05k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1593|  2.52k|    {
 1594|  2.52k|        return has_value();
 1595|  2.52k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  6.75k|    {
  481|  6.75k|        return m_has_value;
  482|  6.75k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.52k|    {
 1173|  2.52k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|  3.37k|    {
 1659|  3.37k|        return std::move(value());
 1660|  3.37k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|  3.37k|    {
 1623|  3.37k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.37k|        return this->get_value();
 1625|  3.37k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  3.37k|    {
  447|  3.37k|        return m_value;
  448|  3.37k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  5.18k|    {
 1833|  5.18k|        return detail::transform_error_impl(std::move(*this),
 1834|  5.18k|                                            std::forward<F>(f));
 1835|  5.18k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  5.18k|{
 1319|  5.18k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  5.18k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  5.18k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  5.18k|            return result(*std::forward<Exp>(exp));
 1323|  5.18k|        }
 1324|       |
 1325|  5.18k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  5.18k|        return result(unexpect, monostate{});
 1327|  5.18k|    }
 1328|  5.18k|    else {
 1329|  5.18k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  5.18k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  5.18k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.05k, False: 132]
  |  |  ------------------
  ------------------
 1331|  5.18k|                   ? result(*std::forward<Exp>(exp))
 1332|  5.18k|                   : result(unexpect,
 1333|    132|                            trivial_invoke(std::forward<F>(f),
 1334|    132|                                           std::forward<Exp>(exp).error()));
 1335|  5.18k|    }
 1336|  5.18k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1425|  5.05k|    {
 1426|  5.05k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  5.05k|    {
  433|  5.05k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1481|    132|    {
 1482|    132|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1658|  5.05k|    {
 1659|  5.05k|        return std::move(value());
 1660|  5.05k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1425|  2.52k|    {
 1426|  2.52k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.52k|    {
  433|  2.52k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  2.52k|    {
 1833|  2.52k|        return detail::transform_error_impl(std::move(*this),
 1834|  2.52k|                                            std::forward<F>(f));
 1835|  2.52k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1318|  2.52k|{
 1319|  2.52k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.52k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.52k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.52k|            return result(*std::forward<Exp>(exp));
 1323|  2.52k|        }
 1324|       |
 1325|  2.52k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.52k|        return result(unexpect, monostate{});
 1327|  2.52k|    }
 1328|  2.52k|    else {
 1329|  2.52k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.52k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.52k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.52k, False: 0]
  |  |  ------------------
  ------------------
 1331|  2.52k|                   ? result(*std::forward<Exp>(exp))
 1332|  2.52k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  2.52k|    }
 1336|  2.52k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  480|  5.04k|    {
  481|  5.04k|        return m_has_value;
  482|  5.04k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1658|  2.52k|    {
 1659|  2.52k|        return std::move(value());
 1660|  2.52k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1622|  2.52k|    {
 1623|  2.52k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.52k|        return this->get_value();
 1625|  2.52k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  446|  2.52k|    {
  447|  2.52k|        return m_value;
  448|  2.52k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  2.52k|    {
 1426|  2.52k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.52k|    {
  433|  2.52k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.52k|    {
 1173|  2.52k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1593|  2.52k|    {
 1594|  2.52k|        return has_value();
 1595|  2.52k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.04k|    {
  481|  5.04k|        return m_has_value;
  482|  5.04k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  2.52k|    {
 1659|  2.52k|        return std::move(value());
 1660|  2.52k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  2.52k|    {
 1623|  2.52k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.52k|        return this->get_value();
 1625|  2.52k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.52k|    {
  447|  2.52k|        return m_value;
  448|  2.52k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1471|     24|    {
 1472|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  621|     24|    {
  622|     24|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  684|     24|    {
  685|     24|        scn::detail::construct_at(unexpected_ptr(),
  686|     24|                                  std::forward<Args>(args)...);
  687|     24|        m_has_value = false;
  688|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|     72|    {
  714|     72|        return reinterpret_cast<unexpected<E>*>(
  715|     72|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     72|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|     72|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|     24|    {
 1173|     24|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1593|     24|    {
 1594|     24|        return has_value();
 1595|     24|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|     72|    {
  671|     72|        return m_has_value;
  672|     72|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1599|     24|    {
 1600|     24|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|     24|        return this->get_unexpected().error();
 1602|     24|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     24|    {
  654|     24|        return *unexpected_ptr();
  655|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|     24|    {
  627|     24|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 24]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     24|        else {
  631|     24|            destroy_unexpected();
  632|     24|        }
  633|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     24|    {
  696|     24|        scn::detail::destroy_at(unexpected_ptr());
  697|     24|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  9.11k|    {
 2851|  9.11k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  9.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  9.11k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  9.11k|    {
 2832|  9.11k|        return t.data();
 2833|  9.11k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3216|  11.1k|    {
 3217|  11.1k|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 2.08k, False: 9.09k]
  ------------------
 3218|  11.1k|                   ? nullptr
 3219|  11.1k|                   : std::addressof(*ranges::begin(derived()));
 3220|  11.1k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|  11.1k|    {
 3001|  11.1k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  11.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|  11.1k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|  11.1k|    {
 2974|  11.1k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  11.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|  11.1k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3334|  11.1k|    {
 3335|  11.1k|        return m_iterator == m_sentinel;
 3336|  11.1k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3175|  20.2k|    {
 3176|  20.2k|        return static_cast<D&>(*this);
 3177|  20.2k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  9.10k|    {
 2720|  9.10k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  9.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  9.10k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  9.10k|    {
 2701|  9.10k|        return decay_copy(t.begin());
 2702|  9.10k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|  1.21k|    {
 1426|  1.21k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.21k|    {
  433|  1.21k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1832|    106|    {
 1833|    106|        return detail::transform_error_impl(std::move(*this),
 1834|    106|                                            std::forward<F>(f));
 1835|    106|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1318|    106|{
 1319|    106|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    106|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    106|        if (SCN_LIKELY(exp.has_value())) {
 1322|    106|            return result(*std::forward<Exp>(exp));
 1323|    106|        }
 1324|       |
 1325|    106|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    106|        return result(unexpect, monostate{});
 1327|    106|    }
 1328|    106|    else {
 1329|    106|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    106|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    106|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 106, False: 0]
  |  |  ------------------
  ------------------
 1331|    106|                   ? result(*std::forward<Exp>(exp))
 1332|    106|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    106|    }
 1336|    106|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1425|    106|    {
 1426|    106|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|    106|    {
  433|    106|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    106|    {
 1173|    106|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|    106|    {
 1594|    106|        return has_value();
 1595|    106|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|    212|    {
  481|    212|        return m_has_value;
  482|    212|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1658|    106|    {
 1659|    106|        return std::move(value());
 1660|    106|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1622|    106|    {
 1623|    106|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    106|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    106|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    106|        return this->get_value();
 1625|    106|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    106|    {
  447|    106|        return m_value;
  448|    106|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1818|    212|    {
 1819|    212|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|    212|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1318|    212|{
 1319|    212|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    212|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    212|        if (SCN_LIKELY(exp.has_value())) {
 1322|    212|            return result(*std::forward<Exp>(exp));
 1323|    212|        }
 1324|       |
 1325|    212|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    212|        return result(unexpect, monostate{});
 1327|    212|    }
 1328|    212|    else {
 1329|    212|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    212|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    212|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 212]
  |  |  ------------------
  ------------------
 1331|    212|                   ? result(*std::forward<Exp>(exp))
 1332|    212|                   : result(unexpect,
 1333|    212|                            trivial_invoke(std::forward<F>(f),
 1334|    212|                                           std::forward<Exp>(exp).error()));
 1335|    212|    }
 1336|    212|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|      4|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|    102|    {
 2720|    102|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|    102|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|    102|    {
 2701|    102|        return decay_copy(t.begin());
 2702|    102|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|     94|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|    854|    {
 1833|    854|        return detail::transform_error_impl(std::move(*this),
 1834|    854|                                            std::forward<F>(f));
 1835|    854|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1318|    854|{
 1319|    854|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    854|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    854|        if (SCN_LIKELY(exp.has_value())) {
 1322|    854|            return result(*std::forward<Exp>(exp));
 1323|    854|        }
 1324|       |
 1325|    854|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    854|        return result(unexpect, monostate{});
 1327|    854|    }
 1328|    854|    else {
 1329|    854|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    854|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    854|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 854, False: 0]
  |  |  ------------------
  ------------------
 1331|    854|                   ? result(*std::forward<Exp>(exp))
 1332|    854|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    854|    }
 1336|    854|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|    854|    {
 1426|    854|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|    854|    {
  433|    854|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    854|    {
 1173|    854|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|    854|    {
 1594|    854|        return has_value();
 1595|    854|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.70k|    {
  481|  1.70k|        return m_has_value;
  482|  1.70k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|    854|    {
 1659|    854|        return std::move(value());
 1660|    854|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|    854|    {
 1623|    854|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    854|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    854|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    854|        return this->get_value();
 1625|    854|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    854|    {
  447|    854|        return m_value;
  448|    854|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1818|    860|    {
 1819|    860|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|    860|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1318|    860|{
 1319|    860|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    860|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    860|        if (SCN_LIKELY(exp.has_value())) {
 1322|    860|            return result(*std::forward<Exp>(exp));
 1323|    860|        }
 1324|       |
 1325|    860|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    860|        return result(unexpect, monostate{});
 1327|    860|    }
 1328|    860|    else {
 1329|    860|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    860|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    860|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 860]
  |  |  ------------------
  ------------------
 1331|    860|                   ? result(*std::forward<Exp>(exp))
 1332|    860|                   : result(unexpect,
 1333|    860|                            trivial_invoke(std::forward<F>(f),
 1334|    860|                                           std::forward<Exp>(exp).error()));
 1335|    860|    }
 1336|    860|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3643|    860|    {
 3644|    860|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|  2.51k|    {
 1649|  2.51k|        return value();
 1650|  2.51k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6247|  2.21k|    {
 6248|  2.21k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6249|  2.21k|                charset_string_size};
 6250|  2.21k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3649|  1.72k|{
 3650|  1.72k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.72k|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5461|  77.8k|    {
 5462|  77.8k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 77.8k]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|  77.8k|        return static_cast<std::size_t>(m_desc &
 5467|  77.8k|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|  77.8k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5486|   135k|    {
 5487|   135k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|   135k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5429|  57.9k|    {
 5430|  57.9k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 57.9k]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|  57.9k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 57.8k]
  |  |  ------------------
  ------------------
 5438|     68|            return {};
 5439|     68|        }
 5440|       |
 5441|  57.8k|        const auto t = type(id);
 5442|  57.8k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  57.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.44k, False: 56.4k]
  |  |  ------------------
  ------------------
 5443|  1.44k|            return {};
 5444|  1.44k|        }
 5445|       |
 5446|  56.4k|        basic_scan_arg<Context> arg;
 5447|  56.4k|        arg.m_type = t;
 5448|  56.4k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 56.4k, False: 0]
  ------------------
 5449|  56.4k|            arg.m_value.ref_value = m_builtin_values[id];
 5450|  56.4k|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|  56.4k|        return arg;
 5455|  57.8k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5236|  57.9k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4893|  77.3k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5495|  57.8k|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|  57.8k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|  57.8k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|  57.8k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|  57.8k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5490|  56.4k|    {
 5491|  56.4k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|  56.4k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5242|   112k|    {
 5243|   112k|        return m_type != detail::arg_type::none_type;
 5244|   112k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  5.86k|{
 8413|  5.86k|#define SCN_VISIT(Type)                                         \
 8414|  5.86k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  5.86k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  5.86k|    }                                                           \
 8417|  5.86k|    else {                                                      \
 8418|  5.86k|        return vis(monostate_val);                              \
 8419|  5.86k|    }
 8420|       |
 8421|  5.86k|    monostate monostate_val{};
 8422|       |
 8423|  5.86k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 5.86k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 5.86k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|    652|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 652, False: 5.21k]
  ------------------
 8429|    652|            SCN_VISIT(int);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 5.86k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 5.86k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 5.86k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 5.86k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|    652|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 652, False: 5.21k]
  ------------------
 8439|    652|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 5.86k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 5.86k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|    652|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 652, False: 5.21k]
  ------------------
 8445|    652|            SCN_VISIT(void*);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8446|    652|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 652, False: 5.21k]
  ------------------
 8447|    652|            SCN_VISIT(bool);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8448|    652|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 652, False: 5.21k]
  ------------------
 8449|    652|            SCN_VISIT(char);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 5.86k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 5.86k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 5.86k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|    652|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 652, False: 5.21k]
  ------------------
 8457|    652|            SCN_VISIT(double);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 5.86k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|    652|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 652, False: 5.21k]
  ------------------
 8461|    652|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8462|    652|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 652, False: 5.21k]
  ------------------
 8463|    652|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 5.86k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|    652|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 652, False: 5.21k]
  ------------------
 8467|    652|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 5.86k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 5.86k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 5.86k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 5.86k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 5.86k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  5.86k|            SCN_CLANG_POP
 8491|  5.86k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  1.95k|    {
 1833|  1.95k|        return detail::transform_error_impl(std::move(*this),
 1834|  1.95k|                                            std::forward<F>(f));
 1835|  1.95k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  1.95k|{
 1319|  1.95k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  1.95k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  1.95k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  1.95k|            return result(*std::forward<Exp>(exp));
 1323|  1.95k|        }
 1324|       |
 1325|  1.95k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  1.95k|        return result(unexpect, monostate{});
 1327|  1.95k|    }
 1328|  1.95k|    else {
 1329|  1.95k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  1.95k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.95k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.84k, False: 104]
  |  |  ------------------
  ------------------
 1331|  1.95k|                   ? result(*std::forward<Exp>(exp))
 1332|  1.95k|                   : result(unexpect,
 1333|    104|                            trivial_invoke(std::forward<F>(f),
 1334|    104|                                           std::forward<Exp>(exp).error()));
 1335|  1.95k|    }
 1336|  1.95k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1481|    104|    {
 1482|    104|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1658|  1.84k|    {
 1659|  1.84k|        return std::move(value());
 1660|  1.84k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5540|  77.8k|    {
 5541|  77.8k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8051|  77.8k|    {
 8052|  77.8k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|  77.8k|{
 7040|  77.8k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|  77.8k|    handler.check_args_exhausted();
 7042|  77.8k|    return handler.get_error();
 7043|  77.8k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|  77.8k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|  77.8k|    auto begin = format.data();
 7009|  77.8k|    auto it = begin;
 7010|  77.8k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   247k|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 240k, False: 6.66k]
  ------------------
 7013|   240k|        const auto ch = *it++;
 7014|   240k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 81.5k, False: 159k]
  ------------------
 7015|  81.5k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  81.5k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  81.5k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 70.1k, False: 11.4k]
  ------------------
 7019|  70.1k|                return;
 7020|  70.1k|            }
 7021|  81.5k|        }
 7022|   159k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 2.24k, False: 157k]
  ------------------
 7023|  2.24k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.00k, False: 1.23k]
  |  |  |  Branch (859:45): [True: 284, False: 1.96k]
  |  |  |  Branch (859:45): [True: 724, False: 1.23k]
  |  |  ------------------
  ------------------
 7024|  1.00k|                handler.on_error("Unmatched '}' in format string");
 7025|  1.00k|                return;
 7026|  1.00k|            }
 7027|       |
 7028|  1.23k|            handler.on_literal_text(begin, it);
 7029|  1.23k|            begin = ++it;
 7030|  1.23k|        }
 7031|   240k|    }
 7032|       |
 7033|  6.66k|    handler.on_literal_text(begin, end);
 7034|  6.66k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6937|  81.5k|{
 6938|  81.5k|    struct id_adapter {
 6939|  81.5k|        constexpr void operator()()
 6940|  81.5k|        {
 6941|  81.5k|            arg_id = handler.on_arg_id();
 6942|  81.5k|        }
 6943|  81.5k|        constexpr void operator()(std::size_t id)
 6944|  81.5k|        {
 6945|  81.5k|            arg_id = handler.on_arg_id(id);
 6946|  81.5k|        }
 6947|       |
 6948|  81.5k|        constexpr void on_error(const char* msg)
 6949|  81.5k|        {
 6950|  81.5k|            SCN_UNLIKELY_ATTR
 6951|  81.5k|            handler.on_error(msg);
 6952|  81.5k|        }
 6953|       |
 6954|  81.5k|        Handler& handler;
 6955|  81.5k|        std::size_t arg_id;
 6956|  81.5k|    };
 6957|       |
 6958|  81.5k|    ++begin;
 6959|  81.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  81.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 81.5k]
  |  |  ------------------
  ------------------
 6960|     84|        handler.on_error("Unexpected end of replacement field");
 6961|     84|        return begin;
 6962|     84|    }
 6963|       |
 6964|  81.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 5.88k, False: 75.6k]
  ------------------
 6965|  5.88k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|  5.88k|    }
 6967|  75.6k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 4.70k, False: 70.9k]
  ------------------
 6968|  4.70k|        handler.on_literal_text(begin, begin + 1);
 6969|  4.70k|    }
 6970|  70.9k|    else {
 6971|  70.9k|        auto adapter = id_adapter{handler, 0};
 6972|  70.9k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  70.9k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 70.8k]
  |  |  ------------------
  ------------------
 6975|    110|            handler.on_error("Missing '}' in format string");
 6976|    110|            return begin;
 6977|    110|        }
 6978|       |
 6979|  70.8k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 140, False: 70.6k]
  ------------------
 6980|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|    140|        }
 6982|  70.6k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 51.9k, False: 18.6k]
  ------------------
 6983|  51.9k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 51.9k]
  |  |  ------------------
  ------------------
 6984|     74|                handler.on_error("Unexpected end of replacement field");
 6985|     74|                return begin;
 6986|     74|            }
 6987|  51.9k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  51.9k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.03k, False: 48.8k]
  |  |  |  Branch (859:45): [True: 0, False: 51.9k]
  |  |  |  Branch (859:45): [True: 3.03k, False: 48.8k]
  |  |  ------------------
  ------------------
 6989|  3.03k|                handler.on_error("Unknown format specifier");
 6990|  3.03k|                return begin;
 6991|  3.03k|            }
 6992|  51.9k|        }
 6993|  18.6k|        else {
 6994|  18.6k|            SCN_UNLIKELY_ATTR
 6995|  18.6k|            handler.on_error("Missing '}' in format string");
 6996|  18.6k|            return begin;
 6997|  18.6k|        }
 6998|  70.8k|    }
 6999|  59.6k|    return begin + 1;
 7000|  81.5k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8034|  57.9k|    {
 8035|  57.9k|        return m_args.get(id);
 8036|  57.9k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8039|  6.02k|    {
 8040|  6.02k|        return m_args;
 8041|  6.02k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8044|  54.5k|    {
 8045|  54.5k|        return m_locale;
 8046|  54.5k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5561|  55.1k|    {
 5562|  55.1k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  55.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 55.0k]
  |  |  ------------------
  ------------------
 5563|     42|            on_error(
 5564|     42|                "Cannot switch from manual to automatic argument indexing");
 5565|     42|            return 0;
 5566|     42|        }
 5567|       |
 5568|  55.0k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|  55.0k|        do_check_arg_id(id);
 5570|  55.0k|        return id;
 5571|  55.1k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5585|    112|    {
 5586|    112|        return detail::handle_error(
 5587|    112|            scan_error{scan_error::invalid_format_string, msg});
 5588|    112|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6049|  57.9k|{
 6050|  57.9k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|  57.9k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|  57.9k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  70.9k|{
 6439|  70.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  70.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  70.9k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 70.9k, False: 0]
  |  Branch (6440:26): [True: 21.7k, False: 49.2k]
  ------------------
 6441|  21.7k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  21.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|  21.7k|    }
 6443|       |
 6444|  49.2k|    handler();
 6445|  49.2k|    return begin;
 6446|  70.9k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6408|  21.7k|{
 6409|  21.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  21.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6410|       |
 6411|  21.7k|    CharT c = *begin;
 6412|  21.7k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6412:9): [True: 18.4k, False: 3.30k]
  |  Branch (6412:27): [True: 196, False: 3.10k]
  ------------------
 6413|  18.6k|        handler.on_error("Invalid argument ID");
 6414|  18.6k|        return begin;
 6415|  18.6k|    }
 6416|       |
 6417|  3.10k|    int idx = 0;
 6418|  3.10k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6418:9): [True: 336, False: 2.77k]
  ------------------
 6419|    336|        idx = parse_simple_int(begin, end);
 6420|    336|    }
 6421|  2.77k|    else {
 6422|  2.77k|        ++begin;
 6423|  2.77k|    }
 6424|       |
 6425|  3.10k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6425:9): [True: 110, False: 2.99k]
  |  Branch (6425:26): [True: 2.85k, False: 140]
  |  Branch (6425:50): [True: 84, False: 2.77k]
  ------------------
 6426|    194|        handler.on_error("Invalid argument ID");
 6427|    194|        return begin;
 6428|    194|    }
 6429|  2.91k|    handler(idx);
 6430|       |
 6431|  2.91k|    return begin;
 6432|  3.10k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6949|  18.7k|        {
 6950|  18.7k|            SCN_UNLIKELY_ATTR
 6951|  18.7k|            handler.on_error(msg);
 6952|  18.7k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6387|  10.9k|{
 6388|  10.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6389|  10.9k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6390|       |
 6391|  10.9k|    unsigned long long value = 0;
 6392|  45.8k|    do {
 6393|  45.8k|        value *= 10;
 6394|  45.8k|        value += static_cast<unsigned long long>(*begin - '0');
 6395|  45.8k|        if (value >
  ------------------
  |  Branch (6395:13): [True: 116, False: 45.7k]
  ------------------
 6396|  45.8k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6397|    116|            return -1;
 6398|    116|        }
 6399|  45.7k|        ++begin;
 6400|  45.7k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6400:14): [True: 45.4k, False: 282]
  |  Branch (6400:30): [True: 42.7k, False: 2.77k]
  |  Branch (6400:47): [True: 34.9k, False: 7.73k]
  ------------------
 6401|  10.7k|    return static_cast<int>(value);
 6402|  10.9k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6944|  2.91k|        {
 6945|  2.91k|            arg_id = handler.on_arg_id(id);
 6946|  2.91k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5574|  2.91k|    {
 5575|  2.91k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  2.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 2.84k]
  |  |  ------------------
  ------------------
 5576|     70|            on_error(
 5577|     70|                "Cannot switch from manual to automatic argument indexing");
 5578|     70|            return;
 5579|     70|        }
 5580|  2.84k|        m_next_arg_id = -1;
 5581|  2.84k|        do_check_arg_id(id);
 5582|  2.84k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  49.2k|        {
 6941|  49.2k|            arg_id = handler.on_arg_id();
 6942|  49.2k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5247|   103k|    {
 5248|   103k|        return m_type;
 5249|   103k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5556|  48.5k|    {
 5557|  48.5k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|  48.5k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5545|   100k|    {
 5546|   100k|        return m_format.data();
 5547|   100k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|  51.9k|    {
 7118|  51.9k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  51.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  51.9k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6853|  51.9k|{
 6854|  51.9k|    auto do_presentation = [&]() -> const CharT* {
 6855|  51.9k|        if (*begin == CharT{'['}) {
 6856|  51.9k|            auto set = parse_presentation_set(begin, end, handler);
 6857|  51.9k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  51.9k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  51.9k|                return begin;
 6862|  51.9k|            }
 6863|  51.9k|            handler.on_character_set_string(set);
 6864|  51.9k|            return begin;
 6865|  51.9k|        }
 6866|  51.9k|        if (*begin == CharT{'/'}) {
 6867|  51.9k|            return parse_presentation_regex(begin, end, handler);
 6868|  51.9k|        }
 6869|  51.9k|        presentation_type type = parse_presentation_type(*begin++);
 6870|  51.9k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  51.9k|            handler.on_error("Invalid type specifier in format string");
 6872|  51.9k|            return begin;
 6873|  51.9k|        }
 6874|  51.9k|        handler.on_type(type);
 6875|  51.9k|        return begin;
 6876|  51.9k|    };
 6877|       |
 6878|  51.9k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 50.8k, False: 1.10k]
  |  Branch (6878:28): [True: 2.21k, False: 48.6k]
  ------------------
 6879|  51.9k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 932, False: 1.27k]
  |  Branch (6879:36): [True: 880, False: 52]
  ------------------
 6880|    880|        return do_presentation();
 6881|    880|    }
 6882|       |
 6883|  51.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 51.0k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  51.0k|    begin = parse_align(begin, end, handler);
 6889|  51.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 50.9k]
  |  |  ------------------
  ------------------
 6890|    120|        handler.on_error("Unexpected end of format string");
 6891|    120|        return begin;
 6892|    120|    }
 6893|       |
 6894|  50.9k|    begin = parse_width(begin, end, handler);
 6895|  50.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 50.7k]
  |  |  ------------------
  ------------------
 6896|    120|        handler.on_error("Unexpected end of format string");
 6897|    120|        return begin;
 6898|    120|    }
 6899|       |
 6900|  50.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 6.87k, False: 43.9k]
  ------------------
 6901|  6.87k|        ++begin;
 6902|  6.87k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 6.84k]
  |  |  ------------------
  ------------------
 6903|     34|            handler.on_error("Unexpected end of format string");
 6904|     34|            return begin;
 6905|     34|        }
 6906|  6.84k|        begin = parse_precision(begin, end, handler);
 6907|  6.84k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 6.76k]
  |  |  ------------------
  ------------------
 6908|     84|            handler.on_error("Unexpected end of format string");
 6909|     84|            return begin;
 6910|     84|        }
 6911|  6.84k|    }
 6912|       |
 6913|  50.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 482, False: 50.1k]
  ------------------
 6914|    482|        handler.on_localized();
 6915|    482|        ++begin;
 6916|    482|    }
 6917|  50.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 50.6k]
  |  |  ------------------
  ------------------
 6918|     52|        handler.on_error("Unexpected end of format string");
 6919|     52|        return begin;
 6920|     52|    }
 6921|       |
 6922|  50.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 50.6k, False: 0]
  |  Branch (6922:25): [True: 46.3k, False: 4.29k]
  ------------------
 6923|  46.3k|        do_presentation();
 6924|  46.3k|    }
 6925|  50.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.98k, False: 48.6k]
  |  |  ------------------
  ------------------
 6926|  1.98k|        handler.on_error("Unexpected end of format string");
 6927|  1.98k|        return begin;
 6928|  1.98k|    }
 6929|       |
 6930|  48.6k|    return begin;
 6931|  50.6k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6502|  2.21k|{
 6503|  2.21k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 878, False: 1.33k]
  |  Branch (6503:33): [True: 808, False: 70]
  ------------------
 6504|  2.21k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 232, False: 1.17k]
  |  Branch (6504:33): [True: 124, False: 108]
  ------------------
 6505|  2.21k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|  47.2k|    auto do_presentation = [&]() -> const CharT* {
 6855|  47.2k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 11.2k, False: 35.9k]
  ------------------
 6856|  11.2k|            auto set = parse_presentation_set(begin, end, handler);
 6857|  11.2k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 834, False: 10.3k]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|    834|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|    834|                return begin;
 6862|    834|            }
 6863|  10.3k|            handler.on_character_set_string(set);
 6864|  10.3k|            return begin;
 6865|  11.2k|        }
 6866|  35.9k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 31.5k, False: 4.41k]
  ------------------
 6867|  31.5k|            return parse_presentation_regex(begin, end, handler);
 6868|  31.5k|        }
 6869|  4.41k|        presentation_type type = parse_presentation_type(*begin++);
 6870|  4.41k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  4.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 600, False: 3.81k]
  |  |  ------------------
  ------------------
 6871|    600|            handler.on_error("Invalid type specifier in format string");
 6872|    600|            return begin;
 6873|    600|        }
 6874|  3.81k|        handler.on_type(type);
 6875|  3.81k|        return begin;
 6876|  4.41k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6692|  11.2k|{
 6693|  11.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6694|  11.2k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6695|       |
 6696|  11.2k|    auto start = begin;
 6697|  11.2k|    ++begin;
 6698|       |
 6699|  11.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 11.1k]
  |  |  ------------------
  ------------------
 6700|       |        // clang-format off
 6701|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6702|       |        // clang-format on
 6703|     42|        return {};
 6704|     42|    }
 6705|  11.1k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6705:9): [True: 1.99k, False: 9.18k]
  ------------------
 6706|  1.99k|        handler.on_charset_inverted();
 6707|  1.99k|        ++begin;
 6708|  1.99k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.96k]
  |  |  ------------------
  ------------------
 6709|       |            // clang-format off
 6710|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6711|       |            // clang-format on
 6712|     34|            return {};
 6713|     34|        }
 6714|  1.96k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6714:13): [True: 54, False: 1.90k]
  ------------------
 6715|     54|            handler.on_charset_single(char32_t{']'});
 6716|     54|            ++begin;
 6717|     54|        }
 6718|  1.96k|    }
 6719|  9.18k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6719:14): [True: 34, False: 9.15k]
  ------------------
 6720|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6721|     34|    }
 6722|       |
 6723|  2.00M|    while (begin != end) {
  ------------------
  |  Branch (6723:12): [True: 2.00M, False: 490]
  ------------------
 6724|  2.00M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 234, False: 2.00M]
  |  |  ------------------
  ------------------
 6725|    234|            break;
 6726|    234|        }
 6727|       |
 6728|  2.00M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 10.3k, False: 1.99M]
  ------------------
 6729|  10.3k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6730|  10.3k|        }
 6731|       |
 6732|  1.99M|        parse_presentation_set_literal(begin, end, handler);
 6733|  1.99M|    }
 6734|       |
 6735|    724|    SCN_UNLIKELY_ATTR
 6736|    724|    handler.on_error("Invalid [character set] specifier in format string");
 6737|    724|    return {};
 6738|  11.1k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6656|  1.99M|{
 6657|  1.99M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6658|       |
 6659|  1.99M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6660|  1.99M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  1.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 1.99M]
  |  |  ------------------
  ------------------
 6661|    114|        return;
 6662|    114|    }
 6663|       |
 6664|  1.99M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6664:9): [True: 1.99M, False: 194]
  |  Branch (6664:25): [True: 10.5k, False: 1.98M]
  |  Branch (6664:49): [True: 10.5k, False: 34]
  ------------------
 6665|  1.99M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6665:9): [True: 10.2k, False: 322]
  ------------------
 6666|  10.2k|        ++begin;
 6667|       |
 6668|  10.2k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6669|  10.2k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 10.1k]
  |  |  ------------------
  ------------------
 6670|     70|            return;
 6671|     70|        }
 6672|       |
 6673|  10.1k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 10.1k]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|     42|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6676|       |            // clang-format on
 6677|     42|            return;
 6678|     42|        }
 6679|       |
 6680|  10.1k|        handler.on_charset_range(cp_first, cp_second + 1);
 6681|  10.1k|        return;
 6682|  10.1k|    }
 6683|       |
 6684|  1.98M|    handler.on_charset_single(cp_first);
 6685|  1.98M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6632|  2.00M|{
 6633|  2.00M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6634|       |
 6635|  2.00M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6636|  2.00M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  4.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116, False: 2.00M]
  |  |  |  Branch (859:45): [True: 72, False: 2.00M]
  |  |  |  Branch (859:45): [True: 44, False: 2.00M]
  |  |  ------------------
  ------------------
 6637|    116|        handler.on_error("Invalid encoding in format string");
 6638|    116|        return invalid_code_point;
 6639|    116|    }
 6640|       |
 6641|  2.00M|    const auto cp =
 6642|  2.00M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6643|  2.00M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 2.00M]
  |  |  ------------------
  ------------------
 6644|     68|        handler.on_error("Invalid encoding in format string");
 6645|     68|        return invalid_code_point;
 6646|     68|    }
 6647|       |
 6648|  2.00M|    begin += len;
 6649|  2.00M|    return cp;
 6650|  2.00M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6341|  10.3k|    {
 6342|  10.3k|        m_specs.charset_string_data = fmt.data();
 6343|  10.3k|        m_specs.charset_string_size = fmt.size();
 6344|  10.3k|        on_type(presentation_type::string_set);
 6345|  10.3k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6744|  31.5k|{
 6745|  31.5k|#if !SCN_DISABLE_REGEX
 6746|  31.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  31.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6747|  31.5k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  31.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6748|       |
 6749|  31.5k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  63.1k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6749:19): [Folded - Ignored]
  |  Branch (6749:19): [Folded - Ignored]
  ------------------
 6750|  31.5k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6750:19): [Folded - Ignored]
  ------------------
 6751|  31.5k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6752|  31.5k|        return begin;
 6753|  31.5k|    }
 6754|       |
 6755|  31.5k|    auto start = begin;
 6756|  31.5k|    ++begin;
 6757|       |
 6758|  31.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 31.5k]
  |  |  ------------------
  ------------------
 6759|     34|        handler.on_error("Unexpected end of regex in format string");
 6760|     34|        return begin;
 6761|     34|    }
 6762|       |
 6763|  31.5k|    handler.on_type(presentation_type::regex);
 6764|  7.76M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6764:12): [True: 7.76M, False: 178]
  ------------------
 6765|  7.76M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6765:13): [True: 52.0k, False: 7.71M]
  ------------------
 6766|  52.0k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6766:17): [True: 31.3k, False: 20.6k]
  ------------------
 6767|  31.3k|                break;
 6768|  31.3k|            }
 6769|  20.6k|            else {
 6770|  20.6k|                handler.on_type(presentation_type::regex_escaped);
 6771|  20.6k|            }
 6772|  52.0k|        }
 6773|  7.76M|    }
 6774|  31.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 178, False: 31.3k]
  |  |  ------------------
  ------------------
 6775|    178|        handler.on_error("Unexpected end of regex in format string");
 6776|    178|        return begin;
 6777|    178|    }
 6778|       |
 6779|  31.3k|    auto regex_end = begin;
 6780|  31.3k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6781|  31.3k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  31.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 31.3k]
  |  |  ------------------
  ------------------
 6782|     34|        handler.on_error("Invalid (empty) regex in format string");
 6783|     34|        return begin;
 6784|     34|    }
 6785|  31.3k|    handler.on_regex_pattern(regex_pattern);
 6786|  31.3k|    ++begin;
 6787|       |
 6788|  31.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  31.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 31.2k]
  |  |  ------------------
  ------------------
 6789|     34|        handler.on_error("Unexpected end of regex in format string");
 6790|     34|        return begin;
 6791|     34|    }
 6792|       |
 6793|  31.2k|    regex_flags flags{regex_flags::none};
 6794|  31.2k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6795|  31.2k|        {{'m', regex_flags::multiline},
 6796|  31.2k|         {'s', regex_flags::singleline},
 6797|  31.2k|         {'i', regex_flags::nocase},
 6798|  31.2k|         {'n', regex_flags::nocapture}}};
 6799|  36.0k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6799:12): [True: 35.9k, False: 58]
  ------------------
 6800|  35.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6800:13): [True: 31.0k, False: 4.87k]
  ------------------
 6801|  31.0k|            break;
 6802|  31.0k|        }
 6803|  4.87k|        bool found_flag = false;
 6804|  12.8k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6804:24): [True: 12.8k, False: 122]
  ------------------
 6805|  12.8k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6805:17): [True: 8.11k, False: 4.75k]
  ------------------
 6806|  8.11k|                continue;
 6807|  8.11k|            }
 6808|  4.75k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6808:17): [True: 34, False: 4.72k]
  ------------------
 6809|     34|                handler.on_error("Flag set multiple times in regex");
 6810|     34|                return begin;
 6811|     34|            }
 6812|  4.72k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6813|  4.72k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6813:17): [True: 48, False: 4.67k]
  ------------------
 6814|       |                // clang-format off
 6815|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6816|       |                // clang-format on
 6817|     48|            }
 6818|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6819|       |            if (*begin == CharT{'m'}) {
 6820|       |                // clang-format off
 6821|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6822|       |                // clang-format on
 6823|       |            }
 6824|       |#endif
 6825|  4.72k|#endif
 6826|  4.72k|            flags |= flag.second;
 6827|  4.72k|            found_flag = true;
 6828|  4.72k|            break;
 6829|  4.75k|        }
 6830|  4.84k|        if (!found_flag) {
  ------------------
  |  Branch (6830:13): [True: 122, False: 4.72k]
  ------------------
 6831|    122|            handler.on_error("Invalid flag in regex");
 6832|    122|            return begin;
 6833|    122|        }
 6834|  4.84k|    }
 6835|  31.1k|    handler.on_regex_flags(flags);
 6836|       |
 6837|  31.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 31.0k]
  |  |  ------------------
  ------------------
 6838|     58|        handler.on_error("Unexpected end of regex in format string");
 6839|     58|        return begin;
 6840|     58|    }
 6841|       |
 6842|  31.0k|    return begin;
 6843|       |#else
 6844|       |    handler.on_error("Regular expression support is disabled");
 6845|       |    return {};
 6846|       |#endif
 6847|  31.1k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6349|  31.3k|    {
 6350|  31.3k|        m_specs.charset_string_data = pattern.data();
 6351|  31.3k|        m_specs.charset_string_size = pattern.size();
 6352|  31.3k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6450|  4.41k|{
 6451|  4.41k|    switch (type) {
 6452|    142|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 142, False: 4.27k]
  ------------------
 6453|    194|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 52, False: 4.36k]
  ------------------
 6454|    194|            return presentation_type::int_binary;
 6455|     92|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 92, False: 4.32k]
  ------------------
 6456|     92|            return presentation_type::int_decimal;
 6457|    178|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 178, False: 4.23k]
  ------------------
 6458|    178|            return presentation_type::int_generic;
 6459|     70|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 70, False: 4.34k]
  ------------------
 6460|     70|            return presentation_type::int_unsigned_decimal;
 6461|    178|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 178, False: 4.23k]
  ------------------
 6462|    178|            return presentation_type::int_octal;
 6463|    150|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 150, False: 4.26k]
  ------------------
 6464|    184|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 34, False: 4.37k]
  ------------------
 6465|    184|            return presentation_type::int_hex;
 6466|     34|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 34, False: 4.37k]
  ------------------
 6467|     68|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 34, False: 4.37k]
  ------------------
 6468|     68|            return presentation_type::int_arbitrary_base;
 6469|    112|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 112, False: 4.30k]
  ------------------
 6470|    218|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 106, False: 4.30k]
  ------------------
 6471|    218|            return presentation_type::float_hex;
 6472|     70|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 70, False: 4.34k]
  ------------------
 6473|    122|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 52, False: 4.36k]
  ------------------
 6474|    122|            return presentation_type::float_scientific;
 6475|    214|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 214, False: 4.19k]
  ------------------
 6476|    320|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 106, False: 4.30k]
  ------------------
 6477|    320|            return presentation_type::float_fixed;
 6478|     60|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 60, False: 4.35k]
  ------------------
 6479|    118|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 58, False: 4.35k]
  ------------------
 6480|    118|            return presentation_type::float_general;
 6481|  1.58k|        case 's':
  ------------------
  |  Branch (6481:9): [True: 1.58k, False: 2.83k]
  ------------------
 6482|  1.58k|            return presentation_type::string;
 6483|    376|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 376, False: 4.03k]
  ------------------
 6484|    376|            return presentation_type::character;
 6485|     34|        case '?':
  ------------------
  |  Branch (6485:9): [True: 34, False: 4.37k]
  ------------------
 6486|     34|            return presentation_type::escaped_character;
 6487|     78|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 78, False: 4.33k]
  ------------------
 6488|     78|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 4.41k]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 4.41k]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|    600|        default:
  ------------------
  |  Branch (6495:9): [True: 600, False: 3.81k]
  ------------------
 6496|    600|            return presentation_type::none;
 6497|  4.41k|    }
 6498|  4.41k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6527|  51.0k|{
 6528|  51.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  51.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  51.0k|    auto check_align = [](wchar_t ch) {
 6531|  51.0k|        switch (ch) {
 6532|  51.0k|            case L'<':
 6533|  51.0k|                return align_type::left;
 6534|  51.0k|            case L'>':
 6535|  51.0k|                return align_type::right;
 6536|  51.0k|            case L'^':
 6537|  51.0k|                return align_type::center;
 6538|  51.0k|            default:
 6539|  51.0k|                return align_type::none;
 6540|  51.0k|        }
 6541|  51.0k|    };
 6542|       |
 6543|  51.0k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  51.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 50.9k]
  |  |  |  Branch (859:45): [True: 38, False: 51.0k]
  |  |  |  Branch (859:45): [True: 4, False: 50.9k]
  |  |  ------------------
  ------------------
 6545|  51.0k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|     42|        handler.on_error("Invalid encoding in fill character");
 6547|     42|        return begin;
 6548|     42|    }
 6549|       |
 6550|  50.9k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  50.9k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  50.9k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  50.9k|    const auto begin_before_fill = begin;
 6555|  50.9k|    begin += potential_fill_len;
 6556|       |
 6557|  50.9k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 1.06k, False: 49.9k]
  ------------------
 6558|  1.06k|        return begin_before_fill;
 6559|  1.06k|    }
 6560|       |
 6561|  49.9k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  49.9k|    const auto begin_after_fill = begin;
 6563|  49.9k|    ++begin;
 6564|       |
 6565|  49.9k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 49.2k, False: 698]
  ------------------
 6566|  49.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54, False: 49.1k]
  |  |  ------------------
  ------------------
 6567|     54|            handler.on_error("Invalid fill character '{' in format string");
 6568|     54|            return begin;
 6569|     54|        }
 6570|  49.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 8.76k, False: 40.4k]
  ------------------
 6571|  8.76k|            return begin_before_fill;
 6572|  8.76k|        }
 6573|  49.1k|    }
 6574|       |
 6575|  41.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 37.0k, False: 4.09k]
  ------------------
 6576|  37.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 3.04k, False: 33.9k]
  ------------------
 6577|  3.04k|            handler.on_align(potential_align_on_fill);
 6578|  3.04k|            return begin_after_fill;
 6579|  3.04k|        }
 6580|  33.9k|        return begin_before_fill;
 6581|  37.0k|    }
 6582|       |
 6583|  4.09k|    handler.on_fill(potential_fill);
 6584|  4.09k|    handler.on_align(potential_align_after_fill);
 6585|  4.09k|    return begin;
 6586|  41.1k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6509|  51.0k|{
 6510|  51.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  51.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|  51.0k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|  51.0k|        return 1;
 6513|  51.0k|    }
 6514|  51.0k|    else {
 6515|  51.0k|        const auto lengths =
 6516|  51.0k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|  51.0k|            "\3\4";
 6518|  51.0k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|  51.0k|        return len;
 6520|  51.0k|    }
 6521|  51.0k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|   100k|    auto check_align = [](wchar_t ch) {
 6531|   100k|        switch (ch) {
 6532|    942|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 942, False: 99.9k]
  ------------------
 6533|    942|                return align_type::left;
 6534|  1.49k|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 1.49k, False: 99.4k]
  ------------------
 6535|  1.49k|                return align_type::right;
 6536|  5.90k|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 5.90k, False: 95.0k]
  ------------------
 6537|  5.90k|                return align_type::center;
 6538|  92.5k|            default:
  ------------------
  |  Branch (6538:13): [True: 92.5k, False: 8.34k]
  ------------------
 6539|  92.5k|                return align_type::none;
 6540|   100k|        }
 6541|   100k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6263|  4.09k|    {
 6264|  4.09k|        m_specs.fill = fill;
 6265|  4.09k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6144|  4.09k|    {
 6145|  4.09k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  4.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6146|  4.09k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  4.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6147|  4.09k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6147:23): [Folded - Ignored]
  ------------------
 6148|  9.35k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6148:32): [True: 5.26k, False: 4.09k]
  ------------------
 6149|  5.26k|                SCN_GCC_PUSH
 6150|  5.26k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6151|  5.26k|                m_data[i] = s[i];
 6152|  5.26k|                SCN_GCC_POP
 6153|  5.26k|            }
 6154|  4.09k|            m_size = static_cast<unsigned char>(s.size());
 6155|  4.09k|        }
 6156|  4.09k|        else if constexpr (sizeof(CharT) == 2) {
 6157|  4.09k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6158|  4.09k|            m_data[1] =
 6159|  4.09k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6160|  4.09k|            if (s.size() == 1) {
 6161|  4.09k|                return;
 6162|  4.09k|            }
 6163|  4.09k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6164|  4.09k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6165|  4.09k|        }
 6166|  4.09k|        else {
 6167|  4.09k|            const auto front = static_cast<unsigned>(s.front());
 6168|  4.09k|            m_data[0] = static_cast<char>(front);
 6169|  4.09k|            m_data[1] = static_cast<char>(front >> 8);
 6170|  4.09k|            m_data[2] = static_cast<char>(front >> 16);
 6171|  4.09k|            m_data[3] = static_cast<char>(front >> 24);
 6172|  4.09k|        }
 6173|  4.09k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6592|  50.9k|{
 6593|  50.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  50.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  50.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 14.8k, False: 36.0k]
  |  Branch (6595:33): [True: 3.85k, False: 11.0k]
  ------------------
 6596|  3.85k|        int width = parse_simple_int(begin, end);
 6597|  3.85k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  3.85k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.82k, False: 34]
  |  |  ------------------
  ------------------
 6598|  3.82k|            handler.on_width(width);
 6599|  3.82k|        }
 6600|     34|        else {
 6601|     34|            handler.on_error("Invalid field width");
 6602|     34|            return begin;
 6603|     34|        }
 6604|  3.85k|    }
 6605|  50.8k|    return begin;
 6606|  50.9k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6612|  6.84k|{
 6613|  6.84k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6614|       |
 6615|  6.84k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6615:9): [True: 6.79k, False: 54]
  |  Branch (6615:33): [True: 6.71k, False: 76]
  ------------------
 6616|  6.71k|        int prec = parse_simple_int(begin, end);
 6617|  6.71k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  6.71k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.66k, False: 48]
  |  |  ------------------
  ------------------
 6618|  6.66k|            handler.on_precision(prec);
 6619|  6.66k|        }
 6620|     48|        else {
 6621|     48|            handler.on_error("Invalid field precision");
 6622|     48|            return begin;
 6623|     48|        }
 6624|  6.71k|    }
 6625|  6.79k|    return begin;
 6626|  6.84k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7122|    482|    {
 7123|    482|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|    482|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 434, False: 48]
  ------------------
 7125|    482|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 386, False: 48]
  ------------------
 7126|    482|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 338, False: 48]
  ------------------
 7127|    482|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 290, False: 48]
  ------------------
 7128|    290|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|    290|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|    290|        }
 7133|       |
 7134|    192|        Handler::on_localized();
 7135|    192|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  48.4k|{
 8413|  48.4k|#define SCN_VISIT(Type)                                         \
 8414|  48.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  48.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  48.4k|    }                                                           \
 8417|  48.4k|    else {                                                      \
 8418|  48.4k|        return vis(monostate_val);                              \
 8419|  48.4k|    }
 8420|       |
 8421|  48.4k|    monostate monostate_val{};
 8422|       |
 8423|  48.4k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 48.4k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 48.4k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|  5.40k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 5.40k, False: 43.0k]
  ------------------
 8429|  5.40k|            SCN_VISIT(int);
  ------------------
  |  | 8414|  5.40k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.40k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.40k|    }                                                           \
  |  | 8417|  5.40k|    else {                                                      \
  |  | 8418|  5.40k|        return vis(monostate_val);                              \
  |  | 8419|  5.40k|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 48.4k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 48.4k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 48.4k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 48.4k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|  5.40k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 5.40k, False: 43.0k]
  ------------------
 8439|  5.40k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|  5.40k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.40k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.40k|    }                                                           \
  |  | 8417|  5.40k|    else {                                                      \
  |  | 8418|  5.40k|        return vis(monostate_val);                              \
  |  | 8419|  5.40k|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 48.4k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 48.4k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|  5.36k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 5.36k, False: 43.0k]
  ------------------
 8445|  5.36k|            SCN_VISIT(void*);
  ------------------
  |  | 8414|  5.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.36k|    }                                                           \
  |  | 8417|  5.36k|    else {                                                      \
  |  | 8418|  5.36k|        return vis(monostate_val);                              \
  |  | 8419|  5.36k|    }
  ------------------
 8446|  5.40k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 5.40k, False: 43.0k]
  ------------------
 8447|  5.40k|            SCN_VISIT(bool);
  ------------------
  |  | 8414|  5.40k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.40k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.40k|    }                                                           \
  |  | 8417|  5.40k|    else {                                                      \
  |  | 8418|  5.40k|        return vis(monostate_val);                              \
  |  | 8419|  5.40k|    }
  ------------------
 8448|  5.36k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 5.36k, False: 43.0k]
  ------------------
 8449|  5.36k|            SCN_VISIT(char);
  ------------------
  |  | 8414|  5.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.36k|    }                                                           \
  |  | 8417|  5.36k|    else {                                                      \
  |  | 8418|  5.36k|        return vis(monostate_val);                              \
  |  | 8419|  5.36k|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 48.4k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 48.4k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 48.4k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|  5.40k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 5.40k, False: 43.0k]
  ------------------
 8457|  5.40k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  5.40k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.40k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.40k|    }                                                           \
  |  | 8417|  5.40k|    else {                                                      \
  |  | 8418|  5.40k|        return vis(monostate_val);                              \
  |  | 8419|  5.40k|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 48.4k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|  5.36k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 5.36k, False: 43.0k]
  ------------------
 8461|  5.36k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|  5.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.36k|    }                                                           \
  |  | 8417|  5.36k|    else {                                                      \
  |  | 8418|  5.36k|        return vis(monostate_val);                              \
  |  | 8419|  5.36k|    }
  ------------------
 8462|  5.36k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 5.36k, False: 43.0k]
  ------------------
 8463|  5.36k|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|  5.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.36k|    }                                                           \
  |  | 8417|  5.36k|    else {                                                      \
  |  | 8418|  5.36k|        return vis(monostate_val);                              \
  |  | 8419|  5.36k|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 48.4k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|  5.36k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 5.36k, False: 43.0k]
  ------------------
 8467|  5.36k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|  5.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.36k|    }                                                           \
  |  | 8417|  5.36k|    else {                                                      \
  |  | 8418|  5.36k|        return vis(monostate_val);                              \
  |  | 8419|  5.36k|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 48.4k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 48.4k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 48.4k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 48.4k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 48.4k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  48.4k|            SCN_CLANG_POP
 8491|  48.4k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5461|   155k|    {
 5462|   155k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|   155k|        return static_cast<std::size_t>(m_desc &
 5467|   155k|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|   155k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5486|   175k|    {
 5487|   175k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|   175k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5429|  19.3k|    {
 5430|  19.3k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|  19.3k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90, False: 19.2k]
  |  |  ------------------
  ------------------
 5438|     90|            return {};
 5439|     90|        }
 5440|       |
 5441|  19.2k|        const auto t = type(id);
 5442|  19.2k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  19.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.23k, False: 18.0k]
  |  |  ------------------
  ------------------
 5443|  1.23k|            return {};
 5444|  1.23k|        }
 5445|       |
 5446|  18.0k|        basic_scan_arg<Context> arg;
 5447|  18.0k|        arg.m_type = t;
 5448|  18.0k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 18.0k, False: 0]
  ------------------
 5449|  18.0k|            arg.m_value.ref_value = m_builtin_values[id];
 5450|  18.0k|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|  18.0k|        return arg;
 5455|  19.2k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5236|  19.3k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5495|  19.2k|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|  19.2k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|  19.2k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|  19.2k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|  19.2k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5490|  18.0k|    {
 5491|  18.0k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|  18.0k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5242|  35.6k|    {
 5243|  35.6k|        return m_type != detail::arg_type::none_type;
 5244|  35.6k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  4.53k|{
 8413|  4.53k|#define SCN_VISIT(Type)                                         \
 8414|  4.53k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  4.53k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  4.53k|    }                                                           \
 8417|  4.53k|    else {                                                      \
 8418|  4.53k|        return vis(monostate_val);                              \
 8419|  4.53k|    }
 8420|       |
 8421|  4.53k|    monostate monostate_val{};
 8422|       |
 8423|  4.53k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 4.53k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 4.53k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|    504|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 504, False: 4.03k]
  ------------------
 8429|    504|            SCN_VISIT(int);
  ------------------
  |  | 8414|    504|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    504|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    504|    }                                                           \
  |  | 8417|    504|    else {                                                      \
  |  | 8418|    504|        return vis(monostate_val);                              \
  |  | 8419|    504|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 4.53k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 4.53k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 4.53k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 4.53k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|    504|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 504, False: 4.03k]
  ------------------
 8439|    504|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|    504|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    504|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    504|    }                                                           \
  |  | 8417|    504|    else {                                                      \
  |  | 8418|    504|        return vis(monostate_val);                              \
  |  | 8419|    504|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 4.53k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 4.53k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|    504|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 504, False: 4.03k]
  ------------------
 8445|    504|            SCN_VISIT(void*);
  ------------------
  |  | 8414|    504|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    504|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    504|    }                                                           \
  |  | 8417|    504|    else {                                                      \
  |  | 8418|    504|        return vis(monostate_val);                              \
  |  | 8419|    504|    }
  ------------------
 8446|    504|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 504, False: 4.03k]
  ------------------
 8447|    504|            SCN_VISIT(bool);
  ------------------
  |  | 8414|    504|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    504|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    504|    }                                                           \
  |  | 8417|    504|    else {                                                      \
  |  | 8418|    504|        return vis(monostate_val);                              \
  |  | 8419|    504|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 4.53k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|    504|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 504, False: 4.03k]
  ------------------
 8451|    504|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|    504|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    504|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    504|    }                                                           \
  |  | 8417|    504|    else {                                                      \
  |  | 8418|    504|        return vis(monostate_val);                              \
  |  | 8419|    504|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 4.53k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 4.53k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|    504|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 504, False: 4.03k]
  ------------------
 8457|    504|            SCN_VISIT(double);
  ------------------
  |  | 8414|    504|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    504|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    504|    }                                                           \
  |  | 8417|    504|    else {                                                      \
  |  | 8418|    504|        return vis(monostate_val);                              \
  |  | 8419|    504|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 4.53k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 4.53k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|    504|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 504, False: 4.03k]
  ------------------
 8463|    504|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|    504|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    504|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    504|    }                                                           \
  |  | 8417|    504|    else {                                                      \
  |  | 8418|    504|        return vis(monostate_val);                              \
  |  | 8419|    504|    }
  ------------------
 8464|    504|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 504, False: 4.03k]
  ------------------
 8465|    504|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|    504|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    504|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    504|    }                                                           \
  |  | 8417|    504|    else {                                                      \
  |  | 8418|    504|        return vis(monostate_val);                              \
  |  | 8419|    504|    }
  ------------------
 8466|    504|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 504, False: 4.03k]
  ------------------
 8467|    504|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|    504|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    504|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    504|    }                                                           \
  |  | 8417|    504|    else {                                                      \
  |  | 8418|    504|        return vis(monostate_val);                              \
  |  | 8419|    504|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 4.53k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 4.53k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 4.53k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 4.53k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 4.53k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  4.53k|            SCN_CLANG_POP
 8491|  4.53k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5540|   155k|    {
 5541|   155k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8051|   155k|    {
 8052|   155k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|   155k|{
 7040|   155k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|   155k|    handler.check_args_exhausted();
 7042|   155k|    return handler.get_error();
 7043|   155k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|   155k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|   155k|    auto begin = format.data();
 7009|   155k|    auto it = begin;
 7010|   155k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   322M|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 322M, False: 59.9k]
  ------------------
 7013|   322M|        const auto ch = *it++;
 7014|   322M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 97.8k, False: 322M]
  ------------------
 7015|  97.8k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  97.8k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  97.8k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 95.2k, False: 2.56k]
  ------------------
 7019|  95.2k|                return;
 7020|  95.2k|            }
 7021|  97.8k|        }
 7022|   322M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 714, False: 322M]
  ------------------
 7023|    714|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  1.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 534, False: 180]
  |  |  |  Branch (859:45): [True: 178, False: 536]
  |  |  |  Branch (859:45): [True: 356, False: 180]
  |  |  ------------------
  ------------------
 7024|    534|                handler.on_error("Unmatched '}' in format string");
 7025|    534|                return;
 7026|    534|            }
 7027|       |
 7028|    180|            handler.on_literal_text(begin, it);
 7029|    180|            begin = ++it;
 7030|    180|        }
 7031|   322M|    }
 7032|       |
 7033|  59.9k|    handler.on_literal_text(begin, end);
 7034|  59.9k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6937|  97.8k|{
 6938|  97.8k|    struct id_adapter {
 6939|  97.8k|        constexpr void operator()()
 6940|  97.8k|        {
 6941|  97.8k|            arg_id = handler.on_arg_id();
 6942|  97.8k|        }
 6943|  97.8k|        constexpr void operator()(std::size_t id)
 6944|  97.8k|        {
 6945|  97.8k|            arg_id = handler.on_arg_id(id);
 6946|  97.8k|        }
 6947|       |
 6948|  97.8k|        constexpr void on_error(const char* msg)
 6949|  97.8k|        {
 6950|  97.8k|            SCN_UNLIKELY_ATTR
 6951|  97.8k|            handler.on_error(msg);
 6952|  97.8k|        }
 6953|       |
 6954|  97.8k|        Handler& handler;
 6955|  97.8k|        std::size_t arg_id;
 6956|  97.8k|    };
 6957|       |
 6958|  97.8k|    ++begin;
 6959|  97.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  97.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 97.7k]
  |  |  ------------------
  ------------------
 6960|    106|        handler.on_error("Unexpected end of replacement field");
 6961|    106|        return begin;
 6962|    106|    }
 6963|       |
 6964|  97.7k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 4.48k, False: 93.2k]
  ------------------
 6965|  4.48k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|  4.48k|    }
 6967|  93.2k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 114, False: 93.1k]
  ------------------
 6968|    114|        handler.on_literal_text(begin, begin + 1);
 6969|    114|    }
 6970|  93.1k|    else {
 6971|  93.1k|        auto adapter = id_adapter{handler, 0};
 6972|  93.1k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  93.1k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  93.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 93.0k]
  |  |  ------------------
  ------------------
 6975|     96|            handler.on_error("Missing '}' in format string");
 6976|     96|            return begin;
 6977|     96|        }
 6978|       |
 6979|  93.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 174, False: 92.8k]
  ------------------
 6980|    174|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|    174|        }
 6982|  92.8k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 14.7k, False: 78.1k]
  ------------------
 6983|  14.7k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 14.6k]
  |  |  ------------------
  ------------------
 6984|     52|                handler.on_error("Unexpected end of replacement field");
 6985|     52|                return begin;
 6986|     52|            }
 6987|  14.6k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  14.6k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.30k, False: 12.3k]
  |  |  |  Branch (859:45): [True: 0, False: 14.6k]
  |  |  |  Branch (859:45): [True: 2.30k, False: 12.3k]
  |  |  ------------------
  ------------------
 6989|  2.30k|                handler.on_error("Unknown format specifier");
 6990|  2.30k|                return begin;
 6991|  2.30k|            }
 6992|  14.6k|        }
 6993|  78.1k|        else {
 6994|  78.1k|            SCN_UNLIKELY_ATTR
 6995|  78.1k|            handler.on_error("Missing '}' in format string");
 6996|  78.1k|            return begin;
 6997|  78.1k|        }
 6998|  93.0k|    }
 6999|  17.1k|    return begin + 1;
 7000|  97.7k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8034|  19.3k|    {
 8035|  19.3k|        return m_args.get(id);
 8036|  19.3k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8039|  4.65k|    {
 8040|  4.65k|        return m_args;
 8041|  4.65k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8044|  16.6k|    {
 8045|  16.6k|        return m_locale;
 8046|  16.6k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5561|  19.0k|    {
 5562|  19.0k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 19.0k]
  |  |  ------------------
  ------------------
 5563|     20|            on_error(
 5564|     20|                "Cannot switch from manual to automatic argument indexing");
 5565|     20|            return 0;
 5566|     20|        }
 5567|       |
 5568|  19.0k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|  19.0k|        do_check_arg_id(id);
 5570|  19.0k|        return id;
 5571|  19.0k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5585|    158|    {
 5586|    158|        return detail::handle_error(
 5587|    158|            scan_error{scan_error::invalid_format_string, msg});
 5588|    158|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6049|  19.2k|{
 6050|  19.2k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|  19.2k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|  19.2k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  93.1k|{
 6439|  93.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  93.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  93.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  93.1k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 93.1k, False: 0]
  |  Branch (6440:26): [True: 78.5k, False: 14.6k]
  ------------------
 6441|  78.5k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  78.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|  78.5k|    }
 6443|       |
 6444|  14.6k|    handler();
 6445|  14.6k|    return begin;
 6446|  93.1k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6408|  78.5k|{
 6409|  78.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  78.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6410|       |
 6411|  78.5k|    CharT c = *begin;
 6412|  78.5k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6412:9): [True: 77.8k, False: 684]
  |  Branch (6412:27): [True: 162, False: 522]
  ------------------
 6413|  78.0k|        handler.on_error("Invalid argument ID");
 6414|  78.0k|        return begin;
 6415|  78.0k|    }
 6416|       |
 6417|    522|    int idx = 0;
 6418|    522|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6418:9): [True: 288, False: 234]
  ------------------
 6419|    288|        idx = parse_simple_int(begin, end);
 6420|    288|    }
 6421|    234|    else {
 6422|    234|        ++begin;
 6423|    234|    }
 6424|       |
 6425|    522|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6425:9): [True: 96, False: 426]
  |  Branch (6425:26): [True: 252, False: 174]
  |  Branch (6425:50): [True: 126, False: 126]
  ------------------
 6426|    222|        handler.on_error("Invalid argument ID");
 6427|    222|        return begin;
 6428|    222|    }
 6429|    300|    handler(idx);
 6430|       |
 6431|    300|    return begin;
 6432|    522|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6949|  78.2k|        {
 6950|  78.2k|            SCN_UNLIKELY_ATTR
 6951|  78.2k|            handler.on_error(msg);
 6952|  78.2k|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6387|  12.4k|{
 6388|  12.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6389|  12.4k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  12.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6390|       |
 6391|  12.4k|    unsigned long long value = 0;
 6392|  13.5k|    do {
 6393|  13.5k|        value *= 10;
 6394|  13.5k|        value += static_cast<unsigned long long>(*begin - '0');
 6395|  13.5k|        if (value >
  ------------------
  |  Branch (6395:13): [True: 0, False: 13.5k]
  ------------------
 6396|  13.5k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6397|      0|            return -1;
 6398|      0|        }
 6399|  13.5k|        ++begin;
 6400|  13.5k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6400:14): [True: 13.3k, False: 264]
  |  Branch (6400:30): [True: 5.21k, False: 8.09k]
  |  Branch (6400:47): [True: 1.08k, False: 4.13k]
  ------------------
 6401|  12.4k|    return static_cast<int>(value);
 6402|  12.4k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6944|    300|        {
 6945|    300|            arg_id = handler.on_arg_id(id);
 6946|    300|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5574|    300|    {
 5575|    300|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    300|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138, False: 162]
  |  |  ------------------
  ------------------
 5576|    138|            on_error(
 5577|    138|                "Cannot switch from manual to automatic argument indexing");
 5578|    138|            return;
 5579|    138|        }
 5580|    162|        m_next_arg_id = -1;
 5581|    162|        do_check_arg_id(id);
 5582|    162|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  14.6k|        {
 6941|  14.6k|            arg_id = handler.on_arg_id();
 6942|  14.6k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5247|  29.3k|    {
 5248|  29.3k|        return m_type;
 5249|  29.3k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5556|  11.9k|    {
 5557|  11.9k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|  11.9k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5545|  26.6k|    {
 5546|  26.6k|        return m_format.data();
 5547|  26.6k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|  14.6k|    {
 7118|  14.6k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  14.6k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6853|  14.6k|{
 6854|  14.6k|    auto do_presentation = [&]() -> const CharT* {
 6855|  14.6k|        if (*begin == CharT{'['}) {
 6856|  14.6k|            auto set = parse_presentation_set(begin, end, handler);
 6857|  14.6k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  14.6k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  14.6k|                return begin;
 6862|  14.6k|            }
 6863|  14.6k|            handler.on_character_set_string(set);
 6864|  14.6k|            return begin;
 6865|  14.6k|        }
 6866|  14.6k|        if (*begin == CharT{'/'}) {
 6867|  14.6k|            return parse_presentation_regex(begin, end, handler);
 6868|  14.6k|        }
 6869|  14.6k|        presentation_type type = parse_presentation_type(*begin++);
 6870|  14.6k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  14.6k|            handler.on_error("Invalid type specifier in format string");
 6872|  14.6k|            return begin;
 6873|  14.6k|        }
 6874|  14.6k|        handler.on_type(type);
 6875|  14.6k|        return begin;
 6876|  14.6k|    };
 6877|       |
 6878|  14.6k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 13.7k, False: 956]
  |  Branch (6878:28): [True: 2.80k, False: 10.9k]
  ------------------
 6879|  14.6k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 344, False: 2.46k]
  |  Branch (6879:36): [True: 250, False: 94]
  ------------------
 6880|    250|        return do_presentation();
 6881|    250|    }
 6882|       |
 6883|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  14.4k|    begin = parse_align(begin, end, handler);
 6889|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108, False: 14.3k]
  |  |  ------------------
  ------------------
 6890|    108|        handler.on_error("Unexpected end of format string");
 6891|    108|        return begin;
 6892|    108|    }
 6893|       |
 6894|  14.3k|    begin = parse_width(begin, end, handler);
 6895|  14.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90, False: 14.2k]
  |  |  ------------------
  ------------------
 6896|     90|        handler.on_error("Unexpected end of format string");
 6897|     90|        return begin;
 6898|     90|    }
 6899|       |
 6900|  14.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 1.76k, False: 12.4k]
  ------------------
 6901|  1.76k|        ++begin;
 6902|  1.76k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 1.72k]
  |  |  ------------------
  ------------------
 6903|     40|            handler.on_error("Unexpected end of format string");
 6904|     40|            return begin;
 6905|     40|        }
 6906|  1.72k|        begin = parse_precision(begin, end, handler);
 6907|  1.72k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 104, False: 1.61k]
  |  |  ------------------
  ------------------
 6908|    104|            handler.on_error("Unexpected end of format string");
 6909|    104|            return begin;
 6910|    104|        }
 6911|  1.72k|    }
 6912|       |
 6913|  14.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 290, False: 13.8k]
  ------------------
 6914|    290|        handler.on_localized();
 6915|    290|        ++begin;
 6916|    290|    }
 6917|  14.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 14.0k]
  |  |  ------------------
  ------------------
 6918|     70|        handler.on_error("Unexpected end of format string");
 6919|     70|        return begin;
 6920|     70|    }
 6921|       |
 6922|  14.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 14.0k, False: 0]
  |  Branch (6922:25): [True: 10.1k, False: 3.91k]
  ------------------
 6923|  10.1k|        do_presentation();
 6924|  10.1k|    }
 6925|  14.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.59k, False: 12.4k]
  |  |  ------------------
  ------------------
 6926|  1.59k|        handler.on_error("Unexpected end of format string");
 6927|  1.59k|        return begin;
 6928|  1.59k|    }
 6929|       |
 6930|  12.4k|    return begin;
 6931|  14.0k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6502|  2.80k|{
 6503|  2.80k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 254, False: 2.55k]
  |  Branch (6503:33): [True: 214, False: 40]
  ------------------
 6504|  2.80k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 206, False: 2.38k]
  |  Branch (6504:33): [True: 130, False: 76]
  ------------------
 6505|  2.80k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|  10.3k|    auto do_presentation = [&]() -> const CharT* {
 6855|  10.3k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 634, False: 9.73k]
  ------------------
 6856|    634|            auto set = parse_presentation_set(begin, end, handler);
 6857|    634|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 560, False: 74]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|    560|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|    560|                return begin;
 6862|    560|            }
 6863|     74|            handler.on_character_set_string(set);
 6864|     74|            return begin;
 6865|    634|        }
 6866|  9.73k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 7.12k, False: 2.60k]
  ------------------
 6867|  7.12k|            return parse_presentation_regex(begin, end, handler);
 6868|  7.12k|        }
 6869|  2.60k|        presentation_type type = parse_presentation_type(*begin++);
 6870|  2.60k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  2.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 368, False: 2.23k]
  |  |  ------------------
  ------------------
 6871|    368|            handler.on_error("Invalid type specifier in format string");
 6872|    368|            return begin;
 6873|    368|        }
 6874|  2.23k|        handler.on_type(type);
 6875|  2.23k|        return begin;
 6876|  2.60k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6692|    634|{
 6693|    634|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    634|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    634|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6694|    634|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    634|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    634|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6695|       |
 6696|    634|    auto start = begin;
 6697|    634|    ++begin;
 6698|       |
 6699|    634|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 600]
  |  |  ------------------
  ------------------
 6700|       |        // clang-format off
 6701|     34|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6702|       |        // clang-format on
 6703|     34|        return {};
 6704|     34|    }
 6705|    600|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6705:9): [True: 100, False: 500]
  ------------------
 6706|    100|        handler.on_charset_inverted();
 6707|    100|        ++begin;
 6708|    100|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    100|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 72]
  |  |  ------------------
  ------------------
 6709|       |            // clang-format off
 6710|     28|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6711|       |            // clang-format on
 6712|     28|            return {};
 6713|     28|        }
 6714|     72|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6714:13): [True: 28, False: 44]
  ------------------
 6715|     28|            handler.on_charset_single(char32_t{']'});
 6716|     28|            ++begin;
 6717|     28|        }
 6718|     72|    }
 6719|    500|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6719:14): [True: 28, False: 472]
  ------------------
 6720|     28|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6721|     28|    }
 6722|       |
 6723|  2.43k|    while (begin != end) {
  ------------------
  |  Branch (6723:12): [True: 2.16k, False: 266]
  ------------------
 6724|  2.16k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 204, False: 1.96k]
  |  |  ------------------
  ------------------
 6725|    204|            break;
 6726|    204|        }
 6727|       |
 6728|  1.96k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 74, False: 1.89k]
  ------------------
 6729|     74|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6730|     74|        }
 6731|       |
 6732|  1.89k|        parse_presentation_set_literal(begin, end, handler);
 6733|  1.89k|    }
 6734|       |
 6735|    470|    SCN_UNLIKELY_ATTR
 6736|    470|    handler.on_error("Invalid [character set] specifier in format string");
 6737|    470|    return {};
 6738|    544|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6656|  1.89k|{
 6657|  1.89k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6658|       |
 6659|  1.89k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6660|  1.89k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 1.71k]
  |  |  ------------------
  ------------------
 6661|    174|        return;
 6662|    174|    }
 6663|       |
 6664|  1.71k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6664:9): [True: 1.61k, False: 106]
  |  Branch (6664:25): [True: 412, False: 1.19k]
  |  Branch (6664:49): [True: 384, False: 28]
  ------------------
 6665|  1.71k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6665:9): [True: 338, False: 46]
  ------------------
 6666|    338|        ++begin;
 6667|       |
 6668|    338|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6669|    338|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 310]
  |  |  ------------------
  ------------------
 6670|     28|            return;
 6671|     28|        }
 6672|       |
 6673|    310|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    310|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 282]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|     28|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6676|       |            // clang-format on
 6677|     28|            return;
 6678|     28|        }
 6679|       |
 6680|    282|        handler.on_charset_range(cp_first, cp_second + 1);
 6681|    282|        return;
 6682|    310|    }
 6683|       |
 6684|  1.37k|    handler.on_charset_single(cp_first);
 6685|  1.37k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6632|  2.22k|{
 6633|  2.22k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6634|       |
 6635|  2.22k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6636|  2.22k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.22k]
  |  |  |  Branch (859:45): [True: 0, False: 2.22k]
  |  |  |  Branch (859:45): [True: 0, False: 2.22k]
  |  |  ------------------
  ------------------
 6637|      0|        handler.on_error("Invalid encoding in format string");
 6638|      0|        return invalid_code_point;
 6639|      0|    }
 6640|       |
 6641|  2.22k|    const auto cp =
 6642|  2.22k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6643|  2.22k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 202, False: 2.02k]
  |  |  ------------------
  ------------------
 6644|    202|        handler.on_error("Invalid encoding in format string");
 6645|    202|        return invalid_code_point;
 6646|    202|    }
 6647|       |
 6648|  2.02k|    begin += len;
 6649|  2.02k|    return cp;
 6650|  2.22k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6341|     74|    {
 6342|     74|        m_specs.charset_string_data = fmt.data();
 6343|     74|        m_specs.charset_string_size = fmt.size();
 6344|     74|        on_type(presentation_type::string_set);
 6345|     74|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6744|  7.12k|{
 6745|  7.12k|#if !SCN_DISABLE_REGEX
 6746|  7.12k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6747|  7.12k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  7.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6748|       |
 6749|  7.12k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  14.2k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6749:19): [Folded - Ignored]
  |  Branch (6749:19): [Folded - Ignored]
  ------------------
 6750|  7.12k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6750:19): [Folded - Ignored]
  ------------------
 6751|  7.12k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6752|  7.12k|        return begin;
 6753|  7.12k|    }
 6754|       |
 6755|  7.12k|    auto start = begin;
 6756|  7.12k|    ++begin;
 6757|       |
 6758|  7.12k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 7.09k]
  |  |  ------------------
  ------------------
 6759|     34|        handler.on_error("Unexpected end of regex in format string");
 6760|     34|        return begin;
 6761|     34|    }
 6762|       |
 6763|  7.09k|    handler.on_type(presentation_type::regex);
 6764|   799k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6764:12): [True: 799k, False: 142]
  ------------------
 6765|   799k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6765:13): [True: 8.04k, False: 791k]
  ------------------
 6766|  8.04k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6766:17): [True: 6.95k, False: 1.09k]
  ------------------
 6767|  6.95k|                break;
 6768|  6.95k|            }
 6769|  1.09k|            else {
 6770|  1.09k|                handler.on_type(presentation_type::regex_escaped);
 6771|  1.09k|            }
 6772|  8.04k|        }
 6773|   799k|    }
 6774|  7.09k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 142, False: 6.95k]
  |  |  ------------------
  ------------------
 6775|    142|        handler.on_error("Unexpected end of regex in format string");
 6776|    142|        return begin;
 6777|    142|    }
 6778|       |
 6779|  6.95k|    auto regex_end = begin;
 6780|  6.95k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6781|  6.95k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  6.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 6.91k]
  |  |  ------------------
  ------------------
 6782|     40|        handler.on_error("Invalid (empty) regex in format string");
 6783|     40|        return begin;
 6784|     40|    }
 6785|  6.91k|    handler.on_regex_pattern(regex_pattern);
 6786|  6.91k|    ++begin;
 6787|       |
 6788|  6.91k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 6.87k]
  |  |  ------------------
  ------------------
 6789|     40|        handler.on_error("Unexpected end of regex in format string");
 6790|     40|        return begin;
 6791|     40|    }
 6792|       |
 6793|  6.87k|    regex_flags flags{regex_flags::none};
 6794|  6.87k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6795|  6.87k|        {{'m', regex_flags::multiline},
 6796|  6.87k|         {'s', regex_flags::singleline},
 6797|  6.87k|         {'i', regex_flags::nocase},
 6798|  6.87k|         {'n', regex_flags::nocapture}}};
 6799|  7.04k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6799:12): [True: 7.02k, False: 18]
  ------------------
 6800|  7.02k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6800:13): [True: 6.66k, False: 362]
  ------------------
 6801|  6.66k|            break;
 6802|  6.66k|        }
 6803|    362|        bool found_flag = false;
 6804|  1.02k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6804:24): [True: 1.02k, False: 188]
  ------------------
 6805|  1.02k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6805:17): [True: 846, False: 174]
  ------------------
 6806|    846|                continue;
 6807|    846|            }
 6808|    174|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6808:17): [True: 0, False: 174]
  ------------------
 6809|      0|                handler.on_error("Flag set multiple times in regex");
 6810|      0|                return begin;
 6811|      0|            }
 6812|    174|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6813|    174|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6813:17): [True: 90, False: 84]
  ------------------
 6814|       |                // clang-format off
 6815|     90|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6816|       |                // clang-format on
 6817|     90|            }
 6818|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6819|       |            if (*begin == CharT{'m'}) {
 6820|       |                // clang-format off
 6821|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6822|       |                // clang-format on
 6823|       |            }
 6824|       |#endif
 6825|    174|#endif
 6826|    174|            flags |= flag.second;
 6827|    174|            found_flag = true;
 6828|    174|            break;
 6829|    174|        }
 6830|    362|        if (!found_flag) {
  ------------------
  |  Branch (6830:13): [True: 188, False: 174]
  ------------------
 6831|    188|            handler.on_error("Invalid flag in regex");
 6832|    188|            return begin;
 6833|    188|        }
 6834|    362|    }
 6835|  6.68k|    handler.on_regex_flags(flags);
 6836|       |
 6837|  6.68k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 6.66k]
  |  |  ------------------
  ------------------
 6838|     18|        handler.on_error("Unexpected end of regex in format string");
 6839|     18|        return begin;
 6840|     18|    }
 6841|       |
 6842|  6.66k|    return begin;
 6843|       |#else
 6844|       |    handler.on_error("Regular expression support is disabled");
 6845|       |    return {};
 6846|       |#endif
 6847|  6.68k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6349|  6.91k|    {
 6350|  6.91k|        m_specs.charset_string_data = pattern.data();
 6351|  6.91k|        m_specs.charset_string_size = pattern.size();
 6352|  6.91k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6450|  2.60k|{
 6451|  2.60k|    switch (type) {
 6452|     52|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 52, False: 2.55k]
  ------------------
 6453|     86|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 34, False: 2.56k]
  ------------------
 6454|     86|            return presentation_type::int_binary;
 6455|     74|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 74, False: 2.52k]
  ------------------
 6456|     74|            return presentation_type::int_decimal;
 6457|     70|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 70, False: 2.53k]
  ------------------
 6458|     70|            return presentation_type::int_generic;
 6459|     52|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 52, False: 2.55k]
  ------------------
 6460|     52|            return presentation_type::int_unsigned_decimal;
 6461|    132|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 132, False: 2.47k]
  ------------------
 6462|    132|            return presentation_type::int_octal;
 6463|     34|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 34, False: 2.56k]
  ------------------
 6464|     86|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 52, False: 2.55k]
  ------------------
 6465|     86|            return presentation_type::int_hex;
 6466|     54|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 54, False: 2.54k]
  ------------------
 6467|     90|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 36, False: 2.56k]
  ------------------
 6468|     90|            return presentation_type::int_arbitrary_base;
 6469|    266|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 266, False: 2.33k]
  ------------------
 6470|    300|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 34, False: 2.56k]
  ------------------
 6471|    300|            return presentation_type::float_hex;
 6472|     88|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 88, False: 2.51k]
  ------------------
 6473|    122|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 34, False: 2.56k]
  ------------------
 6474|    122|            return presentation_type::float_scientific;
 6475|     52|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 52, False: 2.55k]
  ------------------
 6476|    146|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 94, False: 2.50k]
  ------------------
 6477|    146|            return presentation_type::float_fixed;
 6478|     34|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 34, False: 2.56k]
  ------------------
 6479|     92|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 58, False: 2.54k]
  ------------------
 6480|     92|            return presentation_type::float_general;
 6481|    580|        case 's':
  ------------------
  |  Branch (6481:9): [True: 580, False: 2.02k]
  ------------------
 6482|    580|            return presentation_type::string;
 6483|    318|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 318, False: 2.28k]
  ------------------
 6484|    318|            return presentation_type::character;
 6485|     34|        case '?':
  ------------------
  |  Branch (6485:9): [True: 34, False: 2.56k]
  ------------------
 6486|     34|            return presentation_type::escaped_character;
 6487|     52|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 52, False: 2.55k]
  ------------------
 6488|     52|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 2.60k]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 2.60k]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|    368|        default:
  ------------------
  |  Branch (6495:9): [True: 368, False: 2.23k]
  ------------------
 6496|    368|            return presentation_type::none;
 6497|  2.60k|    }
 6498|  2.60k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6527|  14.4k|{
 6528|  14.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  14.4k|    auto check_align = [](wchar_t ch) {
 6531|  14.4k|        switch (ch) {
 6532|  14.4k|            case L'<':
 6533|  14.4k|                return align_type::left;
 6534|  14.4k|            case L'>':
 6535|  14.4k|                return align_type::right;
 6536|  14.4k|            case L'^':
 6537|  14.4k|                return align_type::center;
 6538|  14.4k|            default:
 6539|  14.4k|                return align_type::none;
 6540|  14.4k|        }
 6541|  14.4k|    };
 6542|       |
 6543|  14.4k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  14.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.4k]
  |  |  |  Branch (859:45): [True: 0, False: 14.4k]
  |  |  |  Branch (859:45): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 6545|  14.4k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|  14.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  14.4k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  14.4k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  14.4k|    const auto begin_before_fill = begin;
 6555|  14.4k|    begin += potential_fill_len;
 6556|       |
 6557|  14.4k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 956, False: 13.4k]
  ------------------
 6558|    956|        return begin_before_fill;
 6559|    956|    }
 6560|       |
 6561|  13.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  13.4k|    const auto begin_after_fill = begin;
 6563|  13.4k|    ++begin;
 6564|       |
 6565|  13.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 13.4k, False: 0]
  ------------------
 6566|  13.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 13.4k]
  |  |  ------------------
  ------------------
 6567|     42|            handler.on_error("Invalid fill character '{' in format string");
 6568|     42|            return begin;
 6569|     42|        }
 6570|  13.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 600, False: 12.8k]
  ------------------
 6571|    600|            return begin_before_fill;
 6572|    600|        }
 6573|  13.4k|    }
 6574|       |
 6575|  12.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 12.3k, False: 446]
  ------------------
 6576|  12.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 794, False: 11.5k]
  ------------------
 6577|    794|            handler.on_align(potential_align_on_fill);
 6578|    794|            return begin_after_fill;
 6579|    794|        }
 6580|  11.5k|        return begin_before_fill;
 6581|  12.3k|    }
 6582|       |
 6583|    446|    handler.on_fill(potential_fill);
 6584|    446|    handler.on_align(potential_align_after_fill);
 6585|    446|    return begin;
 6586|  12.8k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6509|  14.4k|{
 6510|  14.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|  14.4k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|  14.4k|        return 1;
 6513|  14.4k|    }
 6514|  14.4k|    else {
 6515|  14.4k|        const auto lengths =
 6516|  14.4k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|  14.4k|            "\3\4";
 6518|  14.4k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|  14.4k|        return len;
 6520|  14.4k|    }
 6521|  14.4k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|  27.9k|    auto check_align = [](wchar_t ch) {
 6531|  27.9k|        switch (ch) {
 6532|    430|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 430, False: 27.4k]
  ------------------
 6533|    430|                return align_type::left;
 6534|    194|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 194, False: 27.7k]
  ------------------
 6535|    194|                return align_type::right;
 6536|    878|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 878, False: 27.0k]
  ------------------
 6537|    878|                return align_type::center;
 6538|  26.4k|            default:
  ------------------
  |  Branch (6538:13): [True: 26.4k, False: 1.50k]
  ------------------
 6539|  26.4k|                return align_type::none;
 6540|  27.9k|        }
 6541|  27.9k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6263|    446|    {
 6264|    446|        m_specs.fill = fill;
 6265|    446|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6144|    446|    {
 6145|    446|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|    446|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    446|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6146|    446|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|    446|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    446|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6147|    446|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6147:23): [Folded - Ignored]
  ------------------
 6148|    446|            for (size_t i = 0; i < s.size(); ++i) {
 6149|    446|                SCN_GCC_PUSH
 6150|    446|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6151|    446|                m_data[i] = s[i];
 6152|    446|                SCN_GCC_POP
 6153|    446|            }
 6154|    446|            m_size = static_cast<unsigned char>(s.size());
 6155|    446|        }
 6156|    446|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (6156:28): [Folded - Ignored]
  ------------------
 6157|    446|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6158|    446|            m_data[1] =
 6159|    446|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6160|    446|            if (s.size() == 1) {
 6161|    446|                return;
 6162|    446|            }
 6163|    446|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6164|    446|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6165|    446|        }
 6166|    446|        else {
 6167|    446|            const auto front = static_cast<unsigned>(s.front());
 6168|    446|            m_data[0] = static_cast<char>(front);
 6169|    446|            m_data[1] = static_cast<char>(front >> 8);
 6170|    446|            m_data[2] = static_cast<char>(front >> 16);
 6171|    446|            m_data[3] = static_cast<char>(front >> 24);
 6172|    446|        }
 6173|    446|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6592|  14.3k|{
 6593|  14.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  14.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 13.4k, False: 924]
  |  Branch (6595:33): [True: 10.6k, False: 2.80k]
  ------------------
 6596|  10.6k|        int width = parse_simple_int(begin, end);
 6597|  10.6k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  10.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 10.6k, False: 0]
  |  |  ------------------
  ------------------
 6598|  10.6k|            handler.on_width(width);
 6599|  10.6k|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|  10.6k|    }
 6605|  14.3k|    return begin;
 6606|  14.3k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6612|  1.72k|{
 6613|  1.72k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6614|       |
 6615|  1.72k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6615:9): [True: 1.68k, False: 34]
  |  Branch (6615:33): [True: 1.60k, False: 88]
  ------------------
 6616|  1.60k|        int prec = parse_simple_int(begin, end);
 6617|  1.60k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  1.60k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.60k, False: 0]
  |  |  ------------------
  ------------------
 6618|  1.60k|            handler.on_precision(prec);
 6619|  1.60k|        }
 6620|      0|        else {
 6621|      0|            handler.on_error("Invalid field precision");
 6622|      0|            return begin;
 6623|      0|        }
 6624|  1.60k|    }
 6625|  1.72k|    return begin;
 6626|  1.72k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7122|    290|    {
 7123|    290|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|    290|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 268, False: 22]
  ------------------
 7125|    290|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 246, False: 22]
  ------------------
 7126|    290|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 224, False: 22]
  ------------------
 7127|    290|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 202, False: 22]
  ------------------
 7128|    202|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|    202|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|    202|        }
 7133|       |
 7134|     88|        Handler::on_localized();
 7135|     88|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  11.7k|{
 8413|  11.7k|#define SCN_VISIT(Type)                                         \
 8414|  11.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  11.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  11.7k|    }                                                           \
 8417|  11.7k|    else {                                                      \
 8418|  11.7k|        return vis(monostate_val);                              \
 8419|  11.7k|    }
 8420|       |
 8421|  11.7k|    monostate monostate_val{};
 8422|       |
 8423|  11.7k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 11.7k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 11.7k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|  1.31k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 1.31k, False: 10.4k]
  ------------------
 8429|  1.31k|            SCN_VISIT(int);
  ------------------
  |  | 8414|  1.31k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.31k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.31k|    }                                                           \
  |  | 8417|  1.31k|    else {                                                      \
  |  | 8418|  1.31k|        return vis(monostate_val);                              \
  |  | 8419|  1.31k|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 11.7k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 11.7k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 11.7k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 11.7k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|  1.31k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 1.31k, False: 10.4k]
  ------------------
 8439|  1.31k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|  1.31k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.31k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.31k|    }                                                           \
  |  | 8417|  1.31k|    else {                                                      \
  |  | 8418|  1.31k|        return vis(monostate_val);                              \
  |  | 8419|  1.31k|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 11.7k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 11.7k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|  1.29k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 1.29k, False: 10.4k]
  ------------------
 8445|  1.29k|            SCN_VISIT(void*);
  ------------------
  |  | 8414|  1.29k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.29k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.29k|    }                                                           \
  |  | 8417|  1.29k|    else {                                                      \
  |  | 8418|  1.29k|        return vis(monostate_val);                              \
  |  | 8419|  1.29k|    }
  ------------------
 8446|  1.31k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 1.31k, False: 10.4k]
  ------------------
 8447|  1.31k|            SCN_VISIT(bool);
  ------------------
  |  | 8414|  1.31k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.31k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.31k|    }                                                           \
  |  | 8417|  1.31k|    else {                                                      \
  |  | 8418|  1.31k|        return vis(monostate_val);                              \
  |  | 8419|  1.31k|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 11.7k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|  1.29k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 1.29k, False: 10.4k]
  ------------------
 8451|  1.29k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|  1.29k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.29k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.29k|    }                                                           \
  |  | 8417|  1.29k|    else {                                                      \
  |  | 8418|  1.29k|        return vis(monostate_val);                              \
  |  | 8419|  1.29k|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 11.7k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 11.7k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|  1.31k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 1.31k, False: 10.4k]
  ------------------
 8457|  1.31k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  1.31k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.31k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.31k|    }                                                           \
  |  | 8417|  1.31k|    else {                                                      \
  |  | 8418|  1.31k|        return vis(monostate_val);                              \
  |  | 8419|  1.31k|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 11.7k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 11.7k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|  1.29k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 1.29k, False: 10.4k]
  ------------------
 8463|  1.29k|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|  1.29k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.29k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.29k|    }                                                           \
  |  | 8417|  1.29k|    else {                                                      \
  |  | 8418|  1.29k|        return vis(monostate_val);                              \
  |  | 8419|  1.29k|    }
  ------------------
 8464|  1.29k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 1.29k, False: 10.4k]
  ------------------
 8465|  1.29k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|  1.29k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.29k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.29k|    }                                                           \
  |  | 8417|  1.29k|    else {                                                      \
  |  | 8418|  1.29k|        return vis(monostate_val);                              \
  |  | 8419|  1.29k|    }
  ------------------
 8466|  1.29k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 1.29k, False: 10.4k]
  ------------------
 8467|  1.29k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|  1.29k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.29k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.29k|    }                                                           \
  |  | 8417|  1.29k|    else {                                                      \
  |  | 8418|  1.29k|        return vis(monostate_val);                              \
  |  | 8419|  1.29k|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 11.7k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 11.7k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 11.7k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 11.7k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 11.7k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  11.7k|            SCN_CLANG_POP
 8491|  11.7k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.65k|{
   89|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.65k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.65k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  77.8k|{
   44|  77.8k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  77.8k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.65k|{
  127|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.65k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.65k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  77.8k|{
   60|  77.8k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  77.8k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.65k|{
   89|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.65k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.65k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.65k|{
  127|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.65k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.65k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.65k|{
   89|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.65k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.65k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.65k|{
  127|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.65k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.65k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.65k|{
   89|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.65k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.65k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.65k|{
  127|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.65k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.65k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.65k|{
   89|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.65k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.65k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.65k|{
  127|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.65k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.65k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.65k|{
   89|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.65k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.65k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.65k|{
  127|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.65k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.65k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
   88|  8.65k|{
   89|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.65k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.65k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  8.65k|{
  127|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.65k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.65k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.65k|{
   89|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.65k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.65k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
  126|  8.65k|{
  127|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.65k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.65k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.65k|{
   89|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.65k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.65k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.65k|{
  127|  8.65k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.65k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.65k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.65k|    static_cast<    \
  |  |  929|  8.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.65k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   116k|{
  653|   116k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   116k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    134|{
  659|    134|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    134|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 67, False: 67]
  ------------------
  661|    134|                    : std::locale{};
  662|    134|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    872|{
 1221|    872|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    872|                                  m_nan_payload_buffer, value);
 1223|    872|    value = this->setsign(value);
 1224|    872|    return n;
 1225|    872|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    848|{
 1221|    848|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    848|                                  m_nan_payload_buffer, value);
 1223|    848|    value = this->setsign(value);
 1224|    848|    return n;
 1225|    848|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     18|{
 1461|     18|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     18|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     18|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     18|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     18|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 18, False: 0]
  ------------------
 1467|     18|        SCN_UNLIKELY_ATTR
 1468|     18|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     18|                                     "Invalid integer value");
 1470|     18|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    874|{
 1461|    874|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    874|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    874|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    874|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    874|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 874, False: 0]
  ------------------
 1467|    874|        SCN_UNLIKELY_ATTR
 1468|    874|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    874|                                     "Invalid integer value");
 1470|    874|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    846|{
 1461|    846|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    846|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    846|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    846|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    846|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    846|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    846|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    846|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    846|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    846|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    846|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    846|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    846|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 846, False: 0]
  ------------------
 1467|    846|        SCN_UNLIKELY_ATTR
 1468|    846|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    846|                                     "Invalid integer value");
 1470|    846|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    874|{
 1461|    874|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    874|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    874|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    874|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    874|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 874, False: 0]
  ------------------
 1467|    874|        SCN_UNLIKELY_ATTR
 1468|    874|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    874|                                     "Invalid integer value");
 1470|    874|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    832|{
 1461|    832|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    832|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    832|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    832|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    832|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    832|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    832|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    832|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    832|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    832|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    832|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    832|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    832|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 832, False: 0]
  ------------------
 1467|    832|        SCN_UNLIKELY_ATTR
 1468|    832|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    832|                                     "Invalid integer value");
 1470|    832|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    860|{
 1461|    860|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    860|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    860|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    860|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    860|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    860|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    860|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    860|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    860|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    860|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    860|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    860|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    860|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 860, False: 0]
  ------------------
 1467|    860|        SCN_UNLIKELY_ATTR
 1468|    860|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    860|                                     "Invalid integer value");
 1470|    860|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    820|{
 1461|    820|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    820|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    820|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    820|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    820|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    820|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    820|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    820|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    820|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    820|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    820|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    820|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    820|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 820, False: 0]
  ------------------
 1467|    820|        SCN_UNLIKELY_ATTR
 1468|    820|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    820|                                     "Invalid integer value");
 1470|    820|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|  38.9k|{
 2176|  38.9k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|  38.9k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|  77.8k|{
 2200|  77.8k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|  77.8k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  3.49k|{
  194|  3.49k|    return find_classic_impl(
  195|  3.49k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  3.49k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  3.49k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  77.9k|{
  202|  77.9k|    return find_classic_impl(
  203|  77.9k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  77.9k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  77.9k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    270|{
  673|    270|    return e;
  674|    270|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|  38.9k|{
 2133|  38.9k|    return vscan_internal(source, format, args);
 2134|  38.9k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|  77.8k|{
 2153|  77.8k|    return vscan_internal(source, format, args);
 2154|  77.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.49k|{
  118|  3.49k|    auto it = source.begin();
  119|       |
  120|  13.7k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 11.0k, False: 2.72k]
  ------------------
  121|  11.0k|        auto sv =
  122|  11.0k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  11.0k|                .substr(0, 8);
  124|       |
  125|  11.0k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 4.04k, False: 6.96k]
  ------------------
  126|  4.04k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  4.04k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  4.04k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 486, False: 3.55k]
  ------------------
  129|    486|                break;
  130|    486|            }
  131|  3.55k|            continue;
  132|  4.04k|        }
  133|       |
  134|  28.9k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 22.2k, False: 6.68k]
  ------------------
  135|  22.2k|            auto tmp =
  136|  22.2k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  22.2k|            auto res = get_next_code_point(tmp);
  138|  22.2k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 282, False: 21.9k]
  ------------------
  139|    282|                return it;
  140|    282|            }
  141|  21.9k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  21.9k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  21.9k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  21.9k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  21.9k|        }
  145|  6.96k|    }
  146|       |
  147|  3.21k|    return detail::make_string_view_iterator(source, it);
  148|  3.49k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  88.6k|{
  105|  88.6k|    static_assert(sizeof(*source.data()) == 1);
  106|  88.6k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  88.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  88.6k|    uint64_t word{};
  108|  88.6k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  88.6k|    return has_byte_greater(word, 127) != 0;
  111|  88.6k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  25.7k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  22.2k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  77.9k|{
  118|  77.9k|    auto it = source.begin();
  119|       |
  120|  80.3k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 77.6k, False: 2.72k]
  ------------------
  121|  77.6k|        auto sv =
  122|  77.6k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  77.6k|                .substr(0, 8);
  124|       |
  125|  77.6k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 61.5k, False: 16.0k]
  ------------------
  126|  61.5k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  61.5k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  61.5k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 60.5k, False: 1.06k]
  ------------------
  129|  60.5k|                break;
  130|  60.5k|            }
  131|  1.06k|            continue;
  132|  61.5k|        }
  133|       |
  134|  20.1k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 18.8k, False: 1.32k]
  ------------------
  135|  18.8k|            auto tmp =
  136|  18.8k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  18.8k|            auto res = get_next_code_point(tmp);
  138|  18.8k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 14.7k, False: 4.09k]
  ------------------
  139|  14.7k|                return it;
  140|  14.7k|            }
  141|  4.09k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  4.09k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  4.09k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  4.09k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  4.09k|        }
  145|  16.0k|    }
  146|       |
  147|  63.2k|    return detail::make_string_view_iterator(source, it);
  148|  77.9k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  68.5k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  18.8k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    872|{
 1138|    872|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 872]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    872|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 872]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    872|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 872]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    872|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 872]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    872|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    872|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 10, False: 862]
  ------------------
 1185|     10|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 1186|     10|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     10|                                         "Invalid floating-point digit");
 1188|     10|        }
 1189|     10|    }
 1190|    862|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    862|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 862, False: 0]
  |  |  ------------------
  ------------------
 1191|    862|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    862|                                     "Invalid floating-point digit");
 1193|    862|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    848|{
 1138|    848|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 848]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    848|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 848]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    848|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 848]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    848|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 848]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    848|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    848|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    848|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    848|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 22, False: 826]
  ------------------
 1185|     22|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 1186|     22|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     22|                                         "Invalid floating-point digit");
 1188|     22|        }
 1189|     22|    }
 1190|    826|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    826|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 826, False: 0]
  |  |  ------------------
  ------------------
 1191|    826|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    826|                                     "Invalid floating-point digit");
 1193|    826|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  77.8k|{
 1625|  77.8k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 77.5k, False: 378]
  ------------------
 1626|  77.5k|        return false;
 1627|  77.5k|    }
 1628|    378|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 252]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|  77.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  77.8k|    {
 1903|  77.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   233k|    {
 1722|   233k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 233k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   233k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  77.8k|    {
 1853|  77.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  77.8k|{
 2030|  77.8k|    const auto beg = handler.get_ctx().begin();
 2031|  77.8k|    detail::parse_format_string<false>(format, handler);
 2032|  77.8k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.3k, False: 2.53k]
  |  |  ------------------
  ------------------
 2033|  75.3k|        return unexpected(handler.error);
 2034|  75.3k|    }
 2035|  2.53k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  77.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|   691k|    {
 2014|   691k|        return ctx.get();
 2015|   691k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   691k|    {
 1857|   691k|        return contiguous_ctx;
 1858|   691k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  94.2k|    {
 1907|   194k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 105k, False: 89.3k]
  ------------------
 1908|   105k|            auto it = get_ctx().begin();
 1909|   105k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.09k, False: 103k]
  ------------------
 1910|  1.09k|                SCN_UNLIKELY_ATTR
 1911|  1.09k|                return on_error("Unexpected end of source");
 1912|  1.09k|            }
 1913|       |
 1914|   103k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   103k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   103k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 2.42k, False: 101k]
  ------------------
 1917|  2.42k|                return on_error("Invalid encoding in format string");
 1918|  2.42k|            }
 1919|   101k|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 68.7k, False: 32.7k]
  ------------------
 1920|  68.7k|                get_ctx().advance_to(
 1921|  68.7k|                    impl::read_while_classic_space(get_ctx().range()));
 1922|  68.7k|                begin = detail::to_address(std::prev(after_space_it));
 1923|  68.7k|                continue;
 1924|  68.7k|            }
 1925|       |
 1926|  32.7k|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 1.36k, False: 31.4k]
  ------------------
 1927|  1.36k|                SCN_UNLIKELY_ATTR
 1928|  1.36k|                return on_error("Unexpected literal character in source");
 1929|  1.36k|            }
 1930|  31.4k|            get_ctx().advance_to(ranges::next(it));
 1931|  31.4k|        }
 1932|  94.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1963|  6.02k|    {
 1964|  6.02k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1965|  6.02k|        set_arg_as_visited(arg_id);
 1966|       |
 1967|  6.02k|        on_visit_scan_arg(
 1968|  6.02k|            impl::default_arg_reader<context_type>{
 1969|  6.02k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1970|  6.02k|            arg);
 1971|  6.02k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  57.9k|{
 1681|  57.9k|    auto arg = ctx.arg(id);
 1682|  57.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.51k, False: 56.4k]
  |  |  ------------------
  ------------------
 1683|  1.51k|        handler.on_error("Failed to find argument with ID");
 1684|  1.51k|    }
 1685|  57.9k|    return arg;
 1686|  57.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  77.2k|    {
 1797|  77.2k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  77.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.83k, False: 74.4k]
  |  |  ------------------
  ------------------
 1798|  2.83k|            on_error("Invalid out-of-range argument ID");
 1799|  2.83k|            return;
 1800|  2.83k|        }
 1801|       |
 1802|  74.4k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  74.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 122, False: 74.3k]
  |  |  ------------------
  ------------------
 1803|    122|            return on_error("Argument with this ID has already been scanned");
 1804|    122|        }
 1805|       |
 1806|  74.3k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  74.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 74.3k, False: 0]
  |  |  ------------------
  ------------------
 1807|  74.3k|            visited_args_lower64 |= (1ull << id);
 1808|  74.3k|            return;
 1809|  74.3k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  74.4k|    {
 1782|  74.4k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  74.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 74.4k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  74.4k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  74.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 74.4k, False: 0]
  |  |  ------------------
  ------------------
 1788|  74.4k|            return (visited_args_lower64 >> id) & 1ull;
 1789|  74.4k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  74.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  6.02k|    {
 1948|  6.02k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 172, False: 5.85k]
  |  Branch (1948:23): [True: 0, False: 5.85k]
  ------------------
 1949|    172|            SCN_UNLIKELY_ATTR
 1950|    172|            return;
 1951|    172|        }
 1952|       |
 1953|  5.85k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  5.85k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.99k, False: 1.85k]
  |  |  ------------------
  ------------------
 1955|  3.99k|            on_error(r.error());
 1956|  3.99k|        }
 1957|  1.85k|        else {
 1958|  1.85k|            get_ctx().advance_to(*r);
 1959|  1.85k|        }
 1960|  5.85k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  61.1k|    {
 1766|  61.1k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  61.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 61.1k, False: 0]
  |  |  ------------------
  ------------------
 1767|  61.1k|            error = err;
 1768|  61.1k|        }
 1769|  61.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|  55.1k|    {
 1936|  55.1k|        return parse_ctx.next_arg_id();
 1937|  55.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1939|  2.91k|    {
 1940|  2.91k|        parse_ctx.check_arg_id(id);
 1941|  2.91k|        return id;
 1942|  2.91k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|  51.9k|    {
 1977|  51.9k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  51.9k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  51.9k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 51.9k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  51.9k|        auto specs = detail::format_specs{};
 1990|  51.9k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  51.9k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  51.9k|            arg.type()};
 1993|       |
 1994|  51.9k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  51.9k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 2.39k, False: 49.5k]
  |  Branch (1995:29): [True: 738, False: 48.7k]
  ------------------
 1996|  3.13k|            SCN_UNLIKELY_ATTR
 1997|  3.13k|            on_error("Missing '}' in format string");
 1998|  3.13k|            return parse_ctx.begin();
 1999|  3.13k|        }
 2000|  48.7k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  48.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 232, False: 48.5k]
  |  |  ------------------
  ------------------
 2001|    232|            return parse_ctx.begin();
 2002|    232|        }
 2003|  48.5k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  48.5k|        on_visit_scan_arg(
 2006|  48.5k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  48.5k|                                           get_ctx().locale()},
 2008|  48.5k|            arg);
 2009|  48.5k|        return parse_ctx.begin();
 2010|  48.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  51.9k|    {
 1701|  51.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  48.5k|    {
 1948|  48.5k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 128, False: 48.4k]
  |  Branch (1948:23): [True: 0, False: 48.4k]
  ------------------
 1949|    128|            SCN_UNLIKELY_ATTR
 1950|    128|            return;
 1951|    128|        }
 1952|       |
 1953|  48.4k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  48.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.4k, False: 5.02k]
  |  |  ------------------
  ------------------
 1955|  43.4k|            on_error(r.error());
 1956|  43.4k|        }
 1957|  5.02k|        else {
 1958|  5.02k|            get_ctx().advance_to(*r);
 1959|  5.02k|        }
 1960|  48.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   437k|    {
 1761|   437k|        SCN_UNLIKELY_ATTR
 1762|   437k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   437k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   233k|    {
 1729|   233k|        {
 1730|   233k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 233k]
  ------------------
 1731|   233k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 233k]
  ------------------
 1732|   233k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   233k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   233k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 159k, False: 74.3k]
  ------------------
 1736|   159k|                return on_error("Argument list not exhausted");
 1737|   159k|            }
 1738|   233k|        }
 1739|       |
 1740|  74.3k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 74.3k, False: 0]
  ------------------
 1741|  74.3k|            return;
 1742|  74.3k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   233k|    {
 1777|   233k|        return error;
 1778|   233k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|   484k|    {
 1773|   484k|        return static_cast<bool>(error);
 1774|   484k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  77.8k|{
 2045|  77.8k|    const auto argcount = args.size();
 2046|  77.8k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 18, False: 77.8k]
  |  Branch (2046:60): [True: 18, False: 0]
  ------------------
 2047|     18|        auto arg = args.get(0);
 2048|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|     18|    }
 2050|       |
 2051|  77.8k|    auto handler = format_handler<true, CharT>{
 2052|  77.8k|        ranges::subrange<const CharT*>{source.data(),
 2053|  77.8k|                                       source.data() + source.size()},
 2054|  77.8k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  77.8k|    static_cast<    \
  |  |  929|  77.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  77.8k|    static_cast<    \
  |  |  929|  77.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  77.8k|    return vscan_parse_format_string(format, handler);
 2056|  77.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   155k|{
 2045|   155k|    const auto argcount = args.size();
 2046|   155k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 18, False: 155k]
  |  Branch (2046:60): [True: 18, False: 0]
  ------------------
 2047|     18|        auto arg = args.get(0);
 2048|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|     18|    }
 2050|       |
 2051|   155k|    auto handler = format_handler<true, CharT>{
 2052|   155k|        ranges::subrange<const CharT*>{source.data(),
 2053|   155k|                                       source.data() + source.size()},
 2054|   155k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   155k|    return vscan_parse_format_string(format, handler);
 2056|   155k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   155k|{
 1625|   155k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 144k, False: 10.8k]
  ------------------
 1626|   144k|        return false;
 1627|   144k|    }
 1628|  10.8k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 10.7k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   155k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   155k|    {
 1903|   155k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   155k|    {
 1853|   155k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   155k|{
 2030|   155k|    const auto beg = handler.get_ctx().begin();
 2031|   155k|    detail::parse_format_string<false>(format, handler);
 2032|   155k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 155k, False: 312]
  |  |  ------------------
  ------------------
 2033|   155k|        return unexpected(handler.error);
 2034|   155k|    }
 2035|    312|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   155k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|   958M|    {
 2014|   958M|        return ctx.get();
 2015|   958M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|   958M|    {
 1857|   958M|        return contiguous_ctx;
 1858|   958M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   158k|    {
 1907|   319M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 319M, False: 97.9k]
  ------------------
 1908|   319M|            auto it = get_ctx().begin();
 1909|   319M|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 618, False: 319M]
  ------------------
 1910|    618|                SCN_UNLIKELY_ATTR
 1911|    618|                return on_error("Unexpected end of source");
 1912|    618|            }
 1913|       |
 1914|   319M|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   319M|                    detail::make_string_view_from_pointers(begin, end));
 1916|   319M|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 59.0k, False: 319M]
  ------------------
 1917|  59.0k|                return on_error("Invalid encoding in format string");
 1918|  59.0k|            }
 1919|   319M|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 79.5k, False: 319M]
  ------------------
 1920|  79.5k|                get_ctx().advance_to(
 1921|  79.5k|                    impl::read_while_classic_space(get_ctx().range()));
 1922|  79.5k|                begin = detail::to_address(std::prev(after_space_it));
 1923|  79.5k|                continue;
 1924|  79.5k|            }
 1925|       |
 1926|   319M|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 370, False: 319M]
  ------------------
 1927|    370|                SCN_UNLIKELY_ATTR
 1928|    370|                return on_error("Unexpected literal character in source");
 1929|    370|            }
 1930|   319M|            get_ctx().advance_to(ranges::next(it));
 1931|   319M|        }
 1932|   158k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1963|  4.65k|    {
 1964|  4.65k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1965|  4.65k|        set_arg_as_visited(arg_id);
 1966|       |
 1967|  4.65k|        on_visit_scan_arg(
 1968|  4.65k|            impl::default_arg_reader<context_type>{
 1969|  4.65k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1970|  4.65k|            arg);
 1971|  4.65k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  19.3k|{
 1681|  19.3k|    auto arg = ctx.arg(id);
 1682|  19.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.32k, False: 18.0k]
  |  |  ------------------
  ------------------
 1683|  1.32k|        handler.on_error("Failed to find argument with ID");
 1684|  1.32k|    }
 1685|  19.3k|    return arg;
 1686|  19.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|  4.65k|    {
 1948|  4.65k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 136, False: 4.51k]
  |  Branch (1948:23): [True: 0, False: 4.51k]
  ------------------
 1949|    136|            SCN_UNLIKELY_ATTR
 1950|    136|            return;
 1951|    136|        }
 1952|       |
 1953|  4.51k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  4.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  4.51k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  4.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.21k, False: 1.30k]
  |  |  ------------------
  ------------------
 1955|  3.21k|            on_error(r.error());
 1956|  3.21k|        }
 1957|  1.30k|        else {
 1958|  1.30k|            get_ctx().advance_to(*r);
 1959|  1.30k|        }
 1960|  4.51k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|  19.0k|    {
 1936|  19.0k|        return parse_ctx.next_arg_id();
 1937|  19.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1939|    300|    {
 1940|    300|        parse_ctx.check_arg_id(id);
 1941|    300|        return id;
 1942|    300|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|  14.6k|    {
 1977|  14.6k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  14.6k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  14.6k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 14.6k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  14.6k|        auto specs = detail::format_specs{};
 1990|  14.6k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  14.6k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  14.6k|            arg.type()};
 1993|       |
 1994|  14.6k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  14.6k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 2.00k, False: 12.6k]
  |  Branch (1995:29): [True: 578, False: 12.1k]
  ------------------
 1996|  2.58k|            SCN_UNLIKELY_ATTR
 1997|  2.58k|            on_error("Missing '}' in format string");
 1998|  2.58k|            return parse_ctx.begin();
 1999|  2.58k|        }
 2000|  12.1k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 154, False: 11.9k]
  |  |  ------------------
  ------------------
 2001|    154|            return parse_ctx.begin();
 2002|    154|        }
 2003|  11.9k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  11.9k|        on_visit_scan_arg(
 2006|  11.9k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  11.9k|                                           get_ctx().locale()},
 2008|  11.9k|            arg);
 2009|  11.9k|        return parse_ctx.begin();
 2010|  12.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  14.6k|    {
 1701|  14.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|  11.9k|    {
 1948|  11.9k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 184, False: 11.7k]
  |  Branch (1948:23): [True: 0, False: 11.7k]
  ------------------
 1949|    184|            SCN_UNLIKELY_ATTR
 1950|    184|            return;
 1951|    184|        }
 1952|       |
 1953|  11.7k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  11.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.5k, False: 1.21k]
  |  |  ------------------
  ------------------
 1955|  10.5k|            on_error(r.error());
 1956|  10.5k|        }
 1957|  1.21k|        else {
 1958|  1.21k|            get_ctx().advance_to(*r);
 1959|  1.21k|        }
 1960|  11.7k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  4.32k|{
 1363|  4.32k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  4.32k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  4.32k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  4.32k|            std::u32string tmp;
 1368|  4.32k|            transcode_to_string_impl_to32(src, tmp);
 1369|  4.32k|            return transcode_to_string_impl_32to16<false>(
 1370|  4.32k|                std::u32string_view{tmp}, dest);
 1371|  4.32k|        }
 1372|  4.32k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  4.32k|            return transcode_to_string_impl_to32(src, dest);
 1374|  4.32k|        }
 1375|  4.32k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  4.32k|{
 1256|  4.32k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  4.32k|    auto it = src.begin();
 1259|   783k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 778k, False: 4.32k]
  ------------------
 1260|   778k|        auto res = get_next_code_point(
 1261|   778k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   778k|                                                                 src.end()));
 1263|   778k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   778k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.5k, False: 763k]
  |  |  ------------------
  ------------------
 1264|  15.5k|            dest.push_back(DestCharT{0xfffd});
 1265|  15.5k|        }
 1266|   763k|        else {
 1267|   763k|            dest.push_back(res.value);
 1268|   763k|        }
 1269|   778k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   778k|    }
 1271|  4.32k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   957k|{
 1169|   957k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   957k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   957k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   957k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   957k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   957k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.7k, False: 942k]
  |  |  ------------------
  ------------------
 1173|  14.7k|        return {get_start_for_next_code_point(input),
 1174|  14.7k|                detail::invalid_code_point};
 1175|  14.7k|    }
 1176|   942k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   942k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.03k, False: 940k]
  |  |  ------------------
  ------------------
 1177|  2.03k|        return {input.end(), detail::invalid_code_point};
 1178|  2.03k|    }
 1179|       |
 1180|   940k|    return {input.begin() + len,
 1181|   940k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   942k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  14.7k|{
 1155|  14.7k|    auto it = input.begin();
 1156|  67.5k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 64.3k, False: 3.20k]
  ------------------
 1157|  64.3k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 11.5k, False: 52.7k]
  ------------------
 1158|  11.5k|            break;
 1159|  11.5k|        }
 1160|  64.3k|    }
 1161|  14.7k|    return it;
 1162|  14.7k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  43.2k|    {
  809|  43.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  43.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  43.2k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  15.7k|    {
  823|  15.7k|        return a.m_code == b.m_code;
  824|  15.7k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  34.8k|    {
 2931|  34.8k|        SCN_UNLIKELY_ATTR
 2932|  34.8k|        m_msg = msg;
 2933|  34.8k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  60.1k|    {
 2936|  60.1k|        return m_msg == nullptr;
 2937|  60.1k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|    966|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4989|   658k|    {
 4990|   658k|        on_charset_range(cp, cp + 1);
 4991|   658k|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4994|   662k|    {
 4995|   662k|        if (end <= 127) {
  ------------------
  |  Branch (4995:13): [True: 397k, False: 264k]
  ------------------
 4996|   397k|            return;
 4997|   397k|        }
 4998|       |
 4999|  52.9M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4999:25): [True: 52.9M, False: 263k]
  ------------------
 5000|       |            // TODO: check for overlap
 5001|  52.9M|            if (elem.first == end) {
  ------------------
  |  Branch (5001:17): [True: 90, False: 52.9M]
  ------------------
 5002|     90|                elem.first = begin;
 5003|     90|                return;
 5004|     90|            }
 5005|       |
 5006|  52.9M|            if (elem.second == begin) {
  ------------------
  |  Branch (5006:17): [True: 918, False: 52.9M]
  ------------------
 5007|    918|                elem.second = end;
 5008|    918|                return;
 5009|    918|            }
 5010|  52.9M|        }
 5011|       |
 5012|   263k|        extra_ranges.push_back(std::make_pair(begin, end));
 5013|   263k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5016|    330|    {
 5017|       |        // no-op
 5018|    330|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5031|   667k|    {
 5032|   667k|        return static_cast<bool>(err);
 5033|   667k|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5349|  1.19k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  94.2k|{
  458|  94.2k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  94.2k|        static_cast<unsigned char>(ch))];
  460|  94.2k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   528k|{
  469|   528k|    return static_cast<unsigned char>(ch) <= 127;
  470|   528k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|   574k|{
  483|   574k|    return cp <= 127;
  484|   574k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  88.6k|{
  539|  88.6k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  88.6k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  46.1k|{
  784|  46.1k|    return e != eof_error::good;
  785|  46.1k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|     74|{
  798|     74|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|     74|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     74|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|     74|    return scan_error{scan_error::end_of_range, "EOF"};
  800|     74|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    522|{
  845|    522|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    522|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    522|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    522|    return parse_error::eof;
  847|    522|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.64k|{
  854|  3.64k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.64k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.64k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 46, False: 3.60k]
  ------------------
  859|     46|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     46|    }
  861|       |
  862|  3.60k|    return scan_error{code, msg};
  863|  3.64k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.64k|{
  868|  3.64k|    return [code, msg](parse_error err) {
  869|  3.64k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.64k|    };
  871|  3.64k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   319M|{
 1200|       |    // Pattern_White_Space property
 1201|   319M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 629k, False: 319M]
  |  Branch (1201:27): [True: 59.2k, False: 570k]
  ------------------
 1202|   319M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 168k, False: 319M]
  ------------------
 1203|   319M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 7.34k, False: 319M]
  ------------------
 1204|   319M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 740, False: 319M]
  ------------------
 1205|   319M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 1.68k, False: 319M]
  ------------------
 1206|   319M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 618, False: 319M]
  ------------------
 1207|   319M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 40, False: 319M]
  ------------------
 1208|   319M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  3.61k|{
 2220|  3.61k|    unsigned char running_diff{0};
 2221|  12.6k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 9.02k, False: 3.61k]
  ------------------
 2222|  9.02k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  9.02k|    }
 2224|  3.61k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 3.61k]
  |  Branch (2224:33): [True: 0, False: 3.61k]
  ------------------
 2225|  3.61k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|   154k|{
 2303|   154k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 12.9k, False: 141k]
  ------------------
 2304|   154k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 266, False: 12.6k]
  ------------------
 2305|  12.9k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 72, False: 12.5k]
  ------------------
 2306|  12.9k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 48, False: 12.5k]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|  12.9k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 11.3k, False: 1.21k]
  |  Branch (2308:27): [True: 1.40k, False: 9.90k]
  |  Branch (2308:43): [True: 1.32k, False: 78]
  ------------------
 2309|  12.9k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 9.90k, False: 1.28k]
  |  Branch (2309:27): [True: 82, False: 9.82k]
  ------------------
 2310|  12.9k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 9.82k, False: 1.28k]
  |  Branch (2310:27): [True: 86, False: 9.73k]
  ------------------
 2311|  12.9k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 9.70k, False: 1.31k]
  |  Branch (2311:27): [True: 72, False: 9.63k]
  ------------------
 2312|  12.9k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 9.63k, False: 1.31k]
  |  Branch (2312:27): [True: 212, False: 9.42k]
  ------------------
 2313|  12.9k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 9.42k, False: 1.31k]
  |  Branch (2313:27): [True: 72, False: 9.35k]
  ------------------
 2314|  12.9k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 9.35k, False: 1.31k]
  |  Branch (2314:27): [True: 78, False: 9.27k]
  ------------------
 2315|  12.9k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 9.08k, False: 1.51k]
  |  Branch (2315:28): [True: 84, False: 8.99k]
  ------------------
 2316|  12.9k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 8.99k, False: 1.51k]
  |  Branch (2316:28): [True: 248, False: 8.75k]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|  12.9k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 8.90k, False: 1.35k]
  |  Branch (2318:28): [True: 120, False: 8.78k]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|  12.9k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 8.78k, False: 1.35k]
  |  Branch (2320:28): [True: 36, False: 8.75k]
  ------------------
 2321|  2.79k|        return 2;
 2322|  2.79k|    }
 2323|   151k|    return 1;
 2324|   154k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|   115k|{
 2328|   115k|    return calculate_text_width_for_fmt_v10(cp);
 2329|   115k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|    310|{
 2343|    310|    return calculate_text_width_for_fmt_v10(cp);
 2344|    310|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  14.7k|{
 3123|  14.7k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  14.7k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  6.64k|{
 3127|  6.64k|#if WCHAR_MIN < 0
 3128|  6.64k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 6.64k, False: 0]
  |  Branch (3128:20): [True: 6.64k, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  6.64k|        return char_to_int(static_cast<char>(ch));
 3133|  6.64k|    }
 3134|      0|    return 255;
 3135|  6.64k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4270|  12.2k|{
 4271|  12.2k|    std::regex_constants::syntax_option_type result{};
 4272|  12.2k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4272:9): [True: 306, False: 11.9k]
  ------------------
 4273|    306|#if SCN_HAS_STD_REGEX_MULTILINE
 4274|    306|        result |= std::regex_constants::multiline;
 4275|       |#else
 4276|       |        return unexpected_scan_error(
 4277|       |            scan_error::invalid_format_string,
 4278|       |            "/m flag for regex isn't supported by regex backend");
 4279|       |#endif
 4280|    306|    }
 4281|  12.2k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4281:9): [True: 0, False: 12.2k]
  ------------------
 4282|  12.2k|        detail::regex_flags::none) {
 4283|      0|        return unexpected_scan_error(
 4284|      0|            scan_error::invalid_format_string,
 4285|      0|            "/s flag for regex isn't supported by regex backend");
 4286|      0|    }
 4287|  12.2k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4287:9): [True: 1.21k, False: 10.9k]
  ------------------
 4288|  1.21k|        result |= std::regex_constants::icase;
 4289|  1.21k|    }
 4290|  12.2k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4290:9): [True: 6, False: 12.2k]
  ------------------
 4291|      6|        result |= std::regex_constants::nosubs;
 4292|      6|    }
 4293|  12.2k|    return result;
 4294|  12.2k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4637|    906|{
 4638|    906|    std::string result{pattern};
 4639|  7.66k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4639:24): [True: 6.76k, False: 906]
  ------------------
 4640|  6.76k|        result.replace(n, 2, "/");
 4641|  6.76k|        ++n;
 4642|  6.76k|    }
 4643|    906|    return result;
 4644|    906|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4646|    162|{
 4647|    162|    std::wstring result{pattern};
 4648|    486|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4648:24): [True: 324, False: 162]
  ------------------
 4649|    324|        result.replace(n, 2, L"/");
 4650|    324|        ++n;
 4651|    324|    }
 4652|    162|    return result;
 4653|    162|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  6.94k|{
 6008|  6.94k|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 1.66k, False: 5.28k]
  ------------------
 6009|  1.66k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 680, False: 980]
  ------------------
 6010|    680|            return {scan_error::invalid_scanned_value,
 6011|    680|                    "Scanned value too narrow, width did not exceed what "
 6012|    680|                    "was specified in the format string"};
 6013|    680|        }
 6014|  1.66k|    }
 6015|  6.26k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 1.42k, False: 4.84k]
  ------------------
 6016|  1.42k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 38, False: 1.38k]
  ------------------
 6017|     38|            return {scan_error::invalid_scanned_value,
 6018|     38|                    "Scanned value too wide, width exceeded the specified "
 6019|     38|                    "precision"};
 6020|     38|        }
 6021|  1.42k|    }
 6022|  6.23k|    return {};
 6023|  6.26k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   106k|    {
  304|   106k|        ranges::advance(x, n);
  305|   106k|        return x;
  306|   106k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   106k|    {
  268|   106k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   106k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   161k|    {
  151|   161k|        i += n;
  152|   161k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   110k|    {
  108|   110k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   110k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   110k|    {
   87|   110k|        return s - i;
   88|   110k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  5.05k|    {
  304|  5.05k|        ranges::advance(x, n);
  305|  5.05k|        return x;
  306|  5.05k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  5.05k|    {
  268|  5.05k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  5.05k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  5.05k|    {
  151|  5.05k|        i += n;
  152|  5.05k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|    444|    {
  108|    444|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|    444|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|    444|    {
   87|    444|        return s - i;
   88|    444|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5623|  5.36k|    {
 5624|  5.36k|        reader_error_handler eh{};
 5625|  5.36k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  5.36k|            detail::check_code_point_type_specs(specs, eh);
 5627|  5.36k|        }
 5628|  5.36k|        else {
 5629|  5.36k|            detail::check_char_type_specs(specs, eh);
 5630|  5.36k|        }
 5631|  5.36k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.85k, False: 506]
  |  |  ------------------
  ------------------
 5632|  4.85k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  4.85k|        }
 5634|    506|        return {};
 5635|  5.36k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  25.4k|    {
  763|  25.4k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  25.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  25.4k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  3.81k|    {
  754|  3.81k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  6.73k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.73k|              cvref<T> obj = *get<T>(fn);
  745|  6.73k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.73k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.73k|              }
  748|  6.73k|              else {
  749|  6.73k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.73k|              }
  751|  6.73k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  6.73k|    {
  684|  6.73k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.73k|            return static_cast<T*>(s.m_cp);
  686|  6.73k|        }
  687|  6.73k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.73k|            return static_cast<T*>(s.m_p);
  689|  6.73k|        }
  690|  6.73k|        else {
  691|  6.73k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.73k|        }
  693|  6.73k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  3.81k|        {
  662|  3.81k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  1.53M|    {
  763|  1.53M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.53M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  91.7k|    {
  754|  91.7k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|   737k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   737k|              cvref<T> obj = *get<T>(fn);
  745|   737k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   737k|                  obj(static_cast<decltype(args)>(args)...);
  747|   737k|              }
  748|   737k|              else {
  749|   737k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   737k|              }
  751|   737k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   737k|    {
  684|   737k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   737k|            return static_cast<T*>(s.m_cp);
  686|   737k|        }
  687|   737k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   737k|            return static_cast<T*>(s.m_p);
  689|   737k|        }
  690|   737k|        else {
  691|   737k|            return reinterpret_cast<T*>(s.m_fp);
  692|   737k|        }
  693|   737k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  91.7k|        {
  662|  91.7k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5618|  1.60k|    {
 5619|  1.60k|        return false;
 5620|  1.60k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.64k|    return [code, msg](parse_error err) {
  869|  3.64k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.64k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|     66|    {
 1780|     66|        auto stdloc = loc.get<std::locale>();
 1781|     66|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     66|        grouping = numpunct.grouping();
 1783|     66|        thousands_sep =
 1784|     66|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 66]
  ------------------
 1785|     66|        decimal_point = numpunct.decimal_point();
 1786|     66|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|     86|{
 1717|     86|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 86, False: 0]
  ------------------
 1718|     86|        return std::use_facet<Facet>(stdloc);
 1719|     86|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     86|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  26.4k|{
 2349|  26.4k|    size_t count{0};
 2350|  26.4k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  26.4k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  26.4k|    });
 2353|  26.4k|    return count;
 2354|  26.4k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  26.4k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  26.4k|    auto it = input.begin();
 1448|  59.7k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 33.3k, False: 26.4k]
  ------------------
 1449|  33.3k|        auto res = get_next_code_point(
 1450|  33.3k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  33.3k|        cb(res.value);
 1452|  33.3k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  33.3k|    }
 1454|  26.4k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  38.9k|    {
  763|  38.9k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  38.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  38.9k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  26.4k|    {
  754|  26.4k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  33.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  33.3k|              cvref<T> obj = *get<T>(fn);
  745|  33.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  33.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  33.3k|              }
  748|  33.3k|              else {
  749|  33.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  33.3k|              }
  751|  33.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  33.3k|    {
  684|  33.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  33.3k|            return static_cast<T*>(s.m_cp);
  686|  33.3k|        }
  687|  33.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  33.3k|            return static_cast<T*>(s.m_p);
  689|  33.3k|        }
  690|  33.3k|        else {
  691|  33.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  33.3k|        }
  693|  33.3k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  33.3k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  33.3k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  33.3k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  26.4k|        {
  662|  26.4k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  3.60k|    {
 1582|  3.60k|        return m_view;
 1583|  3.60k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  3.87k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2381|  18.1k|    {
 2382|  18.1k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2420|  1.19k|    {
 2421|  1.19k|        return m_multibyte_left;
 2422|  1.19k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|   363k|    {
 2426|   363k|        return *m_current;
 2427|   363k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|   286k|    {
 2435|   286k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   286k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   286k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|   286k|        _increment_current();
 2437|   286k|        return *this;
 2438|   286k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|   286k|    {
 2668|   286k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 121k, False: 165k]
  ------------------
 2669|   121k|            auto cplen = _get_cp_length_at_current();
 2670|   121k|            m_multibyte_left = cplen - 1;
 2671|   121k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|   121k|        }
 2673|   165k|        else {
 2674|   165k|            --m_multibyte_left;
 2675|   165k|        }
 2676|       |
 2677|   286k|        ++m_current;
 2678|   286k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|   121k|    {
 2639|   121k|        return static_cast<difference_type>(
 2640|   121k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|   121k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|   121k|    {
 2645|   121k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 812, False: 120k]
  |  |  ------------------
  ------------------
 2646|    812|            return 0;
 2647|    812|        }
 2648|       |
 2649|   120k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 95.6k, False: 24.6k]
  ------------------
 2650|  95.6k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  95.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  95.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  95.6k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  95.6k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  95.6k|        }
 2654|       |
 2655|  24.6k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  24.6k|                                           cplen);
 2657|  24.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 142, False: 24.5k]
  |  |  ------------------
  ------------------
 2658|    142|            return 0;
 2659|    142|        }
 2660|       |
 2661|  24.5k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  24.5k|        return static_cast<difference_type>(
 2663|  24.5k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  24.6k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  26.7k|{
 1857|  26.7k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  26.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  26.7k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  26.7k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  26.7k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 252, False: 26.5k]
  ------------------
 1862|    252|            return unexpected(eof_error::eof);
 1863|    252|        }
 1864|       |
 1865|  26.5k|        return ranges::next(range.begin(), count);
 1866|  26.7k|    }
 1867|  26.7k|    else {
 1868|  26.7k|        auto it = range.begin();
 1869|  26.7k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  26.7k|            return ranges::next(it, count);
 1871|  26.7k|        }
 1872|       |
 1873|  26.7k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  26.7k|            if (it == range.end()) {
 1875|  26.7k|                return unexpected(eof_error::eof);
 1876|  26.7k|            }
 1877|  26.7k|        }
 1878|       |
 1879|  26.7k|        return it;
 1880|  26.7k|    }
 1881|  26.7k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  2.92k|    {
  268|  2.92k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.92k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.92k|    {
  161|  2.92k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.92k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.92k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.92k|        else {
  169|  2.92k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.92k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.92k|        }
  173|  2.92k|    }
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|   151k|    {
 2531|   151k|        return !(a == b);
 2532|   151k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|   153k|    {
 2523|   153k|        return a.m_current == b.m_current;
 2524|   153k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1889|   117k|    {
 1890|   117k|        return !codepoint.empty();
 1891|   117k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  6.84k|    {
 2832|  6.84k|        return take_width_view{r, n};
 2833|  6.84k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2800|  6.84k|    {
 2801|  6.84k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|  6.84k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5662|    278|    {
 5663|    278|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 246, False: 32]
  ------------------
 5664|    278|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 32]
  ------------------
 5665|    246|            return read_default(range, value, loc);
 5666|    246|        }
 5667|       |
 5668|     32|        reader_impl_for_int<CharT> reader{};
 5669|     32|        signed char tmp_value{};
 5670|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     32|        value = static_cast<signed char>(value);
 5672|     32|        return ret;
 5673|    278|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5644|    246|    {
 5645|    246|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    246|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    246|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    246|            return code_unit_reader<char>{}.read(range, value);
 5648|    246|        }
 5649|    246|        else {
 5650|    246|            SCN_UNUSED(range);
 5651|    246|            SCN_EXPECT(false);
 5652|    246|            SCN_UNREACHABLE;
 5653|    246|        }
 5654|    246|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5563|    246|    {
 5564|    246|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    246|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    246|        ch = *range.begin();
 5566|    246|        return it;
 5567|    246|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  1.87k|{
 1846|  1.87k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.87k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  1.87k|    return ranges::next(range.begin());
 1851|  1.87k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  1.87k|{
  950|  1.87k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.87k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.87k|    return eof_error::good;
  954|  1.87k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  1.87k|{
  944|  1.87k|    return is_range_eof(r.begin(), r.end());
  945|  1.87k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|   120k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   120k|    {
  937|   120k|        return begin == end;
  938|   120k|    }
  939|   120k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   292k|        {
 2770|   292k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 1.19k, False: 290k]
  |  Branch (2770:39): [True: 796, False: 400]
  ------------------
 2771|   292k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 888, False: 290k]
  ------------------
 2772|   292k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|   222k|    {
 2816|   222k|        return sentinel<true>{m_base.get().end()};
 2817|   222k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|   258k|    {
 2717|   258k|        return view;
 2718|   258k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|   222k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.90k|    {
  296|  1.90k|        ++x;
  297|  1.90k|        return x;
  298|  1.90k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|  18.1k|    {
 2810|  18.1k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  18.1k|                                      m_count};
 2812|  18.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|     32|    {
 3539|     32|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     32|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     32|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 32]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     32|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 32]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     32|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3565|     32|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     32|    }                                                  \
  |  |  |  | 3667|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    820|{
 3326|    820|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|    820|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    820|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    820|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    820|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 820]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    820|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    820|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    820|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    820|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    820|        parse_integer_base_prefix(
 3331|    820|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    820|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 820]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    820|    else {
 3343|    820|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 820]
  |  Branch (3343:13): [True: 820, False: 0]
  ------------------
 3344|    820|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 820, False: 0]
  ------------------
 3345|    820|            digits_begin_it = base_prefix_begin_it;
 3346|    820|        }
 3347|    820|    }
 3348|       |
 3349|    820|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 820, False: 0]
  ------------------
 3350|    820|        sign = sign_type::plus_sign;
 3351|    820|    }
 3352|    820|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    820|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    820|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|  1.08k|{
 3141|  1.08k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.08k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.08k, False: 0]
  ------------------
 3143|  1.08k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.08k, False: 0]
  ------------------
 3144|  1.08k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.08k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.08k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|  1.08k|{
 2272|  1.08k|    auto it = read_code_unit(range);
 2273|  1.08k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.08k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  2.16k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.16k, False: 1.08k]
  ------------------
 2278|  2.16k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 2.16k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  2.16k|    }
 2282|       |
 2283|  1.08k|    return unexpected(parse_error::error);
 2284|  1.08k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    820|{
 3293|    820|    switch (base) {
 3294|     20|        case 2:
  ------------------
  |  Branch (3294:9): [True: 20, False: 800]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     20|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     20|                    false};
 3298|       |
 3299|     10|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 10, False: 810]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     10|            bool zero_parsed = false;
 3302|     10|            auto it = apply_opt(
 3303|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     10|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    256|        case 16:
  ------------------
  |  Branch (3307:9): [True: 256, False: 564]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    256|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    256|                    false};
 3311|       |
 3312|     20|        case 0:
  ------------------
  |  Branch (3312:9): [True: 20, False: 800]
  ------------------
 3313|       |            // detect base
 3314|     20|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    514|        default:
  ------------------
  |  Branch (3316:9): [True: 514, False: 306]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    514|            return {range.begin(), base, false};
 3319|    820|    }
 3320|    820|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    286|{
 2291|    286|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 286, False: 0]
  ------------------
 2292|    286|        return range.begin();
 2293|    286|    }
 2294|      0|    return *result;
 2295|    286|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     40|{
 3244|     40|    return read_matching_string_classic_nocase(range, "0b");
 3245|     40|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  1.12k|{
 2231|  1.12k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.12k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.12k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.12k|        if (range.size() < str.size()) {
 2236|  1.12k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.12k|        }
 2238|  1.12k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.12k|            return unexpected(parse_error::error);
 2240|  1.12k|        }
 2241|  1.12k|        return ranges::next(range.begin(), str.size());
 2242|  1.12k|    }
 2243|  1.12k|    else {
 2244|  1.12k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.12k|            if (ch < 'A' || ch > 'Z') {
 2246|  1.12k|                return ch;
 2247|  1.12k|            }
 2248|  1.12k|            return static_cast<char_type>(ch +
 2249|  1.12k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.12k|        };
 2251|       |
 2252|  1.12k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 118, False: 1.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    118|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    118|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    118|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    118|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    118|    }                                                  \
  |  |  |  | 3667|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.00k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.00k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.00k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.00k, False: 0]
  |  |  ------------------
  ------------------
 2257|  1.00k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.00k|                    return ascii_tolower(a) ==
 2259|  1.00k|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.00k|                }))) {
 2261|  1.00k|            return unexpected(parse_error::error);
 2262|  1.00k|        }
 2263|       |
 2264|      0|        return it;
 2265|  1.00k|    }
 2266|  1.12k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  1.45k|{
 1857|  1.45k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.45k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.45k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.45k|        if (sz < count) {
 1862|  1.45k|            return unexpected(eof_error::eof);
 1863|  1.45k|        }
 1864|       |
 1865|  1.45k|        return ranges::next(range.begin(), count);
 1866|  1.45k|    }
 1867|  1.45k|    else {
 1868|  1.45k|        auto it = range.begin();
 1869|  1.45k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 1.45k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  4.89k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 3.65k, False: 1.23k]
  ------------------
 1874|  3.65k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 214, False: 3.44k]
  ------------------
 1875|    214|                return unexpected(eof_error::eof);
 1876|    214|            }
 1877|  3.65k|        }
 1878|       |
 1879|  1.23k|        return it;
 1880|  1.45k|    }
 1881|  1.45k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  1.45k|{
 1095|  1.45k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.45k|        return r.size();
 1097|  1.45k|    }
 1098|  1.45k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.45k|                           ranges::const_iterator_t<Range>,
 1100|  1.45k|                           typename detail::basic_scan_buffer<
 1101|  1.45k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.45k|        if constexpr (ranges::common_range<Range>) {
 1103|  1.45k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.45k|        }
 1105|  1.45k|        else {
 1106|  1.45k|            if (r.begin().stores_parent()) {
 1107|  1.45k|                return static_cast<size_t>(
 1108|  1.45k|                    r.begin().parent()->chars_available() -
 1109|  1.45k|                    r.begin().position());
 1110|  1.45k|            }
 1111|  1.45k|            return r.begin().contiguous_segment().size();
 1112|  1.45k|        }
 1113|  1.45k|    }
 1114|  1.45k|    else {
 1115|  1.45k|        return 0;
 1116|  1.45k|    }
 1117|  1.45k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  1.00k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.00k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 42, False: 960]
  |  Branch (2245:29): [True: 960, False: 0]
  ------------------
 2246|  1.00k|                return ch;
 2247|  1.00k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.00k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     30|{
 3258|     30|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 30]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     30|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 30]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     30|    return unexpected(parse_error::error);
 3268|     30|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     30|{
 2146|     30|    auto it = read_code_unit(range);
 2147|     30|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 30]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     30|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30, False: 0]
  |  |  ------------------
  ------------------
 2152|     30|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     30|        return unexpected(parse_error::error);
 2154|     30|    }
 2155|       |
 2156|      0|    return *it;
 2157|     30|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     30|{
 1846|     30|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 30]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     30|    return ranges::next(range.begin());
 1851|     30|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.89k|{
  950|  1.89k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 1.82k]
  |  |  ------------------
  ------------------
  951|     74|        return eof_error::eof;
  952|     74|    }
  953|  1.82k|    return eof_error::good;
  954|  1.89k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|   118k|{
  944|   118k|    return is_range_eof(r.begin(), r.end());
  945|   118k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    276|{
 3251|    276|    return read_matching_string_classic_nocase(range, "0x");
 3252|    276|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     20|{
 3274|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 20]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 20]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     20|    {
 3281|     20|        bool zero_parsed{false};
 3282|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 20]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     20|    }
 3286|     20|    return {range.begin(), 10, false};
 3287|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    804|{
 3360|    804|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    804|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    804|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    804|            return unexpected_scan_error(
 3365|    804|                scan_error::invalid_scanned_value,
 3366|    804|                "Failed to parse integer: No digits found");
 3367|    804|        }
 3368|    804|        return range.end();
 3369|    804|    }
 3370|    804|    else {
 3371|    804|        return read_while1_code_unit(range,
 3372|    804|                                     [&](char_type ch) noexcept {
 3373|    804|                                         return char_to_int(ch) < base;
 3374|    804|                                     })
 3375|    804|            .transform_error(map_parse_error_to_scan_error(
 3376|    804|                scan_error::invalid_scanned_value,
 3377|    804|                "Failed to parse integer: No digits found"));
 3378|    804|    }
 3379|    804|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|  1.06k|{
 1996|  1.06k|    auto it = read_while_code_unit(range, pred);
 1997|  1.06k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.06k, False: 0]
  ------------------
 1998|  1.06k|        return unexpected(parse_error::error);
 1999|  1.06k|    }
 2000|      0|    return it;
 2001|  1.06k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|  1.06k|{
 1976|  1.06k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.06k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|  1.06k|{
 1957|  1.06k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.06k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.06k|    }
 1960|  1.06k|    else {
 1961|  1.06k|        auto first = range.begin();
 1962|  1.06k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.06k, False: 0]
  ------------------
 1963|  1.06k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.06k, False: 0]
  ------------------
 1964|  1.06k|                return first;
 1965|  1.06k|            }
 1966|  1.06k|        }
 1967|      0|        return first;
 1968|  1.06k|    }
 1969|  1.06k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|   163k|        {
 2781|   163k|            return !(y == x);
 2782|   163k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_:
  753|    804|    {
  754|    804|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|    804|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    804|              cvref<T> obj = *get<T>(fn);
  745|    804|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    804|                  obj(static_cast<decltype(args)>(args)...);
  747|    804|              }
  748|    804|              else {
  749|    804|                  return obj(static_cast<decltype(args)>(args)...);
  750|    804|              }
  751|    804|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|    804|    {
  684|    804|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    804|            return static_cast<T*>(s.m_cp);
  686|    804|        }
  687|    804|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    804|            return static_cast<T*>(s.m_p);
  689|    804|        }
  690|    804|        else {
  691|    804|            return reinterpret_cast<T*>(s.m_fp);
  692|    804|        }
  693|    804|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3372|    804|                                     [&](char_type ch) noexcept {
 3373|    804|                                         return char_to_int(ch) < base;
 3374|    804|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_LPv0EEEPSP_:
  661|    804|        {
  662|    804|        }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1682|  1.55k|{
 1683|  1.55k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.55k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.55k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.55k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  1.55k|    }
 1688|  1.55k|    else {
 1689|  1.55k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  1.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  1.55k|    }
 1691|  1.55k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EELPv0EEEOT_:
 1536|  1.55k|    {
 1537|  1.55k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  1.55k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1620|  1.55k|    {
 1621|  1.55k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.55k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.55k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.55k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.55k|            m_storage.reset();
 1627|  1.55k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.55k|        }
 1629|  1.55k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.55k|                                          std::basic_string<CharT>>) {
 1631|  1.55k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.55k|            m_view = string_view_type{*m_storage};
 1633|  1.55k|        }
 1634|  1.55k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  1.55k|                                          typename detail::basic_scan_buffer<
 1636|  1.55k|                                              value_t>::forward_iterator> &&
 1637|  1.55k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  1.55k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.55k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.55k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.55k|                             detail::to_address(end_seg.end()))) {
 1642|  1.55k|                auto& str = m_storage.emplace();
 1643|  1.55k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.55k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.55k|                m_view = string_view_type{str};
 1646|  1.55k|                return;
 1647|  1.55k|            }
 1648|       |
 1649|  1.55k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.55k|                                                            end_seg.data());
 1651|  1.55k|            m_storage.reset();
 1652|  1.55k|        }
 1653|  1.55k|        else {
 1654|  1.55k|            auto& str = m_storage.emplace();
 1655|  1.55k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|  1.55k|                str.reserve(range.size());
 1657|  1.55k|            }
 1658|  1.55k|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|  1.55k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.55k|                          std::back_inserter(str));
 1661|  1.55k|            }
 1662|  1.55k|            else {
 1663|  1.55k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.55k|                     ++it) {
 1665|  1.55k|                    str.push_back(*it);
 1666|  1.55k|                }
 1667|  1.55k|            }
 1668|  1.55k|            m_view = string_view_type{str};
 1669|  1.55k|        }
 1670|  1.55k|    }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     16|{
 3390|     16|    std::basic_string<CharT> output;
 3391|     16|    std::string thsep_indices;
 3392|     16|    auto it = range.begin();
 3393|     16|    bool digit_matched = false;
 3394|     16|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 16, False: 0]
  ------------------
 3395|     16|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 16]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     16|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 16, False: 0]
  ------------------
 3400|     16|            break;
 3401|     16|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     16|    }
 3407|     16|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3408|     16|        return unexpected_scan_error(
 3409|     16|            scan_error::invalid_scanned_value,
 3410|     16|            "Failed to parse integer: No digits found");
 3411|     16|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     16|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|   296k|    {
 2413|   296k|        return m_current;
 2414|   296k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|   296k|    {
 2417|   296k|        return m_count;
 2418|   296k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5662|    222|    {
 5663|    222|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 204, False: 18]
  ------------------
 5664|    222|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 18]
  ------------------
 5665|    204|            return read_default(range, value, loc);
 5666|    204|        }
 5667|       |
 5668|     18|        reader_impl_for_int<CharT> reader{};
 5669|     18|        signed char tmp_value{};
 5670|     18|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     18|        value = static_cast<signed char>(value);
 5672|     18|        return ret;
 5673|    222|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5644|    856|    {
 5645|    856|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    856|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    856|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    856|            return code_unit_reader<char>{}.read(range, value);
 5648|    856|        }
 5649|    856|        else {
 5650|    856|            SCN_UNUSED(range);
 5651|    856|            SCN_EXPECT(false);
 5652|    856|            SCN_UNREACHABLE;
 5653|    856|        }
 5654|    856|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5563|    856|    {
 5564|    856|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    856|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    856|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    856|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    856|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 856]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    856|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    856|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    856|        ch = *range.begin();
 5566|    856|        return it;
 5567|    856|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.23k|{
 1846|  6.23k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.23k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.23k|    return ranges::next(range.begin());
 1851|  6.23k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  21.5k|{
  950|  21.5k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  21.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.5k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  21.5k|    return eof_error::good;
  954|  21.5k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   506k|{
  944|   506k|    return is_range_eof(r.begin(), r.end());
  945|   506k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   611k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   611k|    {
  937|   611k|        return begin == end;
  938|   611k|    }
  939|   611k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  37.6k|    {
  296|  37.6k|        ++x;
  297|  37.6k|        return x;
  298|  37.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|     18|    {
 3539|     18|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     18|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     18|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 18]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     18|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 18]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     18|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     18|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 3565|     18|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|     18|                    parse_integer_digits_without_thsep(
 3567|     18|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|     18|                        prefix_result.parsed_base));
 3569|       |
 3570|     18|            auto buf = make_contiguous_buffer(
 3571|     18|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|     18|            SCN_TRY(result_it,
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|     18|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.65k|{
 3326|  2.65k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|  2.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.65k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.65k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.65k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.65k|        parse_integer_base_prefix(
 3331|  2.65k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.65k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.65k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.65k|    else {
 3343|  2.65k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.65k]
  ------------------
 3344|  2.65k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.65k, False: 0]
  ------------------
 3345|  2.65k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.65k|        }
 3347|  2.65k|    }
 3348|       |
 3349|  2.65k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.65k, False: 0]
  ------------------
 3350|  2.65k|        sign = sign_type::plus_sign;
 3351|  2.65k|    }
 3352|  2.65k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.65k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.65k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.56k|{
 3141|  3.56k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.56k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.56k, False: 0]
  ------------------
 3143|  3.56k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.56k, False: 0]
  ------------------
 3144|  3.56k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.56k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.56k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.56k|{
 2272|  3.56k|    auto it = read_code_unit(range);
 2273|  3.56k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.56k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.12k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.12k, False: 3.56k]
  ------------------
 2278|  7.12k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.12k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.12k|    }
 2282|       |
 2283|  3.56k|    return unexpected(parse_error::error);
 2284|  3.56k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.65k|{
 3293|  2.65k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 2.65k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     22|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 22, False: 2.63k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     22|            bool zero_parsed = false;
 3302|     22|            auto it = apply_opt(
 3303|     22|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     22|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    882|        case 16:
  ------------------
  |  Branch (3307:9): [True: 882, False: 1.77k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    882|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    882|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 2.64k]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.73k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.73k, False: 922]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.73k|            return {range.begin(), base, false};
 3319|  2.65k|    }
 3320|  2.65k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    910|{
 2291|    910|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 910, False: 0]
  ------------------
 2292|    910|        return range.begin();
 2293|    910|    }
 2294|      0|    return *result;
 2295|    910|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.62k|{
 2231|  3.62k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.62k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.62k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.62k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 3.61k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  3.61k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 3.61k, False: 0]
  ------------------
 2239|  3.61k|            return unexpected(parse_error::error);
 2240|  3.61k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|  3.61k|    }
 2243|  3.62k|    else {
 2244|  3.62k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.62k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.62k|                return ch;
 2247|  3.62k|            }
 2248|  3.62k|            return static_cast<char_type>(ch +
 2249|  3.62k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.62k|        };
 2251|       |
 2252|  3.62k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  3.62k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.62k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.62k|        if (SCN_UNLIKELY(!std::equal(
 2257|  3.62k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.62k|                    return ascii_tolower(a) ==
 2259|  3.62k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.62k|                }))) {
 2261|  3.62k|            return unexpected(parse_error::error);
 2262|  3.62k|        }
 2263|       |
 2264|  3.62k|        return it;
 2265|  3.62k|    }
 2266|  3.62k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.81k|{
 2146|  1.81k|    auto it = read_code_unit(range);
 2147|  1.81k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.81k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.81k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.81k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.81k|        return unexpected(parse_error::error);
 2154|  1.81k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.81k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    894|{
 3251|    894|    return read_matching_string_classic_nocase(range, "0x");
 3252|    894|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.62k|{
 3360|  2.62k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.62k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.62k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.62k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.62k|        return range.end();
 3369|  2.62k|    }
 3370|  2.62k|    else {
 3371|  2.62k|        return read_while1_code_unit(range,
 3372|  2.62k|                                     [&](char_type ch) noexcept {
 3373|  2.62k|                                         return char_to_int(ch) < base;
 3374|  2.62k|                                     })
 3375|  2.62k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.62k|                scan_error::invalid_scanned_value,
 3377|  2.62k|                "Failed to parse integer: No digits found"));
 3378|  2.62k|    }
 3379|  2.62k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     32|{
 3390|     32|    std::basic_string<CharT> output;
 3391|     32|    std::string thsep_indices;
 3392|     32|    auto it = range.begin();
 3393|     32|    bool digit_matched = false;
 3394|     32|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 32, False: 0]
  ------------------
 3395|     32|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 32]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     32|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 32, False: 0]
  ------------------
 3400|     32|            break;
 3401|     32|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     32|    }
 3407|     32|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3408|     32|        return unexpected_scan_error(
 3409|     32|            scan_error::invalid_scanned_value,
 3410|     32|            "Failed to parse integer: No digits found");
 3411|     32|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     32|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  13.4k|{
 1683|  13.4k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  13.4k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  13.4k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  13.4k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  13.4k|    }
 1688|  13.4k|    else {
 1689|  13.4k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  13.4k|    }
 1691|  13.4k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  13.4k|    {
 1490|  13.4k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|   173k|    {
 1503|   173k|        return sv;
 1504|   173k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|  2.94k|{
 5951|  2.94k|    using char_type = detail::char_t<Range>;
 5952|  2.94k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  2.94k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 2.49k, False: 450]
  ------------------
 5955|  2.49k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|  2.49k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|  2.49k|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 1.71k, False: 772]
  ------------------
 5959|  1.71k|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|  1.71k|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 198, False: 1.52k]
  ------------------
 5962|    198|                auto prefix_width =
 5963|    198|                    static_cast<std::ptrdiff_t>(
 5964|    198|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|    198|                    ranges::distance(range.begin(), it);
 5966|    198|                return result_type{it, prefix_width};
 5967|    198|            }
 5968|  1.52k|            return result_type{it, 0};
 5969|  1.71k|        }
 5970|       |
 5971|    772|        auto max_width_view = take_width(range, max_width);
 5972|    772|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    772|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 772, False: 0]
  ------------------
 5975|    772|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    772|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    772|    }
 5979|       |
 5980|    450|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    450|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 138, False: 312]
  ------------------
 5982|    138|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|    138|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 58, False: 80]
  ------------------
 5985|     58|            auto prefix_width =
 5986|     58|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|     58|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|     58|            return result_type{it, prefix_width};
 5989|     58|        }
 5990|     80|        return result_type{it, 0};
 5991|    138|    }
 5992|       |
 5993|    312|    auto max_width_view = take_width(range, max_width);
 5994|    312|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    312|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 312, False: 0]
  ------------------
 5997|    312|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    312|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    312|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.92k|{
 1976|  1.92k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.92k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  2.18k|{
 1957|  2.18k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.18k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.18k|    }
 1960|  2.18k|    else {
 1961|  2.18k|        auto first = range.begin();
 1962|  2.18k|        for (; first != range.end(); ++first) {
 1963|  2.18k|            if (pred(*first)) {
 1964|  2.18k|                return first;
 1965|  2.18k|            }
 1966|  2.18k|        }
 1967|  2.18k|        return first;
 1968|  2.18k|    }
 1969|  2.18k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_:
  753|  2.49k|    {
  754|  2.49k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  3.19k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.19k|              cvref<T> obj = *get<T>(fn);
  745|  3.19k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.19k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.19k|              }
  748|  3.19k|              else {
  749|  3.19k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.19k|              }
  751|  3.19k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  3.19k|    {
  684|  3.19k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.19k|            return static_cast<T*>(s.m_cp);
  686|  3.19k|        }
  687|  3.19k|        else if constexpr (std::is_object_v<T>) {
  688|  3.19k|            return static_cast<T*>(s.m_p);
  689|  3.19k|        }
  690|  3.19k|        else {
  691|  3.19k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.19k|        }
  693|  3.19k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  3.19k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSH_:
  666|  2.49k|        {
  667|  2.49k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    832|{
 1976|    832|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    832|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|  1.08k|{
 1957|  1.08k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.08k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.08k|    }
 1960|  1.08k|    else {
 1961|  1.08k|        auto first = range.begin();
 1962|  10.4k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 10.1k, False: 258]
  ------------------
 1963|  10.1k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 826, False: 9.35k]
  ------------------
 1964|    826|                return first;
 1965|    826|            }
 1966|  10.1k|        }
 1967|    258|        return first;
 1968|  1.08k|    }
 1969|  1.08k|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|    138|{
 2037|    138|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    138|    auto it = range.begin();
 2040|    180|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 180, False: 0]
  ------------------
 2041|    180|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    180|                                           needle.size());
 2043|    180|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 6, False: 174]
  ------------------
 2044|      6|            return it;
 2045|      6|        }
 2046|    174|        static_assert(
 2047|    174|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    174|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 132, False: 42]
  ------------------
 2049|    132|            return it;
 2050|    132|        }
 2051|     42|        it = *r;
 2052|     42|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|    312|{
 2037|    312|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    312|    auto it = range.begin();
 2040|    360|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 330, False: 30]
  ------------------
 2041|    330|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    330|                                           needle.size());
 2043|    330|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 96, False: 234]
  ------------------
 2044|     96|            return it;
 2045|     96|        }
 2046|    234|        static_assert(
 2047|    234|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    234|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 186, False: 48]
  ------------------
 2049|    186|            return it;
 2050|    186|        }
 2051|     48|        it = *r;
 2052|     48|    }
 2053|     30|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     30|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     30|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|     30|    return it;
 2055|     30|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|  2.19k|{
 2951|  2.19k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.86k, False: 326]
  ------------------
 2952|  1.86k|        auto it = read_while_classic_space(range);
 2953|  1.86k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.86k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 1.79k]
  |  |  ------------------
  ------------------
 2955|     74|            return unexpected(e);
 2956|     74|        }
 2957|       |
 2958|  1.79k|        return it;
 2959|  1.86k|    }
 2960|       |
 2961|    326|    return read_while_classic_space(range);
 2962|  2.19k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|  2.19k|{
 2117|  2.19k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.19k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.19k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.19k|        auto buf = make_contiguous_buffer(range);
 2121|  2.19k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.19k|        return ranges::next(range.begin(),
 2123|  2.19k|                            ranges::distance(buf.view().begin(), it));
 2124|  2.19k|    }
 2125|  2.19k|    else {
 2126|  2.19k|        auto it = range.begin();
 2127|       |
 2128|  2.19k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.19k|            auto seg = get_contiguous_beginning(range);
 2130|  2.19k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.19k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 2.19k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  2.19k|            ranges::advance(it, seg.size());
 2135|  2.19k|        }
 2136|       |
 2137|  2.19k|        return read_while_code_point(
 2138|  2.19k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.19k|    }
 2140|  2.19k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  2.92k|{
 1039|  2.92k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.92k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.92k|        return r;
 1042|  2.92k|    }
 1043|  2.92k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.92k|                           ranges::const_iterator_t<Range>,
 1045|  2.92k|                           typename detail::basic_scan_buffer<
 1046|  2.92k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.92k|        if constexpr (ranges::common_range<Range>) {
 1048|  2.92k|            auto seg = r.begin().contiguous_segment();
 1049|  2.92k|            auto dist =
 1050|  2.92k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.92k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.92k|        }
 1053|  2.92k|        else {
 1054|  2.92k|            return r.begin().contiguous_segment();
 1055|  2.92k|        }
 1056|  2.92k|    }
 1057|  2.92k|    else {
 1058|  2.92k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.92k|    }
 1060|  2.92k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|  2.49k|{
 2082|  2.49k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.49k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|  2.57k|{
 2061|  2.57k|    auto it = range.begin();
 2062|   100k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 100k, False: 214]
  ------------------
 2063|   100k|        const auto val =
 2064|   100k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   100k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 98.1k, False: 2.40k]
  |  |  ------------------
  ------------------
 2066|  98.1k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  98.1k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  98.1k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.35k, False: 95.7k]
  ------------------
 2069|  2.35k|                return it;
 2070|  2.35k|            }
 2071|  98.1k|        }
 2072|  98.1k|        it = val.iterator;
 2073|  98.1k|    }
 2074|       |
 2075|    214|    return it;
 2076|  2.57k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|   117k|{
 1899|   117k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   117k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   117k|    auto it = range.begin();
 1903|   117k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   117k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.54k, False: 112k]
  |  |  ------------------
  ------------------
 1906|  4.54k|        ++it;
 1907|  4.54k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  4.54k|        return {it, {}};
 1909|  4.54k|    }
 1910|       |
 1911|   112k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 103k, False: 8.79k]
  ------------------
 1912|   103k|        ++it;
 1913|   103k|        return {it, string_type(1, *range.begin())};
 1914|   103k|    }
 1915|       |
 1916|  8.79k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  8.79k|    return {it, string_type{range.begin(), it}};
 1918|   112k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  4.54k|{
 1155|  4.54k|    auto it = input.begin();
 1156|  12.8k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 12.6k, False: 138]
  ------------------
 1157|  12.6k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 4.40k, False: 8.26k]
  ------------------
 1158|  4.40k|            break;
 1159|  4.40k|        }
 1160|  12.6k|    }
 1161|  4.54k|    return it;
 1162|  4.54k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  8.79k|    {
  283|  8.79k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  8.79k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  8.79k|    {
  227|  8.79k|        constexpr iter_difference_t<I> zero{0};
  228|  8.79k|        iter_difference_t<I> counter{0};
  229|       |
  230|  8.79k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 8.79k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  8.79k|        else {
  237|  27.2k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 18.4k, False: 8.76k]
  |  Branch (237:34): [True: 18.4k, False: 30]
  ------------------
  238|  18.4k|                ++i;
  239|  18.4k|                ++counter;
  240|  18.4k|            }
  241|  8.79k|        }
  242|       |
  243|  8.79k|        return counter;
  244|  8.79k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  2.19k|    {
  754|  2.19k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  7.28k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.28k|              cvref<T> obj = *get<T>(fn);
  745|  7.28k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.28k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.28k|              }
  748|  7.28k|              else {
  749|  7.28k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.28k|              }
  751|  7.28k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  7.28k|    {
  684|  7.28k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.28k|            return static_cast<T*>(s.m_cp);
  686|  7.28k|        }
  687|  7.28k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.28k|            return static_cast<T*>(s.m_p);
  689|  7.28k|        }
  690|  7.28k|        else {
  691|  7.28k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.28k|        }
  693|  7.28k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  7.28k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  2.19k|        {
  662|  2.19k|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  6.98k|{
 2951|  6.98k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 6.80k, False: 176]
  ------------------
 2952|  6.80k|        auto it = read_while_classic_space(range);
 2953|  6.80k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  6.80k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.80k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  6.80k|        return it;
 2959|  6.80k|    }
 2960|       |
 2961|    176|    return read_while_classic_space(range);
 2962|  6.98k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  75.7k|{
 2117|  75.7k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  75.7k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  75.7k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  75.7k|        auto buf = make_contiguous_buffer(range);
 2121|  75.7k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  75.7k|        return ranges::next(range.begin(),
 2123|  75.7k|                            ranges::distance(buf.view().begin(), it));
 2124|  75.7k|    }
 2125|  75.7k|    else {
 2126|  75.7k|        auto it = range.begin();
 2127|       |
 2128|  75.7k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  75.7k|            auto seg = get_contiguous_beginning(range);
 2130|  75.7k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  75.7k|                seg_it != seg.end()) {
 2132|  75.7k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  75.7k|            }
 2134|  75.7k|            ranges::advance(it, seg.size());
 2135|  75.7k|        }
 2136|       |
 2137|  75.7k|        return read_while_code_point(
 2138|  75.7k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  75.7k|    }
 2140|  75.7k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  78.5k|{
 1683|  78.5k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  78.5k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  78.5k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  78.5k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  78.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  78.5k|    }
 1688|  78.5k|    else {
 1689|  78.5k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  78.5k|    }
 1691|  78.5k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  78.5k|    {
 1490|  78.5k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  10.8k|    {
 3040|  10.8k|        reader_error_handler eh{};
 3041|  10.8k|        get_derived().check_specs_impl(specs, eh);
 3042|  10.8k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.74k, False: 1.06k]
  |  |  ------------------
  ------------------
 3043|  9.74k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.74k|        }
 3045|  1.06k|        return {};
 3046|  10.8k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  10.8k|    {
 3051|  10.8k|        return static_cast<Derived&>(*this);
 3052|  10.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  10.8k|    {
 3485|  10.8k|        detail::check_int_type_specs(specs, eh);
 3486|  10.8k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  2.36k|    {
 3035|  2.36k|        return true;
 3036|  2.36k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    272|    {
 3539|    272|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    272|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    272|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 272]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    272|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 272]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    272|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    272|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 264, False: 8]
  |  |  ------------------
  ------------------
 3565|    264|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 264, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    264|    }                                                  \
  |  |  |  | 3667|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      8|    }                                                  \
  |  |  |  | 3667|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    238|    {
 3539|    238|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 238]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    238|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    238|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 238]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    238|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 238]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    238|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    238|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 222, False: 16]
  |  |  ------------------
  ------------------
 3565|    222|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    222|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    222|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    222|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 222]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    222|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    222|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    222|                    parse_integer_digits_without_thsep(
 3567|    222|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    222|                        prefix_result.parsed_base));
 3569|       |
 3570|    222|            auto buf = make_contiguous_buffer(
 3571|    222|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    222|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    222|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    222|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    222|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 222, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    222|    }                                                  \
  |  |  |  | 3667|    222|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    222|        }
 3580|       |
 3581|     16|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     16|            localized_number_formatting_options<CharT>{loc};
 3586|     16|#endif
 3587|       |
 3588|     16|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     16|    }                                                  \
  |  |  |  | 3667|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    272|    {
 3539|    272|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    272|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    272|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 272]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    272|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 272]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    272|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    272|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 264, False: 8]
  |  |  ------------------
  ------------------
 3565|    264|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 264, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    264|    }                                                  \
  |  |  |  | 3667|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      8|    }                                                  \
  |  |  |  | 3667|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    238|    {
 3539|    238|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 238]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    238|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    238|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 238]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    238|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 238]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    238|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    238|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 222, False: 16]
  |  |  ------------------
  ------------------
 3565|    222|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    222|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    222|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    222|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 222]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    222|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    222|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    222|                    parse_integer_digits_without_thsep(
 3567|    222|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    222|                        prefix_result.parsed_base));
 3569|       |
 3570|    222|            auto buf = make_contiguous_buffer(
 3571|    222|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    222|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    222|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    222|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    222|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 222, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    222|    }                                                  \
  |  |  |  | 3667|    222|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    222|        }
 3580|       |
 3581|     16|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     16|            localized_number_formatting_options<CharT>{loc};
 3586|     16|#endif
 3587|       |
 3588|     16|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     16|    }                                                  \
  |  |  |  | 3667|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    244|    {
 3539|    244|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 244]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    244|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    244|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 244]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    244|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 244]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    244|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    244|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 244, False: 0]
  |  |  ------------------
  ------------------
 3565|    244|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 244, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    244|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    244|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    244|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    244|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    244|    }                                                  \
  |  |  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    860|    {
 3539|    860|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    860|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    860|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    860|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    860|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 860]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    860|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    860|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    860|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    860|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 860]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    860|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 860]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    860|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    860|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 860, False: 0]
  |  |  ------------------
  ------------------
 3565|    860|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    860|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    860|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    860|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    860|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 860]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    860|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    860|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    860|                    parse_integer_digits_without_thsep(
 3567|    860|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    860|                        prefix_result.parsed_base));
 3569|       |
 3570|    860|            auto buf = make_contiguous_buffer(
 3571|    860|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    860|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    860|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    860|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    860|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    860|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 860, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    860|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    860|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    860|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    860|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    860|    }                                                  \
  |  |  |  | 3667|    860|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    860|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  5.40k|    {
 3040|  5.40k|        reader_error_handler eh{};
 3041|  5.40k|        get_derived().check_specs_impl(specs, eh);
 3042|  5.40k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.88k, False: 520]
  |  |  ------------------
  ------------------
 3043|  4.88k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.88k|        }
 3045|    520|        return {};
 3046|  5.40k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  5.40k|    {
 3051|  5.40k|        return static_cast<Derived&>(*this);
 3052|  5.40k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  5.40k|    {
 4145|  5.40k|        detail::check_float_type_specs(specs, eh);
 4146|  5.40k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  1.17k|    {
 3035|  1.17k|        return true;
 3036|  1.17k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|    510|    {
 4217|    510|        unsigned options{};
 4218|    510|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 18, False: 492]
  ------------------
 4219|     18|            options |= float_reader_base::allow_thsep;
 4220|     18|        }
 4221|       |
 4222|    510|        SCN_GCC_COMPAT_PUSH
 4223|    510|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    510|        switch (specs.type) {
 4226|     28|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 28, False: 482]
  ------------------
 4227|     28|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      6|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 6, False: 504]
  ------------------
 4230|      6|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     14|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 14, False: 496]
  ------------------
 4233|     14|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      2|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 2, False: 508]
  ------------------
 4236|      2|                return options | float_reader_base::allow_scientific |
 4237|      2|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    460|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 460, False: 50]
  ------------------
 4240|    460|                return options | float_reader_base::allow_scientific |
 4241|    460|                       float_reader_base::allow_fixed |
 4242|    460|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 510]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    510|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    510|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    510|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|    510|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  1.16k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  2.32k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|    872|    {
 4057|    872|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 872, False: 0]
  ------------------
 4058|    872|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 872, False: 0]
  ------------------
 4059|    872|            return;
 4060|    872|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|    608|    {
 1587|    608|        return m_storage.has_value();
 1588|    608|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|    304|    {
 1592|    304|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    304|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    304|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    304|        return *m_storage;
 1594|    304|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    260|    {
  763|    260|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    260|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    260|    {
 3705|    260|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    260|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    260|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    260|        auto it = sign_result.first;
 3708|    260|        m_sign = sign_result.second;
 3709|       |
 3710|    260|        auto digits_begin = it;
 3711|    260|        auto r = ranges::subrange{it, range.end()};
 3712|    260|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    260|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    260|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    260|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    260|                SCN_TRY_ASSIGN(
 3717|    260|                    it,
 3718|    260|                    do_read_source_impl(
 3719|    260|                        r,
 3720|    260|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    260|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    260|            }
 3723|    260|            else {
 3724|    260|                auto cb = [&](const auto& rr)
 3725|    260|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    260|                    auto res = read_all(rr);
 3727|    260|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    260|                        return unexpected_scan_error(
 3729|    260|                            scan_error::invalid_scanned_value,
 3730|    260|                            "Invalid float value");
 3731|    260|                    }
 3732|    260|                    return res;
 3733|    260|                };
 3734|    260|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    260|            }
 3736|    260|        }
 3737|    260|        else {
 3738|    260|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 260, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    260|    }                                                  \
  |  | 3667|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    260|    {
 4000|    260|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    260|        const bool allowed_nonhex =
 4002|    260|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    260|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    260|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 260, False: 0]
  |  Branch (4005:45): [True: 0, False: 260]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    260|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 260]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    260|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 260, False: 0]
  |  Branch (4014:45): [True: 0, False: 260]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    260|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 260]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    260|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 254, False: 6]
  |  Branch (4021:28): [True: 4, False: 250]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      4|            auto it = range.begin();
 4025|       |
 4026|      4|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 4]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      4|            else {
 4031|      4|                m_kind = float_kind::hex_without_prefix;
 4032|      4|            }
 4033|       |
 4034|      4|            return read_hex(ranges::subrange{it, range.end()});
 4035|      4|        }
 4036|    256|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 6, False: 250]
  |  Branch (4036:29): [True: 6, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      6|            m_kind = float_kind::generic;
 4040|      6|            return read_regular_float(range);
 4041|      6|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    250|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    250|        m_kind = float_kind::generic;
 4052|    250|        return read_regular(range);
 4053|    250|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    260|    {
 3811|    260|        auto it = range.begin();
 3812|    260|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 260, False: 0]
  ------------------
 3813|    260|            return unexpected(r.error());
 3814|    260|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    260|    {
 3834|    260|        auto it = range.begin();
 3835|    260|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 260, False: 0]
  ------------------
 3836|    260|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    260|                scan_error::invalid_scanned_value,
 3838|    260|                "Invalid floating-point NaN value"));
 3839|    260|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    254|    {
 3804|    254|        return read_matching_string_classic_nocase(range, "0x");
 3805|    254|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      4|    {
 3904|      4|        auto it = range.begin();
 3905|       |
 3906|      4|        std::ptrdiff_t digits_count = 0;
 3907|      4|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      4|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 3909|      4|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      4|                scan_error::invalid_scanned_value,
 3911|      4|                "Invalid hexadecimal floating-point value"));
 3912|      4|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      4|    {
 3789|      4|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      4|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      4|        return read_while1_code_unit(
 3798|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      4|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|      4|    {
  754|      4|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      4|    {
  684|      4|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      4|            return static_cast<T*>(s.m_cp);
  686|      4|        }
  687|      4|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      4|            return static_cast<T*>(s.m_p);
  689|      4|        }
  690|      4|        else {
  691|      4|            return reinterpret_cast<T*>(s.m_fp);
  692|      4|        }
  693|      4|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3798|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|      4|        {
  662|      4|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    256|    {
 3944|    256|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    256|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 250, False: 6]
  |  Branch (3945:50): [True: 0, False: 250]
  ------------------
 3946|       |
 3947|    256|        auto it = ranges::begin(range);
 3948|    256|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    256|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    256|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 256, False: 0]
  |  |  ------------------
  ------------------
 3952|    256|            return r.transform_error(
 3953|    256|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    256|                                              "Invalid floating-point value"));
 3955|    256|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    256|    {
 3774|    256|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256]
  |  |  |  Branch (859:45): [True: 0, False: 256]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    256|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    256|        return read_while1_code_unit(
 3783|    256|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    256|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|    256|    {
  754|    256|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|    256|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    256|              cvref<T> obj = *get<T>(fn);
  745|    256|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    256|                  obj(static_cast<decltype(args)>(args)...);
  747|    256|              }
  748|    256|              else {
  749|    256|                  return obj(static_cast<decltype(args)>(args)...);
  750|    256|              }
  751|    256|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    256|    {
  684|    256|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    256|            return static_cast<T*>(s.m_cp);
  686|    256|        }
  687|    256|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    256|            return static_cast<T*>(s.m_p);
  689|    256|        }
  690|    256|        else {
  691|    256|            return reinterpret_cast<T*>(s.m_fp);
  692|    256|        }
  693|    256|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3783|    256|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|    256|        {
  662|    256|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    252|    {
 3665|    252|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    252|        return read_source_impl(range);
 3671|    252|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    902|    {
  763|    902|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    902|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    902|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     10|    {
 3679|     10|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     10|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     10|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 10]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     10|        return read_source_impl(range);
 3685|     10|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    902|    {
 3705|    902|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    902|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    902|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    902|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    902|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 902]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    902|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    902|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    902|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    902|        auto it = sign_result.first;
 3708|    902|        m_sign = sign_result.second;
 3709|       |
 3710|    902|        auto digits_begin = it;
 3711|    902|        auto r = ranges::subrange{it, range.end()};
 3712|    902|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    902|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    902|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 902]
  |  |  |  Branch (859:45): [True: 0, False: 902]
  |  |  |  Branch (859:45): [True: 0, False: 902]
  |  |  ------------------
  ------------------
 3715|    902|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    902|            else {
 3724|    902|                auto cb = [&](const auto& rr)
 3725|    902|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    902|                    auto res = read_all(rr);
 3727|    902|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    902|                        return unexpected_scan_error(
 3729|    902|                            scan_error::invalid_scanned_value,
 3730|    902|                            "Invalid float value");
 3731|    902|                    }
 3732|    902|                    return res;
 3733|    902|                };
 3734|    902|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|    902|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    902|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    902|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 30, False: 872]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     30|    }                                                  \
  |  | 3667|    902|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    902|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    872|            }
 3736|    902|        }
 3737|    872|        else {
 3738|    872|            SCN_TRY_ASSIGN(
 3739|    872|                it,
 3740|    872|                do_read_source_impl(
 3741|    872|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|    872|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|    872|        }
 3744|       |
 3745|    872|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    872|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 872, False: 0]
  |  Branch (3747:48): [True: 872, False: 0]
  ------------------
 3748|    872|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 872, False: 0]
  ------------------
 3749|    872|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 872, False: 0]
  ------------------
 3750|    872|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    872|        }
 3752|       |
 3753|    872|        handle_separators();
 3754|       |
 3755|    872|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 872]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    872|        return it;
 3768|    872|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    902|    {
 3811|    902|        auto it = range.begin();
 3812|    902|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 902, False: 0]
  ------------------
 3813|    902|            return unexpected(r.error());
 3814|    902|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    902|    {
 3834|    902|        auto it = range.begin();
 3835|    902|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 902, False: 0]
  ------------------
 3836|    902|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    902|                scan_error::invalid_scanned_value,
 3838|    902|                "Invalid floating-point NaN value"));
 3839|    902|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    872|    {
 3804|    872|        return read_matching_string_classic_nocase(range, "0x");
 3805|    872|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     30|{
 1996|     30|    auto it = read_while_code_unit(range, pred);
 1997|     30|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 30, False: 0]
  ------------------
 1998|     30|        return unexpected(parse_error::error);
 1999|     30|    }
 2000|      0|    return it;
 2001|     30|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     30|    {
 3944|     30|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     30|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 8, False: 22]
  |  Branch (3945:50): [True: 6, False: 2]
  ------------------
 3946|       |
 3947|     30|        auto it = ranges::begin(range);
 3948|     30|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     30|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     30|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30, False: 0]
  |  |  ------------------
  ------------------
 3952|     30|            return r.transform_error(
 3953|     30|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     30|                                              "Invalid floating-point value"));
 3955|     30|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     30|    {
 3774|     30|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 30]
  |  |  |  Branch (859:45): [True: 0, False: 30]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     30|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     30|        return read_while1_code_unit(
 3783|     30|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     30|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     30|    {
  684|     30|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     30|            return static_cast<T*>(s.m_cp);
  686|     30|        }
  687|     30|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     30|            return static_cast<T*>(s.m_p);
  689|     30|        }
  690|     30|        else {
  691|     30|            return reinterpret_cast<T*>(s.m_fp);
  692|     30|        }
  693|     30|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|     30|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    902|    {
 4000|    902|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    902|        const bool allowed_nonhex =
 4002|    902|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    902|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    902|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 902, False: 0]
  |  Branch (4005:45): [True: 0, False: 902]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    902|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 902]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    902|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 902, False: 0]
  |  Branch (4014:45): [True: 0, False: 902]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    902|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 902]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    902|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 872, False: 30]
  |  Branch (4021:28): [True: 10, False: 862]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     10|            auto it = range.begin();
 4025|       |
 4026|     10|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 10]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     10|            else {
 4031|     10|                m_kind = float_kind::hex_without_prefix;
 4032|     10|            }
 4033|       |
 4034|     10|            return read_hex(ranges::subrange{it, range.end()});
 4035|     10|        }
 4036|    892|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 30, False: 862]
  |  Branch (4036:29): [True: 30, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     30|            m_kind = float_kind::generic;
 4040|     30|            return read_regular_float(range);
 4041|     30|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    862|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    862|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 862]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    862|        m_kind = float_kind::generic;
 4052|    862|        return read_regular(range);
 4053|    862|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    872|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    872|                    auto res = read_all(rr);
 3727|    872|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 872]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    872|                    return res;
 3733|    872|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    872|{
 1839|    872|    return ranges::next(range.begin(), range.end());
 1840|    872|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    872|    {
  313|    872|        ranges::advance(x, bound);
  314|    872|        return x;
  315|    872|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    872|    {
  275|    872|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    872|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    914|    {
  190|    914|        i = std::move(bound);
  191|    914|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|    872|    {
 1577|    872|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    872|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|    872|    {
 1621|    872|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    872|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    872|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    872|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    872|            m_storage.reset();
 1627|    872|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    872|        }
 1629|    872|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    872|                                          std::basic_string<CharT>>) {
 1631|    872|            m_storage.emplace(SCN_FWD(range));
 1632|    872|            m_view = string_view_type{*m_storage};
 1633|    872|        }
 1634|    872|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    872|                                          typename detail::basic_scan_buffer<
 1636|    872|                                              value_t>::forward_iterator> &&
 1637|    872|                           ranges::common_range<Range>) {
 1638|    872|            auto beg_seg = range.begin().contiguous_segment();
 1639|    872|            auto end_seg = range.end().contiguous_segment();
 1640|    872|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    872|                             detail::to_address(end_seg.end()))) {
 1642|    872|                auto& str = m_storage.emplace();
 1643|    872|                str.reserve(range.end().position() - range.begin().position());
 1644|    872|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    872|                m_view = string_view_type{str};
 1646|    872|                return;
 1647|    872|            }
 1648|       |
 1649|    872|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    872|                                                            end_seg.data());
 1651|    872|            m_storage.reset();
 1652|    872|        }
 1653|    872|        else {
 1654|    872|            auto& str = m_storage.emplace();
 1655|    872|            if constexpr (ranges::sized_range<Range>) {
 1656|    872|                str.reserve(range.size());
 1657|    872|            }
 1658|    872|            if constexpr (ranges::common_range<Range>) {
 1659|    872|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    872|                          std::back_inserter(str));
 1661|    872|            }
 1662|    872|            else {
 1663|    872|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    872|                     ++it) {
 1665|    872|                    str.push_back(*it);
 1666|    872|                }
 1667|    872|            }
 1668|    872|            m_view = string_view_type{str};
 1669|    872|        }
 1670|    872|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    892|    {
 3665|    892|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 892]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    892|        return read_source_impl(range);
 3671|    892|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    872|    {
 3691|    872|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    872|        const std::ptrdiff_t sign_len =
 3694|    872|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 872]
  ------------------
 3695|       |
 3696|    872|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 872, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    872|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    872|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    872|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    872|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    872|    }                                                  \
  |  |  |  | 3667|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    872|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    260|    {
 4170|    260|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    260|#if !SCN_DISABLE_LOCALE
 4173|    260|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 252]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    252|#endif
 4182|       |
 4183|    252|        return read_impl<Range>(
 4184|    252|            range, rd,
 4185|    252|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    252|                return r.read_source(SCN_FWD(args)...);
 4187|    252|            },
 4188|    252|            value);
 4189|    260|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    260|    {
 4206|    260|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    260|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 260, False: 0]
  |  |  ------------------
  ------------------
 4208|    260|            return unexpected(r.error());
 4209|    260|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    252|    {
  754|    252|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    252|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    252|              cvref<T> obj = *get<T>(fn);
  745|    252|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    252|                  obj(static_cast<decltype(args)>(args)...);
  747|    252|              }
  748|    252|              else {
  749|    252|                  return obj(static_cast<decltype(args)>(args)...);
  750|    252|              }
  751|    252|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    252|    {
  684|    252|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    252|            return static_cast<T*>(s.m_cp);
  686|    252|        }
  687|    252|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    252|            return static_cast<T*>(s.m_p);
  689|    252|        }
  690|    252|        else {
  691|    252|            return reinterpret_cast<T*>(s.m_fp);
  692|    252|        }
  693|    252|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    252|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    252|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    252|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  661|    252|        {
  662|    252|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    250|    {
 4170|    250|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    250|#if !SCN_DISABLE_LOCALE
 4173|    250|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 10, False: 240]
  ------------------
 4174|     10|            return read_impl<Range>(
 4175|     10|                range, rd,
 4176|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     10|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     10|                },
 4179|     10|                value, loc);
 4180|     10|        }
 4181|    240|#endif
 4182|       |
 4183|    240|        return read_impl<Range>(
 4184|    240|            range, rd,
 4185|    240|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    240|                return r.read_source(SCN_FWD(args)...);
 4187|    240|            },
 4188|    240|            value);
 4189|    250|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    902|    {
 4206|    902|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    902|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    902|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30, False: 872]
  |  |  ------------------
  ------------------
 4208|     30|            return unexpected(r.error());
 4209|     30|        }
 4210|       |
 4211|    872|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 872, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    872|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    872|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    872|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    872|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    872|    }                                                  \
  |  |  |  | 3667|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    872|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     10|    {
  684|     10|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     10|            return static_cast<T*>(s.m_cp);
  686|     10|        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     10|            return static_cast<T*>(s.m_p);
  689|     10|        }
  690|     10|        else {
  691|     10|            return reinterpret_cast<T*>(s.m_fp);
  692|     10|        }
  693|     10|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     10|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     10|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    240|    {
  754|    240|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    240|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    240|              cvref<T> obj = *get<T>(fn);
  745|    240|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    240|                  obj(static_cast<decltype(args)>(args)...);
  747|    240|              }
  748|    240|              else {
  749|    240|                  return obj(static_cast<decltype(args)>(args)...);
  750|    240|              }
  751|    240|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    240|    {
  684|    240|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    240|            return static_cast<T*>(s.m_cp);
  686|    240|        }
  687|    240|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    240|            return static_cast<T*>(s.m_p);
  689|    240|        }
  690|    240|        else {
  691|    240|            return reinterpret_cast<T*>(s.m_fp);
  692|    240|        }
  693|    240|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    240|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    240|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    240|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|    240|        {
  662|    240|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|  6.01k|{
 5809|  6.01k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  6.01k|        return reader_impl_for_bool<CharT>{};
 5811|  6.01k|    }
 5812|  6.01k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  6.01k|        return reader_impl_for_char<CharT>{};
 5814|  6.01k|    }
 5815|  6.01k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  6.01k|        return reader_impl_for_wchar<CharT>{};
 5817|  6.01k|    }
 5818|  6.01k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  6.01k|        return reader_impl_for_code_point<CharT>{};
 5820|  6.01k|    }
 5821|  6.01k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  6.01k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.01k|        return reader_impl_for_string<CharT>{};
 5824|  6.01k|    }
 5825|  6.01k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  6.01k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  6.01k|        return reader_impl_for_string<CharT>{};
 5828|  6.01k|    }
 5829|  6.01k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  6.01k|                       std::is_same_v<T, wregex_matches>) {
 5831|  6.01k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  6.01k|    }
 5833|  6.01k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  6.01k|        return reader_impl_for_voidptr<CharT>{};
 5835|  6.01k|    }
 5836|  6.01k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  6.01k|        return reader_impl_for_float<CharT>{};
 5838|  6.01k|    }
 5839|  6.01k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  6.01k|                       !std::is_same_v<T, wchar_t> &&
 5841|  6.01k|                       !std::is_same_v<T, char32_t> &&
 5842|  6.01k|                       !std::is_same_v<T, bool>) {
 5843|  6.01k|        return reader_impl_for_int<CharT>{};
 5844|  6.01k|    }
 5845|  6.01k|    else {
 5846|  6.01k|        return reader_impl_for_monostate<CharT>{};
 5847|  6.01k|    }
 5848|  6.01k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|  18.0k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  16.0k|    {
 3040|  16.0k|        reader_error_handler eh{};
 3041|  16.0k|        get_derived().check_specs_impl(specs, eh);
 3042|  16.0k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 336, False: 15.7k]
  |  |  ------------------
  ------------------
 3043|    336|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    336|        }
 3045|  15.7k|        return {};
 3046|  16.0k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  16.0k|    {
 3051|  16.0k|        return static_cast<Derived&>(*this);
 3052|  16.0k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  16.0k|    {
 5210|  16.0k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  16.0k|        SCN_GCC_PUSH
 5213|  16.0k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  16.0k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  16.0k|        SCN_CLANG_PUSH
 5217|  16.0k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  16.0k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  16.0k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 330, False: 15.7k]
  ------------------
 5221|  1.35k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.35k, False: 14.7k]
  ------------------
 5222|  1.35k|                m_type = reader_type::word;
 5223|  1.35k|                break;
 5224|       |
 5225|    498|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 498, False: 15.5k]
  ------------------
 5226|    498|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 78, False: 420]
  ------------------
 5227|    498|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 216, False: 204]
  ------------------
 5228|    294|                    m_type = reader_type::custom_word;
 5229|    294|                }
 5230|    204|                else {
 5231|    204|                    m_type = reader_type::word;
 5232|    204|                }
 5233|    498|                break;
 5234|      0|            }
 5235|       |
 5236|    114|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 114, False: 15.9k]
  ------------------
 5237|    114|                m_type = reader_type::character;
 5238|    114|                break;
 5239|       |
 5240|  3.44k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 3.44k, False: 12.6k]
  ------------------
 5241|  3.44k|                m_type = reader_type::character_set;
 5242|  3.44k|                break;
 5243|       |
 5244|  9.44k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 9.44k, False: 6.64k]
  ------------------
 5245|  9.44k|                m_type = reader_type::regex;
 5246|  9.44k|                break;
 5247|       |
 5248|    906|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 906, False: 15.1k]
  ------------------
 5249|    906|                m_type = reader_type::regex_escaped;
 5250|    906|                break;
 5251|  16.0k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  16.0k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|  21.6k|    {
 5259|  21.6k|        return m_type == reader_type::word;
 5260|  21.6k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  10.1k|{
 1132|  10.1k|    auto it = src.begin();
 1133|   769k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 761k, False: 8.24k]
  ------------------
 1134|   761k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   761k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.32k, False: 760k]
  ------------------
 1136|  1.32k|            return false;
 1137|  1.32k|        }
 1138|   760k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 234, False: 759k]
  ------------------
 1139|    234|            return false;
 1140|    234|        }
 1141|   759k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   759k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   759k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 378, False: 759k]
  ------------------
 1144|    378|            return false;
 1145|    378|        }
 1146|   759k|        it += len;
 1147|   759k|    }
 1148|  8.24k|    return true;
 1149|  10.1k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    304|{
 2993|    304|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    304|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 304, False: 0]
  ------------------
 2995|    304|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    304|    static_cast<    \
  |  |  929|    304|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    304|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    304|    }
 3001|    304|    else {
 3002|    304|        return transcode_impl(source.view(), dest);
 3003|    304|    }
 3004|       |
 3005|    304|    return {};
 3006|    304|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  3.44k|        {
 5103|  3.44k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 540, False: 2.90k]
  ------------------
 5104|    540|                return {};
 5105|    540|            }
 5106|       |
 5107|  2.90k|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|  2.90k|            auto it = detail::to_address(charset_string.begin());
 5109|  2.90k|            auto set = detail::parse_presentation_set(
 5110|  2.90k|                it, detail::to_address(charset_string.end()), nonascii);
 5111|  2.90k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  2.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.90k]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|  2.90k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  2.90k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|  2.90k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  2.90k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|  2.90k|            std::sort(nonascii.extra_ranges.begin(),
 5118|  2.90k|                      nonascii.extra_ranges.end());
 5119|  2.90k|            return {};
 5120|  2.90k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|   574k|        {
 5138|   574k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 62.1k, False: 512k]
  ------------------
 5139|  62.1k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  62.1k|            }
 5141|       |
 5142|   512k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|   574k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  62.1k|        {
 5086|       |            // TODO: binary search?
 5087|  62.1k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 62.1k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  62.1k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  62.1k|            return std::find_if(
 5093|  62.1k|                       nonascii.extra_ranges.begin(),
 5094|  62.1k|                       nonascii.extra_ranges.end(),
 5095|  62.1k|                       [cp_val](const auto& pair) noexcept {
 5096|  62.1k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  62.1k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  62.1k|                       }) != nonascii.extra_ranges.end();
 5099|  62.1k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  16.4M|                       [cp_val](const auto& pair) noexcept {
 5096|  16.4M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 16.4M, False: 3.72k]
  ------------------
 5097|  16.4M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 61.0k, False: 16.3M]
  ------------------
 5098|  16.4M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|   519k|        {
 5076|   519k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|   519k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   519k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|   519k|            const auto val =
 5078|   519k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|   519k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|   519k|                    (val % 8)) &
 5081|   519k|                   1u;
 5082|   519k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  9.61k|        {
 5129|  9.61k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 2.44k, False: 7.17k]
  ------------------
 5130|  2.44k|                return false;
 5131|  2.44k|            }
 5132|       |
 5133|  7.17k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  9.61k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  3.44k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    638|    {
 5277|    638|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    638|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    638|        return read_impl(range, specs, value);
 5279|    638|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    638|    {
 5295|    638|        SCN_CLANG_PUSH
 5296|    638|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    638|        switch (m_type) {
 5299|    244|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 244, False: 394]
  ------------------
 5300|    244|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     50|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 50, False: 588]
  ------------------
 5303|     50|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     50|                                                                   value);
 5305|       |
 5306|     36|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 36, False: 602]
  ------------------
 5307|     36|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    196|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 196, False: 442]
  ------------------
 5310|    196|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    196|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 636]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    110|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 110, False: 528]
  ------------------
 5320|    110|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    110|                    range,
 5322|    110|                    get_unescaped_regex_pattern(
 5323|    110|                        specs.charset_string<SourceCharT>()),
 5324|    110|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 638]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    638|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    638|        }
 5331|       |
 5332|    638|        SCN_CLANG_POP
 5333|    638|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    244|    {
 4820|    244|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    244|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    330|{
 4752|    330|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    330|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    330|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 144, False: 186]
  ------------------
 4756|    144|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    144|                                     "Invalid encoding in scanned string");
 4758|    144|    }
 4759|    186|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    186|    static_cast<    \
  |  |  929|    186|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    186|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 186]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    186|    return SCN_MOVE(result);
  ------------------
  |  |  928|    186|    static_cast<    \
  |  |  929|    186|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    186|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    732|{
 2088|    732|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    732|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    732|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    732|        auto buf = make_contiguous_buffer(range);
 2092|    732|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    732|        return ranges::next(range.begin(),
 2094|    732|                            ranges::distance(buf.view().begin(), it));
 2095|    732|    }
 2096|    732|    else {
 2097|    732|        auto it = range.begin();
 2098|       |
 2099|    732|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    732|            auto seg = get_contiguous_beginning(range);
 2101|    732|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    732|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 732]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|    732|            ranges::advance(it, seg.size());
 2106|    732|        }
 2107|       |
 2108|    732|        return read_until_code_point(
 2109|    732|            ranges::subrange{it, range.end()},
 2110|    732|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    732|    }
 2112|    732|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    732|{
 2061|    732|    auto it = range.begin();
 2062|  16.9k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 16.4k, False: 480]
  ------------------
 2063|  16.4k|        const auto val =
 2064|  16.4k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  16.4k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  16.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.3k, False: 2.13k]
  |  |  ------------------
  ------------------
 2066|  14.3k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  14.3k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  14.3k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 252, False: 14.1k]
  ------------------
 2069|    252|                return it;
 2070|    252|            }
 2071|  14.3k|        }
 2072|  16.2k|        it = val.iterator;
 2073|  16.2k|    }
 2074|       |
 2075|    480|    return it;
 2076|    732|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    732|    {
  754|    732|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  14.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.3k|              cvref<T> obj = *get<T>(fn);
  745|  14.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.3k|              }
  748|  14.3k|              else {
  749|  14.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.3k|              }
  751|  14.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  14.3k|    {
  684|  14.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.3k|            return static_cast<T*>(s.m_cp);
  686|  14.3k|        }
  687|  14.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  14.3k|            return static_cast<T*>(s.m_p);
  689|  14.3k|        }
  690|  14.3k|        else {
  691|  14.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.3k|        }
  693|  14.3k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  14.3k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    732|        {
  662|    732|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     50|    {
 4841|     50|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 16]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     16|        return read_string_impl(
 4851|     16|            range,
 4852|     16|            read_until_code_units(
 4853|     16|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     16|            value);
 4855|     50|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|  1.13k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.13k|              cvref<T> obj = *get<T>(fn);
  745|  1.13k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.13k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.13k|              }
  748|  1.13k|              else {
  749|  1.13k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.13k|              }
  751|  1.13k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.13k|    {
  684|  1.13k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.13k|            return static_cast<T*>(s.m_cp);
  686|  1.13k|        }
  687|  1.13k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.13k|            return static_cast<T*>(s.m_p);
  689|  1.13k|        }
  690|  1.13k|        else {
  691|  1.13k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.13k|        }
  693|  1.13k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|  1.13k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2006|     48|{
 2007|     48|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     48|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     48|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     48|                           needle.end());
 2012|     48|    }
 2013|     48|    else {
 2014|     48|        auto first = range.begin();
 2015|    144|        while (true) {
  ------------------
  |  Branch (2015:16): [Folded - Ignored]
  ------------------
 2016|    144|            auto it = first;
 2017|    258|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|    258|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2018:21): [True: 36, False: 222]
  ------------------
 2019|     36|                    return first;
 2020|     36|                }
 2021|    222|                if (it == range.end()) {
  ------------------
  |  Branch (2021:21): [True: 12, False: 210]
  ------------------
 2022|     12|                    return it;
 2023|     12|                }
 2024|    210|                if (*it != *needle_it) {
  ------------------
  |  Branch (2024:21): [True: 96, False: 114]
  ------------------
 2025|     96|                    break;
 2026|     96|                }
 2027|    210|            }
 2028|     96|            ++first;
 2029|     96|        }
 2030|     48|    }
 2031|     48|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     36|    {
 4947|     36|        return read_impl(
 4948|     36|            range,
 4949|     36|            [&](const auto& rng) {
 4950|     36|                return read_string_impl(rng, read_all(rng), value);
 4951|     36|            },
 4952|     36|            detail::priority_tag<1>{});
 4953|     36|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     36|    {
 4974|     36|        return read_cb(range);
 4975|     36|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     36|            [&](const auto& rng) {
 4950|     36|                return read_string_impl(rng, read_all(rng), value);
 4951|     36|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|    108|{
 1839|    108|    return ranges::next(range.begin(), range.end());
 1840|    108|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    108|    {
  313|    108|        ranges::advance(x, bound);
  314|    108|        return x;
  315|    108|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    108|    {
  275|    108|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    108|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    108|    {
  203|  3.03k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 2.92k, False: 108]
  ------------------
  204|  2.92k|            ++i;
  205|  2.92k|        }
  206|    108|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    196|    {
 5048|    196|        auto it = read_source_impl(range, {specs});
 5049|    196|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 188]
  |  |  ------------------
  ------------------
 5050|      8|            return unexpected(it.error());
 5051|      8|        }
 5052|       |
 5053|    188|        return read_string_impl(range, *it, value);
 5054|    196|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5152|    588|    {
 5153|    588|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    588|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    588|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    588|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 588]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    588|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    588|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 378, False: 210]
  ------------------
 5163|    378|            const auto cb = [&](char32_t cp) {
 5164|    378|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    378|            };
 5166|       |
 5167|    378|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 78, False: 300]
  ------------------
 5168|     78|                auto it = read_until_code_point(range, cb);
 5169|     78|                return check_nonempty(it, range);
 5170|     78|            }
 5171|    300|            auto it = read_while_code_point(range, cb);
 5172|    300|            return check_nonempty(it, range);
 5173|    378|        }
 5174|       |
 5175|    210|        const auto cb = [&](SourceCharT ch) {
 5176|    210|            return cb_wrapper.on_ascii_only(ch);
 5177|    210|        };
 5178|       |
 5179|    210|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 150, False: 60]
  ------------------
 5180|    150|            auto it = read_until_code_unit(range, cb);
 5181|    150|            return check_nonempty(it, range);
 5182|    150|        }
 5183|     60|        auto it = read_while_code_unit(range, cb);
 5184|     60|        return check_nonempty(it, range);
 5185|    210|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_:
  753|    378|    {
  754|    378|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  90.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  90.8k|              cvref<T> obj = *get<T>(fn);
  745|  90.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  90.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  90.8k|              }
  748|  90.8k|              else {
  749|  90.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  90.8k|              }
  751|  90.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  90.8k|    {
  684|  90.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  90.8k|            return static_cast<T*>(s.m_cp);
  686|  90.8k|        }
  687|  90.8k|        else if constexpr (std::is_object_v<T>) {
  688|  90.8k|            return static_cast<T*>(s.m_p);
  689|  90.8k|        }
  690|  90.8k|        else {
  691|  90.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  90.8k|        }
  693|  90.8k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  90.8k|            const auto cb = [&](char32_t cp) {
 5164|  90.8k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  90.8k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_LPv0EEEPKSL_:
  666|    378|        {
  667|    378|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5190|    588|    {
 5191|    588|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 24, False: 564]
  ------------------
 5192|     24|            return unexpected_scan_error(
 5193|     24|                scan_error::invalid_scanned_value,
 5194|     24|                "No characters matched in [character set]");
 5195|     24|        }
 5196|       |
 5197|    564|        return it;
 5198|    588|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_:
  753|    210|    {
  754|    210|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  5.67k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.67k|              cvref<T> obj = *get<T>(fn);
  745|  5.67k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.67k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.67k|              }
  748|  5.67k|              else {
  749|  5.67k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.67k|              }
  751|  5.67k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.67k|    {
  684|  5.67k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.67k|            return static_cast<T*>(s.m_cp);
  686|  5.67k|        }
  687|  5.67k|        else if constexpr (std::is_object_v<T>) {
  688|  5.67k|            return static_cast<T*>(s.m_p);
  689|  5.67k|        }
  690|  5.67k|        else {
  691|  5.67k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.67k|        }
  693|  5.67k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5175|  5.67k|        const auto cb = [&](SourceCharT ch) {
 5176|  5.67k|            return cb_wrapper.on_ascii_only(ch);
 5177|  5.67k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_LPv0EEEPKSL_:
  666|    210|        {
  667|    210|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    188|{
 4752|    188|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    188|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    188|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 70, False: 118]
  ------------------
 4756|     70|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     70|                                     "Invalid encoding in scanned string");
 4758|     70|    }
 4759|    118|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    118|    static_cast<    \
  |  |  929|    118|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    118|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 118]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    118|    return SCN_MOVE(result);
  ------------------
  |  |  928|    118|    static_cast<    \
  |  |  929|    118|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    118|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    112|    {
 4891|    112|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    112|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    112|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    112|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 112, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    112|    }                                                  \
  |  |  |  | 3667|    112|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    112|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|    336|    {
 4913|    336|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|    672|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|    336|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|    336|            return unexpected_scan_error(
 4916|    336|                scan_error::invalid_scanned_value,
 4917|    336|                "Regex backend doesn't support wide strings as input");
 4918|    336|        }
 4919|    336|        else {
 4920|    336|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 336, False: 0]
  ------------------
 4921|    336|                return unexpected_scan_error(
 4922|    336|                    scan_error::invalid_scanned_value,
 4923|    336|                    "Cannot use regex with a non-contiguous source "
 4924|    336|                    "range");
 4925|    336|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|    336|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|    336|{
  959|    336|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|    336|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|    336|        return true;
  962|    336|    }
  963|    336|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|    336|                           ranges::const_iterator_t<Range>,
  965|    336|                           typename detail::basic_scan_buffer<
  966|    336|                               detail::char_t<Range>>::forward_iterator>) {
  967|    336|        auto beg = r.begin();
  968|    336|        if (!beg.stores_parent()) {
  969|    336|            return true;
  970|    336|        }
  971|    336|        return beg.parent()->is_contiguous();
  972|    336|    }
  973|    336|    else {
  974|    336|        return false;
  975|    336|    }
  976|    336|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  4.60k|    {
 5277|  4.60k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.60k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.60k|        return read_impl(range, specs, value);
 5279|  4.60k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  4.60k|    {
 5295|  4.60k|        SCN_CLANG_PUSH
 5296|  4.60k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.60k|        switch (m_type) {
 5299|    268|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 268, False: 4.33k]
  ------------------
 5300|    268|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     48|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 48, False: 4.55k]
  ------------------
 5303|     48|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     48|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.60k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    952|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 952, False: 3.65k]
  ------------------
 5310|    952|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    952|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.14k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.14k, False: 1.46k]
  ------------------
 5315|  3.14k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.14k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.14k|                    specs.regexp_flags, value);
 5318|       |
 5319|    192|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 192, False: 4.41k]
  ------------------
 5320|    192|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    192|                    range,
 5322|    192|                    get_unescaped_regex_pattern(
 5323|    192|                        specs.charset_string<SourceCharT>()),
 5324|    192|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.60k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.60k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.60k|        }
 5331|       |
 5332|  4.60k|        SCN_CLANG_POP
 5333|  4.60k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    920|    {
 4820|    920|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    920|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    968|{
 4752|    968|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    968|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    968|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 310, False: 658]
  ------------------
 4756|    310|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    310|                                     "Invalid encoding in scanned string");
 4758|    310|    }
 4759|    658|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    658|    static_cast<    \
  |  |  929|    658|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    658|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 658]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    658|    return SCN_MOVE(result);
  ------------------
  |  |  928|    658|    static_cast<    \
  |  |  929|    658|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    658|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.75k|{
 3012|  1.75k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.75k|        dest.assign(source.view());
 3014|  1.75k|    }
 3015|  1.75k|    else {
 3016|  1.75k|        return transcode_impl(source.view(), dest);
 3017|  1.75k|    }
 3018|       |
 3019|  1.75k|    return {};
 3020|  1.75k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.76k|{
 2088|  2.76k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.76k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.76k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.76k|        auto buf = make_contiguous_buffer(range);
 2092|  2.76k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.76k|        return ranges::next(range.begin(),
 2094|  2.76k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.76k|    }
 2096|  2.76k|    else {
 2097|  2.76k|        auto it = range.begin();
 2098|       |
 2099|  2.76k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.76k|            auto seg = get_contiguous_beginning(range);
 2101|  2.76k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.76k|                seg_it != seg.end()) {
 2103|  2.76k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.76k|            }
 2105|  2.76k|            ranges::advance(it, seg.size());
 2106|  2.76k|        }
 2107|       |
 2108|  2.76k|        return read_until_code_point(
 2109|  2.76k|            ranges::subrange{it, range.end()},
 2110|  2.76k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.76k|    }
 2112|  2.76k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     48|    {
 4841|     48|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 14]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     48|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    474|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    474|              cvref<T> obj = *get<T>(fn);
  745|    474|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    474|                  obj(static_cast<decltype(args)>(args)...);
  747|    474|              }
  748|    474|              else {
  749|    474|                  return obj(static_cast<decltype(args)>(args)...);
  750|    474|              }
  751|    474|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    474|    {
  684|    474|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    474|            return static_cast<T*>(s.m_cp);
  686|    474|        }
  687|    474|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    474|            return static_cast<T*>(s.m_p);
  689|    474|        }
  690|    474|        else {
  691|    474|            return reinterpret_cast<T*>(s.m_fp);
  692|    474|        }
  693|    474|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    474|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2006|     42|{
 2007|     42|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     42|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     42|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     42|                           needle.end());
 2012|     42|    }
 2013|     42|    else {
 2014|     42|        auto first = range.begin();
 2015|     42|        while (true) {
 2016|     42|            auto it = first;
 2017|     42|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|     42|                if (needle_it == needle.end()) {
 2019|     42|                    return first;
 2020|     42|                }
 2021|     42|                if (it == range.end()) {
 2022|     42|                    return it;
 2023|     42|                }
 2024|     42|                if (*it != *needle_it) {
 2025|     42|                    break;
 2026|     42|                }
 2027|     42|            }
 2028|     42|            ++first;
 2029|     42|        }
 2030|     42|    }
 2031|     42|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    952|    {
 5048|    952|        auto it = read_source_impl(range, {specs});
 5049|    952|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    952|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 268, False: 684]
  |  |  ------------------
  ------------------
 5050|    268|            return unexpected(it.error());
 5051|    268|        }
 5052|       |
 5053|    684|        return read_string_impl(range, *it, value);
 5054|    952|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  2.85k|    {
 5153|  2.85k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  2.85k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  2.85k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.85k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  2.85k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  2.85k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 2.52k, False: 330]
  ------------------
 5163|  2.52k|            const auto cb = [&](char32_t cp) {
 5164|  2.52k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  2.52k|            };
 5166|       |
 5167|  2.52k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 252, False: 2.27k]
  ------------------
 5168|    252|                auto it = read_until_code_point(range, cb);
 5169|    252|                return check_nonempty(it, range);
 5170|    252|            }
 5171|  2.27k|            auto it = read_while_code_point(range, cb);
 5172|  2.27k|            return check_nonempty(it, range);
 5173|  2.52k|        }
 5174|       |
 5175|    330|        const auto cb = [&](SourceCharT ch) {
 5176|    330|            return cb_wrapper.on_ascii_only(ch);
 5177|    330|        };
 5178|       |
 5179|    330|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 156, False: 174]
  ------------------
 5180|    156|            auto it = read_until_code_unit(range, cb);
 5181|    156|            return check_nonempty(it, range);
 5182|    156|        }
 5183|    174|        auto it = read_while_code_unit(range, cb);
 5184|    174|        return check_nonempty(it, range);
 5185|    330|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  2.52k|{
 2061|  2.52k|    auto it = range.begin();
 2062|   485k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 485k, False: 228]
  ------------------
 2063|   485k|        const auto val =
 2064|   485k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   485k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   485k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 483k, False: 1.67k]
  |  |  ------------------
  ------------------
 2066|   483k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   483k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   483k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.29k, False: 481k]
  ------------------
 2069|  2.29k|                return it;
 2070|  2.29k|            }
 2071|   483k|        }
 2072|   482k|        it = val.iterator;
 2073|   482k|    }
 2074|       |
 2075|    228|    return it;
 2076|  2.52k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   485k|{
 1899|   485k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   485k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   485k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   485k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   485k|    auto it = range.begin();
 1903|   485k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   485k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   485k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.67k, False: 483k]
  |  |  ------------------
  ------------------
 1906|  1.67k|        ++it;
 1907|  1.67k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  1.67k|        return {it, {}};
 1909|  1.67k|    }
 1910|       |
 1911|   483k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 428k, False: 55.1k]
  ------------------
 1912|   428k|        ++it;
 1913|   428k|        return {it, string_type(1, *range.begin())};
 1914|   428k|    }
 1915|       |
 1916|  55.1k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  55.1k|    return {it, string_type{range.begin(), it}};
 1918|   483k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  1.67k|{
 1155|  1.67k|    auto it = input.begin();
 1156|  4.31k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 4.24k, False: 72]
  ------------------
 1157|  4.24k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.60k, False: 2.64k]
  ------------------
 1158|  1.60k|            break;
 1159|  1.60k|        }
 1160|  4.24k|    }
 1161|  1.67k|    return it;
 1162|  1.67k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  55.1k|    {
  283|  55.1k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  55.1k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  55.1k|    {
  212|  55.1k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 42, False: 55.0k]
  ------------------
  213|     42|            auto dist = bound - i;
  214|     42|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     42|            return dist;
  216|     42|        }
  217|  55.0k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  55.0k|        return n;
  219|  55.1k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|   110k|    {
  132|   110k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 110k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   110k|        return t;
  136|   110k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|   485k|    {
 1890|   485k|        return !codepoint.empty();
 1891|   485k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  2.52k|    {
  754|  2.52k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|   483k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   483k|              cvref<T> obj = *get<T>(fn);
  745|   483k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   483k|                  obj(static_cast<decltype(args)>(args)...);
  747|   483k|              }
  748|   483k|              else {
  749|   483k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   483k|              }
  751|   483k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   483k|    {
  684|   483k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   483k|            return static_cast<T*>(s.m_cp);
  686|   483k|        }
  687|   483k|        else if constexpr (std::is_object_v<T>) {
  688|   483k|            return static_cast<T*>(s.m_p);
  689|   483k|        }
  690|   483k|        else {
  691|   483k|            return reinterpret_cast<T*>(s.m_fp);
  692|   483k|        }
  693|   483k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|   483k|            const auto cb = [&](char32_t cp) {
 5164|   483k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|   483k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  2.52k|        {
  667|  2.52k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  2.85k|    {
 5191|  2.85k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 804, False: 2.05k]
  ------------------
 5192|    804|            return unexpected_scan_error(
 5193|    804|                scan_error::invalid_scanned_value,
 5194|    804|                "No characters matched in [character set]");
 5195|    804|        }
 5196|       |
 5197|  2.05k|        return it;
 5198|  2.85k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  2.27k|{
 2082|  2.27k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.27k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|    330|    {
  754|    330|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  3.94k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.94k|              cvref<T> obj = *get<T>(fn);
  745|  3.94k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.94k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.94k|              }
  748|  3.94k|              else {
  749|  3.94k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.94k|              }
  751|  3.94k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  3.94k|    {
  684|  3.94k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.94k|            return static_cast<T*>(s.m_cp);
  686|  3.94k|        }
  687|  3.94k|        else if constexpr (std::is_object_v<T>) {
  688|  3.94k|            return static_cast<T*>(s.m_p);
  689|  3.94k|        }
  690|  3.94k|        else {
  691|  3.94k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.94k|        }
  693|  3.94k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  3.94k|        const auto cb = [&](SourceCharT ch) {
 5176|  3.94k|            return cb_wrapper.on_ascii_only(ch);
 5177|  3.94k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|    330|        {
  667|    330|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.22k|{
 4752|  1.22k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.22k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.22k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 120, False: 1.10k]
  ------------------
 4756|    120|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    120|                                     "Invalid encoding in scanned string");
 4758|    120|    }
 4759|  1.10k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.10k|    static_cast<    \
  |  |  929|  1.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.10k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.10k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.10k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.10k|    static_cast<    \
  |  |  929|  1.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.10k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.33k|    {
 4891|  3.33k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  3.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.80k, False: 536]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.80k|    }                                                  \
  |  |  |  | 3667|  3.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    536|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    536|        return read_string_impl(range, it, value);
 4893|  3.33k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  10.0k|    {
 4913|  10.0k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  20.0k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  10.0k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  10.0k|            return unexpected_scan_error(
 4916|  10.0k|                scan_error::invalid_scanned_value,
 4917|  10.0k|                "Regex backend doesn't support wide strings as input");
 4918|  10.0k|        }
 4919|  10.0k|        else {
 4920|  10.0k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 10.0k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  10.0k|            auto input = get_as_contiguous(range);
 4928|  10.0k|            SCN_TRY(it,
  ------------------
  |  | 3668|  10.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.40k, False: 1.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  8.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  8.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  8.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  8.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  8.40k|    }                                                  \
  |  |  |  | 3667|  10.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  1.60k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  1.60k|            return ranges::next(range.begin(),
 4931|  1.60k|                                ranges::distance(input.begin(), it));
 4932|  10.0k|        }
 4933|  10.0k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  10.0k|{
  959|  10.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  10.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  10.0k|        return true;
  962|  10.0k|    }
  963|  10.0k|    else if constexpr (std::is_same_v<
  964|  10.0k|                           ranges::const_iterator_t<Range>,
  965|  10.0k|                           typename detail::basic_scan_buffer<
  966|  10.0k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  10.0k|        auto beg = r.begin();
  968|  10.0k|        if (!beg.stores_parent()) {
  969|  10.0k|            return true;
  970|  10.0k|        }
  971|  10.0k|        return beg.parent()->is_contiguous();
  972|  10.0k|    }
  973|  10.0k|    else {
  974|  10.0k|        return false;
  975|  10.0k|    }
  976|  10.0k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  10.0k|{
 1065|  10.0k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  10.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  10.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  10.0k|        return r;
 1070|  10.0k|    }
 1071|  10.0k|    else if constexpr (std::is_same_v<
 1072|  10.0k|                           ranges::const_iterator_t<Range>,
 1073|  10.0k|                           typename detail::basic_scan_buffer<
 1074|  10.0k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  10.0k|        if constexpr (ranges::common_range<Range>) {
 1076|  10.0k|            return detail::make_string_view_from_pointers(
 1077|  10.0k|                r.begin().to_contiguous_segment_iterator(),
 1078|  10.0k|                r.end().to_contiguous_segment_iterator());
 1079|  10.0k|        }
 1080|  10.0k|        else {
 1081|  10.0k|            return r.begin().contiguous_segment();
 1082|  10.0k|        }
 1083|  10.0k|    }
 1084|  10.0k|    else {
 1085|  10.0k|        SCN_EXPECT(false);
 1086|  10.0k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  10.0k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  10.0k|    }
 1090|  10.0k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  10.0k|{
  981|  10.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  10.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  10.0k|        return true;
  984|  10.0k|    }
  985|  10.0k|    else if constexpr (std::is_same_v<
  986|  10.0k|                           ranges::const_iterator_t<Range>,
  987|  10.0k|                           typename detail::basic_scan_buffer<
  988|  10.0k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  10.0k|        auto beg = r.begin();
  990|  10.0k|        if (beg.contiguous_segment().empty()) {
  991|  10.0k|            return false;
  992|  10.0k|        }
  993|  10.0k|        if constexpr (ranges::common_range<Range>) {
  994|  10.0k|            return beg.contiguous_segment().end() ==
  995|  10.0k|                   ranges::end(r).contiguous_segment().end();
  996|  10.0k|        }
  997|  10.0k|        else {
  998|  10.0k|            if (beg.stores_parent()) {
  999|  10.0k|                return beg.contiguous_segment().end() ==
 1000|  10.0k|                       beg.parent()->current_view().end();
 1001|  10.0k|            }
 1002|  10.0k|            return true;
 1003|  10.0k|        }
 1004|  10.0k|    }
 1005|  10.0k|    else {
 1006|  10.0k|        return false;
 1007|  10.0k|    }
 1008|  10.0k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  10.0k|{
 4346|  10.0k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  10.0k|                  ranges::borrowed_range<Input> &&
 4348|  10.0k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  10.0k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  10.0k|    std::basic_regex<CharT> re{};
 4352|  10.0k|    try {
 4353|  10.0k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3668|  10.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 10.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  10.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  10.0k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  10.0k|                                     re_flags | std::regex_constants::nosubs};
 4356|  10.0k|    }
 4357|  10.0k|    catch (const std::regex_error& err) {
 4358|  5.38k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  5.38k|                                     "Invalid regex");
 4360|  5.38k|    }
 4361|       |
 4362|  4.62k|    std::match_results<const CharT*> matches{};
 4363|  4.62k|    try {
 4364|  4.62k|        bool found = std::regex_search(input.data(),
 4365|  4.62k|                                       input.data() + input.size(), matches, re,
 4366|  4.62k|                                       std::regex_constants::match_continuous);
 4367|  4.62k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 3.01k, False: 1.60k]
  |  Branch (4367:23): [True: 0, False: 1.60k]
  ------------------
 4368|  2.80k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  2.80k|                                         "Regular expression didn't match");
 4370|  2.80k|        }
 4371|  4.62k|    }
 4372|  4.62k|    catch (const std::regex_error& err) {
 4373|    210|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|    210|                                     "Regex matching failed with an error");
 4375|    210|    }
 4376|       |
 4377|  1.60k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  4.62k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5808|  6.01k|{
 5809|  6.01k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  6.01k|        return reader_impl_for_bool<CharT>{};
 5811|  6.01k|    }
 5812|  6.01k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  6.01k|        return reader_impl_for_char<CharT>{};
 5814|  6.01k|    }
 5815|  6.01k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  6.01k|        return reader_impl_for_wchar<CharT>{};
 5817|  6.01k|    }
 5818|  6.01k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  6.01k|        return reader_impl_for_code_point<CharT>{};
 5820|  6.01k|    }
 5821|  6.01k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  6.01k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.01k|        return reader_impl_for_string<CharT>{};
 5824|  6.01k|    }
 5825|  6.01k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  6.01k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  6.01k|        return reader_impl_for_string<CharT>{};
 5828|  6.01k|    }
 5829|  6.01k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  6.01k|                       std::is_same_v<T, wregex_matches>) {
 5831|  6.01k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  6.01k|    }
 5833|  6.01k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  6.01k|        return reader_impl_for_voidptr<CharT>{};
 5835|  6.01k|    }
 5836|  6.01k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  6.01k|        return reader_impl_for_float<CharT>{};
 5838|  6.01k|    }
 5839|  6.01k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  6.01k|                       !std::is_same_v<T, wchar_t> &&
 5841|  6.01k|                       !std::is_same_v<T, char32_t> &&
 5842|  6.01k|                       !std::is_same_v<T, bool>) {
 5843|  6.01k|        return reader_impl_for_int<CharT>{};
 5844|  6.01k|    }
 5845|  6.01k|    else {
 5846|  6.01k|        return reader_impl_for_monostate<CharT>{};
 5847|  6.01k|    }
 5848|  6.01k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    304|{
 2993|    304|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    304|        if (source.stores_allocated_string()) {
 2995|    304|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    304|        }
 2997|    304|        else {
 2998|    304|            dest.assign(source.view());
 2999|    304|        }
 3000|    304|    }
 3001|    304|    else {
 3002|    304|        return transcode_impl(source.view(), dest);
 3003|    304|    }
 3004|       |
 3005|      0|    return {};
 3006|    304|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  2.06k|{
 2968|  2.06k|    dst.clear();
 2969|  2.06k|    transcode_valid_to_string(src, dst);
 2970|  2.06k|    return {};
 2971|  2.06k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  2.06k|{
 1403|  2.06k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  2.06k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  2.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  2.06k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  2.06k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1407:23): [Folded - Ignored]
  ------------------
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  2.06k|            std::u32string tmp;
 1410|  2.06k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  2.06k|            return transcode_to_string_impl_32to16<true>(
 1412|  2.06k|                std::u32string_view{tmp}, dest);
 1413|  2.06k|        }
 1414|  2.06k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1414:28): [Folded - Ignored]
  ------------------
 1415|  2.06k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  2.06k|        }
 1417|  2.06k|    }
 1418|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1420|      0|            std::u32string tmp;
 1421|      0|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|      0|            return transcode_to_string_impl_32to8<true>(
 1423|      0|                std::u32string_view{tmp}, dest);
 1424|      0|        }
 1425|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|      0|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|      0|        }
 1428|      0|    }
 1429|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1431|      0|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|      0|        }
 1433|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|      0|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|      0|        }
 1436|      0|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  2.06k|{
 1277|  2.06k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  2.06k|    auto it = src.begin();
 1280|   179k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 177k, False: 2.06k]
  ------------------
 1281|   177k|        auto res = get_next_code_point_valid(
 1282|   177k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   177k|                                                                 src.end()));
 1284|   177k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   177k|        dest.push_back(res.value);
 1286|   177k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   177k|    }
 1288|  2.06k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   177k|{
 1189|   177k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   177k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   177k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   177k|    return {input.begin() + len,
 1195|   177k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   177k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    638|    {
 5277|    638|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    638|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    638|        return read_impl(range, specs, value);
 5279|    638|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    638|    {
 5295|    638|        SCN_CLANG_PUSH
 5296|    638|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    638|        switch (m_type) {
 5299|    244|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 244, False: 394]
  ------------------
 5300|    244|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     50|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 50, False: 588]
  ------------------
 5303|     50|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     50|                                                                   value);
 5305|       |
 5306|     36|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 36, False: 602]
  ------------------
 5307|     36|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    196|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 196, False: 442]
  ------------------
 5310|    196|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    196|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 636]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    110|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 110, False: 528]
  ------------------
 5320|    110|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    110|                    range,
 5322|    110|                    get_unescaped_regex_pattern(
 5323|    110|                        specs.charset_string<SourceCharT>()),
 5324|    110|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 638]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    638|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    638|        }
 5331|       |
 5332|    638|        SCN_CLANG_POP
 5333|    638|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    244|    {
 4820|    244|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    244|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    330|{
 4752|    330|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    330|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    330|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 144, False: 186]
  ------------------
 4756|    144|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    144|                                     "Invalid encoding in scanned string");
 4758|    144|    }
 4759|    186|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    186|    static_cast<    \
  |  |  929|    186|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    186|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 186]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    186|    return SCN_MOVE(result);
  ------------------
  |  |  928|    186|    static_cast<    \
  |  |  929|    186|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    186|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     50|    {
 4841|     50|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 16]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     16|        return read_string_impl(
 4851|     16|            range,
 4852|     16|            read_until_code_units(
 4853|     16|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     16|            value);
 4855|     50|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|  1.13k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.13k|              cvref<T> obj = *get<T>(fn);
  745|  1.13k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.13k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.13k|              }
  748|  1.13k|              else {
  749|  1.13k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.13k|              }
  751|  1.13k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.13k|    {
  684|  1.13k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.13k|            return static_cast<T*>(s.m_cp);
  686|  1.13k|        }
  687|  1.13k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.13k|            return static_cast<T*>(s.m_p);
  689|  1.13k|        }
  690|  1.13k|        else {
  691|  1.13k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.13k|        }
  693|  1.13k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|  1.13k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     36|    {
 4947|     36|        return read_impl(
 4948|     36|            range,
 4949|     36|            [&](const auto& rng) {
 4950|     36|                return read_string_impl(rng, read_all(rng), value);
 4951|     36|            },
 4952|     36|            detail::priority_tag<1>{});
 4953|     36|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     36|    {
 4974|     36|        return read_cb(range);
 4975|     36|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     36|            [&](const auto& rng) {
 4950|     36|                return read_string_impl(rng, read_all(rng), value);
 4951|     36|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    196|    {
 5048|    196|        auto it = read_source_impl(range, {specs});
 5049|    196|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 188]
  |  |  ------------------
  ------------------
 5050|      8|            return unexpected(it.error());
 5051|      8|        }
 5052|       |
 5053|    188|        return read_string_impl(range, *it, value);
 5054|    196|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    188|{
 4752|    188|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    188|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    188|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 70, False: 118]
  ------------------
 4756|     70|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     70|                                     "Invalid encoding in scanned string");
 4758|     70|    }
 4759|    118|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    118|    static_cast<    \
  |  |  929|    118|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    118|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 118]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    118|    return SCN_MOVE(result);
  ------------------
  |  |  928|    118|    static_cast<    \
  |  |  929|    118|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    118|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    112|    {
 4891|    112|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    112|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    112|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    112|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 112, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    112|    }                                                  \
  |  |  |  | 3667|    112|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    112|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  4.60k|    {
 5277|  4.60k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.60k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.60k|        return read_impl(range, specs, value);
 5279|  4.60k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  4.60k|    {
 5295|  4.60k|        SCN_CLANG_PUSH
 5296|  4.60k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.60k|        switch (m_type) {
 5299|    268|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 268, False: 4.33k]
  ------------------
 5300|    268|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     48|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 48, False: 4.55k]
  ------------------
 5303|     48|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     48|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.60k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    952|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 952, False: 3.65k]
  ------------------
 5310|    952|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    952|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.14k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.14k, False: 1.46k]
  ------------------
 5315|  3.14k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.14k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.14k|                    specs.regexp_flags, value);
 5318|       |
 5319|    192|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 192, False: 4.41k]
  ------------------
 5320|    192|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    192|                    range,
 5322|    192|                    get_unescaped_regex_pattern(
 5323|    192|                        specs.charset_string<SourceCharT>()),
 5324|    192|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.60k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.60k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.60k|        }
 5331|       |
 5332|  4.60k|        SCN_CLANG_POP
 5333|  4.60k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    920|    {
 4820|    920|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    920|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    968|{
 4752|    968|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    968|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    968|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 310, False: 658]
  ------------------
 4756|    310|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    310|                                     "Invalid encoding in scanned string");
 4758|    310|    }
 4759|    658|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    658|    static_cast<    \
  |  |  929|    658|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    658|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 658]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    658|    return SCN_MOVE(result);
  ------------------
  |  |  928|    658|    static_cast<    \
  |  |  929|    658|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    658|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.75k|{
 3012|  1.75k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.75k|        dest.assign(source.view());
 3014|  1.75k|    }
 3015|  1.75k|    else {
 3016|  1.75k|        return transcode_impl(source.view(), dest);
 3017|  1.75k|    }
 3018|       |
 3019|      0|    return {};
 3020|  1.75k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     48|    {
 4841|     48|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 14]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     48|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    474|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    474|              cvref<T> obj = *get<T>(fn);
  745|    474|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    474|                  obj(static_cast<decltype(args)>(args)...);
  747|    474|              }
  748|    474|              else {
  749|    474|                  return obj(static_cast<decltype(args)>(args)...);
  750|    474|              }
  751|    474|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    474|    {
  684|    474|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    474|            return static_cast<T*>(s.m_cp);
  686|    474|        }
  687|    474|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    474|            return static_cast<T*>(s.m_p);
  689|    474|        }
  690|    474|        else {
  691|    474|            return reinterpret_cast<T*>(s.m_fp);
  692|    474|        }
  693|    474|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    474|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    952|    {
 5048|    952|        auto it = read_source_impl(range, {specs});
 5049|    952|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    952|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 268, False: 684]
  |  |  ------------------
  ------------------
 5050|    268|            return unexpected(it.error());
 5051|    268|        }
 5052|       |
 5053|    684|        return read_string_impl(range, *it, value);
 5054|    952|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.22k|{
 4752|  1.22k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.22k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.22k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 120, False: 1.10k]
  ------------------
 4756|    120|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    120|                                     "Invalid encoding in scanned string");
 4758|    120|    }
 4759|  1.10k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.10k|    static_cast<    \
  |  |  929|  1.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.10k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.10k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.10k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.10k|    static_cast<    \
  |  |  929|  1.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.10k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.33k|    {
 4891|  3.33k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  3.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.80k, False: 536]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.80k|    }                                                  \
  |  |  |  | 3667|  3.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    536|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    536|        return read_string_impl(range, it, value);
 4893|  3.33k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|  6.01k|{
 5809|  6.01k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  6.01k|        return reader_impl_for_bool<CharT>{};
 5811|  6.01k|    }
 5812|  6.01k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  6.01k|        return reader_impl_for_char<CharT>{};
 5814|  6.01k|    }
 5815|  6.01k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  6.01k|        return reader_impl_for_wchar<CharT>{};
 5817|  6.01k|    }
 5818|  6.01k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  6.01k|        return reader_impl_for_code_point<CharT>{};
 5820|  6.01k|    }
 5821|  6.01k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  6.01k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.01k|        return reader_impl_for_string<CharT>{};
 5824|  6.01k|    }
 5825|  6.01k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  6.01k|                       std::is_same_v<T, std::wstring>) {
 5827|  6.01k|        return reader_impl_for_string<CharT>{};
 5828|  6.01k|    }
 5829|  6.01k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  6.01k|                       std::is_same_v<T, wregex_matches>) {
 5831|  6.01k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  6.01k|    }
 5833|  6.01k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  6.01k|        return reader_impl_for_voidptr<CharT>{};
 5835|  6.01k|    }
 5836|  6.01k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  6.01k|        return reader_impl_for_float<CharT>{};
 5838|  6.01k|    }
 5839|  6.01k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  6.01k|                       !std::is_same_v<T, wchar_t> &&
 5841|  6.01k|                       !std::is_same_v<T, char32_t> &&
 5842|  6.01k|                       !std::is_same_v<T, bool>) {
 5843|  6.01k|        return reader_impl_for_int<CharT>{};
 5844|  6.01k|    }
 5845|  6.01k|    else {
 5846|  6.01k|        return reader_impl_for_monostate<CharT>{};
 5847|  6.01k|    }
 5848|  6.01k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    638|    {
 5277|    638|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    638|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    638|        return read_impl(range, specs, value);
 5279|    638|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    638|    {
 5295|    638|        SCN_CLANG_PUSH
 5296|    638|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    638|        switch (m_type) {
 5299|    244|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 244, False: 394]
  ------------------
 5300|    244|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     50|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 50, False: 588]
  ------------------
 5303|     50|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     50|                                                                   value);
 5305|       |
 5306|     36|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 36, False: 602]
  ------------------
 5307|     36|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    196|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 196, False: 442]
  ------------------
 5310|    196|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    196|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 636]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    110|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 110, False: 528]
  ------------------
 5320|    110|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    110|                    range,
 5322|    110|                    get_unescaped_regex_pattern(
 5323|    110|                        specs.charset_string<SourceCharT>()),
 5324|    110|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 638]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    638|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    638|        }
 5331|       |
 5332|    638|        SCN_CLANG_POP
 5333|    638|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    244|    {
 4827|    244|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    244|                                     value);
 4829|    244|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    330|{
 4773|    330|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    330|    auto src = [&]() {
 4776|    330|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    330|            return make_contiguous_buffer(
 4778|    330|                ranges::subrange{range.begin().base(), result.base()});
 4779|    330|        }
 4780|    330|        else {
 4781|    330|            return make_contiguous_buffer(
 4782|    330|                ranges::subrange{range.begin(), result});
 4783|    330|        }
 4784|    330|    }();
 4785|    330|    using src_type = decltype(src);
 4786|       |
 4787|    330|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    330|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    330|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    330|                                     "Cannot read a string_view from "
 4796|    330|                                     "this source range (would require "
 4797|    330|                                     "transcoding)");
 4798|    330|    }
 4799|    330|    else {
 4800|    330|        const auto view = src.view();
 4801|    330|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    330|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 144, False: 186]
  ------------------
 4804|    144|            return unexpected_scan_error(
 4805|    144|                scan_error::invalid_scanned_value,
 4806|    144|                "Invalid encoding in scanned string_view");
 4807|    144|        }
 4808|       |
 4809|    186|        return SCN_MOVE(result);
  ------------------
  |  |  928|    186|    static_cast<    \
  |  |  929|    186|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    330|    }
 4811|    330|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    330|    auto src = [&]() {
 4776|    330|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    330|            return make_contiguous_buffer(
 4778|    330|                ranges::subrange{range.begin().base(), result.base()});
 4779|    330|        }
 4780|    330|        else {
 4781|    330|            return make_contiguous_buffer(
 4782|    330|                ranges::subrange{range.begin(), result});
 4783|    330|        }
 4784|    330|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     50|    {
 4863|     50|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 34, False: 16]
  ------------------
 4864|     34|            return read_string_view_impl(
 4865|     34|                range,
 4866|     34|                read_until_code_unit(
 4867|     34|                    range,
 4868|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     34|                        SourceCharT ch) { return ch == until; }),
 4870|     34|                value);
 4871|     34|        }
 4872|     16|        return read_string_view_impl(
 4873|     16|            range,
 4874|     16|            read_until_code_units(
 4875|     16|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     16|            value);
 4877|     50|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  1.13k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.13k|              cvref<T> obj = *get<T>(fn);
  745|  1.13k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.13k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.13k|              }
  748|  1.13k|              else {
  749|  1.13k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.13k|              }
  751|  1.13k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.13k|    {
  684|  1.13k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.13k|            return static_cast<T*>(s.m_cp);
  686|  1.13k|        }
  687|  1.13k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.13k|            return static_cast<T*>(s.m_p);
  689|  1.13k|        }
  690|  1.13k|        else {
  691|  1.13k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.13k|        }
  693|  1.13k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4869|  1.13k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     36|    {
 4959|     36|        return read_impl(
 4960|     36|            range,
 4961|     36|            [&](const auto& rng) {
 4962|     36|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     36|            },
 4964|     36|            detail::priority_tag<1>{});
 4965|     36|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     36|    {
 4974|     36|        return read_cb(range);
 4975|     36|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     36|            [&](const auto& rng) {
 4962|     36|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     36|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5061|    196|    {
 5062|    196|        auto it = read_source_impl(range, {specs});
 5063|    196|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 188]
  |  |  ------------------
  ------------------
 5064|      8|            return unexpected(it.error());
 5065|      8|        }
 5066|       |
 5067|    188|        return read_string_view_impl(range, *it, value);
 5068|    196|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4772|    188|{
 4773|    188|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    188|    auto src = [&]() {
 4776|    188|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    188|            return make_contiguous_buffer(
 4778|    188|                ranges::subrange{range.begin().base(), result.base()});
 4779|    188|        }
 4780|    188|        else {
 4781|    188|            return make_contiguous_buffer(
 4782|    188|                ranges::subrange{range.begin(), result});
 4783|    188|        }
 4784|    188|    }();
 4785|    188|    using src_type = decltype(src);
 4786|       |
 4787|    188|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    188|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    188|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    188|                                     "Cannot read a string_view from "
 4796|    188|                                     "this source range (would require "
 4797|    188|                                     "transcoding)");
 4798|    188|    }
 4799|    188|    else {
 4800|    188|        const auto view = src.view();
 4801|    188|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    188|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 70, False: 118]
  ------------------
 4804|     70|            return unexpected_scan_error(
 4805|     70|                scan_error::invalid_scanned_value,
 4806|     70|                "Invalid encoding in scanned string_view");
 4807|     70|        }
 4808|       |
 4809|    118|        return SCN_MOVE(result);
  ------------------
  |  |  928|    118|    static_cast<    \
  |  |  929|    118|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    188|    }
 4811|    188|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4775|    188|    auto src = [&]() {
 4776|    188|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    188|            return make_contiguous_buffer(
 4778|    188|                ranges::subrange{range.begin().base(), result.base()});
 4779|    188|        }
 4780|    188|        else {
 4781|    188|            return make_contiguous_buffer(
 4782|    188|                ranges::subrange{range.begin(), result});
 4783|    188|        }
 4784|    188|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|    112|    {
 4902|    112|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    112|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    112|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    112|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 112, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    112|    }                                                  \
  |  |  |  | 3667|    112|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|    112|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  4.60k|    {
 5277|  4.60k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.60k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.60k|        return read_impl(range, specs, value);
 5279|  4.60k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  4.60k|    {
 5295|  4.60k|        SCN_CLANG_PUSH
 5296|  4.60k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.60k|        switch (m_type) {
 5299|    268|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 268, False: 4.33k]
  ------------------
 5300|    268|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     48|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 48, False: 4.55k]
  ------------------
 5303|     48|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     48|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.60k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    952|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 952, False: 3.65k]
  ------------------
 5310|    952|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    952|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.14k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.14k, False: 1.46k]
  ------------------
 5315|  3.14k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.14k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.14k|                    specs.regexp_flags, value);
 5318|       |
 5319|    192|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 192, False: 4.41k]
  ------------------
 5320|    192|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    192|                    range,
 5322|    192|                    get_unescaped_regex_pattern(
 5323|    192|                        specs.charset_string<SourceCharT>()),
 5324|    192|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.60k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.60k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.60k|        }
 5331|       |
 5332|  4.60k|        SCN_CLANG_POP
 5333|  4.60k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    920|    {
 4827|    920|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    920|                                     value);
 4829|    920|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|    968|{
 4773|    968|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    968|    auto src = [&]() {
 4776|    968|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    968|            return make_contiguous_buffer(
 4778|    968|                ranges::subrange{range.begin().base(), result.base()});
 4779|    968|        }
 4780|    968|        else {
 4781|    968|            return make_contiguous_buffer(
 4782|    968|                ranges::subrange{range.begin(), result});
 4783|    968|        }
 4784|    968|    }();
 4785|    968|    using src_type = decltype(src);
 4786|       |
 4787|    968|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    968|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    968|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    968|                                     "Cannot read a string_view from "
 4796|    968|                                     "this source range (would require "
 4797|    968|                                     "transcoding)");
 4798|    968|    }
 4799|    968|    else {
 4800|    968|        const auto view = src.view();
 4801|    968|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    968|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 310, False: 658]
  ------------------
 4804|    310|            return unexpected_scan_error(
 4805|    310|                scan_error::invalid_scanned_value,
 4806|    310|                "Invalid encoding in scanned string_view");
 4807|    310|        }
 4808|       |
 4809|    658|        return SCN_MOVE(result);
  ------------------
  |  |  928|    658|    static_cast<    \
  |  |  929|    658|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    968|    }
 4811|    968|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|    968|    auto src = [&]() {
 4776|    968|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    968|            return make_contiguous_buffer(
 4778|    968|                ranges::subrange{range.begin().base(), result.base()});
 4779|    968|        }
 4780|    968|        else {
 4781|    968|            return make_contiguous_buffer(
 4782|    968|                ranges::subrange{range.begin(), result});
 4783|    968|        }
 4784|    968|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     48|    {
 4863|     48|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 34, False: 14]
  ------------------
 4864|     34|            return read_string_view_impl(
 4865|     34|                range,
 4866|     34|                read_until_code_unit(
 4867|     34|                    range,
 4868|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     34|                        SourceCharT ch) { return ch == until; }),
 4870|     34|                value);
 4871|     34|        }
 4872|     14|        return read_string_view_impl(
 4873|     14|            range,
 4874|     14|            read_until_code_units(
 4875|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     14|            value);
 4877|     48|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES14_c:
  743|    474|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    474|              cvref<T> obj = *get<T>(fn);
  745|    474|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    474|                  obj(static_cast<decltype(args)>(args)...);
  747|    474|              }
  748|    474|              else {
  749|    474|                  return obj(static_cast<decltype(args)>(args)...);
  750|    474|              }
  751|    474|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    474|    {
  684|    474|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    474|            return static_cast<T*>(s.m_cp);
  686|    474|        }
  687|    474|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    474|            return static_cast<T*>(s.m_p);
  689|    474|        }
  690|    474|        else {
  691|    474|            return reinterpret_cast<T*>(s.m_fp);
  692|    474|        }
  693|    474|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4869|    474|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|    952|    {
 5062|    952|        auto it = read_source_impl(range, {specs});
 5063|    952|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    952|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 268, False: 684]
  |  |  ------------------
  ------------------
 5064|    268|            return unexpected(it.error());
 5065|    268|        }
 5066|       |
 5067|    684|        return read_string_view_impl(range, *it, value);
 5068|    952|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  1.22k|{
 4773|  1.22k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.22k|    auto src = [&]() {
 4776|  1.22k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.22k|            return make_contiguous_buffer(
 4778|  1.22k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.22k|        }
 4780|  1.22k|        else {
 4781|  1.22k|            return make_contiguous_buffer(
 4782|  1.22k|                ranges::subrange{range.begin(), result});
 4783|  1.22k|        }
 4784|  1.22k|    }();
 4785|  1.22k|    using src_type = decltype(src);
 4786|       |
 4787|  1.22k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.22k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.22k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.22k|                                     "Cannot read a string_view from "
 4796|  1.22k|                                     "this source range (would require "
 4797|  1.22k|                                     "transcoding)");
 4798|  1.22k|    }
 4799|  1.22k|    else {
 4800|  1.22k|        const auto view = src.view();
 4801|  1.22k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.22k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 120, False: 1.10k]
  ------------------
 4804|    120|            return unexpected_scan_error(
 4805|    120|                scan_error::invalid_scanned_value,
 4806|    120|                "Invalid encoding in scanned string_view");
 4807|    120|        }
 4808|       |
 4809|  1.10k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.10k|    static_cast<    \
  |  |  929|  1.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.22k|    }
 4811|  1.22k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  1.22k|    auto src = [&]() {
 4776|  1.22k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.22k|            return make_contiguous_buffer(
 4778|  1.22k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.22k|        }
 4780|  1.22k|        else {
 4781|  1.22k|            return make_contiguous_buffer(
 4782|  1.22k|                ranges::subrange{range.begin(), result});
 4783|  1.22k|        }
 4784|  1.22k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  3.33k|    {
 4902|  3.33k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  3.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.80k, False: 536]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.80k|    }                                                  \
  |  |  |  | 3667|  3.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    536|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    536|        return read_string_view_impl(range, it, value);
 4904|  3.33k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5623|  1.29k|    {
 5624|  1.29k|        reader_error_handler eh{};
 5625|  1.29k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  1.29k|            detail::check_code_point_type_specs(specs, eh);
 5627|  1.29k|        }
 5628|  1.29k|        else {
 5629|  1.29k|            detail::check_char_type_specs(specs, eh);
 5630|  1.29k|        }
 5631|  1.29k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 864, False: 434]
  |  |  ------------------
  ------------------
 5632|    864|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|    864|        }
 5634|    434|        return {};
 5635|  1.29k|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  3.51k|    {
  763|  3.51k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  3.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  3.51k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|    996|    {
  754|    996|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  1.13k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.13k|              cvref<T> obj = *get<T>(fn);
  745|  1.13k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.13k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.13k|              }
  748|  1.13k|              else {
  749|  1.13k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.13k|              }
  751|  1.13k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.13k|    {
  684|  1.13k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.13k|            return static_cast<T*>(s.m_cp);
  686|  1.13k|        }
  687|  1.13k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.13k|            return static_cast<T*>(s.m_p);
  689|  1.13k|        }
  690|  1.13k|        else {
  691|  1.13k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.13k|        }
  693|  1.13k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|    996|        {
  662|    996|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5618|  1.34k|    {
 5619|  1.34k|        return false;
 5620|  1.34k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|     34|    {
 1780|     34|        auto stdloc = loc.get<std::locale>();
 1781|     34|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     34|        grouping = numpunct.grouping();
 1783|     34|        thousands_sep =
 1784|     34|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 34]
  ------------------
 1785|     34|        decimal_point = numpunct.decimal_point();
 1786|     34|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|     48|{
 1717|     48|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 48, False: 0]
  ------------------
 1718|     48|        return std::use_facet<Facet>(stdloc);
 1719|     48|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     48|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  3.00k|{
 2349|  3.00k|    size_t count{0};
 2350|  3.00k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  3.00k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  3.00k|    });
 2353|  3.00k|    return count;
 2354|  3.00k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  3.00k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  3.00k|    auto it = input.begin();
 1448|  8.64k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 5.64k, False: 3.00k]
  ------------------
 1449|  5.64k|        auto res = get_next_code_point(
 1450|  5.64k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  5.64k|        cb(res.value);
 1452|  5.64k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  5.64k|    }
 1454|  3.00k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   319M|{
 1169|   319M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   319M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   319M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   319M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   319M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   319M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 319M]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   319M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   319M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 319M]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   319M|    return {input.begin() + len,
 1181|   319M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   319M|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  3.00k|    {
  754|  3.00k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  5.64k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.64k|              cvref<T> obj = *get<T>(fn);
  745|  5.64k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.64k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.64k|              }
  748|  5.64k|              else {
  749|  5.64k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.64k|              }
  751|  5.64k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  5.64k|    {
  684|  5.64k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.64k|            return static_cast<T*>(s.m_cp);
  686|  5.64k|        }
  687|  5.64k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.64k|            return static_cast<T*>(s.m_p);
  689|  5.64k|        }
  690|  5.64k|        else {
  691|  5.64k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.64k|        }
  693|  5.64k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  5.64k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  5.64k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  5.64k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  3.00k|        {
  662|  3.00k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  2.00k|    {
 1582|  2.00k|        return m_view;
 1583|  2.00k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  2.16k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2381|  5.93k|    {
 2382|  5.93k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2420|    208|    {
 2421|    208|        return m_multibyte_left;
 2422|    208|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2425|  29.7k|    {
 2426|  29.7k|        return *m_current;
 2427|  29.7k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2434|  19.6k|    {
 2435|  19.6k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  19.6k|        _increment_current();
 2437|  19.6k|        return *this;
 2438|  19.6k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2667|  19.6k|    {
 2668|  19.6k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 19.6k, False: 0]
  ------------------
 2669|  19.6k|            auto cplen = _get_cp_length_at_current();
 2670|  19.6k|            m_multibyte_left = cplen - 1;
 2671|  19.6k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  19.6k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  19.6k|        ++m_current;
 2678|  19.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2638|  19.6k|    {
 2639|  19.6k|        return static_cast<difference_type>(
 2640|  19.6k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  19.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2644|  19.6k|    {
 2645|  19.6k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.6k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  19.6k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 19.6k, False: 0]
  ------------------
 2650|  19.6k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  19.6k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  19.6k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  19.6k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  5.18k|{
 1857|  5.18k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  5.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  5.18k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  5.18k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  5.18k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 132, False: 5.05k]
  ------------------
 1862|    132|            return unexpected(eof_error::eof);
 1863|    132|        }
 1864|       |
 1865|  5.05k|        return ranges::next(range.begin(), count);
 1866|  5.18k|    }
 1867|  5.18k|    else {
 1868|  5.18k|        auto it = range.begin();
 1869|  5.18k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  5.18k|            return ranges::next(it, count);
 1871|  5.18k|        }
 1872|       |
 1873|  5.18k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  5.18k|            if (it == range.end()) {
 1875|  5.18k|                return unexpected(eof_error::eof);
 1876|  5.18k|            }
 1877|  5.18k|        }
 1878|       |
 1879|  5.18k|        return it;
 1880|  5.18k|    }
 1881|  5.18k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  7.10k|    {
 2531|  7.10k|        return !(a == b);
 2532|  7.10k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  7.53k|    {
 2523|  7.53k|        return a.m_current == b.m_current;
 2524|  7.53k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1889|  10.3k|    {
 1890|  10.3k|        return !codepoint.empty();
 1891|  10.3k|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   193k|{
 1899|   193k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   193k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   193k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   193k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   193k|    auto it = range.begin();
 1903|   193k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   193k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 193k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   193k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 193k, False: 0]
  ------------------
 1912|   193k|        ++it;
 1913|   193k|        return {it, string_type(1, *range.begin())};
 1914|   193k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   193k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   213k|{
  944|   213k|    return is_range_eof(r.begin(), r.end());
  945|   213k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   319M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   319M|    {
  937|   319M|        return begin == end;
  938|   319M|    }
  939|   319M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    848|    {
  190|    848|        i = std::move(bound);
  191|    848|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   193k|    {
 1890|   193k|        return !codepoint.empty();
 1891|   193k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  19.3k|{
  950|  19.3k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  19.3k|    return eof_error::good;
  954|  19.3k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  1.97k|    {
 2832|  1.97k|        return take_width_view{r, n};
 2833|  1.97k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2800|  1.97k|    {
 2801|  1.97k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2713|  1.97k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5698|    106|    {
 5699|    106|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 94, False: 12]
  ------------------
 5700|    106|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 12]
  ------------------
 5701|     94|            return read_default(range, value, loc);
 5702|     94|        }
 5703|       |
 5704|     12|        reader_impl_for_int<CharT> reader{};
 5705|     12|        using integer_type =
 5706|     12|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     12|        integer_type tmp_value{};
 5708|     12|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     12|        value = static_cast<integer_type>(value);
 5710|     12|        return ret;
 5711|    106|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5682|     94|    {
 5683|     94|        SCN_UNUSED(loc);
  ------------------
  |  |  909|     94|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|     94|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|     94|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|     94|        }
 5687|     94|        else {
 5688|     94|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|     94|        }
 5690|     94|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5563|     94|    {
 5564|     94|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|     94|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     94|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     94|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 94]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     94|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     94|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|     94|        ch = *range.begin();
 5566|     94|        return it;
 5567|     94|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|    730|{
 1846|    730|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    730|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 730]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|    730|    return ranges::next(range.begin());
 1851|    730|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|    730|{
  950|    730|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|    730|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 730]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|    730|    return eof_error::good;
  954|    730|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|    730|{
  944|    730|    return is_range_eof(r.begin(), r.end());
  945|    730|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  11.8k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  11.8k|    {
  937|  11.8k|        return begin == end;
  938|  11.8k|    }
  939|  11.8k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  25.5k|        {
 2770|  25.5k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 208, False: 25.3k]
  |  Branch (2770:39): [True: 208, False: 0]
  ------------------
 2771|  25.5k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 162, False: 25.1k]
  ------------------
 2772|  25.5k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2815|  5.55k|    {
 2816|  5.55k|        return sentinel<true>{m_base.get().end()};
 2817|  5.55k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2716|  17.4k|    {
 2717|  17.4k|        return view;
 2718|  17.4k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2750|  5.55k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|    754|    {
  296|    754|        ++x;
  297|    754|        return x;
  298|    754|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2809|  5.93k|    {
 2810|  5.93k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  5.93k|                                      m_count};
 2812|  5.93k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    118|    {
 3539|    118|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    118|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    118|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    118|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 118]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    118|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    118|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    118|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    118|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 118]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    118|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 118]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    118|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    118|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 118, False: 0]
  |  |  ------------------
  ------------------
 3565|    118|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    118|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    118|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    118|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 118, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    118|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    118|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    118|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    118|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    118|    }                                                  \
  |  |  |  | 3667|    118|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    318|{
 3326|    318|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|    318|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    318|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    318|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    318|        parse_integer_base_prefix(
 3331|    318|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    318|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 318]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    318|    else {
 3343|    318|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 318]
  |  Branch (3343:13): [True: 318, False: 0]
  ------------------
 3344|    318|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 318, False: 0]
  ------------------
 3345|    318|            digits_begin_it = base_prefix_begin_it;
 3346|    318|        }
 3347|    318|    }
 3348|       |
 3349|    318|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 318, False: 0]
  ------------------
 3350|    318|        sign = sign_type::plus_sign;
 3351|    318|    }
 3352|    318|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    318|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    318|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|    424|{
 3141|    424|    auto r = read_one_of_code_unit(range, "+-");
 3142|    424|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 424, False: 0]
  ------------------
 3143|    424|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 424, False: 0]
  ------------------
 3144|    424|            return std::pair{range.begin(), sign_type::default_sign};
 3145|    424|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|    424|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|    424|{
 2272|    424|    auto it = read_code_unit(range);
 2273|    424|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    424|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 424]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|    848|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 848, False: 424]
  ------------------
 2278|    848|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 848]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|    848|    }
 2282|       |
 2283|    424|    return unexpected(parse_error::error);
 2284|    424|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    318|{
 3293|    318|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 312]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     18|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 18, False: 300]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     18|            bool zero_parsed = false;
 3302|     18|            auto it = apply_opt(
 3303|     18|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     18|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    100|        case 16:
  ------------------
  |  Branch (3307:9): [True: 100, False: 218]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    100|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    100|                    false};
 3311|       |
 3312|      6|        case 0:
  ------------------
  |  Branch (3312:9): [True: 6, False: 312]
  ------------------
 3313|       |            // detect base
 3314|      6|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    188|        default:
  ------------------
  |  Branch (3316:9): [True: 188, False: 130]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    188|            return {range.begin(), base, false};
 3319|    318|    }
 3320|    318|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    124|{
 2291|    124|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 124, False: 0]
  ------------------
 2292|    124|        return range.begin();
 2293|    124|    }
 2294|      0|    return *result;
 2295|    124|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     12|{
 3244|     12|    return read_matching_string_classic_nocase(range, "0b");
 3245|     12|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|    452|{
 2231|    452|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|    452|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|    452|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|    452|        if (range.size() < str.size()) {
 2236|    452|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|    452|        }
 2238|    452|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|    452|            return unexpected(parse_error::error);
 2240|    452|        }
 2241|    452|        return ranges::next(range.begin(), str.size());
 2242|    452|    }
 2243|    452|    else {
 2244|    452|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    452|            if (ch < 'A' || ch > 'Z') {
 2246|    452|                return ch;
 2247|    452|            }
 2248|    452|            return static_cast<char_type>(ch +
 2249|    452|                                          static_cast<char_type>('a' - 'A'));
 2250|    452|        };
 2251|       |
 2252|    452|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    452|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    452|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    452|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    452|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 34, False: 418]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     34|    }                                                  \
  |  |  |  | 3667|    452|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    418|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    418|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    418|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    418|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    418|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 418, False: 0]
  |  |  ------------------
  ------------------
 2257|    418|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    418|                    return ascii_tolower(a) ==
 2259|    418|                           static_cast<detail::char_t<Range>>(b);
 2260|    418|                }))) {
 2261|    418|            return unexpected(parse_error::error);
 2262|    418|        }
 2263|       |
 2264|      0|        return it;
 2265|    418|    }
 2266|    452|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|    452|{
 1857|    452|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    452|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    452|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    452|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    452|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    452|        if (sz < count) {
 1862|    452|            return unexpected(eof_error::eof);
 1863|    452|        }
 1864|       |
 1865|    452|        return ranges::next(range.begin(), count);
 1866|    452|    }
 1867|    452|    else {
 1868|    452|        auto it = range.begin();
 1869|    452|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 452]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  1.52k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.10k, False: 418]
  ------------------
 1874|  1.10k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 34, False: 1.07k]
  ------------------
 1875|     34|                return unexpected(eof_error::eof);
 1876|     34|            }
 1877|  1.10k|        }
 1878|       |
 1879|    418|        return it;
 1880|    452|    }
 1881|    452|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|    452|{
 1095|    452|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    452|        return r.size();
 1097|    452|    }
 1098|    452|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    452|                           ranges::const_iterator_t<Range>,
 1100|    452|                           typename detail::basic_scan_buffer<
 1101|    452|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    452|        if constexpr (ranges::common_range<Range>) {
 1103|    452|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    452|        }
 1105|    452|        else {
 1106|    452|            if (r.begin().stores_parent()) {
 1107|    452|                return static_cast<size_t>(
 1108|    452|                    r.begin().parent()->chars_available() -
 1109|    452|                    r.begin().position());
 1110|    452|            }
 1111|    452|            return r.begin().contiguous_segment().size();
 1112|    452|        }
 1113|    452|    }
 1114|    452|    else {
 1115|    452|        return 0;
 1116|    452|    }
 1117|    452|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2244|    418|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    418|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 0, False: 418]
  |  Branch (2245:29): [True: 418, False: 0]
  ------------------
 2246|    418|                return ch;
 2247|    418|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    418|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     24|{
 3258|     24|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 24]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     24|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 24]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     24|    return unexpected(parse_error::error);
 3268|     24|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     24|{
 2146|     24|    auto it = read_code_unit(range);
 2147|     24|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     24|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 2152|     24|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     24|        return unexpected(parse_error::error);
 2154|     24|    }
 2155|       |
 2156|      0|    return *it;
 2157|     24|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     24|{
 1846|     24|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     24|    return ranges::next(range.begin());
 1851|     24|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|    774|{
  950|    774|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|    774|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 774]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|    774|    return eof_error::good;
  954|    774|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  11.1k|{
  944|  11.1k|    return is_range_eof(r.begin(), r.end());
  945|  11.1k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    106|{
 3251|    106|    return read_matching_string_classic_nocase(range, "0x");
 3252|    106|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|      6|{
 3274|      6|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 6]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|      6|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 6]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|      6|    {
 3281|      6|        bool zero_parsed{false};
 3282|      6|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 6]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|      6|    }
 3286|      6|    return {range.begin(), 10, false};
 3287|      6|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    318|{
 3360|    318|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    318|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    318|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    318|            return unexpected_scan_error(
 3365|    318|                scan_error::invalid_scanned_value,
 3366|    318|                "Failed to parse integer: No digits found");
 3367|    318|        }
 3368|    318|        return range.end();
 3369|    318|    }
 3370|    318|    else {
 3371|    318|        return read_while1_code_unit(range,
 3372|    318|                                     [&](char_type ch) noexcept {
 3373|    318|                                         return char_to_int(ch) < base;
 3374|    318|                                     })
 3375|    318|            .transform_error(map_parse_error_to_scan_error(
 3376|    318|                scan_error::invalid_scanned_value,
 3377|    318|                "Failed to parse integer: No digits found"));
 3378|    318|    }
 3379|    318|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|    424|{
 1996|    424|    auto it = read_while_code_unit(range, pred);
 1997|    424|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 424, False: 0]
  ------------------
 1998|    424|        return unexpected(parse_error::error);
 1999|    424|    }
 2000|      0|    return it;
 2001|    424|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|    424|{
 1976|    424|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    424|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|    424|{
 1957|    424|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    424|        return std::find_if(range.begin(), range.end(), pred);
 1959|    424|    }
 1960|    424|    else {
 1961|    424|        auto first = range.begin();
 1962|    424|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 424, False: 0]
  ------------------
 1963|    424|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 424, False: 0]
  ------------------
 1964|    424|                return first;
 1965|    424|            }
 1966|    424|        }
 1967|      0|        return first;
 1968|    424|    }
 1969|    424|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  11.4k|        {
 2781|  11.4k|            return !(y == x);
 2782|  11.4k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_:
  753|    318|    {
  754|    318|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|    318|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    318|              cvref<T> obj = *get<T>(fn);
  745|    318|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    318|                  obj(static_cast<decltype(args)>(args)...);
  747|    318|              }
  748|    318|              else {
  749|    318|                  return obj(static_cast<decltype(args)>(args)...);
  750|    318|              }
  751|    318|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    318|    {
  684|    318|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    318|            return static_cast<T*>(s.m_cp);
  686|    318|        }
  687|    318|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    318|            return static_cast<T*>(s.m_p);
  689|    318|        }
  690|    318|        else {
  691|    318|            return reinterpret_cast<T*>(s.m_fp);
  692|    318|        }
  693|    318|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3372|    318|                                     [&](char_type ch) noexcept {
 3373|    318|                                         return char_to_int(ch) < base;
 3374|    318|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_LPv0EEEPSP_:
  661|    318|        {
  662|    318|        }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1682|    248|{
 1683|    248|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|    248|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|    248|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|    248|        return string_view_wrapper{SCN_FWD(range)};
 1687|    248|    }
 1688|    248|    else {
 1689|    248|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|    248|    }
 1691|    248|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EELPv0EEEOT_:
 1536|    248|    {
 1537|    248|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|    248|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1620|    248|    {
 1621|    248|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    248|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    248|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    248|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    248|            m_storage.reset();
 1627|    248|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    248|        }
 1629|    248|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|    248|                                          std::basic_string<CharT>>) {
 1631|    248|            m_storage.emplace(SCN_FWD(range));
 1632|    248|            m_view = string_view_type{*m_storage};
 1633|    248|        }
 1634|    248|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|    248|                                          typename detail::basic_scan_buffer<
 1636|    248|                                              value_t>::forward_iterator> &&
 1637|    248|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|    248|            auto beg_seg = range.begin().contiguous_segment();
 1639|    248|            auto end_seg = range.end().contiguous_segment();
 1640|    248|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    248|                             detail::to_address(end_seg.end()))) {
 1642|    248|                auto& str = m_storage.emplace();
 1643|    248|                str.reserve(range.end().position() - range.begin().position());
 1644|    248|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    248|                m_view = string_view_type{str};
 1646|    248|                return;
 1647|    248|            }
 1648|       |
 1649|    248|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    248|                                                            end_seg.data());
 1651|    248|            m_storage.reset();
 1652|    248|        }
 1653|    248|        else {
 1654|    248|            auto& str = m_storage.emplace();
 1655|    248|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|    248|                str.reserve(range.size());
 1657|    248|            }
 1658|    248|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|    248|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    248|                          std::back_inserter(str));
 1661|    248|            }
 1662|    248|            else {
 1663|    248|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    248|                     ++it) {
 1665|    248|                    str.push_back(*it);
 1666|    248|                }
 1667|    248|            }
 1668|    248|            m_view = string_view_type{str};
 1669|    248|        }
 1670|    248|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2412|  26.7k|    {
 2413|  26.7k|        return m_current;
 2414|  26.7k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2416|  26.7k|    {
 2417|  26.7k|        return m_count;
 2418|  26.7k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5698|    328|    {
 5699|    328|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 314, False: 14]
  ------------------
 5700|    328|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 14]
  ------------------
 5701|    314|            return read_default(range, value, loc);
 5702|    314|        }
 5703|       |
 5704|     14|        reader_impl_for_int<CharT> reader{};
 5705|     14|        using integer_type =
 5706|     14|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     14|        integer_type tmp_value{};
 5708|     14|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     14|        value = static_cast<integer_type>(value);
 5710|     14|        return ret;
 5711|    328|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5682|    818|    {
 5683|    818|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    818|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|    818|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|    818|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|    818|        }
 5687|    818|        else {
 5688|    818|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    818|        }
 5690|    818|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5563|    818|    {
 5564|    818|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    818|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    818|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    818|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    818|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 818]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    818|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    818|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    818|        ch = *range.begin();
 5566|    818|        return it;
 5567|    818|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  5.89k|{
 1846|  5.89k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.89k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  5.89k|    return ranges::next(range.begin());
 1851|  5.89k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   319M|    {
  296|   319M|        ++x;
  297|   319M|        return x;
  298|   319M|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    354|    {
 3539|    354|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    354|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    354|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 354]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    354|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 354]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    354|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    354|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 342, False: 12]
  |  |  ------------------
  ------------------
 3565|    342|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    342|                    parse_integer_digits_without_thsep(
 3567|    342|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    342|                        prefix_result.parsed_base));
 3569|       |
 3570|    342|            auto buf = make_contiguous_buffer(
 3571|    342|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    342|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 342, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    342|    }                                                  \
  |  |  |  | 3667|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    342|        }
 3580|       |
 3581|     12|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     12|            localized_number_formatting_options<CharT>{loc};
 3586|     12|#endif
 3587|       |
 3588|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.52k|{
 3326|  2.52k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|  2.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.52k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.52k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.52k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.52k|        parse_integer_base_prefix(
 3331|  2.52k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.52k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.52k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.52k|    else {
 3343|  2.52k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.52k]
  ------------------
 3344|  2.52k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.52k, False: 0]
  ------------------
 3345|  2.52k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.52k|        }
 3347|  2.52k|    }
 3348|       |
 3349|  2.52k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.52k, False: 0]
  ------------------
 3350|  2.52k|        sign = sign_type::plus_sign;
 3351|  2.52k|    }
 3352|  2.52k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.52k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.52k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.37k|{
 3141|  3.37k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.37k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.37k, False: 0]
  ------------------
 3143|  3.37k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.37k, False: 0]
  ------------------
 3144|  3.37k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.37k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.37k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.37k|{
 2272|  3.37k|    auto it = read_code_unit(range);
 2273|  3.37k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.37k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  6.75k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 6.75k, False: 3.37k]
  ------------------
 2278|  6.75k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 6.75k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  6.75k|    }
 2282|       |
 2283|  3.37k|    return unexpected(parse_error::error);
 2284|  3.37k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.52k|{
 3293|  2.52k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 2.51k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     10|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 10, False: 2.51k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     10|            bool zero_parsed = false;
 3302|     10|            auto it = apply_opt(
 3303|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     10|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    826|        case 16:
  ------------------
  |  Branch (3307:9): [True: 826, False: 1.69k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    826|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    826|                    false};
 3311|       |
 3312|      6|        case 0:
  ------------------
  |  Branch (3312:9): [True: 6, False: 2.51k]
  ------------------
 3313|       |            // detect base
 3314|      6|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.67k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.67k, False: 848]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.67k|            return {range.begin(), base, false};
 3319|  2.52k|    }
 3320|  2.52k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    842|{
 2291|    842|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 842, False: 0]
  ------------------
 2292|    842|        return range.begin();
 2293|    842|    }
 2294|      0|    return *result;
 2295|    842|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     12|{
 3244|     12|    return read_matching_string_classic_nocase(range, "0b");
 3245|     12|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.41k|{
 2231|  3.41k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.41k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.41k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.41k|        if (range.size() < str.size()) {
 2236|  3.41k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  3.41k|        }
 2238|  3.41k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  3.41k|            return unexpected(parse_error::error);
 2240|  3.41k|        }
 2241|  3.41k|        return ranges::next(range.begin(), str.size());
 2242|  3.41k|    }
 2243|  3.41k|    else {
 2244|  3.41k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.41k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.41k|                return ch;
 2247|  3.41k|            }
 2248|  3.41k|            return static_cast<char_type>(ch +
 2249|  3.41k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.41k|        };
 2251|       |
 2252|  3.41k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  3.41k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.41k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.41k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 3.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|  3.41k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  3.41k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.41k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.41k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.41k, False: 0]
  |  |  ------------------
  ------------------
 2257|  3.41k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.41k|                    return ascii_tolower(a) ==
 2259|  3.41k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.41k|                }))) {
 2261|  3.41k|            return unexpected(parse_error::error);
 2262|  3.41k|        }
 2263|       |
 2264|      0|        return it;
 2265|  3.41k|    }
 2266|  3.41k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  3.41k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.41k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 8, False: 3.40k]
  |  Branch (2245:29): [True: 3.40k, False: 0]
  ------------------
 2246|  3.41k|                return ch;
 2247|  3.41k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.41k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     16|{
 3258|     16|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 16]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     16|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 16]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     16|    return unexpected(parse_error::error);
 3268|     16|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.70k|{
 2146|  1.70k|    auto it = read_code_unit(range);
 2147|  1.70k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.70k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.70k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.70k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.70k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.70k|        return unexpected(parse_error::error);
 2154|  1.70k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.70k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    832|{
 3251|    832|    return read_matching_string_classic_nocase(range, "0x");
 3252|    832|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|      6|{
 3274|      6|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 6]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|      6|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 6]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|      6|    {
 3281|      6|        bool zero_parsed{false};
 3282|      6|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 6]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|      6|    }
 3286|      6|    return {range.begin(), 10, false};
 3287|      6|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.49k|{
 3360|  2.49k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.49k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.49k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.49k|        return range.end();
 3369|  2.49k|    }
 3370|  2.49k|    else {
 3371|  2.49k|        return read_while1_code_unit(range,
 3372|  2.49k|                                     [&](char_type ch) noexcept {
 3373|  2.49k|                                         return char_to_int(ch) < base;
 3374|  2.49k|                                     })
 3375|  2.49k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.49k|                scan_error::invalid_scanned_value,
 3377|  2.49k|                "Failed to parse integer: No digits found"));
 3378|  2.49k|    }
 3379|  2.49k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     24|{
 3390|     24|    std::basic_string<CharT> output;
 3391|     24|    std::string thsep_indices;
 3392|     24|    auto it = range.begin();
 3393|     24|    bool digit_matched = false;
 3394|     24|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 24, False: 0]
  ------------------
 3395|     24|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 24]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     24|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 24, False: 0]
  ------------------
 3400|     24|            break;
 3401|     24|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     24|    }
 3407|     24|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3408|     24|        return unexpected_scan_error(
 3409|     24|            scan_error::invalid_scanned_value,
 3410|     24|            "Failed to parse integer: No digits found");
 3411|     24|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     24|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  8.26k|{
 1683|  8.26k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  8.26k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  8.26k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  8.26k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  8.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  8.26k|    }
 1688|  8.26k|    else {
 1689|  8.26k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  8.26k|    }
 1691|  8.26k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  8.26k|    {
 1490|  8.26k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  9.43k|    {
 1503|  9.43k|        return sv;
 1504|  9.43k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|    566|{
 5951|    566|    using char_type = detail::char_t<Range>;
 5952|    566|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    566|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 566, False: 0]
  ------------------
 5955|    566|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    566|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    566|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 444, False: 122]
  ------------------
 5959|    444|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|    444|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 112, False: 332]
  ------------------
 5962|    112|                auto prefix_width =
 5963|    112|                    static_cast<std::ptrdiff_t>(
 5964|    112|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|    112|                    ranges::distance(range.begin(), it);
 5966|    112|                return result_type{it, prefix_width};
 5967|    112|            }
 5968|    332|            return result_type{it, 0};
 5969|    444|        }
 5970|       |
 5971|    122|        auto max_width_view = take_width(range, max_width);
 5972|    122|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    122|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 122, False: 0]
  ------------------
 5975|    122|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    122|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    122|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|    450|{
 1976|    450|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    450|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|    558|{
 1957|    558|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    558|        return std::find_if(range.begin(), range.end(), pred);
 1959|    558|    }
 1960|    558|    else {
 1961|    558|        auto first = range.begin();
 1962|    558|        for (; first != range.end(); ++first) {
 1963|    558|            if (pred(*first)) {
 1964|    558|                return first;
 1965|    558|            }
 1966|    558|        }
 1967|    558|        return first;
 1968|    558|    }
 1969|    558|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_:
  753|    566|    {
  754|    566|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|    708|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    708|              cvref<T> obj = *get<T>(fn);
  745|    708|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    708|                  obj(static_cast<decltype(args)>(args)...);
  747|    708|              }
  748|    708|              else {
  749|    708|                  return obj(static_cast<decltype(args)>(args)...);
  750|    708|              }
  751|    708|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    708|    {
  684|    708|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    708|            return static_cast<T*>(s.m_cp);
  686|    708|        }
  687|    708|        else if constexpr (std::is_object_v<T>) {
  688|    708|            return static_cast<T*>(s.m_p);
  689|    708|        }
  690|    708|        else {
  691|    708|            return reinterpret_cast<T*>(s.m_fp);
  692|    708|        }
  693|    708|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    708|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSH_:
  666|    566|        {
  667|    566|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    122|{
 1976|    122|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    122|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    122|{
 1957|    122|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    122|        return std::find_if(range.begin(), range.end(), pred);
 1959|    122|    }
 1960|    122|    else {
 1961|    122|        auto first = range.begin();
 1962|    128|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 128, False: 0]
  ------------------
 1963|    128|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 122, False: 6]
  ------------------
 1964|    122|                return first;
 1965|    122|            }
 1966|    128|        }
 1967|      0|        return first;
 1968|    122|    }
 1969|    122|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    834|{
 2951|    834|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 750, False: 84]
  ------------------
 2952|    750|        auto it = read_while_classic_space(range);
 2953|    750|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|    750|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    750|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 750]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|    750|        return it;
 2959|    750|    }
 2960|       |
 2961|     84|    return read_while_classic_space(range);
 2962|    834|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    834|{
 2117|    834|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    834|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    834|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    834|        auto buf = make_contiguous_buffer(range);
 2121|    834|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    834|        return ranges::next(range.begin(),
 2123|    834|                            ranges::distance(buf.view().begin(), it));
 2124|    834|    }
 2125|    834|    else {
 2126|    834|        auto it = range.begin();
 2127|       |
 2128|    834|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    834|            auto seg = get_contiguous_beginning(range);
 2130|    834|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    834|                seg_it != seg.end()) {
 2132|    834|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|    834|            }
 2134|    834|            ranges::advance(it, seg.size());
 2135|    834|        }
 2136|       |
 2137|    834|        return read_while_code_point(
 2138|    834|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    834|    }
 2140|    834|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|    834|{
 2082|    834|    return read_until_code_point(range, std::not_fn(pred));
 2083|    834|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|    834|{
 2061|    834|    auto it = range.begin();
 2062|    834|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 834, False: 0]
  ------------------
 2063|    834|        const auto val =
 2064|    834|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|    834|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|    834|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 834, False: 0]
  |  |  ------------------
  ------------------
 2066|    834|            const auto cp = detail::decode_code_point_exhaustive(
 2067|    834|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|    834|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 834, False: 0]
  ------------------
 2069|    834|                return it;
 2070|    834|            }
 2071|    834|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|    834|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  10.3k|{
 1899|  10.3k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  10.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  10.3k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  10.3k|    auto it = range.begin();
 1903|  10.3k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  10.3k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10.3k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  10.3k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 10.3k, False: 0]
  ------------------
 1912|  10.3k|        ++it;
 1913|  10.3k|        return {it, string_type(1, *range.begin())};
 1914|  10.3k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  10.3k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    834|    {
  754|    834|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|    834|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    834|              cvref<T> obj = *get<T>(fn);
  745|    834|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    834|                  obj(static_cast<decltype(args)>(args)...);
  747|    834|              }
  748|    834|              else {
  749|    834|                  return obj(static_cast<decltype(args)>(args)...);
  750|    834|              }
  751|    834|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    834|    {
  684|    834|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    834|            return static_cast<T*>(s.m_cp);
  686|    834|        }
  687|    834|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    834|            return static_cast<T*>(s.m_p);
  689|    834|        }
  690|    834|        else {
  691|    834|            return reinterpret_cast<T*>(s.m_fp);
  692|    834|        }
  693|    834|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|    834|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    834|        {
  662|    834|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  6.61k|{
 2951|  6.61k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 6.38k, False: 230]
  ------------------
 2952|  6.38k|        auto it = read_while_classic_space(range);
 2953|  6.38k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  6.38k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.38k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  6.38k|        return it;
 2959|  6.38k|    }
 2960|       |
 2961|    230|    return read_while_classic_space(range);
 2962|  6.61k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  86.1k|{
 2117|  86.1k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  86.1k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  86.1k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  86.1k|        auto buf = make_contiguous_buffer(range);
 2121|  86.1k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  86.1k|        return ranges::next(range.begin(),
 2123|  86.1k|                            ranges::distance(buf.view().begin(), it));
 2124|  86.1k|    }
 2125|  86.1k|    else {
 2126|  86.1k|        auto it = range.begin();
 2127|       |
 2128|  86.1k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  86.1k|            auto seg = get_contiguous_beginning(range);
 2130|  86.1k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  86.1k|                seg_it != seg.end()) {
 2132|  86.1k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  86.1k|            }
 2134|  86.1k|            ranges::advance(it, seg.size());
 2135|  86.1k|        }
 2136|       |
 2137|  86.1k|        return read_while_code_point(
 2138|  86.1k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  86.1k|    }
 2140|  86.1k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  86.1k|{
 2082|  86.1k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  86.1k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  88.6k|{
 2061|  88.6k|    auto it = range.begin();
 2062|   196k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 193k, False: 2.32k]
  ------------------
 2063|   193k|        const auto val =
 2064|   193k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   193k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   193k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 193k, False: 0]
  |  |  ------------------
  ------------------
 2066|   193k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   193k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   193k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 86.3k, False: 107k]
  ------------------
 2069|  86.3k|                return it;
 2070|  86.3k|            }
 2071|   193k|        }
 2072|   107k|        it = val.iterator;
 2073|   107k|    }
 2074|       |
 2075|  2.32k|    return it;
 2076|  88.6k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  86.1k|    {
  754|  86.1k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   165k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   165k|              cvref<T> obj = *get<T>(fn);
  745|   165k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   165k|                  obj(static_cast<decltype(args)>(args)...);
  747|   165k|              }
  748|   165k|              else {
  749|   165k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   165k|              }
  751|   165k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   165k|    {
  684|   165k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   165k|            return static_cast<T*>(s.m_cp);
  686|   165k|        }
  687|   165k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   165k|            return static_cast<T*>(s.m_p);
  689|   165k|        }
  690|   165k|        else {
  691|   165k|            return reinterpret_cast<T*>(s.m_fp);
  692|   165k|        }
  693|   165k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   165k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  86.1k|        {
  662|  86.1k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  2.63k|    {
 3040|  2.63k|        reader_error_handler eh{};
 3041|  2.63k|        get_derived().check_specs_impl(specs, eh);
 3042|  2.63k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.74k, False: 892]
  |  |  ------------------
  ------------------
 3043|  1.74k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  1.74k|        }
 3045|    892|        return {};
 3046|  2.63k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|  2.63k|    {
 3051|  2.63k|        return static_cast<Derived&>(*this);
 3052|  2.63k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  2.63k|    {
 3485|  2.63k|        detail::check_int_type_specs(specs, eh);
 3486|  2.63k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|  1.90k|    {
 3035|  1.90k|        return true;
 3036|  1.90k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    106|    {
 3539|    106|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    106|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 106]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    106|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    106|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    106|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 106]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    106|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 106]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    106|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    106|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 106, False: 0]
  |  |  ------------------
  ------------------
 3565|    106|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    106|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 106, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    106|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    106|    }                                                  \
  |  |  |  | 3667|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    340|    {
 3539|    340|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    340|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    340|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    340|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    340|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 340]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    340|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    340|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    340|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    340|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 340]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    340|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 340]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    340|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    340|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 328, False: 12]
  |  |  ------------------
  ------------------
 3565|    328|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 328]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    328|                    parse_integer_digits_without_thsep(
 3567|    328|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    328|                        prefix_result.parsed_base));
 3569|       |
 3570|    328|            auto buf = make_contiguous_buffer(
 3571|    328|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    328|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 328, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    328|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    328|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    328|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    328|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    328|    }                                                  \
  |  |  |  | 3667|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    328|        }
 3580|       |
 3581|     12|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     12|            localized_number_formatting_options<CharT>{loc};
 3586|     12|#endif
 3587|       |
 3588|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|     94|    {
 3539|     94|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|     94|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     94|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     94|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 94]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     94|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     94|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     94|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     94|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 94]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     94|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 94]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     94|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     94|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 94, False: 0]
  |  |  ------------------
  ------------------
 3565|     94|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|     94|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     94|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     94|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 94, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     94|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     94|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     94|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     94|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     94|    }                                                  \
  |  |  |  | 3667|     94|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    820|    {
 3539|    820|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    820|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    820|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    820|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    820|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 820]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    820|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    820|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    820|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    820|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 820]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    820|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 820]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    820|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    820|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 820, False: 0]
  |  |  ------------------
  ------------------
 3565|    820|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    820|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    820|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    820|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    820|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 820]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    820|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    820|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    820|                    parse_integer_digits_without_thsep(
 3567|    820|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    820|                        prefix_result.parsed_base));
 3569|       |
 3570|    820|            auto buf = make_contiguous_buffer(
 3571|    820|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    820|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    820|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    820|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    820|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    820|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 820, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    820|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    820|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    820|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    820|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    820|    }                                                  \
  |  |  |  | 3667|    820|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    820|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  1.31k|    {
 3040|  1.31k|        reader_error_handler eh{};
 3041|  1.31k|        get_derived().check_specs_impl(specs, eh);
 3042|  1.31k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 862, False: 456]
  |  |  ------------------
  ------------------
 3043|    862|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    862|        }
 3045|    456|        return {};
 3046|  1.31k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|  1.31k|    {
 3051|  1.31k|        return static_cast<Derived&>(*this);
 3052|  1.31k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  1.31k|    {
 4145|  1.31k|        detail::check_float_type_specs(specs, eh);
 4146|  1.31k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|    960|    {
 3035|    960|        return true;
 3036|    960|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|    456|    {
 4217|    456|        unsigned options{};
 4218|    456|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 10, False: 446]
  ------------------
 4219|     10|            options |= float_reader_base::allow_thsep;
 4220|     10|        }
 4221|       |
 4222|    456|        SCN_GCC_COMPAT_PUSH
 4223|    456|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    456|        switch (specs.type) {
 4226|      8|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 8, False: 448]
  ------------------
 4227|      8|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      6|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 6, False: 450]
  ------------------
 4230|      6|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     26|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 26, False: 430]
  ------------------
 4233|     26|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 0, False: 456]
  ------------------
 4236|      0|                return options | float_reader_base::allow_scientific |
 4237|      0|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    416|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 416, False: 40]
  ------------------
 4240|    416|                return options | float_reader_base::allow_scientific |
 4241|    416|                       float_reader_base::allow_fixed |
 4242|    416|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 456]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    456|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    456|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    456|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|    456|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|    960|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.92k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|    848|    {
 4057|    848|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 848, False: 0]
  ------------------
 4058|    848|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 848, False: 0]
  ------------------
 4059|    848|            return;
 4060|    848|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|    112|    {
 1587|    112|        return m_storage.has_value();
 1588|    112|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|     56|    {
 1592|     56|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|     56|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     56|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|     56|        return *m_storage;
 1594|     56|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    106|    {
  763|    106|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    106|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    106|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    106|    {
 3705|    106|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    106|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 106]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    106|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    106|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    106|        auto it = sign_result.first;
 3708|    106|        m_sign = sign_result.second;
 3709|       |
 3710|    106|        auto digits_begin = it;
 3711|    106|        auto r = ranges::subrange{it, range.end()};
 3712|    106|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    106|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    106|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    106|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    106|                SCN_TRY_ASSIGN(
 3717|    106|                    it,
 3718|    106|                    do_read_source_impl(
 3719|    106|                        r,
 3720|    106|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    106|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    106|            }
 3723|    106|            else {
 3724|    106|                auto cb = [&](const auto& rr)
 3725|    106|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    106|                    auto res = read_all(rr);
 3727|    106|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    106|                        return unexpected_scan_error(
 3729|    106|                            scan_error::invalid_scanned_value,
 3730|    106|                            "Invalid float value");
 3731|    106|                    }
 3732|    106|                    return res;
 3733|    106|                };
 3734|    106|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    106|            }
 3736|    106|        }
 3737|    106|        else {
 3738|    106|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 106, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    106|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    106|    }                                                  \
  |  | 3667|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    106|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    106|    {
 4000|    106|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    106|        const bool allowed_nonhex =
 4002|    106|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    106|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    106|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 106, False: 0]
  |  Branch (4005:45): [True: 0, False: 106]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    106|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 106]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    106|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 106, False: 0]
  |  Branch (4014:45): [True: 0, False: 106]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    106|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 106]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    106|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 98, False: 8]
  |  Branch (4021:28): [True: 4, False: 94]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      4|            auto it = range.begin();
 4025|       |
 4026|      4|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 4]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      4|            else {
 4031|      4|                m_kind = float_kind::hex_without_prefix;
 4032|      4|            }
 4033|       |
 4034|      4|            return read_hex(ranges::subrange{it, range.end()});
 4035|      4|        }
 4036|    102|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 8, False: 94]
  |  Branch (4036:29): [True: 8, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      8|            m_kind = float_kind::generic;
 4040|      8|            return read_regular_float(range);
 4041|      8|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|     94|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 94]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|     94|        m_kind = float_kind::generic;
 4052|     94|        return read_regular(range);
 4053|     94|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    106|    {
 3811|    106|        auto it = range.begin();
 3812|    106|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 106, False: 0]
  ------------------
 3813|    106|            return unexpected(r.error());
 3814|    106|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    106|    {
 3834|    106|        auto it = range.begin();
 3835|    106|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 106, False: 0]
  ------------------
 3836|    106|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    106|                scan_error::invalid_scanned_value,
 3838|    106|                "Invalid floating-point NaN value"));
 3839|    106|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|     98|    {
 3804|     98|        return read_matching_string_classic_nocase(range, "0x");
 3805|     98|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      4|    {
 3904|      4|        auto it = range.begin();
 3905|       |
 3906|      4|        std::ptrdiff_t digits_count = 0;
 3907|      4|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      4|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 3909|      4|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      4|                scan_error::invalid_scanned_value,
 3911|      4|                "Invalid hexadecimal floating-point value"));
 3912|      4|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      4|    {
 3789|      4|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      4|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      4|        return read_while1_code_unit(
 3798|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      4|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|      4|    {
  754|      4|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|      4|    {
  684|      4|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      4|            return static_cast<T*>(s.m_cp);
  686|      4|        }
  687|      4|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      4|            return static_cast<T*>(s.m_p);
  689|      4|        }
  690|      4|        else {
  691|      4|            return reinterpret_cast<T*>(s.m_fp);
  692|      4|        }
  693|      4|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3798|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|      4|        {
  662|      4|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    102|    {
 3944|    102|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    102|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 98, False: 4]
  |  Branch (3945:50): [True: 4, False: 94]
  ------------------
 3946|       |
 3947|    102|        auto it = ranges::begin(range);
 3948|    102|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    102|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    102|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    102|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 0]
  |  |  ------------------
  ------------------
 3952|    102|            return r.transform_error(
 3953|    102|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    102|                                              "Invalid floating-point value"));
 3955|    102|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    102|    {
 3774|    102|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    102|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 102]
  |  |  |  Branch (859:45): [True: 0, False: 102]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    102|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    102|        return read_while1_code_unit(
 3783|    102|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    102|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|    102|    {
  754|    102|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|    102|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    102|              cvref<T> obj = *get<T>(fn);
  745|    102|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    102|                  obj(static_cast<decltype(args)>(args)...);
  747|    102|              }
  748|    102|              else {
  749|    102|                  return obj(static_cast<decltype(args)>(args)...);
  750|    102|              }
  751|    102|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    102|    {
  684|    102|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    102|            return static_cast<T*>(s.m_cp);
  686|    102|        }
  687|    102|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    102|            return static_cast<T*>(s.m_p);
  689|    102|        }
  690|    102|        else {
  691|    102|            return reinterpret_cast<T*>(s.m_fp);
  692|    102|        }
  693|    102|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3783|    102|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|    102|        {
  662|    102|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    106|    {
 3665|    106|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 106]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    106|        return read_source_impl(range);
 3671|    106|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    854|    {
  763|    854|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    854|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    854|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     10|    {
 3679|     10|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     10|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     10|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 10]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     10|        return read_source_impl(range);
 3685|     10|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    854|    {
 3705|    854|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    854|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    854|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    854|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    854|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 854]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    854|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    854|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    854|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    854|        auto it = sign_result.first;
 3708|    854|        m_sign = sign_result.second;
 3709|       |
 3710|    854|        auto digits_begin = it;
 3711|    854|        auto r = ranges::subrange{it, range.end()};
 3712|    854|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    854|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    854|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 854]
  |  |  |  Branch (859:45): [True: 0, False: 854]
  |  |  |  Branch (859:45): [True: 0, False: 854]
  |  |  ------------------
  ------------------
 3715|    854|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    854|            else {
 3724|    854|                auto cb = [&](const auto& rr)
 3725|    854|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    854|                    auto res = read_all(rr);
 3727|    854|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    854|                        return unexpected_scan_error(
 3729|    854|                            scan_error::invalid_scanned_value,
 3730|    854|                            "Invalid float value");
 3731|    854|                    }
 3732|    854|                    return res;
 3733|    854|                };
 3734|    854|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|    854|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    854|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    854|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6, False: 848]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      6|    }                                                  \
  |  | 3667|    854|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    854|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    848|            }
 3736|    854|        }
 3737|    848|        else {
 3738|    848|            SCN_TRY_ASSIGN(
 3739|    848|                it,
 3740|    848|                do_read_source_impl(
 3741|    848|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|    848|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|    848|        }
 3744|       |
 3745|    848|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    848|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    848|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    848|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 848, False: 0]
  |  Branch (3747:48): [True: 848, False: 0]
  ------------------
 3748|    848|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 848, False: 0]
  ------------------
 3749|    848|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 848, False: 0]
  ------------------
 3750|    848|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    848|        }
 3752|       |
 3753|    848|        handle_separators();
 3754|       |
 3755|    848|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 848]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    848|        return it;
 3768|    848|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    854|    {
 3811|    854|        auto it = range.begin();
 3812|    854|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 854, False: 0]
  ------------------
 3813|    854|            return unexpected(r.error());
 3814|    854|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    854|    {
 3834|    854|        auto it = range.begin();
 3835|    854|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 854, False: 0]
  ------------------
 3836|    854|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    854|                scan_error::invalid_scanned_value,
 3838|    854|                "Invalid floating-point NaN value"));
 3839|    854|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    848|    {
 3804|    848|        return read_matching_string_classic_nocase(range, "0x");
 3805|    848|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|      6|{
 1996|      6|    auto it = read_while_code_unit(range, pred);
 1997|      6|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 6, False: 0]
  ------------------
 1998|      6|        return unexpected(parse_error::error);
 1999|      6|    }
 2000|      0|    return it;
 2001|      6|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|      6|    {
 3944|      6|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|      6|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 2, False: 4]
  |  Branch (3945:50): [True: 2, False: 0]
  ------------------
 3946|       |
 3947|      6|        auto it = ranges::begin(range);
 3948|      6|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|      6|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3952|      6|            return r.transform_error(
 3953|      6|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|      6|                                              "Invalid floating-point value"));
 3955|      6|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|      6|    {
 3774|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|      6|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|      6|        return read_while1_code_unit(
 3783|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|      6|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    854|    {
 4000|    854|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    854|        const bool allowed_nonhex =
 4002|    854|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    854|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    854|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 854, False: 0]
  |  Branch (4005:45): [True: 0, False: 854]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    854|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 854]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    854|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 854, False: 0]
  |  Branch (4014:45): [True: 0, False: 854]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    854|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 854]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    854|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 848, False: 6]
  |  Branch (4021:28): [True: 22, False: 826]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     22|            auto it = range.begin();
 4025|       |
 4026|     22|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 22]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     22|            else {
 4031|     22|                m_kind = float_kind::hex_without_prefix;
 4032|     22|            }
 4033|       |
 4034|     22|            return read_hex(ranges::subrange{it, range.end()});
 4035|     22|        }
 4036|    832|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 6, False: 826]
  |  Branch (4036:29): [True: 6, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      6|            m_kind = float_kind::generic;
 4040|      6|            return read_regular_float(range);
 4041|      6|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    826|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    826|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 826]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    826|        m_kind = float_kind::generic;
 4052|    826|        return read_regular(range);
 4053|    826|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    848|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    848|                    auto res = read_all(rr);
 3727|    848|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    848|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 848]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    848|                    return res;
 3733|    848|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    848|{
 1839|    848|    return ranges::next(range.begin(), range.end());
 1840|    848|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    848|    {
  313|    848|        ranges::advance(x, bound);
  314|    848|        return x;
  315|    848|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    848|    {
  275|    848|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    848|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|    848|    {
 1577|    848|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    848|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    848|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|    848|    {
 1621|    848|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    848|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    848|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    848|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    848|            m_storage.reset();
 1627|    848|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    848|        }
 1629|    848|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    848|                                          std::basic_string<CharT>>) {
 1631|    848|            m_storage.emplace(SCN_FWD(range));
 1632|    848|            m_view = string_view_type{*m_storage};
 1633|    848|        }
 1634|    848|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    848|                                          typename detail::basic_scan_buffer<
 1636|    848|                                              value_t>::forward_iterator> &&
 1637|    848|                           ranges::common_range<Range>) {
 1638|    848|            auto beg_seg = range.begin().contiguous_segment();
 1639|    848|            auto end_seg = range.end().contiguous_segment();
 1640|    848|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    848|                             detail::to_address(end_seg.end()))) {
 1642|    848|                auto& str = m_storage.emplace();
 1643|    848|                str.reserve(range.end().position() - range.begin().position());
 1644|    848|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    848|                m_view = string_view_type{str};
 1646|    848|                return;
 1647|    848|            }
 1648|       |
 1649|    848|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    848|                                                            end_seg.data());
 1651|    848|            m_storage.reset();
 1652|    848|        }
 1653|    848|        else {
 1654|    848|            auto& str = m_storage.emplace();
 1655|    848|            if constexpr (ranges::sized_range<Range>) {
 1656|    848|                str.reserve(range.size());
 1657|    848|            }
 1658|    848|            if constexpr (ranges::common_range<Range>) {
 1659|    848|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    848|                          std::back_inserter(str));
 1661|    848|            }
 1662|    848|            else {
 1663|    848|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    848|                     ++it) {
 1665|    848|                    str.push_back(*it);
 1666|    848|                }
 1667|    848|            }
 1668|    848|            m_view = string_view_type{str};
 1669|    848|        }
 1670|    848|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    844|    {
 3665|    844|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    844|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 844]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    844|        return read_source_impl(range);
 3671|    844|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    848|    {
 3691|    848|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    848|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    848|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    848|        const std::ptrdiff_t sign_len =
 3694|    848|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 848]
  ------------------
 3695|       |
 3696|    848|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|    848|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    848|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    848|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    848|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 848, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    848|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    848|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    848|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    848|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    848|    }                                                  \
  |  |  |  | 3667|    848|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    848|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    106|    {
 4170|    106|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    106|#if !SCN_DISABLE_LOCALE
 4173|    106|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 0, False: 106]
  ------------------
 4174|      0|            return read_impl<Range>(
 4175|      0|                range, rd,
 4176|      0|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      0|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      0|                },
 4179|      0|                value, loc);
 4180|      0|        }
 4181|    106|#endif
 4182|       |
 4183|    106|        return read_impl<Range>(
 4184|    106|            range, rd,
 4185|    106|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    106|                return r.read_source(SCN_FWD(args)...);
 4187|    106|            },
 4188|    106|            value);
 4189|    106|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    106|    {
 4206|    106|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    106|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 0]
  |  |  ------------------
  ------------------
 4208|    106|            return unexpected(r.error());
 4209|    106|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    106|    {
  754|    106|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    106|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    106|              cvref<T> obj = *get<T>(fn);
  745|    106|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    106|                  obj(static_cast<decltype(args)>(args)...);
  747|    106|              }
  748|    106|              else {
  749|    106|                  return obj(static_cast<decltype(args)>(args)...);
  750|    106|              }
  751|    106|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    106|    {
  684|    106|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    106|            return static_cast<T*>(s.m_cp);
  686|    106|        }
  687|    106|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    106|            return static_cast<T*>(s.m_p);
  689|    106|        }
  690|    106|        else {
  691|    106|            return reinterpret_cast<T*>(s.m_fp);
  692|    106|        }
  693|    106|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    106|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    106|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    106|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    106|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSL_:
  661|    106|        {
  662|    106|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    350|    {
 4170|    350|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    350|#if !SCN_DISABLE_LOCALE
 4173|    350|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 10, False: 340]
  ------------------
 4174|     10|            return read_impl<Range>(
 4175|     10|                range, rd,
 4176|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     10|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     10|                },
 4179|     10|                value, loc);
 4180|     10|        }
 4181|    340|#endif
 4182|       |
 4183|    340|        return read_impl<Range>(
 4184|    340|            range, rd,
 4185|    340|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    340|                return r.read_source(SCN_FWD(args)...);
 4187|    340|            },
 4188|    340|            value);
 4189|    350|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    854|    {
 4206|    854|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    854|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    854|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 848]
  |  |  ------------------
  ------------------
 4208|      6|            return unexpected(r.error());
 4209|      6|        }
 4210|       |
 4211|    848|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|    848|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    848|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    848|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    848|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 848, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    848|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    848|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    848|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    848|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    848|    }                                                  \
  |  |  |  | 3667|    848|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    848|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     10|    {
  684|     10|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     10|            return static_cast<T*>(s.m_cp);
  686|     10|        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     10|            return static_cast<T*>(s.m_p);
  689|     10|        }
  690|     10|        else {
  691|     10|            return reinterpret_cast<T*>(s.m_fp);
  692|     10|        }
  693|     10|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     10|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     10|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    340|    {
  754|    340|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    340|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    340|              cvref<T> obj = *get<T>(fn);
  745|    340|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    340|                  obj(static_cast<decltype(args)>(args)...);
  747|    340|              }
  748|    340|              else {
  749|    340|                  return obj(static_cast<decltype(args)>(args)...);
  750|    340|              }
  751|    340|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    340|    {
  684|    340|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    340|            return static_cast<T*>(s.m_cp);
  686|    340|        }
  687|    340|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    340|            return static_cast<T*>(s.m_p);
  689|    340|        }
  690|    340|        else {
  691|    340|            return reinterpret_cast<T*>(s.m_fp);
  692|    340|        }
  693|    340|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    340|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    340|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    340|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    340|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    340|        {
  662|    340|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5808|  1.80k|{
 5809|  1.80k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  1.80k|        return reader_impl_for_bool<CharT>{};
 5811|  1.80k|    }
 5812|  1.80k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  1.80k|        return reader_impl_for_char<CharT>{};
 5814|  1.80k|    }
 5815|  1.80k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  1.80k|        return reader_impl_for_wchar<CharT>{};
 5817|  1.80k|    }
 5818|  1.80k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  1.80k|        return reader_impl_for_code_point<CharT>{};
 5820|  1.80k|    }
 5821|  1.80k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  1.80k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  1.80k|        return reader_impl_for_string<CharT>{};
 5824|  1.80k|    }
 5825|  1.80k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  1.80k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  1.80k|        return reader_impl_for_string<CharT>{};
 5828|  1.80k|    }
 5829|  1.80k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  1.80k|                       std::is_same_v<T, wregex_matches>) {
 5831|  1.80k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  1.80k|    }
 5833|  1.80k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  1.80k|        return reader_impl_for_voidptr<CharT>{};
 5835|  1.80k|    }
 5836|  1.80k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  1.80k|        return reader_impl_for_float<CharT>{};
 5838|  1.80k|    }
 5839|  1.80k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  1.80k|                       !std::is_same_v<T, wchar_t> &&
 5841|  1.80k|                       !std::is_same_v<T, char32_t> &&
 5842|  1.80k|                       !std::is_same_v<T, bool>) {
 5843|  1.80k|        return reader_impl_for_int<CharT>{};
 5844|  1.80k|    }
 5845|  1.80k|    else {
 5846|  1.80k|        return reader_impl_for_monostate<CharT>{};
 5847|  1.80k|    }
 5848|  1.80k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  5.40k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.89k|    {
 3040|  3.89k|        reader_error_handler eh{};
 3041|  3.89k|        get_derived().check_specs_impl(specs, eh);
 3042|  3.89k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 210, False: 3.68k]
  |  |  ------------------
  ------------------
 3043|    210|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    210|        }
 3045|  3.68k|        return {};
 3046|  3.89k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  3.89k|    {
 3051|  3.89k|        return static_cast<Derived&>(*this);
 3052|  3.89k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  3.89k|    {
 5210|  3.89k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  3.89k|        SCN_GCC_PUSH
 5213|  3.89k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  3.89k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  3.89k|        SCN_CLANG_PUSH
 5217|  3.89k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  3.89k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  3.89k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 198, False: 3.69k]
  ------------------
 5221|  1.22k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.22k, False: 2.67k]
  ------------------
 5222|  1.22k|                m_type = reader_type::word;
 5223|  1.22k|                break;
 5224|       |
 5225|    168|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 168, False: 3.72k]
  ------------------
 5226|    168|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 66, False: 102]
  ------------------
 5227|    168|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 42, False: 60]
  ------------------
 5228|    108|                    m_type = reader_type::custom_word;
 5229|    108|                }
 5230|     60|                else {
 5231|     60|                    m_type = reader_type::word;
 5232|     60|                }
 5233|    168|                break;
 5234|      0|            }
 5235|       |
 5236|     90|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 90, False: 3.80k]
  ------------------
 5237|     90|                m_type = reader_type::character;
 5238|     90|                break;
 5239|       |
 5240|      0|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 0, False: 3.89k]
  ------------------
 5241|      0|                m_type = reader_type::character_set;
 5242|      0|                break;
 5243|       |
 5244|  2.05k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 2.05k, False: 1.84k]
  ------------------
 5245|  2.05k|                m_type = reader_type::regex;
 5246|  2.05k|                break;
 5247|       |
 5248|    162|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 162, False: 3.73k]
  ------------------
 5249|    162|                m_type = reader_type::regex_escaped;
 5250|    162|                break;
 5251|  3.89k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  3.89k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  5.65k|    {
 5259|  5.65k|        return m_type == reader_type::word;
 5260|  5.65k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  3.62k|{
 1132|  3.62k|    auto it = src.begin();
 1133|  31.4k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 28.9k, False: 2.56k]
  ------------------
 1134|  28.9k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  28.9k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 28.9k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  28.9k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 28.9k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  28.9k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  28.9k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  28.9k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.06k, False: 27.8k]
  ------------------
 1144|  1.06k|            return false;
 1145|  1.06k|        }
 1146|  27.8k|        it += len;
 1147|  27.8k|    }
 1148|  2.56k|    return true;
 1149|  3.62k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|     56|{
 2993|     56|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|     56|        if (source.stores_allocated_string()) {
 2995|     56|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|     56|        }
 2997|     56|        else {
 2998|     56|            dest.assign(source.view());
 2999|     56|        }
 3000|     56|    }
 3001|     56|    else {
 3002|     56|        return transcode_impl(source.view(), dest);
 3003|     56|    }
 3004|       |
 3005|      0|    return {};
 3006|     56|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|    640|{
 2968|    640|    dst.clear();
 2969|    640|    transcode_valid_to_string(src, dst);
 2970|    640|    return {};
 2971|    640|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|    640|{
 1403|    640|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|    640|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|    640|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    640|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|    640|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|    640|        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|    640|            std::u32string tmp;
 1410|    640|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|    640|            return transcode_to_string_impl_32to16<true>(
 1412|    640|                std::u32string_view{tmp}, dest);
 1413|    640|        }
 1414|    640|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|    640|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|    640|        }
 1417|    640|    }
 1418|    640|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1418:24): [Folded - Ignored]
  ------------------
 1419|    640|        if constexpr (sizeof(DestCharT) == 1) {
 1420|    640|            std::u32string tmp;
 1421|    640|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|    640|            return transcode_to_string_impl_32to8<true>(
 1423|    640|                std::u32string_view{tmp}, dest);
 1424|    640|        }
 1425|    640|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|    640|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|    640|        }
 1428|    640|    }
 1429|    640|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1429:24): [Folded - Ignored]
  ------------------
 1430|    640|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1430:23): [Folded - Ignored]
  ------------------
 1431|    640|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|    640|        }
 1433|    640|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|    640|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|    640|        }
 1436|    640|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|    640|{
 1294|    640|    static_assert(sizeof(SourceCharT) == 4);
 1295|    640|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  5.11k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 5.11k, False: 640]
  ------------------
 1298|  5.11k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  5.11k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  5.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  5.11k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 4.02k, False: 1.09k]
  ------------------
 1306|  4.02k|            dest.push_back(static_cast<char>(cp));
 1307|  4.02k|        }
 1308|  1.09k|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 36, False: 1.06k]
  ------------------
 1309|     36|            dest.push_back(
 1310|     36|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|     36|            dest.push_back(
 1312|     36|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|     36|        }
 1314|  1.06k|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 454, False: 606]
  ------------------
 1315|    454|            dest.push_back(
 1316|    454|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|    454|            dest.push_back(static_cast<char>(
 1318|    454|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|    454|            dest.push_back(
 1320|    454|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|    454|        }
 1322|    606|        else {
 1323|    606|            dest.push_back(
 1324|    606|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    606|            dest.push_back(static_cast<char>(
 1326|    606|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    606|            dest.push_back(static_cast<char>(
 1328|    606|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    606|            dest.push_back(
 1330|    606|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    606|        }
 1332|  5.11k|    }
 1333|    640|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    130|    {
 5277|    130|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    130|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    130|        return read_impl(range, specs, value);
 5279|    130|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    130|    {
 5295|    130|        SCN_CLANG_PUSH
 5296|    130|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    130|        switch (m_type) {
 5299|     98|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 98, False: 32]
  ------------------
 5300|     98|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 130]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|     26|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 26, False: 104]
  ------------------
 5307|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 130]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      6|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 6, False: 124]
  ------------------
 5315|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      6|                    range, specs.charset_string<SourceCharT>(),
 5317|      6|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 130]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 130]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    130|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    130|        }
 5331|       |
 5332|    130|        SCN_CLANG_POP
 5333|    130|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|     98|    {
 4820|     98|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|     98|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    124|{
 4752|    124|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    124|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    124|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 68, False: 56]
  ------------------
 4756|     68|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     68|                                     "Invalid encoding in scanned string");
 4758|     68|    }
 4759|     56|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     56|    static_cast<    \
  |  |  929|     56|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     56|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 56]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     56|    return SCN_MOVE(result);
  ------------------
  |  |  928|     56|    static_cast<    \
  |  |  929|     56|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     56|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    294|{
 2088|    294|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    294|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    294|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    294|        auto buf = make_contiguous_buffer(range);
 2092|    294|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    294|        return ranges::next(range.begin(),
 2094|    294|                            ranges::distance(buf.view().begin(), it));
 2095|    294|    }
 2096|    294|    else {
 2097|    294|        auto it = range.begin();
 2098|       |
 2099|    294|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    294|            auto seg = get_contiguous_beginning(range);
 2101|    294|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    294|                seg_it != seg.end()) {
 2103|    294|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|    294|            }
 2105|    294|            ranges::advance(it, seg.size());
 2106|    294|        }
 2107|       |
 2108|    294|        return read_until_code_point(
 2109|    294|            ranges::subrange{it, range.end()},
 2110|    294|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    294|    }
 2112|    294|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    294|{
 2061|    294|    auto it = range.begin();
 2062|  9.73k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 9.51k, False: 228]
  ------------------
 2063|  9.51k|        const auto val =
 2064|  9.51k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  9.51k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  9.51k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.51k, False: 0]
  |  |  ------------------
  ------------------
 2066|  9.51k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  9.51k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  9.51k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 66, False: 9.44k]
  ------------------
 2069|     66|                return it;
 2070|     66|            }
 2071|  9.51k|        }
 2072|  9.44k|        it = val.iterator;
 2073|  9.44k|    }
 2074|       |
 2075|    228|    return it;
 2076|    294|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    294|    {
  754|    294|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  9.51k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.51k|              cvref<T> obj = *get<T>(fn);
  745|  9.51k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.51k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.51k|              }
  748|  9.51k|              else {
  749|  9.51k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.51k|              }
  751|  9.51k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  9.51k|    {
  684|  9.51k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.51k|            return static_cast<T*>(s.m_cp);
  686|  9.51k|        }
  687|  9.51k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  9.51k|            return static_cast<T*>(s.m_p);
  689|  9.51k|        }
  690|  9.51k|        else {
  691|  9.51k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.51k|        }
  693|  9.51k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  9.51k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    294|        {
  662|    294|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     26|    {
 4947|     26|        return read_impl(
 4948|     26|            range,
 4949|     26|            [&](const auto& rng) {
 4950|     26|                return read_string_impl(rng, read_all(rng), value);
 4951|     26|            },
 4952|     26|            detail::priority_tag<1>{});
 4953|     26|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     26|    {
 4974|     26|        return read_cb(range);
 4975|     26|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     26|            [&](const auto& rng) {
 4950|     26|                return read_string_impl(rng, read_all(rng), value);
 4951|     26|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|     78|{
 1839|     78|    return ranges::next(range.begin(), range.end());
 1840|     78|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     78|    {
  313|     78|        ranges::advance(x, bound);
  314|     78|        return x;
  315|     78|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     78|    {
  275|     78|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     78|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     78|    {
  203|    294|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 216, False: 78]
  ------------------
  204|    216|            ++i;
  205|    216|        }
  206|     78|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|      6|    {
 4891|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      6|    }                                                  \
  |  |  |  | 3667|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|      6|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|     18|    {
 4913|     18|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|     36|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|     18|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|     18|            return unexpected_scan_error(
 4916|     18|                scan_error::invalid_scanned_value,
 4917|     18|                "Regex backend doesn't support wide strings as input");
 4918|     18|        }
 4919|     18|        else {
 4920|     18|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 18, False: 0]
  ------------------
 4921|     18|                return unexpected_scan_error(
 4922|     18|                    scan_error::invalid_scanned_value,
 4923|     18|                    "Cannot use regex with a non-contiguous source "
 4924|     18|                    "range");
 4925|     18|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|     18|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  958|     18|{
  959|     18|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|     18|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|     18|        return true;
  962|     18|    }
  963|     18|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|     18|                           ranges::const_iterator_t<Range>,
  965|     18|                           typename detail::basic_scan_buffer<
  966|     18|                               detail::char_t<Range>>::forward_iterator>) {
  967|     18|        auto beg = r.begin();
  968|     18|        if (!beg.stores_parent()) {
  969|     18|            return true;
  970|     18|        }
  971|     18|        return beg.parent()->is_contiguous();
  972|     18|    }
  973|     18|    else {
  974|     18|        return false;
  975|     18|    }
  976|     18|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  1.09k|    {
 5277|  1.09k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.09k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.09k|        return read_impl(range, specs, value);
 5279|  1.09k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  1.09k|    {
 5295|  1.09k|        SCN_CLANG_PUSH
 5296|  1.09k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.09k|        switch (m_type) {
 5299|    330|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 330, False: 768]
  ------------------
 5300|    330|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 36, False: 1.06k]
  ------------------
 5303|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     36|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 1.09k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 1.09k]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|    678|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 678, False: 420]
  ------------------
 5315|    678|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|    678|                    range, specs.charset_string<SourceCharT>(),
 5317|    678|                    specs.regexp_flags, value);
 5318|       |
 5319|     54|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 54, False: 1.04k]
  ------------------
 5320|     54|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     54|                    range,
 5322|     54|                    get_unescaped_regex_pattern(
 5323|     54|                        specs.charset_string<SourceCharT>()),
 5324|     54|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.09k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.09k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.09k|        }
 5331|       |
 5332|  1.09k|        SCN_CLANG_POP
 5333|  1.09k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    834|    {
 4820|    834|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    834|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    870|{
 4752|    870|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    870|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    870|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 288, False: 582]
  ------------------
 4756|    288|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    288|                                     "Invalid encoding in scanned string");
 4758|    288|    }
 4759|    582|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    582|    static_cast<    \
  |  |  929|    582|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    582|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    582|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 582]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    582|    return SCN_MOVE(result);
  ------------------
  |  |  928|    582|    static_cast<    \
  |  |  929|    582|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    582|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    584|{
 3012|    584|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    584|        dest.assign(source.view());
 3014|    584|    }
 3015|    584|    else {
 3016|    584|        return transcode_impl(source.view(), dest);
 3017|    584|    }
 3018|       |
 3019|      0|    return {};
 3020|    584|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.50k|{
 2088|  2.50k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.50k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.50k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.50k|        auto buf = make_contiguous_buffer(range);
 2092|  2.50k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.50k|        return ranges::next(range.begin(),
 2094|  2.50k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.50k|    }
 2096|  2.50k|    else {
 2097|  2.50k|        auto it = range.begin();
 2098|       |
 2099|  2.50k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  2.50k|            auto seg = get_contiguous_beginning(range);
 2101|  2.50k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.50k|                seg_it != seg.end()) {
 2103|  2.50k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.50k|            }
 2105|  2.50k|            ranges::advance(it, seg.size());
 2106|  2.50k|        }
 2107|       |
 2108|  2.50k|        return read_until_code_point(
 2109|  2.50k|            ranges::subrange{it, range.end()},
 2110|  2.50k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.50k|    }
 2112|  2.50k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  2.50k|    {
  754|  2.50k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  28.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.5k|              cvref<T> obj = *get<T>(fn);
  745|  28.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  28.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.5k|              }
  748|  28.5k|              else {
  749|  28.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.5k|              }
  751|  28.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  28.5k|    {
  684|  28.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  28.5k|            return static_cast<T*>(s.m_cp);
  686|  28.5k|        }
  687|  28.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  28.5k|            return static_cast<T*>(s.m_p);
  689|  28.5k|        }
  690|  28.5k|        else {
  691|  28.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  28.5k|        }
  693|  28.5k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  28.5k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  2.50k|        {
  662|  2.50k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     36|    {
 4841|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 36, False: 0]
  ------------------
 4842|     36|            return read_string_impl(
 4843|     36|                range,
 4844|     36|                read_until_code_unit(
 4845|     36|                    range,
 4846|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     36|                        SourceCharT ch) { return ch == until; }),
 4848|     36|                value);
 4849|     36|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     36|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    412|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    412|              cvref<T> obj = *get<T>(fn);
  745|    412|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    412|                  obj(static_cast<decltype(args)>(args)...);
  747|    412|              }
  748|    412|              else {
  749|    412|                  return obj(static_cast<decltype(args)>(args)...);
  750|    412|              }
  751|    412|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    412|    {
  684|    412|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    412|            return static_cast<T*>(s.m_cp);
  686|    412|        }
  687|    412|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    412|            return static_cast<T*>(s.m_p);
  689|    412|        }
  690|    412|        else {
  691|    412|            return reinterpret_cast<T*>(s.m_fp);
  692|    412|        }
  693|    412|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    412|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|      2|{
 4752|      2|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|      2|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|      2|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 2]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|      2|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|      2|    static_cast<    \
  |  |  929|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|      2|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|      2|    return SCN_MOVE(result);
  ------------------
  |  |  928|      2|    static_cast<    \
  |  |  929|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|      2|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|    732|    {
 4891|    732|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    732|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    732|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    732|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    732|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 730, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    730|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    730|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    730|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    730|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    730|    }                                                  \
  |  |  |  | 3667|    732|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      2|        return read_string_impl(range, it, value);
 4893|    732|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|  2.19k|    {
 4913|  2.19k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  4.39k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  2.19k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  2.19k|            return unexpected_scan_error(
 4916|  2.19k|                scan_error::invalid_scanned_value,
 4917|  2.19k|                "Regex backend doesn't support wide strings as input");
 4918|  2.19k|        }
 4919|  2.19k|        else {
 4920|  2.19k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 2.19k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  2.19k|            auto input = get_as_contiguous(range);
 4928|  2.19k|            SCN_TRY(it,
  ------------------
  |  | 3668|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.19k, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.19k|    }                                                  \
  |  |  |  | 3667|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      6|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      6|            return ranges::next(range.begin(),
 4931|      6|                                ranges::distance(input.begin(), it));
 4932|  2.19k|        }
 4933|  2.19k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|  2.19k|{
  959|  2.19k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  2.19k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  2.19k|        return true;
  962|  2.19k|    }
  963|  2.19k|    else if constexpr (std::is_same_v<
  964|  2.19k|                           ranges::const_iterator_t<Range>,
  965|  2.19k|                           typename detail::basic_scan_buffer<
  966|  2.19k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  2.19k|        auto beg = r.begin();
  968|  2.19k|        if (!beg.stores_parent()) {
  969|  2.19k|            return true;
  970|  2.19k|        }
  971|  2.19k|        return beg.parent()->is_contiguous();
  972|  2.19k|    }
  973|  2.19k|    else {
  974|  2.19k|        return false;
  975|  2.19k|    }
  976|  2.19k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|  2.19k|{
 1065|  2.19k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  2.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  2.19k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  2.19k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  2.19k|        return r;
 1070|  2.19k|    }
 1071|  2.19k|    else if constexpr (std::is_same_v<
 1072|  2.19k|                           ranges::const_iterator_t<Range>,
 1073|  2.19k|                           typename detail::basic_scan_buffer<
 1074|  2.19k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  2.19k|        if constexpr (ranges::common_range<Range>) {
 1076|  2.19k|            return detail::make_string_view_from_pointers(
 1077|  2.19k|                r.begin().to_contiguous_segment_iterator(),
 1078|  2.19k|                r.end().to_contiguous_segment_iterator());
 1079|  2.19k|        }
 1080|  2.19k|        else {
 1081|  2.19k|            return r.begin().contiguous_segment();
 1082|  2.19k|        }
 1083|  2.19k|    }
 1084|  2.19k|    else {
 1085|  2.19k|        SCN_EXPECT(false);
 1086|  2.19k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  2.19k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  2.19k|    }
 1090|  2.19k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|  2.19k|{
  981|  2.19k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  2.19k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  2.19k|        return true;
  984|  2.19k|    }
  985|  2.19k|    else if constexpr (std::is_same_v<
  986|  2.19k|                           ranges::const_iterator_t<Range>,
  987|  2.19k|                           typename detail::basic_scan_buffer<
  988|  2.19k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  2.19k|        auto beg = r.begin();
  990|  2.19k|        if (beg.contiguous_segment().empty()) {
  991|  2.19k|            return false;
  992|  2.19k|        }
  993|  2.19k|        if constexpr (ranges::common_range<Range>) {
  994|  2.19k|            return beg.contiguous_segment().end() ==
  995|  2.19k|                   ranges::end(r).contiguous_segment().end();
  996|  2.19k|        }
  997|  2.19k|        else {
  998|  2.19k|            if (beg.stores_parent()) {
  999|  2.19k|                return beg.contiguous_segment().end() ==
 1000|  2.19k|                       beg.parent()->current_view().end();
 1001|  2.19k|            }
 1002|  2.19k|            return true;
 1003|  2.19k|        }
 1004|  2.19k|    }
 1005|  2.19k|    else {
 1006|  2.19k|        return false;
 1007|  2.19k|    }
 1008|  2.19k|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  2.19k|{
 4346|  2.19k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  2.19k|                  ranges::borrowed_range<Input> &&
 4348|  2.19k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  2.19k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  2.19k|    std::basic_regex<CharT> re{};
 4352|  2.19k|    try {
 4353|  2.19k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3668|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  2.19k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  2.19k|                                     re_flags | std::regex_constants::nosubs};
 4356|  2.19k|    }
 4357|  2.19k|    catch (const std::regex_error& err) {
 4358|  1.16k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  1.16k|                                     "Invalid regex");
 4360|  1.16k|    }
 4361|       |
 4362|  1.03k|    std::match_results<const CharT*> matches{};
 4363|  1.03k|    try {
 4364|  1.03k|        bool found = std::regex_search(input.data(),
 4365|  1.03k|                                       input.data() + input.size(), matches, re,
 4366|  1.03k|                                       std::regex_constants::match_continuous);
 4367|  1.03k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 1.02k, False: 6]
  |  Branch (4367:23): [True: 0, False: 6]
  ------------------
 4368|  1.02k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  1.02k|                                         "Regular expression didn't match");
 4370|  1.02k|        }
 4371|  1.03k|    }
 4372|  1.03k|    catch (const std::regex_error& err) {
 4373|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|      0|                                     "Regex matching failed with an error");
 4375|      0|    }
 4376|       |
 4377|      6|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  1.03k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  1.80k|{
 5809|  1.80k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  1.80k|        return reader_impl_for_bool<CharT>{};
 5811|  1.80k|    }
 5812|  1.80k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  1.80k|        return reader_impl_for_char<CharT>{};
 5814|  1.80k|    }
 5815|  1.80k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  1.80k|        return reader_impl_for_wchar<CharT>{};
 5817|  1.80k|    }
 5818|  1.80k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  1.80k|        return reader_impl_for_code_point<CharT>{};
 5820|  1.80k|    }
 5821|  1.80k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  1.80k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  1.80k|        return reader_impl_for_string<CharT>{};
 5824|  1.80k|    }
 5825|  1.80k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  1.80k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  1.80k|        return reader_impl_for_string<CharT>{};
 5828|  1.80k|    }
 5829|  1.80k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  1.80k|                       std::is_same_v<T, wregex_matches>) {
 5831|  1.80k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  1.80k|    }
 5833|  1.80k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  1.80k|        return reader_impl_for_voidptr<CharT>{};
 5835|  1.80k|    }
 5836|  1.80k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  1.80k|        return reader_impl_for_float<CharT>{};
 5838|  1.80k|    }
 5839|  1.80k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  1.80k|                       !std::is_same_v<T, wchar_t> &&
 5841|  1.80k|                       !std::is_same_v<T, char32_t> &&
 5842|  1.80k|                       !std::is_same_v<T, bool>) {
 5843|  1.80k|        return reader_impl_for_int<CharT>{};
 5844|  1.80k|    }
 5845|  1.80k|    else {
 5846|  1.80k|        return reader_impl_for_monostate<CharT>{};
 5847|  1.80k|    }
 5848|  1.80k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|     56|{
 2993|     56|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|     56|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 56, False: 0]
  ------------------
 2995|     56|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|     56|    static_cast<    \
  |  |  929|     56|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|     56|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|     56|    }
 3001|     56|    else {
 3002|     56|        return transcode_impl(source.view(), dest);
 3003|     56|    }
 3004|       |
 3005|     56|    return {};
 3006|     56|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    130|    {
 5277|    130|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    130|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    130|        return read_impl(range, specs, value);
 5279|    130|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    130|    {
 5295|    130|        SCN_CLANG_PUSH
 5296|    130|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    130|        switch (m_type) {
 5299|     98|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 98, False: 32]
  ------------------
 5300|     98|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 130]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|     26|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 26, False: 104]
  ------------------
 5307|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 130]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      6|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 6, False: 124]
  ------------------
 5315|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      6|                    range, specs.charset_string<SourceCharT>(),
 5317|      6|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 130]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 130]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    130|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    130|        }
 5331|       |
 5332|    130|        SCN_CLANG_POP
 5333|    130|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|     98|    {
 4820|     98|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|     98|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    124|{
 4752|    124|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    124|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    124|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 68, False: 56]
  ------------------
 4756|     68|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     68|                                     "Invalid encoding in scanned string");
 4758|     68|    }
 4759|     56|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     56|    static_cast<    \
  |  |  929|     56|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     56|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 56]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     56|    return SCN_MOVE(result);
  ------------------
  |  |  928|     56|    static_cast<    \
  |  |  929|     56|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     56|}
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     26|    {
 4947|     26|        return read_impl(
 4948|     26|            range,
 4949|     26|            [&](const auto& rng) {
 4950|     26|                return read_string_impl(rng, read_all(rng), value);
 4951|     26|            },
 4952|     26|            detail::priority_tag<1>{});
 4953|     26|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     26|    {
 4974|     26|        return read_cb(range);
 4975|     26|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     26|            [&](const auto& rng) {
 4950|     26|                return read_string_impl(rng, read_all(rng), value);
 4951|     26|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|      6|    {
 4891|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      6|    }                                                  \
  |  |  |  | 3667|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|      6|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  1.09k|    {
 5277|  1.09k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.09k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.09k|        return read_impl(range, specs, value);
 5279|  1.09k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  1.09k|    {
 5295|  1.09k|        SCN_CLANG_PUSH
 5296|  1.09k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.09k|        switch (m_type) {
 5299|    330|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 330, False: 768]
  ------------------
 5300|    330|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 36, False: 1.06k]
  ------------------
 5303|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     36|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 1.09k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 1.09k]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|    678|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 678, False: 420]
  ------------------
 5315|    678|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|    678|                    range, specs.charset_string<SourceCharT>(),
 5317|    678|                    specs.regexp_flags, value);
 5318|       |
 5319|     54|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 54, False: 1.04k]
  ------------------
 5320|     54|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     54|                    range,
 5322|     54|                    get_unescaped_regex_pattern(
 5323|     54|                        specs.charset_string<SourceCharT>()),
 5324|     54|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.09k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.09k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.09k|        }
 5331|       |
 5332|  1.09k|        SCN_CLANG_POP
 5333|  1.09k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    834|    {
 4820|    834|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    834|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    870|{
 4752|    870|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    870|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    870|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 288, False: 582]
  ------------------
 4756|    288|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    288|                                     "Invalid encoding in scanned string");
 4758|    288|    }
 4759|    582|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    582|    static_cast<    \
  |  |  929|    582|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    582|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    582|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 582]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    582|    return SCN_MOVE(result);
  ------------------
  |  |  928|    582|    static_cast<    \
  |  |  929|    582|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    582|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    584|{
 3012|    584|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    584|        dest.assign(source.view());
 3014|    584|    }
 3015|    584|    else {
 3016|    584|        return transcode_impl(source.view(), dest);
 3017|    584|    }
 3018|       |
 3019|    584|    return {};
 3020|    584|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     36|    {
 4841|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 36, False: 0]
  ------------------
 4842|     36|            return read_string_impl(
 4843|     36|                range,
 4844|     36|                read_until_code_unit(
 4845|     36|                    range,
 4846|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     36|                        SourceCharT ch) { return ch == until; }),
 4848|     36|                value);
 4849|     36|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     36|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    412|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    412|              cvref<T> obj = *get<T>(fn);
  745|    412|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    412|                  obj(static_cast<decltype(args)>(args)...);
  747|    412|              }
  748|    412|              else {
  749|    412|                  return obj(static_cast<decltype(args)>(args)...);
  750|    412|              }
  751|    412|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    412|    {
  684|    412|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    412|            return static_cast<T*>(s.m_cp);
  686|    412|        }
  687|    412|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    412|            return static_cast<T*>(s.m_p);
  689|    412|        }
  690|    412|        else {
  691|    412|            return reinterpret_cast<T*>(s.m_fp);
  692|    412|        }
  693|    412|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    412|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|      2|{
 4752|      2|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|      2|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|      2|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 2]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|      2|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|      2|    static_cast<    \
  |  |  929|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|      2|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|      2|    return SCN_MOVE(result);
  ------------------
  |  |  928|      2|    static_cast<    \
  |  |  929|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|      2|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|    732|    {
 4891|    732|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    732|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    732|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    732|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    732|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 730, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    730|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    730|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    730|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    730|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    730|    }                                                  \
  |  |  |  | 3667|    732|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      2|        return read_string_impl(range, it, value);
 4893|    732|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  1.80k|{
 5809|  1.80k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  1.80k|        return reader_impl_for_bool<CharT>{};
 5811|  1.80k|    }
 5812|  1.80k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  1.80k|        return reader_impl_for_char<CharT>{};
 5814|  1.80k|    }
 5815|  1.80k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  1.80k|        return reader_impl_for_wchar<CharT>{};
 5817|  1.80k|    }
 5818|  1.80k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  1.80k|        return reader_impl_for_code_point<CharT>{};
 5820|  1.80k|    }
 5821|  1.80k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  1.80k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  1.80k|        return reader_impl_for_string<CharT>{};
 5824|  1.80k|    }
 5825|  1.80k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  1.80k|                       std::is_same_v<T, std::wstring>) {
 5827|  1.80k|        return reader_impl_for_string<CharT>{};
 5828|  1.80k|    }
 5829|  1.80k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  1.80k|                       std::is_same_v<T, wregex_matches>) {
 5831|  1.80k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  1.80k|    }
 5833|  1.80k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  1.80k|        return reader_impl_for_voidptr<CharT>{};
 5835|  1.80k|    }
 5836|  1.80k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  1.80k|        return reader_impl_for_float<CharT>{};
 5838|  1.80k|    }
 5839|  1.80k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  1.80k|                       !std::is_same_v<T, wchar_t> &&
 5841|  1.80k|                       !std::is_same_v<T, char32_t> &&
 5842|  1.80k|                       !std::is_same_v<T, bool>) {
 5843|  1.80k|        return reader_impl_for_int<CharT>{};
 5844|  1.80k|    }
 5845|  1.80k|    else {
 5846|  1.80k|        return reader_impl_for_monostate<CharT>{};
 5847|  1.80k|    }
 5848|  1.80k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    130|    {
 5277|    130|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    130|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    130|        return read_impl(range, specs, value);
 5279|    130|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    130|    {
 5295|    130|        SCN_CLANG_PUSH
 5296|    130|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    130|        switch (m_type) {
 5299|     98|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 98, False: 32]
  ------------------
 5300|     98|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 130]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|     26|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 26, False: 104]
  ------------------
 5307|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 130]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      6|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 6, False: 124]
  ------------------
 5315|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      6|                    range, specs.charset_string<SourceCharT>(),
 5317|      6|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 130]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 130]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    130|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    130|        }
 5331|       |
 5332|    130|        SCN_CLANG_POP
 5333|    130|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|     98|    {
 4827|     98|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|     98|                                     value);
 4829|     98|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    124|{
 4773|    124|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    124|    auto src = [&]() {
 4776|    124|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    124|            return make_contiguous_buffer(
 4778|    124|                ranges::subrange{range.begin().base(), result.base()});
 4779|    124|        }
 4780|    124|        else {
 4781|    124|            return make_contiguous_buffer(
 4782|    124|                ranges::subrange{range.begin(), result});
 4783|    124|        }
 4784|    124|    }();
 4785|    124|    using src_type = decltype(src);
 4786|       |
 4787|    124|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    124|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    124|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    124|                                     "Cannot read a string_view from "
 4796|    124|                                     "this source range (would require "
 4797|    124|                                     "transcoding)");
 4798|    124|    }
 4799|    124|    else {
 4800|    124|        const auto view = src.view();
 4801|    124|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    124|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 68, False: 56]
  ------------------
 4804|     68|            return unexpected_scan_error(
 4805|     68|                scan_error::invalid_scanned_value,
 4806|     68|                "Invalid encoding in scanned string_view");
 4807|     68|        }
 4808|       |
 4809|     56|        return SCN_MOVE(result);
  ------------------
  |  |  928|     56|    static_cast<    \
  |  |  929|     56|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    124|    }
 4811|    124|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    124|    auto src = [&]() {
 4776|    124|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    124|            return make_contiguous_buffer(
 4778|    124|                ranges::subrange{range.begin().base(), result.base()});
 4779|    124|        }
 4780|    124|        else {
 4781|    124|            return make_contiguous_buffer(
 4782|    124|                ranges::subrange{range.begin(), result});
 4783|    124|        }
 4784|    124|    }();
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     26|    {
 4959|     26|        return read_impl(
 4960|     26|            range,
 4961|     26|            [&](const auto& rng) {
 4962|     26|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     26|            },
 4964|     26|            detail::priority_tag<1>{});
 4965|     26|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     26|    {
 4974|     26|        return read_cb(range);
 4975|     26|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     26|            [&](const auto& rng) {
 4962|     26|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     26|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|      6|    {
 4902|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      6|    }                                                  \
  |  |  |  | 3667|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|      6|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  1.09k|    {
 5277|  1.09k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.09k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.09k|        return read_impl(range, specs, value);
 5279|  1.09k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  1.09k|    {
 5295|  1.09k|        SCN_CLANG_PUSH
 5296|  1.09k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.09k|        switch (m_type) {
 5299|    330|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 330, False: 768]
  ------------------
 5300|    330|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 36, False: 1.06k]
  ------------------
 5303|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     36|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 1.09k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 1.09k]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|    678|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 678, False: 420]
  ------------------
 5315|    678|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|    678|                    range, specs.charset_string<SourceCharT>(),
 5317|    678|                    specs.regexp_flags, value);
 5318|       |
 5319|     54|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 54, False: 1.04k]
  ------------------
 5320|     54|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     54|                    range,
 5322|     54|                    get_unescaped_regex_pattern(
 5323|     54|                        specs.charset_string<SourceCharT>()),
 5324|     54|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.09k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.09k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.09k|        }
 5331|       |
 5332|  1.09k|        SCN_CLANG_POP
 5333|  1.09k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    834|    {
 4827|    834|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    834|                                     value);
 4829|    834|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|    870|{
 4773|    870|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    870|    auto src = [&]() {
 4776|    870|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    870|            return make_contiguous_buffer(
 4778|    870|                ranges::subrange{range.begin().base(), result.base()});
 4779|    870|        }
 4780|    870|        else {
 4781|    870|            return make_contiguous_buffer(
 4782|    870|                ranges::subrange{range.begin(), result});
 4783|    870|        }
 4784|    870|    }();
 4785|    870|    using src_type = decltype(src);
 4786|       |
 4787|    870|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    870|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    870|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    870|                                     "Cannot read a string_view from "
 4796|    870|                                     "this source range (would require "
 4797|    870|                                     "transcoding)");
 4798|    870|    }
 4799|    870|    else {
 4800|    870|        const auto view = src.view();
 4801|    870|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    870|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 288, False: 582]
  ------------------
 4804|    288|            return unexpected_scan_error(
 4805|    288|                scan_error::invalid_scanned_value,
 4806|    288|                "Invalid encoding in scanned string_view");
 4807|    288|        }
 4808|       |
 4809|    582|        return SCN_MOVE(result);
  ------------------
  |  |  928|    582|    static_cast<    \
  |  |  929|    582|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    870|    }
 4811|    870|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|    870|    auto src = [&]() {
 4776|    870|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    870|            return make_contiguous_buffer(
 4778|    870|                ranges::subrange{range.begin().base(), result.base()});
 4779|    870|        }
 4780|    870|        else {
 4781|    870|            return make_contiguous_buffer(
 4782|    870|                ranges::subrange{range.begin(), result});
 4783|    870|        }
 4784|    870|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     36|    {
 4863|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 36, False: 0]
  ------------------
 4864|     36|            return read_string_view_impl(
 4865|     36|                range,
 4866|     36|                read_until_code_unit(
 4867|     36|                    range,
 4868|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     36|                        SourceCharT ch) { return ch == until; }),
 4870|     36|                value);
 4871|     36|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     36|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_:
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES14_w:
  743|    412|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    412|              cvref<T> obj = *get<T>(fn);
  745|    412|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    412|                  obj(static_cast<decltype(args)>(args)...);
  747|    412|              }
  748|    412|              else {
  749|    412|                  return obj(static_cast<decltype(args)>(args)...);
  750|    412|              }
  751|    412|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    412|    {
  684|    412|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    412|            return static_cast<T*>(s.m_cp);
  686|    412|        }
  687|    412|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    412|            return static_cast<T*>(s.m_p);
  689|    412|        }
  690|    412|        else {
  691|    412|            return reinterpret_cast<T*>(s.m_fp);
  692|    412|        }
  693|    412|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4869|    412|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|      2|{
 4773|      2|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|      2|    auto src = [&]() {
 4776|      2|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|      2|            return make_contiguous_buffer(
 4778|      2|                ranges::subrange{range.begin().base(), result.base()});
 4779|      2|        }
 4780|      2|        else {
 4781|      2|            return make_contiguous_buffer(
 4782|      2|                ranges::subrange{range.begin(), result});
 4783|      2|        }
 4784|      2|    }();
 4785|      2|    using src_type = decltype(src);
 4786|       |
 4787|      2|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|      2|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|      2|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|      2|                                     "Cannot read a string_view from "
 4796|      2|                                     "this source range (would require "
 4797|      2|                                     "transcoding)");
 4798|      2|    }
 4799|      2|    else {
 4800|      2|        const auto view = src.view();
 4801|      2|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|      2|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 2]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|      2|        return SCN_MOVE(result);
  ------------------
  |  |  928|      2|    static_cast<    \
  |  |  929|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|      2|    }
 4811|      2|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|      2|    auto src = [&]() {
 4776|      2|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|      2|            return make_contiguous_buffer(
 4778|      2|                ranges::subrange{range.begin().base(), result.base()});
 4779|      2|        }
 4780|      2|        else {
 4781|      2|            return make_contiguous_buffer(
 4782|      2|                ranges::subrange{range.begin(), result});
 4783|      2|        }
 4784|      2|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|    732|    {
 4902|    732|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    732|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    732|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    732|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    732|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 730, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    730|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    730|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    730|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    730|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    730|    }                                                  \
  |  |  |  | 3667|    732|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      2|        return read_string_view_impl(range, it, value);
 4904|    732|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|    872|    {
 4100|    872|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 872]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    872|        return std::copysign(value, T{1.0});
 4104|    872|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|    848|    {
 4100|    848|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 848]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    848|        return std::copysign(value, T{1.0});
 4104|    848|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  5.86k|{
 5795|  5.86k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.86k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  5.86k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 652, False: 5.21k]
  ------------------
 5800|    652|        return range.begin();
 5801|    652|    }
 5802|       |
 5803|  5.21k|    return skip_classic_whitespace(range);
 5804|  5.86k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    652|    {
 3528|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    652|        return read_default_with_base(range, value, 10);
 3530|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    652|    {
 3528|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    652|        return read_default_with_base(range, value, 10);
 3530|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5747|  1.11k|    {
 5748|  1.11k|        return true;
 5749|  1.11k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    860|    {
 5765|    860|        detail::format_specs specs{};
 5766|    860|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    860|        std::uintptr_t intvalue{};
 5769|    860|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    860|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    860|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    860|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    860|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 860, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    860|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    860|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    860|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    860|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    860|    }                                                  \
  |  |  |  | 3667|    860|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    860|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  1.35k|    {
 3035|  1.35k|        return true;
 3036|  1.35k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    652|    {
 5504|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    652|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    652|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5348|  1.15k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|    986|    {
 5355|    986|        scan_error err{scan_error::invalid_scanned_value,
 5356|    986|                       "Failed to read boolean"};
 5357|       |
 5358|    986|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 874, False: 112]
  ------------------
 5359|    874|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 874]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    874|            else {
 5363|    874|                err = r.error();
 5364|    874|            }
 5365|    874|        }
 5366|       |
 5367|    986|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 968, False: 18]
  ------------------
 5368|    968|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 968]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    968|            else {
 5372|    968|                err = r.error();
 5373|    968|            }
 5374|    968|        }
 5375|       |
 5376|    986|        return unexpected(err);
 5377|    986|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    892|    {
 5384|    892|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 892]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    892|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 892]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    892|        return unexpected_scan_error(
 5394|    892|            scan_error::invalid_scanned_value,
 5395|    892|            "Failed to read numeric boolean value: No match");
 5396|    892|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|    968|    {
 5402|    968|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 968]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    968|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 968]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    968|        return unexpected_scan_error(
 5412|    968|            scan_error::invalid_scanned_value,
 5413|    968|            "Failed to read textual boolean value: No match");
 5414|    968|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  1.93k|{
 2194|  1.93k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 102, False: 1.83k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    102|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    102|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    102|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    102|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    102|    }                                                  \
  |  |  |  | 3667|  1.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.83k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.83k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.83k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.83k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.83k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.83k, False: 0]
  |  |  ------------------
  ------------------
 2201|  1.83k|            return unexpected(parse_error::error);
 2202|  1.83k|        }
 2203|      0|        return it;
 2204|  1.83k|    }
 2205|  1.83k|    else {
 2206|  1.83k|        auto range_it = range.begin();
 2207|  1.83k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  1.83k|            if (SCN_UNLIKELY(*range_it !=
 2209|  1.83k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.83k|                return unexpected(parse_error::error);
 2211|  1.83k|            }
 2212|  1.83k|        }
 2213|  1.83k|        return it;
 2214|  1.83k|    }
 2215|  1.83k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|    652|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.15k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    652|    {
 4152|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    652|        float_reader<CharT> rd{};
 4155|    652|        return read_impl<Range>(
 4156|    652|            range, rd,
 4157|    652|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    652|                return r.read_source(SCN_FWD(args)...);
 4159|    652|            },
 4160|    652|            value);
 4161|    652|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    652|    {
  754|    652|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    652|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    652|              cvref<T> obj = *get<T>(fn);
  745|    652|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    652|                  obj(static_cast<decltype(args)>(args)...);
  747|    652|              }
  748|    652|              else {
  749|    652|                  return obj(static_cast<decltype(args)>(args)...);
  750|    652|              }
  751|    652|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    652|    {
  684|    652|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    652|            return static_cast<T*>(s.m_cp);
  686|    652|        }
  687|    652|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    652|            return static_cast<T*>(s.m_p);
  689|    652|        }
  690|    652|        else {
  691|    652|            return reinterpret_cast<T*>(s.m_fp);
  692|    652|        }
  693|    652|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    652|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    652|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    652|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|    652|        {
  662|    652|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    652|    {
 5266|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    652|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    652|    {
 5266|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    652|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    652|    {
 5266|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    652|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    652|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  77.8k|    {
 2879|  77.8k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   308k|    {
 2883|   308k|        return m_current;
 2884|   308k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   335k|    {
 2888|   335k|        return m_range.end();
 2889|   335k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   103k|{
 1221|       |    // TODO: optimize
 1222|   103k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   103k|    auto res = get_next_code_point(str);
 1224|   103k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   103k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   107k|    {
 2903|   107k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   107k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   107k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 107k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   107k|        }
 2909|   107k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   107k|    static_cast<    \
  |  |  929|   107k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   107k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   123k|    {
 2893|   123k|        return ranges::subrange{begin(), end()};
 2894|   123k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  19.0k|    {
 6037|  19.0k|        const bool need_skipped_width =
 6038|  19.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 1.60k, False: 17.3k]
  |  Branch (6038:33): [True: 3.67k, False: 13.7k]
  ------------------
 6039|  19.0k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  19.0k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 554, False: 18.4k]
  ------------------
 6043|  19.0k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 1.90k, False: 16.5k]
  ------------------
 6044|  2.45k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  2.45k|                             need_skipped_width);
 6046|  2.45k|        }
 6047|  16.5k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 16.0k, False: 484]
  |  Branch (6047:56): [True: 3.46k, False: 12.6k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  3.46k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 1.86k, False: 1.59k]
  ------------------
 6051|  1.86k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  1.86k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|  1.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 74, False: 1.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     74|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     74|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     74|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     74|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     74|    }                                                  \
  |  |  |  | 3667|  1.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  1.79k|                                  .transform_error(make_eof_scan_error));
 6054|  1.79k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  1.86k|            }
 6056|  3.18k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.59k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.18k|                            make_eof_scan_error));
 6058|       |
 6059|  3.18k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.00k, False: 590]
  ------------------
 6060|  1.00k|                return result_type{
 6061|  1.00k|                    it,
 6062|  1.00k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.00k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.00k|                                             .view())};
 6065|  1.00k|            }
 6066|    590|            return result_type{it, 0};
 6067|  3.18k|        }
 6068|       |
 6069|  13.0k|        return result_type{rng.begin(), 0};
 6070|  16.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  4.39k|    {
 6079|  4.39k|        const bool need_skipped_width =
 6080|  4.39k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 350, False: 4.04k]
  |  Branch (6080:33): [True: 990, False: 3.05k]
  ------------------
 6081|  4.39k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  4.39k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 174, False: 4.21k]
  ------------------
 6084|  4.39k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 308, False: 3.91k]
  ------------------
 6085|    482|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|    482|                             specs.fill, need_skipped_width);
 6087|    482|        }
 6088|  3.91k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 3.73k, False: 180]
  ------------------
 6089|  3.91k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 3.42k, False: 306]
  ------------------
 6090|  3.91k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 192, False: 3.23k]
  |  Branch (6090:35): [True: 176, False: 16]
  ------------------
 6091|  3.42k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 400, False: 2.84k]
  ------------------
 6092|  3.24k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 326, False: 74]
  ------------------
 6093|    502|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 326, False: 176]
  ------------------
 6094|    326|                const auto initial_width =
 6095|    326|                    specs.precision - prefix_width - value_width;
 6096|    326|                auto max_width_view = take_width(rng, initial_width);
 6097|    326|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|    326|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    326|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    326|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 326]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    326|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    326|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|    326|                                  .transform_error(make_eof_scan_error));
 6099|    326|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|    326|            }
 6101|    352|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|    176|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    176|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    176|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 176]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    176|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    176|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    352|                            make_eof_scan_error));
 6103|       |
 6104|    352|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 176, False: 0]
  ------------------
 6105|    176|                return result_type{
 6106|    176|                    it,
 6107|    176|                    calculate_text_width(make_contiguous_buffer(
 6108|    176|                                             ranges::subrange{rng.begin(), it})
 6109|    176|                                             .view())};
 6110|    176|            }
 6111|      0|            return result_type{it, 0};
 6112|    352|        }
 6113|  3.40k|        return result_type{rng.begin(), 0};
 6114|  3.91k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6177|  5.40k|    {
 6178|  5.40k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.40k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.40k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.40k|            auto rd = make_reader<T, char_type>();
 6183|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.87k, False: 530]
  |  |  ------------------
  ------------------
 6184|  4.87k|                return unexpected(e);
 6185|  4.87k|            }
 6186|       |
 6187|    530|            return impl(rd, range, value);
 6188|  5.40k|        }
 6189|  5.40k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.40k|            auto rd = make_reader<T, char_type>();
 6191|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.40k|                return unexpected(e);
 6193|  5.40k|            }
 6194|       |
 6195|  5.40k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.40k|                specs.width != 0) {
 6197|  5.40k|                return impl(rd, range, value);
 6198|  5.40k|            }
 6199|       |
 6200|  5.40k|            auto crange = get_as_contiguous(range);
 6201|  5.40k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.40k|            return ranges::next(range.begin(),
 6203|  5.40k|                                ranges::distance(crange.begin(), it));
 6204|  5.40k|        }
 6205|  5.40k|        else {
 6206|  5.40k|            SCN_EXPECT(false);
 6207|  5.40k|            SCN_UNREACHABLE;
 6208|  5.40k|        }
 6209|  5.40k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    530|    {
 6120|    530|        const bool need_skipped_width =
 6121|    530|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 158, False: 372]
  |  Branch (6121:33): [True: 292, False: 80]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    530|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 516]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     14|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    516|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    516|        auto [it, prefix_width] = prefix_result;
 6126|    516|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    516|        std::ptrdiff_t value_width = 0;
 6130|    516|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 278, False: 238]
  ------------------
 6131|    278|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 6, False: 272]
  ------------------
 6132|      6|                return unexpected_scan_error(
 6133|      6|                    scan_error::invalid_scanned_value,
 6134|      6|                    "Too many spaces before value, precision exceeded before "
 6135|      6|                    "reading value");
 6136|      6|            }
 6137|       |
 6138|    272|            const auto initial_width = specs.precision - prefix_width;
 6139|    272|            auto max_width_view =
 6140|    272|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    272|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 272, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    272|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    272|    }                                                  \
  |  |  |  | 3667|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    238|        else {
 6146|    238|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 238, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    238|    }                                                  \
  |  | 3667|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6177|  5.40k|    {
 6178|  5.40k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.40k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.40k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.40k|            auto rd = make_reader<T, char_type>();
 6183|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.87k, False: 530]
  |  |  ------------------
  ------------------
 6184|  4.87k|                return unexpected(e);
 6185|  4.87k|            }
 6186|       |
 6187|    530|            return impl(rd, range, value);
 6188|  5.40k|        }
 6189|  5.40k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.40k|            auto rd = make_reader<T, char_type>();
 6191|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.40k|                return unexpected(e);
 6193|  5.40k|            }
 6194|       |
 6195|  5.40k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.40k|                specs.width != 0) {
 6197|  5.40k|                return impl(rd, range, value);
 6198|  5.40k|            }
 6199|       |
 6200|  5.40k|            auto crange = get_as_contiguous(range);
 6201|  5.40k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.40k|            return ranges::next(range.begin(),
 6203|  5.40k|                                ranges::distance(crange.begin(), it));
 6204|  5.40k|        }
 6205|  5.40k|        else {
 6206|  5.40k|            SCN_EXPECT(false);
 6207|  5.40k|            SCN_UNREACHABLE;
 6208|  5.40k|        }
 6209|  5.40k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    530|    {
 6120|    530|        const bool need_skipped_width =
 6121|    530|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 158, False: 372]
  |  Branch (6121:33): [True: 292, False: 80]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    530|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 516]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     14|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    516|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    516|        auto [it, prefix_width] = prefix_result;
 6126|    516|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    516|        std::ptrdiff_t value_width = 0;
 6130|    516|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 278, False: 238]
  ------------------
 6131|    278|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 6, False: 272]
  ------------------
 6132|      6|                return unexpected_scan_error(
 6133|      6|                    scan_error::invalid_scanned_value,
 6134|      6|                    "Too many spaces before value, precision exceeded before "
 6135|      6|                    "reading value");
 6136|      6|            }
 6137|       |
 6138|    272|            const auto initial_width = specs.precision - prefix_width;
 6139|    272|            auto max_width_view =
 6140|    272|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    272|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 272, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    272|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    272|    }                                                  \
  |  |  |  | 3667|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    238|        else {
 6146|    238|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 238, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    238|    }                                                  \
  |  | 3667|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6177|  5.36k|    {
 6178|  5.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.36k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.36k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.36k|            auto rd = make_reader<T, char_type>();
 6183|  5.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.90k, False: 458]
  |  |  ------------------
  ------------------
 6184|  4.90k|                return unexpected(e);
 6185|  4.90k|            }
 6186|       |
 6187|    458|            return impl(rd, range, value);
 6188|  5.36k|        }
 6189|  5.36k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.36k|            auto rd = make_reader<T, char_type>();
 6191|  5.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.36k|                return unexpected(e);
 6193|  5.36k|            }
 6194|       |
 6195|  5.36k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.36k|                specs.width != 0) {
 6197|  5.36k|                return impl(rd, range, value);
 6198|  5.36k|            }
 6199|       |
 6200|  5.36k|            auto crange = get_as_contiguous(range);
 6201|  5.36k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.36k|            return ranges::next(range.begin(),
 6203|  5.36k|                                ranges::distance(crange.begin(), it));
 6204|  5.36k|        }
 6205|  5.36k|        else {
 6206|  5.36k|            SCN_EXPECT(false);
 6207|  5.36k|            SCN_UNREACHABLE;
 6208|  5.36k|        }
 6209|  5.36k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5752|  5.36k|    {
 5753|  5.36k|        reader_error_handler eh{};
 5754|  5.36k|        detail::check_pointer_type_specs(specs, eh);
 5755|  5.36k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.90k, False: 458]
  |  |  ------------------
  ------------------
 5756|  4.90k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  4.90k|        }
 5758|    458|        return {};
 5759|  5.36k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6119|    458|    {
 6120|    458|        const bool need_skipped_width =
 6121|    458|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 154, False: 304]
  |  Branch (6121:33): [True: 250, False: 54]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    458|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    458|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    458|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    458|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    458|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 454]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|    458|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    454|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    454|        auto [it, prefix_width] = prefix_result;
 6126|    454|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    454|        std::ptrdiff_t value_width = 0;
 6130|    454|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 246, False: 208]
  ------------------
 6131|    246|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 2, False: 244]
  ------------------
 6132|      2|                return unexpected_scan_error(
 6133|      2|                    scan_error::invalid_scanned_value,
 6134|      2|                    "Too many spaces before value, precision exceeded before "
 6135|      2|                    "reading value");
 6136|      2|            }
 6137|       |
 6138|    244|            const auto initial_width = specs.precision - prefix_width;
 6139|    244|            auto max_width_view =
 6140|    244|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    244|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 244, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    244|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    244|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    244|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    244|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    244|    }                                                  \
  |  |  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    208|        else {
 6146|    208|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    208|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    208|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 208, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    208|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    208|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    208|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    208|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    208|    }                                                  \
  |  | 3667|    208|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    208|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    244|    {
 5782|    244|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    244|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    244|        return read_default(range, value, loc);
 5784|    244|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    244|    {
 5765|    244|        detail::format_specs specs{};
 5766|    244|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    244|        std::uintptr_t intvalue{};
 5769|    244|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 244, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    244|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    244|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    244|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    244|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    244|    }                                                  \
  |  |  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    244|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    208|    {
 5782|    208|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    208|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    208|        return read_default(range, value, loc);
 5784|    208|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6177|  5.40k|    {
 6178|  5.40k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.40k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.40k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.40k|            auto rd = make_reader<T, char_type>();
 6183|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.69k, False: 706]
  |  |  ------------------
  ------------------
 6184|  4.69k|                return unexpected(e);
 6185|  4.69k|            }
 6186|       |
 6187|    706|            return impl(rd, range, value);
 6188|  5.40k|        }
 6189|  5.40k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.40k|            auto rd = make_reader<T, char_type>();
 6191|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.40k|                return unexpected(e);
 6193|  5.40k|            }
 6194|       |
 6195|  5.40k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.40k|                specs.width != 0) {
 6197|  5.40k|                return impl(rd, range, value);
 6198|  5.40k|            }
 6199|       |
 6200|  5.40k|            auto crange = get_as_contiguous(range);
 6201|  5.40k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.40k|            return ranges::next(range.begin(),
 6203|  5.40k|                                ranges::distance(crange.begin(), it));
 6204|  5.40k|        }
 6205|  5.40k|        else {
 6206|  5.40k|            SCN_EXPECT(false);
 6207|  5.40k|            SCN_UNREACHABLE;
 6208|  5.40k|        }
 6209|  5.40k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  5.40k|    {
 3040|  5.40k|        reader_error_handler eh{};
 3041|  5.40k|        get_derived().check_specs_impl(specs, eh);
 3042|  5.40k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.69k, False: 706]
  |  |  ------------------
  ------------------
 3043|  4.69k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.69k|        }
 3045|    706|        return {};
 3046|  5.40k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  5.40k|    {
 3051|  5.40k|        return static_cast<Derived&>(*this);
 3052|  5.40k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  5.40k|    {
 5497|  5.40k|        detail::check_bool_type_specs(specs, eh);
 5498|  5.40k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    706|    {
 6120|    706|        const bool need_skipped_width =
 6121|    706|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 166, False: 540]
  |  Branch (6121:33): [True: 352, False: 188]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    706|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    706|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    706|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    706|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 690]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     16|    }                                                  \
  |  |  |  | 3667|    706|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    690|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    690|        auto [it, prefix_width] = prefix_result;
 6126|    690|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    690|        std::ptrdiff_t value_width = 0;
 6130|    690|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 336, False: 354]
  ------------------
 6131|    336|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 6, False: 330]
  ------------------
 6132|      6|                return unexpected_scan_error(
 6133|      6|                    scan_error::invalid_scanned_value,
 6134|      6|                    "Too many spaces before value, precision exceeded before "
 6135|      6|                    "reading value");
 6136|      6|            }
 6137|       |
 6138|    330|            const auto initial_width = specs.precision - prefix_width;
 6139|    330|            auto max_width_view =
 6140|    330|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    330|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    330|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 330, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    330|    }                                                  \
  |  |  |  | 3667|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    354|        else {
 6146|    354|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 354, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    354|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    354|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    354|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    354|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    354|    }                                                  \
  |  | 3667|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    330|    {
 5516|    330|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    330|#if !SCN_DISABLE_LOCALE
 5519|    330|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 14, False: 316]
  ------------------
 5520|     14|            return rd.read_localized(range, loc, value);
 5521|     14|        }
 5522|    316|#endif
 5523|       |
 5524|    316|        return rd.read_classic(range, value);
 5525|    330|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5528|    684|    {
 5529|    684|        SCN_GCC_COMPAT_PUSH
 5530|    684|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    684|        switch (specs.type) {
 5533|    170|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 170, False: 514]
  ------------------
 5534|    170|                return bool_reader_base::allow_text;
 5535|       |
 5536|     10|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 10, False: 674]
  ------------------
 5537|     22|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 12, False: 672]
  ------------------
 5538|     26|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 4, False: 680]
  ------------------
 5539|     40|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 14, False: 670]
  ------------------
 5540|     50|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 10, False: 674]
  ------------------
 5541|     54|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 4, False: 680]
  ------------------
 5542|     54|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    460|            default:
  ------------------
  |  Branch (5544:13): [True: 460, False: 224]
  ------------------
 5545|    460|                return bool_reader_base::allow_text |
 5546|    460|                       bool_reader_base::allow_numeric;
 5547|    684|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    684|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     14|    {
 5428|     14|        scan_error err{scan_error::invalid_scanned_value,
 5429|     14|                       "Failed to read boolean"};
 5430|       |
 5431|     14|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 10, False: 4]
  ------------------
 5432|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 10]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     10|            else {
 5436|     10|                err = r.error();
 5437|     10|            }
 5438|     10|        }
 5439|       |
 5440|     14|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 12, False: 2]
  ------------------
 5441|     12|            auto stdloc = loc.get<std::locale>();
 5442|     12|            const auto& numpunct =
 5443|     12|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     12|            const auto truename = numpunct.truename();
 5445|     12|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     12|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 12]
  ------------------
 5448|     12|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     12|            else {
 5452|     12|                err = r.error();
 5453|     12|            }
 5454|     12|        }
 5455|       |
 5456|     14|        return unexpected(err);
 5457|     14|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    274|    {
 5384|    274|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 274]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    274|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 274]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    274|        return unexpected_scan_error(
 5394|    274|            scan_error::invalid_scanned_value,
 5395|    274|            "Failed to read numeric boolean value: No match");
 5396|    274|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    548|{
 2146|    548|    auto it = read_code_unit(range);
 2147|    548|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    548|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 548]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    548|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    548|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 548, False: 0]
  |  |  ------------------
  ------------------
 2152|    548|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    548|        return unexpected(parse_error::error);
 2154|    548|    }
 2155|       |
 2156|      0|    return *it;
 2157|    548|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5467|     12|    {
 5468|     12|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     12|        const auto shorter = std::pair{
 5470|     12|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 12, False: 0]
  ------------------
 5471|     12|        const auto longer = std::pair{
 5472|     12|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 12]
  ------------------
 5473|       |
 5474|     12|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 12]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     12|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 12]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     12|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     12|                                     "read_textual: No match");
 5485|     12|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     24|{
 2179|     24|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     14|    }                                                  \
  |  |  |  | 3667|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     10|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2185|     10|        return unexpected(parse_error::error);
 2186|     10|    }
 2187|      0|    return it;
 2188|     10|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    612|{
 1857|    612|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    612|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    612|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    612|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    612|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    612|        if (sz < count) {
 1862|    612|            return unexpected(eof_error::eof);
 1863|    612|        }
 1864|       |
 1865|    612|        return ranges::next(range.begin(), count);
 1866|    612|    }
 1867|    612|    else {
 1868|    612|        auto it = range.begin();
 1869|    612|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 612]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  3.11k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.60k, False: 516]
  ------------------
 1874|  2.60k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 96, False: 2.50k]
  ------------------
 1875|     96|                return unexpected(eof_error::eof);
 1876|     96|            }
 1877|  2.60k|        }
 1878|       |
 1879|    516|        return it;
 1880|    612|    }
 1881|    612|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|    612|{
 1095|    612|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    612|        return r.size();
 1097|    612|    }
 1098|    612|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    612|                           ranges::const_iterator_t<Range>,
 1100|    612|                           typename detail::basic_scan_buffer<
 1101|    612|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    612|        if constexpr (ranges::common_range<Range>) {
 1103|    612|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    612|        }
 1105|    612|        else {
 1106|    612|            if (r.begin().stores_parent()) {
 1107|    612|                return static_cast<size_t>(
 1108|    612|                    r.begin().parent()->chars_available() -
 1109|    612|                    r.begin().position());
 1110|    612|            }
 1111|    612|            return r.begin().contiguous_segment().size();
 1112|    612|        }
 1113|    612|    }
 1114|    612|    else {
 1115|    612|        return 0;
 1116|    612|    }
 1117|    612|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    316|    {
 5355|    316|        scan_error err{scan_error::invalid_scanned_value,
 5356|    316|                       "Failed to read boolean"};
 5357|       |
 5358|    316|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 264, False: 52]
  ------------------
 5359|    264|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 264]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    264|            else {
 5363|    264|                err = r.error();
 5364|    264|            }
 5365|    264|        }
 5366|       |
 5367|    316|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 294, False: 22]
  ------------------
 5368|    294|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 294]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    294|            else {
 5372|    294|                err = r.error();
 5373|    294|            }
 5374|    294|        }
 5375|       |
 5376|    316|        return unexpected(err);
 5377|    316|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    294|    {
 5402|    294|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 294]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    294|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 294]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    294|        return unexpected_scan_error(
 5412|    294|            scan_error::invalid_scanned_value,
 5413|    294|            "Failed to read textual boolean value: No match");
 5414|    294|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    588|{
 2194|    588|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    588|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    588|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    588|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    588|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 82, False: 506]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     82|    }                                                  \
  |  |  |  | 3667|    588|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    506|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    506|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    506|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    506|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    506|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    506|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    506|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 506, False: 0]
  |  |  ------------------
  ------------------
 2201|    506|            return unexpected(parse_error::error);
 2202|    506|        }
 2203|      0|        return it;
 2204|    506|    }
 2205|    506|    else {
 2206|    506|        auto range_it = range.begin();
 2207|    506|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|    506|            if (SCN_UNLIKELY(*range_it !=
 2209|    506|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    506|                return unexpected(parse_error::error);
 2211|    506|            }
 2212|    506|        }
 2213|    506|        return it;
 2214|    506|    }
 2215|    506|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    354|    {
 5516|    354|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    354|#if !SCN_DISABLE_LOCALE
 5519|    354|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 20, False: 334]
  ------------------
 5520|     20|            return rd.read_localized(range, loc, value);
 5521|     20|        }
 5522|    334|#endif
 5523|       |
 5524|    334|        return rd.read_classic(range, value);
 5525|    354|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     20|    {
 5428|     20|        scan_error err{scan_error::invalid_scanned_value,
 5429|     20|                       "Failed to read boolean"};
 5430|       |
 5431|     20|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 18, False: 2]
  ------------------
 5432|     18|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 18]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     18|            else {
 5436|     18|                err = r.error();
 5437|     18|            }
 5438|     18|        }
 5439|       |
 5440|     20|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 8, False: 12]
  ------------------
 5441|      8|            auto stdloc = loc.get<std::locale>();
 5442|      8|            const auto& numpunct =
 5443|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|      8|            const auto truename = numpunct.truename();
 5445|      8|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|      8|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 8]
  ------------------
 5448|      8|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|      8|            else {
 5452|      8|                err = r.error();
 5453|      8|            }
 5454|      8|        }
 5455|       |
 5456|     20|        return unexpected(err);
 5457|     20|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5467|      8|    {
 5468|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|      8|        const auto shorter = std::pair{
 5470|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 8, False: 0]
  ------------------
 5471|      8|        const auto longer = std::pair{
 5472|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 8]
  ------------------
 5473|       |
 5474|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 8]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 8]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|      8|                                     "read_textual: No match");
 5485|      8|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     16|{
 2179|     16|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      2|    }                                                  \
  |  |  |  | 3667|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     14|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2185|     14|        return unexpected(parse_error::error);
 2186|     14|    }
 2187|      0|    return it;
 2188|     14|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6177|  5.36k|    {
 6178|  5.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.36k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.36k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.36k|            auto rd = make_reader<T, char_type>();
 6183|  5.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.85k, False: 506]
  |  |  ------------------
  ------------------
 6184|  4.85k|                return unexpected(e);
 6185|  4.85k|            }
 6186|       |
 6187|    506|            return impl(rd, range, value);
 6188|  5.36k|        }
 6189|  5.36k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.36k|            auto rd = make_reader<T, char_type>();
 6191|  5.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.36k|                return unexpected(e);
 6193|  5.36k|            }
 6194|       |
 6195|  5.36k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.36k|                specs.width != 0) {
 6197|  5.36k|                return impl(rd, range, value);
 6198|  5.36k|            }
 6199|       |
 6200|  5.36k|            auto crange = get_as_contiguous(range);
 6201|  5.36k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.36k|            return ranges::next(range.begin(),
 6203|  5.36k|                                ranges::distance(crange.begin(), it));
 6204|  5.36k|        }
 6205|  5.36k|        else {
 6206|  5.36k|            SCN_EXPECT(false);
 6207|  5.36k|            SCN_UNREACHABLE;
 6208|  5.36k|        }
 6209|  5.36k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    506|    {
 6120|    506|        const bool need_skipped_width =
 6121|    506|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 156, False: 350]
  |  Branch (6121:33): [True: 284, False: 66]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    506|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    506|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    506|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    506|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    506|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 506]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    506|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    506|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    506|        auto [it, prefix_width] = prefix_result;
 6126|    506|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    506|        std::ptrdiff_t value_width = 0;
 6130|    506|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 284, False: 222]
  ------------------
 6131|    284|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 6, False: 278]
  ------------------
 6132|      6|                return unexpected_scan_error(
 6133|      6|                    scan_error::invalid_scanned_value,
 6134|      6|                    "Too many spaces before value, precision exceeded before "
 6135|      6|                    "reading value");
 6136|      6|            }
 6137|       |
 6138|    278|            const auto initial_width = specs.precision - prefix_width;
 6139|    278|            auto max_width_view =
 6140|    278|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    278|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 246]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     32|    }                                                  \
  |  |  |  | 3667|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|    246|            it = w_it.base();
 6143|    246|            value_width = initial_width - w_it.count();
 6144|    246|        }
 6145|    222|        else {
 6146|    222|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    222|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    222|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18, False: 204]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     18|    }                                                  \
  |  | 3667|    222|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    222|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    204|                                             specs, value, loc));
 6148|       |
 6149|    204|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 152, False: 52]
  ------------------
 6150|    152|                value_width = calculate_text_width(
 6151|    152|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    152|                        .view());
 6153|    152|            }
 6154|    204|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    450|        std::ptrdiff_t postfix_width = 0;
 6158|    450|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 450, False: 0]
  ------------------
 6159|    450|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    450|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    450|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    450|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 450]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    450|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    450|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    450|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    450|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    450|                                 value_width));
 6163|    450|            std::tie(it, postfix_width) = postfix_result;
 6164|    450|        }
 6165|       |
 6166|    450|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    450|                                                 value_width, postfix_width);
 6168|    450|            !e) {
  ------------------
  |  Branch (6168:13): [True: 140, False: 310]
  ------------------
 6169|    140|            return unexpected(e);
 6170|    140|        }
 6171|       |
 6172|    310|        return it;
 6173|    450|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6177|  5.40k|    {
 6178|  5.40k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.40k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.40k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.40k|            auto rd = make_reader<T, char_type>();
 6183|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.88k, False: 520]
  |  |  ------------------
  ------------------
 6184|  4.88k|                return unexpected(e);
 6185|  4.88k|            }
 6186|       |
 6187|    520|            return impl(rd, range, value);
 6188|  5.40k|        }
 6189|  5.40k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.40k|            auto rd = make_reader<T, char_type>();
 6191|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.40k|                return unexpected(e);
 6193|  5.40k|            }
 6194|       |
 6195|  5.40k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.40k|                specs.width != 0) {
 6197|  5.40k|                return impl(rd, range, value);
 6198|  5.40k|            }
 6199|       |
 6200|  5.40k|            auto crange = get_as_contiguous(range);
 6201|  5.40k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.40k|            return ranges::next(range.begin(),
 6203|  5.40k|                                ranges::distance(crange.begin(), it));
 6204|  5.40k|        }
 6205|  5.40k|        else {
 6206|  5.40k|            SCN_EXPECT(false);
 6207|  5.40k|            SCN_UNREACHABLE;
 6208|  5.40k|        }
 6209|  5.40k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    520|    {
 6120|    520|        const bool need_skipped_width =
 6121|    520|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 162, False: 358]
  |  Branch (6121:33): [True: 270, False: 88]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    520|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    520|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    520|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    520|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    520|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 512]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      8|    }                                                  \
  |  |  |  | 3667|    520|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    512|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    512|        auto [it, prefix_width] = prefix_result;
 6126|    512|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    512|        std::ptrdiff_t value_width = 0;
 6130|    512|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 262, False: 250]
  ------------------
 6131|    262|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 2, False: 260]
  ------------------
 6132|      2|                return unexpected_scan_error(
 6133|      2|                    scan_error::invalid_scanned_value,
 6134|      2|                    "Too many spaces before value, precision exceeded before "
 6135|      2|                    "reading value");
 6136|      2|            }
 6137|       |
 6138|    260|            const auto initial_width = specs.precision - prefix_width;
 6139|    260|            auto max_width_view =
 6140|    260|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    260|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    260|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 260, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    260|    }                                                  \
  |  |  |  | 3667|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    250|        else {
 6146|    250|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 250, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    250|    }                                                  \
  |  | 3667|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6177|  5.36k|    {
 6178|  5.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.36k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.36k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.36k|            auto rd = make_reader<T, char_type>();
 6183|  5.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 5.25k]
  |  |  ------------------
  ------------------
 6184|    112|                return unexpected(e);
 6185|    112|            }
 6186|       |
 6187|  5.25k|            return impl(rd, range, value);
 6188|  5.36k|        }
 6189|  5.36k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.36k|            auto rd = make_reader<T, char_type>();
 6191|  5.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.36k|                return unexpected(e);
 6193|  5.36k|            }
 6194|       |
 6195|  5.36k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.36k|                specs.width != 0) {
 6197|  5.36k|                return impl(rd, range, value);
 6198|  5.36k|            }
 6199|       |
 6200|  5.36k|            auto crange = get_as_contiguous(range);
 6201|  5.36k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.36k|            return ranges::next(range.begin(),
 6203|  5.36k|                                ranges::distance(crange.begin(), it));
 6204|  5.36k|        }
 6205|  5.36k|        else {
 6206|  5.36k|            SCN_EXPECT(false);
 6207|  5.36k|            SCN_UNREACHABLE;
 6208|  5.36k|        }
 6209|  5.36k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6119|  5.25k|    {
 6120|  5.25k|        const bool need_skipped_width =
 6121|  5.25k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 218, False: 5.03k]
  |  Branch (6121:33): [True: 646, False: 4.38k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  5.25k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  5.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 5.24k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      6|    }                                                  \
  |  |  |  | 3667|  5.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  5.24k|        auto [it, prefix_width] = prefix_result;
 6126|  5.24k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  5.24k|        std::ptrdiff_t value_width = 0;
 6130|  5.24k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 640, False: 4.60k]
  ------------------
 6131|    640|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 2, False: 638]
  ------------------
 6132|      2|                return unexpected_scan_error(
 6133|      2|                    scan_error::invalid_scanned_value,
 6134|      2|                    "Too many spaces before value, precision exceeded before "
 6135|      2|                    "reading value");
 6136|      2|            }
 6137|       |
 6138|    638|            const auto initial_width = specs.precision - prefix_width;
 6139|    638|            auto max_width_view =
 6140|    638|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    638|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    638|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    638|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    638|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    638|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 334, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    334|    }                                                  \
  |  |  |  | 3667|    638|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|    304|            it = w_it.base();
 6143|    304|            value_width = initial_width - w_it.count();
 6144|    304|        }
 6145|  4.60k|        else {
 6146|  4.60k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  4.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  4.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.25k, False: 1.35k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.25k|    }                                                  \
  |  | 3667|  4.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  1.35k|                                             specs, value, loc));
 6148|       |
 6149|  1.35k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 180, False: 1.17k]
  ------------------
 6150|    180|                value_width = calculate_text_width(
 6151|    180|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    180|                        .view());
 6153|    180|            }
 6154|  1.35k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  1.65k|        std::ptrdiff_t postfix_width = 0;
 6158|  1.65k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 1.31k, False: 344]
  ------------------
 6159|  1.31k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.31k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  1.31k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  1.31k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  1.31k|                                 value_width));
 6163|  1.31k|            std::tie(it, postfix_width) = postfix_result;
 6164|  1.31k|        }
 6165|       |
 6166|  1.65k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  1.65k|                                                 value_width, postfix_width);
 6168|  1.65k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 88, False: 1.57k]
  ------------------
 6169|     88|            return unexpected(e);
 6170|     88|        }
 6171|       |
 6172|  1.57k|        return it;
 6173|  1.65k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6177|  5.36k|    {
 6178|  5.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.36k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.36k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.36k|            auto rd = make_reader<T, char_type>();
 6183|  5.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 5.25k]
  |  |  ------------------
  ------------------
 6184|    112|                return unexpected(e);
 6185|    112|            }
 6186|       |
 6187|  5.25k|            return impl(rd, range, value);
 6188|  5.36k|        }
 6189|  5.36k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.36k|            auto rd = make_reader<T, char_type>();
 6191|  5.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.36k|                return unexpected(e);
 6193|  5.36k|            }
 6194|       |
 6195|  5.36k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.36k|                specs.width != 0) {
 6197|  5.36k|                return impl(rd, range, value);
 6198|  5.36k|            }
 6199|       |
 6200|  5.36k|            auto crange = get_as_contiguous(range);
 6201|  5.36k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.36k|            return ranges::next(range.begin(),
 6203|  5.36k|                                ranges::distance(crange.begin(), it));
 6204|  5.36k|        }
 6205|  5.36k|        else {
 6206|  5.36k|            SCN_EXPECT(false);
 6207|  5.36k|            SCN_UNREACHABLE;
 6208|  5.36k|        }
 6209|  5.36k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6119|  5.25k|    {
 6120|  5.25k|        const bool need_skipped_width =
 6121|  5.25k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 218, False: 5.03k]
  |  Branch (6121:33): [True: 646, False: 4.38k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  5.25k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  5.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 5.24k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      6|    }                                                  \
  |  |  |  | 3667|  5.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  5.24k|        auto [it, prefix_width] = prefix_result;
 6126|  5.24k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  5.24k|        std::ptrdiff_t value_width = 0;
 6130|  5.24k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 640, False: 4.60k]
  ------------------
 6131|    640|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 2, False: 638]
  ------------------
 6132|      2|                return unexpected_scan_error(
 6133|      2|                    scan_error::invalid_scanned_value,
 6134|      2|                    "Too many spaces before value, precision exceeded before "
 6135|      2|                    "reading value");
 6136|      2|            }
 6137|       |
 6138|    638|            const auto initial_width = specs.precision - prefix_width;
 6139|    638|            auto max_width_view =
 6140|    638|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    638|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    638|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    638|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    638|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    638|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 334, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    334|    }                                                  \
  |  |  |  | 3667|    638|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|    304|            it = w_it.base();
 6143|    304|            value_width = initial_width - w_it.count();
 6144|    304|        }
 6145|  4.60k|        else {
 6146|  4.60k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  4.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  4.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.25k, False: 1.35k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.25k|    }                                                  \
  |  | 3667|  4.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  1.35k|                                             specs, value, loc));
 6148|       |
 6149|  1.35k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 180, False: 1.17k]
  ------------------
 6150|    180|                value_width = calculate_text_width(
 6151|    180|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    180|                        .view());
 6153|    180|            }
 6154|  1.35k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  1.65k|        std::ptrdiff_t postfix_width = 0;
 6158|  1.65k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 1.31k, False: 344]
  ------------------
 6159|  1.31k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.31k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  1.31k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  1.31k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  1.31k|                                 value_width));
 6163|  1.31k|            std::tie(it, postfix_width) = postfix_result;
 6164|  1.31k|        }
 6165|       |
 6166|  1.65k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  1.65k|                                                 value_width, postfix_width);
 6168|  1.65k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 88, False: 1.57k]
  ------------------
 6169|     88|            return unexpected(e);
 6170|     88|        }
 6171|       |
 6172|  1.57k|        return it;
 6173|  1.65k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6177|  5.36k|    {
 6178|  5.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.36k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.36k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.36k|            auto rd = make_reader<T, char_type>();
 6183|  5.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 5.25k]
  |  |  ------------------
  ------------------
 6184|    112|                return unexpected(e);
 6185|    112|            }
 6186|       |
 6187|  5.25k|            return impl(rd, range, value);
 6188|  5.36k|        }
 6189|  5.36k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.36k|            auto rd = make_reader<T, char_type>();
 6191|  5.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.36k|                return unexpected(e);
 6193|  5.36k|            }
 6194|       |
 6195|  5.36k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.36k|                specs.width != 0) {
 6197|  5.36k|                return impl(rd, range, value);
 6198|  5.36k|            }
 6199|       |
 6200|  5.36k|            auto crange = get_as_contiguous(range);
 6201|  5.36k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.36k|            return ranges::next(range.begin(),
 6203|  5.36k|                                ranges::distance(crange.begin(), it));
 6204|  5.36k|        }
 6205|  5.36k|        else {
 6206|  5.36k|            SCN_EXPECT(false);
 6207|  5.36k|            SCN_UNREACHABLE;
 6208|  5.36k|        }
 6209|  5.36k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6119|  5.25k|    {
 6120|  5.25k|        const bool need_skipped_width =
 6121|  5.25k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 218, False: 5.03k]
  |  Branch (6121:33): [True: 646, False: 4.38k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  5.25k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  5.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 5.24k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      6|    }                                                  \
  |  |  |  | 3667|  5.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  5.24k|        auto [it, prefix_width] = prefix_result;
 6126|  5.24k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  5.24k|        std::ptrdiff_t value_width = 0;
 6130|  5.24k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 640, False: 4.60k]
  ------------------
 6131|    640|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 2, False: 638]
  ------------------
 6132|      2|                return unexpected_scan_error(
 6133|      2|                    scan_error::invalid_scanned_value,
 6134|      2|                    "Too many spaces before value, precision exceeded before "
 6135|      2|                    "reading value");
 6136|      2|            }
 6137|       |
 6138|    638|            const auto initial_width = specs.precision - prefix_width;
 6139|    638|            auto max_width_view =
 6140|    638|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    638|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    638|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    638|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    638|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    638|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 334, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    334|    }                                                  \
  |  |  |  | 3667|    638|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|    304|            it = w_it.base();
 6143|    304|            value_width = initial_width - w_it.count();
 6144|    304|        }
 6145|  4.60k|        else {
 6146|  4.60k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  4.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  4.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.25k, False: 1.35k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.25k|    }                                                  \
  |  | 3667|  4.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  1.35k|                                             specs, value, loc));
 6148|       |
 6149|  1.35k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 180, False: 1.17k]
  ------------------
 6150|    180|                value_width = calculate_text_width(
 6151|    180|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    180|                        .view());
 6153|    180|            }
 6154|  1.35k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  1.65k|        std::ptrdiff_t postfix_width = 0;
 6158|  1.65k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 1.31k, False: 344]
  ------------------
 6159|  1.31k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.31k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  1.31k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  1.31k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  1.31k|                                 value_width));
 6163|  1.31k|            std::tie(it, postfix_width) = postfix_result;
 6164|  1.31k|        }
 6165|       |
 6166|  1.65k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  1.65k|                                                 value_width, postfix_width);
 6168|  1.65k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 88, False: 1.57k]
  ------------------
 6169|     88|            return unexpected(e);
 6170|     88|        }
 6171|       |
 6172|  1.57k|        return it;
 6173|  1.65k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  4.53k|{
 5795|  4.53k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.53k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  4.53k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 504, False: 4.03k]
  ------------------
 5800|    504|        return range.begin();
 5801|    504|    }
 5802|       |
 5803|  4.03k|    return skip_classic_whitespace(range);
 5804|  4.53k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5870|    504|    {
 5871|    504|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    504|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    504|                          basic_contiguous_scan_context<char_type>>) {
 5875|    504|            auto rd = make_reader<T, char_type>();
 5876|    504|            return impl(rd, range, value);
 5877|    504|        }
 5878|    504|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    504|            auto rd = make_reader<T, char_type>();
 5880|    504|            if (!is_segment_contiguous(range)) {
 5881|    504|                return impl(rd, range, value);
 5882|    504|            }
 5883|    504|            auto crange = get_as_contiguous(range);
 5884|    504|            SCN_TRY(it, impl(rd, crange, value));
 5885|    504|            return ranges::next(range.begin(),
 5886|    504|                                ranges::distance(crange.begin(), it));
 5887|    504|        }
 5888|    504|        else {
 5889|    504|            SCN_EXPECT(false);
 5890|    504|            SCN_UNREACHABLE;
 5891|    504|        }
 5892|    504|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    504|    {
 5863|    504|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    504|                        .transform_error(make_eof_scan_error));
 5865|    504|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    504|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    504|    {
 3528|    504|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    504|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    504|        return read_default_with_base(range, value, 10);
 3530|    504|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    504|    {
 3492|    504|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    504|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    504|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    504|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    504|                return unexpected_scan_error(
 3498|    504|                    scan_error::invalid_scanned_value,
 3499|    504|                    "Unexpected '-' sign when parsing an "
 3500|    504|                    "unsigned value");
 3501|    504|            }
 3502|    504|        }
 3503|       |
 3504|    504|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 504]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.00k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.00k|                parse_integer_digits_without_thsep(
 3511|  1.00k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.00k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.00k|        auto buf = make_contiguous_buffer(
 3515|  1.00k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.00k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 504, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    504|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    504|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    504|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    504|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    504|    }                                                  \
  |  |  |  | 3667|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.00k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5870|    504|    {
 5871|    504|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    504|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    504|                          basic_contiguous_scan_context<char_type>>) {
 5875|    504|            auto rd = make_reader<T, char_type>();
 5876|    504|            return impl(rd, range, value);
 5877|    504|        }
 5878|    504|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    504|            auto rd = make_reader<T, char_type>();
 5880|    504|            if (!is_segment_contiguous(range)) {
 5881|    504|                return impl(rd, range, value);
 5882|    504|            }
 5883|    504|            auto crange = get_as_contiguous(range);
 5884|    504|            SCN_TRY(it, impl(rd, crange, value));
 5885|    504|            return ranges::next(range.begin(),
 5886|    504|                                ranges::distance(crange.begin(), it));
 5887|    504|        }
 5888|    504|        else {
 5889|    504|            SCN_EXPECT(false);
 5890|    504|            SCN_UNREACHABLE;
 5891|    504|        }
 5892|    504|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    504|    {
 5863|    504|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    504|                        .transform_error(make_eof_scan_error));
 5865|    504|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    504|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    504|    {
 3528|    504|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    504|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    504|        return read_default_with_base(range, value, 10);
 3530|    504|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    504|    {
 3492|    504|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    504|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    504|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    504|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 504]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    504|        }
 3503|       |
 3504|    504|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 504]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.00k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.00k|                parse_integer_digits_without_thsep(
 3511|  1.00k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.00k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.00k|        auto buf = make_contiguous_buffer(
 3515|  1.00k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.00k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 504, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    504|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    504|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    504|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    504|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    504|    }                                                  \
  |  |  |  | 3667|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.00k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5870|    504|    {
 5871|    504|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    504|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    504|                          basic_contiguous_scan_context<char_type>>) {
 5875|    504|            auto rd = make_reader<T, char_type>();
 5876|    504|            return impl(rd, range, value);
 5877|    504|        }
 5878|    504|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    504|            auto rd = make_reader<T, char_type>();
 5880|    504|            if (!is_segment_contiguous(range)) {
 5881|    504|                return impl(rd, range, value);
 5882|    504|            }
 5883|    504|            auto crange = get_as_contiguous(range);
 5884|    504|            SCN_TRY(it, impl(rd, crange, value));
 5885|    504|            return ranges::next(range.begin(),
 5886|    504|                                ranges::distance(crange.begin(), it));
 5887|    504|        }
 5888|    504|        else {
 5889|    504|            SCN_EXPECT(false);
 5890|    504|            SCN_UNREACHABLE;
 5891|    504|        }
 5892|    504|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    504|    {
 5863|    504|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    504|                        .transform_error(make_eof_scan_error));
 5865|    504|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    504|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5747|    914|    {
 5748|    914|        return true;
 5749|    914|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    820|    {
 5765|    820|        detail::format_specs specs{};
 5766|    820|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    820|        std::uintptr_t intvalue{};
 5769|    820|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    820|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    820|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    820|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    820|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 820, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    820|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    820|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    820|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    820|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    820|    }                                                  \
  |  |  |  | 3667|    820|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    820|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5870|    504|    {
 5871|    504|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    504|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    504|                          basic_contiguous_scan_context<char_type>>) {
 5875|    504|            auto rd = make_reader<T, char_type>();
 5876|    504|            return impl(rd, range, value);
 5877|    504|        }
 5878|    504|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    504|            auto rd = make_reader<T, char_type>();
 5880|    504|            if (!is_segment_contiguous(range)) {
 5881|    504|                return impl(rd, range, value);
 5882|    504|            }
 5883|    504|            auto crange = get_as_contiguous(range);
 5884|    504|            SCN_TRY(it, impl(rd, crange, value));
 5885|    504|            return ranges::next(range.begin(),
 5886|    504|                                ranges::distance(crange.begin(), it));
 5887|    504|        }
 5888|    504|        else {
 5889|    504|            SCN_EXPECT(false);
 5890|    504|            SCN_UNREACHABLE;
 5891|    504|        }
 5892|    504|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    504|    {
 5863|    504|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    504|                        .transform_error(make_eof_scan_error));
 5865|    504|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    504|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|  1.01k|    {
 3035|  1.01k|        return true;
 3036|  1.01k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    504|    {
 5504|    504|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    504|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    504|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    504|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|    884|    {
 5355|    884|        scan_error err{scan_error::invalid_scanned_value,
 5356|    884|                       "Failed to read boolean"};
 5357|       |
 5358|    884|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 832, False: 52]
  ------------------
 5359|    832|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 832]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    832|            else {
 5363|    832|                err = r.error();
 5364|    832|            }
 5365|    832|        }
 5366|       |
 5367|    884|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 870, False: 14]
  ------------------
 5368|    870|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 870]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    870|            else {
 5372|    870|                err = r.error();
 5373|    870|            }
 5374|    870|        }
 5375|       |
 5376|    884|        return unexpected(err);
 5377|    884|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    844|    {
 5384|    844|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 844]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    844|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 844]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    844|        return unexpected_scan_error(
 5394|    844|            scan_error::invalid_scanned_value,
 5395|    844|            "Failed to read numeric boolean value: No match");
 5396|    844|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|    870|    {
 5402|    870|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 870]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    870|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 870]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    870|        return unexpected_scan_error(
 5412|    870|            scan_error::invalid_scanned_value,
 5413|    870|            "Failed to read textual boolean value: No match");
 5414|    870|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  1.74k|{
 2194|  1.74k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 126, False: 1.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    126|    }                                                  \
  |  |  |  | 3667|  1.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.61k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.61k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.61k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.61k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.61k|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|  1.61k|            return unexpected(parse_error::error);
 2202|  1.61k|        }
 2203|  1.61k|        return it;
 2204|  1.61k|    }
 2205|  1.61k|    else {
 2206|  1.61k|        auto range_it = range.begin();
 2207|  1.61k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 1.61k, False: 0]
  ------------------
 2208|  1.61k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.61k, False: 0]
  |  |  ------------------
  ------------------
 2209|  1.61k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.61k|                return unexpected(parse_error::error);
 2211|  1.61k|            }
 2212|  1.61k|        }
 2213|      0|        return it;
 2214|  1.61k|    }
 2215|  1.61k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5870|    504|    {
 5871|    504|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    504|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    504|                          basic_contiguous_scan_context<char_type>>) {
 5875|    504|            auto rd = make_reader<T, char_type>();
 5876|    504|            return impl(rd, range, value);
 5877|    504|        }
 5878|    504|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    504|            auto rd = make_reader<T, char_type>();
 5880|    504|            if (!is_segment_contiguous(range)) {
 5881|    504|                return impl(rd, range, value);
 5882|    504|            }
 5883|    504|            auto crange = get_as_contiguous(range);
 5884|    504|            SCN_TRY(it, impl(rd, crange, value));
 5885|    504|            return ranges::next(range.begin(),
 5886|    504|                                ranges::distance(crange.begin(), it));
 5887|    504|        }
 5888|    504|        else {
 5889|    504|            SCN_EXPECT(false);
 5890|    504|            SCN_UNREACHABLE;
 5891|    504|        }
 5892|    504|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    504|    {
 5863|    504|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    504|                        .transform_error(make_eof_scan_error));
 5865|    504|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    504|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|    504|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|    504|    {
 5871|    504|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    504|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    504|                          basic_contiguous_scan_context<char_type>>) {
 5875|    504|            auto rd = make_reader<T, char_type>();
 5876|    504|            return impl(rd, range, value);
 5877|    504|        }
 5878|    504|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    504|            auto rd = make_reader<T, char_type>();
 5880|    504|            if (!is_segment_contiguous(range)) {
 5881|    504|                return impl(rd, range, value);
 5882|    504|            }
 5883|    504|            auto crange = get_as_contiguous(range);
 5884|    504|            SCN_TRY(it, impl(rd, crange, value));
 5885|    504|            return ranges::next(range.begin(),
 5886|    504|                                ranges::distance(crange.begin(), it));
 5887|    504|        }
 5888|    504|        else {
 5889|    504|            SCN_EXPECT(false);
 5890|    504|            SCN_UNREACHABLE;
 5891|    504|        }
 5892|    504|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    504|    {
 5863|    504|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    504|                        .transform_error(make_eof_scan_error));
 5865|    504|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    504|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    504|    {
 4152|    504|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    504|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    504|        float_reader<CharT> rd{};
 4155|    504|        return read_impl<Range>(
 4156|    504|            range, rd,
 4157|    504|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    504|                return r.read_source(SCN_FWD(args)...);
 4159|    504|            },
 4160|    504|            value);
 4161|    504|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    504|    {
  754|    504|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    504|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    504|              cvref<T> obj = *get<T>(fn);
  745|    504|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    504|                  obj(static_cast<decltype(args)>(args)...);
  747|    504|              }
  748|    504|              else {
  749|    504|                  return obj(static_cast<decltype(args)>(args)...);
  750|    504|              }
  751|    504|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    504|    {
  684|    504|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    504|            return static_cast<T*>(s.m_cp);
  686|    504|        }
  687|    504|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    504|            return static_cast<T*>(s.m_p);
  689|    504|        }
  690|    504|        else {
  691|    504|            return reinterpret_cast<T*>(s.m_fp);
  692|    504|        }
  693|    504|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    504|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    504|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    504|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    504|        {
  662|    504|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    504|    {
 5871|    504|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    504|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    504|                          basic_contiguous_scan_context<char_type>>) {
 5875|    504|            auto rd = make_reader<T, char_type>();
 5876|    504|            return impl(rd, range, value);
 5877|    504|        }
 5878|    504|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    504|            auto rd = make_reader<T, char_type>();
 5880|    504|            if (!is_segment_contiguous(range)) {
 5881|    504|                return impl(rd, range, value);
 5882|    504|            }
 5883|    504|            auto crange = get_as_contiguous(range);
 5884|    504|            SCN_TRY(it, impl(rd, crange, value));
 5885|    504|            return ranges::next(range.begin(),
 5886|    504|                                ranges::distance(crange.begin(), it));
 5887|    504|        }
 5888|    504|        else {
 5889|    504|            SCN_EXPECT(false);
 5890|    504|            SCN_UNREACHABLE;
 5891|    504|        }
 5892|    504|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    504|    {
 5863|    504|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    504|                        .transform_error(make_eof_scan_error));
 5865|    504|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    504|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    504|    {
 5266|    504|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    504|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    504|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    504|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    504|    {
 5871|    504|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    504|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    504|                          basic_contiguous_scan_context<char_type>>) {
 5875|    504|            auto rd = make_reader<T, char_type>();
 5876|    504|            return impl(rd, range, value);
 5877|    504|        }
 5878|    504|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    504|            auto rd = make_reader<T, char_type>();
 5880|    504|            if (!is_segment_contiguous(range)) {
 5881|    504|                return impl(rd, range, value);
 5882|    504|            }
 5883|    504|            auto crange = get_as_contiguous(range);
 5884|    504|            SCN_TRY(it, impl(rd, crange, value));
 5885|    504|            return ranges::next(range.begin(),
 5886|    504|                                ranges::distance(crange.begin(), it));
 5887|    504|        }
 5888|    504|        else {
 5889|    504|            SCN_EXPECT(false);
 5890|    504|            SCN_UNREACHABLE;
 5891|    504|        }
 5892|    504|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    504|    {
 5863|    504|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    504|                        .transform_error(make_eof_scan_error));
 5865|    504|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    504|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    504|    {
 5266|    504|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    504|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    504|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    504|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    504|    {
 5871|    504|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    504|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    504|                          basic_contiguous_scan_context<char_type>>) {
 5875|    504|            auto rd = make_reader<T, char_type>();
 5876|    504|            return impl(rd, range, value);
 5877|    504|        }
 5878|    504|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    504|            auto rd = make_reader<T, char_type>();
 5880|    504|            if (!is_segment_contiguous(range)) {
 5881|    504|                return impl(rd, range, value);
 5882|    504|            }
 5883|    504|            auto crange = get_as_contiguous(range);
 5884|    504|            SCN_TRY(it, impl(rd, crange, value));
 5885|    504|            return ranges::next(range.begin(),
 5886|    504|                                ranges::distance(crange.begin(), it));
 5887|    504|        }
 5888|    504|        else {
 5889|    504|            SCN_EXPECT(false);
 5890|    504|            SCN_UNREACHABLE;
 5891|    504|        }
 5892|    504|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    504|    {
 5863|    504|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    504|                        .transform_error(make_eof_scan_error));
 5865|    504|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    504|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    504|    {
 5266|    504|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    504|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    504|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    504|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   155k|    {
 2879|   155k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   319M|    {
 2883|   319M|        return m_current;
 2884|   319M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   638M|    {
 2888|   638M|        return m_range.end();
 2889|   638M|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   319M|{
 1221|       |    // TODO: optimize
 1222|   319M|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   319M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   319M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   319M|    auto res = get_next_code_point(str);
 1224|   319M|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   319M|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   319M|    {
 2903|   319M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   319M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   319M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   319M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   319M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 319M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   319M|        }
 2909|   319M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   319M|    static_cast<    \
  |  |  929|   319M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   319M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  96.1k|    {
 2893|  96.1k|        return ranges::subrange{begin(), end()};
 2894|  96.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  6.38k|    {
 6037|  6.38k|        const bool need_skipped_width =
 6038|  6.38k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 4.44k, False: 1.94k]
  |  Branch (6038:33): [True: 904, False: 1.04k]
  ------------------
 6039|  6.38k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  6.38k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 68, False: 6.31k]
  ------------------
 6043|  6.38k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 324, False: 5.99k]
  ------------------
 6044|    392|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    392|                             need_skipped_width);
 6046|    392|        }
 6047|  5.99k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 5.75k, False: 242]
  |  Branch (6047:56): [True: 3.09k, False: 2.65k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  3.09k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 750, False: 2.34k]
  ------------------
 6051|    750|                auto max_width_view = take_width(rng, specs.precision);
 6052|    750|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|    750|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    750|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    750|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    750|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 750]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    750|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    750|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|    750|                                  .transform_error(make_eof_scan_error));
 6054|    750|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|    750|            }
 6056|  4.69k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  2.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.34k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  4.69k|                            make_eof_scan_error));
 6058|       |
 6059|  4.69k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.84k, False: 508]
  ------------------
 6060|  1.84k|                return result_type{
 6061|  1.84k|                    it,
 6062|  1.84k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.84k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.84k|                                             .view())};
 6065|  1.84k|            }
 6066|    508|            return result_type{it, 0};
 6067|  4.69k|        }
 6068|       |
 6069|  2.89k|        return result_type{rng.begin(), 0};
 6070|  5.99k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|    864|    {
 6079|    864|        const bool need_skipped_width =
 6080|    864|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 446, False: 418]
  |  Branch (6080:33): [True: 216, False: 202]
  ------------------
 6081|    864|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|    864|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 64, False: 800]
  ------------------
 6084|    864|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 110, False: 690]
  ------------------
 6085|    174|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|    174|                             specs.fill, need_skipped_width);
 6087|    174|        }
 6088|    690|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 668, False: 22]
  ------------------
 6089|    690|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 440, False: 228]
  ------------------
 6090|    690|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 266, False: 174]
  |  Branch (6090:35): [True: 230, False: 36]
  ------------------
 6091|    440|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 158, False: 52]
  ------------------
 6092|    314|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 84, False: 74]
  ------------------
 6093|    314|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 84, False: 230]
  ------------------
 6094|     84|                const auto initial_width =
 6095|     84|                    specs.precision - prefix_width - value_width;
 6096|     84|                auto max_width_view = take_width(rng, initial_width);
 6097|     84|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|     84|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     84|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     84|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 84]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     84|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     84|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|     84|                                  .transform_error(make_eof_scan_error));
 6099|     84|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|     84|            }
 6101|    460|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|    230|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 230]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    460|                            make_eof_scan_error));
 6103|       |
 6104|    460|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 230, False: 0]
  ------------------
 6105|    230|                return result_type{
 6106|    230|                    it,
 6107|    230|                    calculate_text_width(make_contiguous_buffer(
 6108|    230|                                             ranges::subrange{rng.begin(), it})
 6109|    230|                                             .view())};
 6110|    230|            }
 6111|      0|            return result_type{it, 0};
 6112|    460|        }
 6113|    376|        return result_type{rng.begin(), 0};
 6114|    690|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6177|  1.31k|    {
 6178|  1.31k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.31k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.31k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.31k|            auto rd = make_reader<T, char_type>();
 6183|  1.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 872, False: 446]
  |  |  ------------------
  ------------------
 6184|    872|                return unexpected(e);
 6185|    872|            }
 6186|       |
 6187|    446|            return impl(rd, range, value);
 6188|  1.31k|        }
 6189|  1.31k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.31k|            auto rd = make_reader<T, char_type>();
 6191|  1.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.31k|                return unexpected(e);
 6193|  1.31k|            }
 6194|       |
 6195|  1.31k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.31k|                specs.width != 0) {
 6197|  1.31k|                return impl(rd, range, value);
 6198|  1.31k|            }
 6199|       |
 6200|  1.31k|            auto crange = get_as_contiguous(range);
 6201|  1.31k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.31k|            return ranges::next(range.begin(),
 6203|  1.31k|                                ranges::distance(crange.begin(), it));
 6204|  1.31k|        }
 6205|  1.31k|        else {
 6206|  1.31k|            SCN_EXPECT(false);
 6207|  1.31k|            SCN_UNREACHABLE;
 6208|  1.31k|        }
 6209|  1.31k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    446|    {
 6120|    446|        const bool need_skipped_width =
 6121|    446|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 250, False: 196]
  |  Branch (6121:33): [True: 96, False: 100]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    446|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    446|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    446|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    446|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    446|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 446]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    446|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    446|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    446|        auto [it, prefix_width] = prefix_result;
 6126|    446|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    446|        std::ptrdiff_t value_width = 0;
 6130|    446|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 106, False: 340]
  ------------------
 6131|    106|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 106]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    106|            const auto initial_width = specs.precision - prefix_width;
 6139|    106|            auto max_width_view =
 6140|    106|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    106|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    106|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 106, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    106|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    106|    }                                                  \
  |  |  |  | 3667|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    340|        else {
 6146|    340|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    340|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    340|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    340|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 340, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    340|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    340|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    340|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    340|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    340|    }                                                  \
  |  | 3667|    340|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    340|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6177|  1.31k|    {
 6178|  1.31k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.31k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.31k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.31k|            auto rd = make_reader<T, char_type>();
 6183|  1.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 872, False: 446]
  |  |  ------------------
  ------------------
 6184|    872|                return unexpected(e);
 6185|    872|            }
 6186|       |
 6187|    446|            return impl(rd, range, value);
 6188|  1.31k|        }
 6189|  1.31k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.31k|            auto rd = make_reader<T, char_type>();
 6191|  1.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.31k|                return unexpected(e);
 6193|  1.31k|            }
 6194|       |
 6195|  1.31k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.31k|                specs.width != 0) {
 6197|  1.31k|                return impl(rd, range, value);
 6198|  1.31k|            }
 6199|       |
 6200|  1.31k|            auto crange = get_as_contiguous(range);
 6201|  1.31k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.31k|            return ranges::next(range.begin(),
 6203|  1.31k|                                ranges::distance(crange.begin(), it));
 6204|  1.31k|        }
 6205|  1.31k|        else {
 6206|  1.31k|            SCN_EXPECT(false);
 6207|  1.31k|            SCN_UNREACHABLE;
 6208|  1.31k|        }
 6209|  1.31k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    446|    {
 6120|    446|        const bool need_skipped_width =
 6121|    446|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 250, False: 196]
  |  Branch (6121:33): [True: 96, False: 100]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    446|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    446|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    446|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    446|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    446|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 446]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    446|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    446|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    446|        auto [it, prefix_width] = prefix_result;
 6126|    446|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    446|        std::ptrdiff_t value_width = 0;
 6130|    446|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 106, False: 340]
  ------------------
 6131|    106|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 106]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    106|            const auto initial_width = specs.precision - prefix_width;
 6139|    106|            auto max_width_view =
 6140|    106|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    106|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    106|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 106, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    106|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    106|    }                                                  \
  |  |  |  | 3667|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    340|        else {
 6146|    340|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    340|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    340|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    340|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 340, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    340|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    340|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    340|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    340|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    340|    }                                                  \
  |  | 3667|    340|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    340|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6177|  1.29k|    {
 6178|  1.29k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.29k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.29k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.29k|            auto rd = make_reader<T, char_type>();
 6183|  1.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 888, False: 410]
  |  |  ------------------
  ------------------
 6184|    888|                return unexpected(e);
 6185|    888|            }
 6186|       |
 6187|    410|            return impl(rd, range, value);
 6188|  1.29k|        }
 6189|  1.29k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.29k|            auto rd = make_reader<T, char_type>();
 6191|  1.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.29k|                return unexpected(e);
 6193|  1.29k|            }
 6194|       |
 6195|  1.29k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.29k|                specs.width != 0) {
 6197|  1.29k|                return impl(rd, range, value);
 6198|  1.29k|            }
 6199|       |
 6200|  1.29k|            auto crange = get_as_contiguous(range);
 6201|  1.29k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.29k|            return ranges::next(range.begin(),
 6203|  1.29k|                                ranges::distance(crange.begin(), it));
 6204|  1.29k|        }
 6205|  1.29k|        else {
 6206|  1.29k|            SCN_EXPECT(false);
 6207|  1.29k|            SCN_UNREACHABLE;
 6208|  1.29k|        }
 6209|  1.29k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5752|  1.29k|    {
 5753|  1.29k|        reader_error_handler eh{};
 5754|  1.29k|        detail::check_pointer_type_specs(specs, eh);
 5755|  1.29k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 888, False: 410]
  |  |  ------------------
  ------------------
 5756|    888|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|    888|        }
 5758|    410|        return {};
 5759|  1.29k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6119|    410|    {
 6120|    410|        const bool need_skipped_width =
 6121|    410|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 248, False: 162]
  |  Branch (6121:33): [True: 84, False: 78]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    410|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    410|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 410]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    410|        auto [it, prefix_width] = prefix_result;
 6126|    410|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    410|        std::ptrdiff_t value_width = 0;
 6130|    410|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 94, False: 316]
  ------------------
 6131|     94|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 94]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|     94|            const auto initial_width = specs.precision - prefix_width;
 6139|     94|            auto max_width_view =
 6140|     94|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|     94|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|     94|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     94|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     94|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 94, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     94|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     94|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     94|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     94|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     94|    }                                                  \
  |  |  |  | 3667|     94|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    316|        else {
 6146|    316|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 316, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    316|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    316|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    316|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    316|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    316|    }                                                  \
  |  | 3667|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|     94|    {
 5782|     94|        SCN_UNUSED(specs);
  ------------------
  |  |  909|     94|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|     94|        return read_default(range, value, loc);
 5784|     94|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|     94|    {
 5765|     94|        detail::format_specs specs{};
 5766|     94|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|     94|        std::uintptr_t intvalue{};
 5769|     94|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|     94|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     94|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     94|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 94, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     94|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     94|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     94|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     94|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     94|    }                                                  \
  |  |  |  | 3667|     94|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|     94|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    316|    {
 5782|    316|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    316|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    316|        return read_default(range, value, loc);
 5784|    316|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6177|  1.31k|    {
 6178|  1.31k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.31k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.31k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.31k|            auto rd = make_reader<T, char_type>();
 6183|  1.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 810, False: 508]
  |  |  ------------------
  ------------------
 6184|    810|                return unexpected(e);
 6185|    810|            }
 6186|       |
 6187|    508|            return impl(rd, range, value);
 6188|  1.31k|        }
 6189|  1.31k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.31k|            auto rd = make_reader<T, char_type>();
 6191|  1.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.31k|                return unexpected(e);
 6193|  1.31k|            }
 6194|       |
 6195|  1.31k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.31k|                specs.width != 0) {
 6197|  1.31k|                return impl(rd, range, value);
 6198|  1.31k|            }
 6199|       |
 6200|  1.31k|            auto crange = get_as_contiguous(range);
 6201|  1.31k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.31k|            return ranges::next(range.begin(),
 6203|  1.31k|                                ranges::distance(crange.begin(), it));
 6204|  1.31k|        }
 6205|  1.31k|        else {
 6206|  1.31k|            SCN_EXPECT(false);
 6207|  1.31k|            SCN_UNREACHABLE;
 6208|  1.31k|        }
 6209|  1.31k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  1.31k|    {
 3040|  1.31k|        reader_error_handler eh{};
 3041|  1.31k|        get_derived().check_specs_impl(specs, eh);
 3042|  1.31k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 810, False: 508]
  |  |  ------------------
  ------------------
 3043|    810|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    810|        }
 3045|    508|        return {};
 3046|  1.31k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|  1.31k|    {
 3051|  1.31k|        return static_cast<Derived&>(*this);
 3052|  1.31k|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  1.31k|    {
 5497|  1.31k|        detail::check_bool_type_specs(specs, eh);
 5498|  1.31k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    508|    {
 6120|    508|        const bool need_skipped_width =
 6121|    508|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 256, False: 252]
  |  Branch (6121:33): [True: 100, False: 152]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    508|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    508|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    508|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    508|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    508|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 508]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    508|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    508|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    508|        auto [it, prefix_width] = prefix_result;
 6126|    508|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    508|        std::ptrdiff_t value_width = 0;
 6130|    508|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 110, False: 398]
  ------------------
 6131|    110|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 110]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    110|            const auto initial_width = specs.precision - prefix_width;
 6139|    110|            auto max_width_view =
 6140|    110|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    110|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    110|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    110|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    110|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 110, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    110|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    110|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    110|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    110|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    110|    }                                                  \
  |  |  |  | 3667|    110|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    398|        else {
 6146|    398|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    398|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    398|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    398|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 398, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    398|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    398|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    398|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    398|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    398|    }                                                  \
  |  | 3667|    398|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    110|    {
 5516|    110|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    110|#if !SCN_DISABLE_LOCALE
 5519|    110|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 0, False: 110]
  ------------------
 5520|      0|            return rd.read_localized(range, loc, value);
 5521|      0|        }
 5522|    110|#endif
 5523|       |
 5524|    110|        return rd.read_classic(range, value);
 5525|    110|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5528|    508|    {
 5529|    508|        SCN_GCC_COMPAT_PUSH
 5530|    508|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    508|        switch (specs.type) {
 5533|     62|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 62, False: 446]
  ------------------
 5534|     62|                return bool_reader_base::allow_text;
 5535|       |
 5536|      4|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 4, False: 504]
  ------------------
 5537|      8|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 4, False: 504]
  ------------------
 5538|     12|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 4, False: 504]
  ------------------
 5539|     16|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 4, False: 504]
  ------------------
 5540|     26|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 10, False: 498]
  ------------------
 5541|     30|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 4, False: 504]
  ------------------
 5542|     30|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    416|            default:
  ------------------
  |  Branch (5544:13): [True: 416, False: 92]
  ------------------
 5545|    416|                return bool_reader_base::allow_text |
 5546|    416|                       bool_reader_base::allow_numeric;
 5547|    508|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    508|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    106|    {
 5384|    106|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 106]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    106|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 106]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    106|        return unexpected_scan_error(
 5394|    106|            scan_error::invalid_scanned_value,
 5395|    106|            "Failed to read numeric boolean value: No match");
 5396|    106|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    212|{
 2146|    212|    auto it = read_code_unit(range);
 2147|    212|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 212]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    212|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 212, False: 0]
  |  |  ------------------
  ------------------
 2152|    212|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    212|        return unexpected(parse_error::error);
 2154|    212|    }
 2155|       |
 2156|      0|    return *it;
 2157|    212|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    196|{
 1857|    196|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    196|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    196|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    196|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    196|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    196|        if (sz < count) {
 1862|    196|            return unexpected(eof_error::eof);
 1863|    196|        }
 1864|       |
 1865|    196|        return ranges::next(range.begin(), count);
 1866|    196|    }
 1867|    196|    else {
 1868|    196|        auto it = range.begin();
 1869|    196|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 196]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  1.01k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 844, False: 166]
  ------------------
 1874|    844|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 30, False: 814]
  ------------------
 1875|     30|                return unexpected(eof_error::eof);
 1876|     30|            }
 1877|    844|        }
 1878|       |
 1879|    166|        return it;
 1880|    196|    }
 1881|    196|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    196|{
 1095|    196|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    196|        return r.size();
 1097|    196|    }
 1098|    196|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    196|                           ranges::const_iterator_t<Range>,
 1100|    196|                           typename detail::basic_scan_buffer<
 1101|    196|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    196|        if constexpr (ranges::common_range<Range>) {
 1103|    196|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    196|        }
 1105|    196|        else {
 1106|    196|            if (r.begin().stores_parent()) {
 1107|    196|                return static_cast<size_t>(
 1108|    196|                    r.begin().parent()->chars_available() -
 1109|    196|                    r.begin().position());
 1110|    196|            }
 1111|    196|            return r.begin().contiguous_segment().size();
 1112|    196|        }
 1113|    196|    }
 1114|    196|    else {
 1115|    196|        return 0;
 1116|    196|    }
 1117|    196|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    110|    {
 5355|    110|        scan_error err{scan_error::invalid_scanned_value,
 5356|    110|                       "Failed to read boolean"};
 5357|       |
 5358|    110|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 106, False: 4]
  ------------------
 5359|    106|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 106]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    106|            else {
 5363|    106|                err = r.error();
 5364|    106|            }
 5365|    106|        }
 5366|       |
 5367|    110|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 98, False: 12]
  ------------------
 5368|     98|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 98]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|     98|            else {
 5372|     98|                err = r.error();
 5373|     98|            }
 5374|     98|        }
 5375|       |
 5376|    110|        return unexpected(err);
 5377|    110|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|     98|    {
 5402|     98|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 98]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|     98|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 98]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|     98|        return unexpected_scan_error(
 5412|     98|            scan_error::invalid_scanned_value,
 5413|     98|            "Failed to read textual boolean value: No match");
 5414|     98|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    196|{
 2194|    196|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    196|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    196|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    196|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 166]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     30|    }                                                  \
  |  |  |  | 3667|    196|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    166|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    166|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    166|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    166|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    166|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    166|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|    166|            return unexpected(parse_error::error);
 2202|    166|        }
 2203|    166|        return it;
 2204|    166|    }
 2205|    166|    else {
 2206|    166|        auto range_it = range.begin();
 2207|    166|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 166, False: 0]
  ------------------
 2208|    166|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 166, False: 0]
  |  |  ------------------
  ------------------
 2209|    166|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    166|                return unexpected(parse_error::error);
 2211|    166|            }
 2212|    166|        }
 2213|      0|        return it;
 2214|    166|    }
 2215|    166|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    398|    {
 5516|    398|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    398|#if !SCN_DISABLE_LOCALE
 5519|    398|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 18, False: 380]
  ------------------
 5520|     18|            return rd.read_localized(range, loc, value);
 5521|     18|        }
 5522|    380|#endif
 5523|       |
 5524|    380|        return rd.read_classic(range, value);
 5525|    398|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     18|    {
 5428|     18|        scan_error err{scan_error::invalid_scanned_value,
 5429|     18|                       "Failed to read boolean"};
 5430|       |
 5431|     18|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 12, False: 6]
  ------------------
 5432|     12|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 12]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     12|            else {
 5436|     12|                err = r.error();
 5437|     12|            }
 5438|     12|        }
 5439|       |
 5440|     18|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 14, False: 4]
  ------------------
 5441|     14|            auto stdloc = loc.get<std::locale>();
 5442|     14|            const auto& numpunct =
 5443|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     14|            const auto truename = numpunct.truename();
 5445|     14|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     14|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 14]
  ------------------
 5448|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     14|            else {
 5452|     14|                err = r.error();
 5453|     14|            }
 5454|     14|        }
 5455|       |
 5456|     18|        return unexpected(err);
 5457|     18|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5467|     14|    {
 5468|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     14|        const auto shorter = std::pair{
 5470|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 14, False: 0]
  ------------------
 5471|     14|        const auto longer = std::pair{
 5472|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 14]
  ------------------
 5473|       |
 5474|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 14]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 14]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     14|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     14|                                     "read_textual: No match");
 5485|     14|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     28|{
 2179|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 26]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      2|    }                                                  \
  |  |  |  | 3667|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     26|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     26|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     26|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     26|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 2185|     26|        return unexpected(parse_error::error);
 2186|     26|    }
 2187|      0|    return it;
 2188|     26|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6177|  1.29k|    {
 6178|  1.29k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.29k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.29k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.29k|            auto rd = make_reader<T, char_type>();
 6183|  1.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 864, False: 434]
  |  |  ------------------
  ------------------
 6184|    864|                return unexpected(e);
 6185|    864|            }
 6186|       |
 6187|    434|            return impl(rd, range, value);
 6188|  1.29k|        }
 6189|  1.29k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.29k|            auto rd = make_reader<T, char_type>();
 6191|  1.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.29k|                return unexpected(e);
 6193|  1.29k|            }
 6194|       |
 6195|  1.29k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.29k|                specs.width != 0) {
 6197|  1.29k|                return impl(rd, range, value);
 6198|  1.29k|            }
 6199|       |
 6200|  1.29k|            auto crange = get_as_contiguous(range);
 6201|  1.29k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.29k|            return ranges::next(range.begin(),
 6203|  1.29k|                                ranges::distance(crange.begin(), it));
 6204|  1.29k|        }
 6205|  1.29k|        else {
 6206|  1.29k|            SCN_EXPECT(false);
 6207|  1.29k|            SCN_UNREACHABLE;
 6208|  1.29k|        }
 6209|  1.29k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    434|    {
 6120|    434|        const bool need_skipped_width =
 6121|    434|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 250, False: 184]
  |  Branch (6121:33): [True: 96, False: 88]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    434|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    434|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    434|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    434|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    434|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 434]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    434|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    434|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    434|        auto [it, prefix_width] = prefix_result;
 6126|    434|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    434|        std::ptrdiff_t value_width = 0;
 6130|    434|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 106, False: 328]
  ------------------
 6131|    106|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 106]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    106|            const auto initial_width = specs.precision - prefix_width;
 6139|    106|            auto max_width_view =
 6140|    106|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    106|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    106|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 94]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     94|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|     94|            it = w_it.base();
 6143|     94|            value_width = initial_width - w_it.count();
 6144|     94|        }
 6145|    328|        else {
 6146|    328|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 14, False: 314]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     14|    }                                                  \
  |  | 3667|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    314|                                             specs, value, loc));
 6148|       |
 6149|    314|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 238, False: 76]
  ------------------
 6150|    238|                value_width = calculate_text_width(
 6151|    238|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    238|                        .view());
 6153|    238|            }
 6154|    314|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    408|        std::ptrdiff_t postfix_width = 0;
 6158|    408|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 408, False: 0]
  ------------------
 6159|    408|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    408|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    408|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    408|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 408]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    408|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    408|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    408|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    408|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    408|                                 value_width));
 6163|    408|            std::tie(it, postfix_width) = postfix_result;
 6164|    408|        }
 6165|       |
 6166|    408|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    408|                                                 value_width, postfix_width);
 6168|    408|            !e) {
  ------------------
  |  Branch (6168:13): [True: 236, False: 172]
  ------------------
 6169|    236|            return unexpected(e);
 6170|    236|        }
 6171|       |
 6172|    172|        return it;
 6173|    408|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6177|  1.31k|    {
 6178|  1.31k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.31k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.31k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.31k|            auto rd = make_reader<T, char_type>();
 6183|  1.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 862, False: 456]
  |  |  ------------------
  ------------------
 6184|    862|                return unexpected(e);
 6185|    862|            }
 6186|       |
 6187|    456|            return impl(rd, range, value);
 6188|  1.31k|        }
 6189|  1.31k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.31k|            auto rd = make_reader<T, char_type>();
 6191|  1.31k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.31k|                return unexpected(e);
 6193|  1.31k|            }
 6194|       |
 6195|  1.31k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.31k|                specs.width != 0) {
 6197|  1.31k|                return impl(rd, range, value);
 6198|  1.31k|            }
 6199|       |
 6200|  1.31k|            auto crange = get_as_contiguous(range);
 6201|  1.31k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.31k|            return ranges::next(range.begin(),
 6203|  1.31k|                                ranges::distance(crange.begin(), it));
 6204|  1.31k|        }
 6205|  1.31k|        else {
 6206|  1.31k|            SCN_EXPECT(false);
 6207|  1.31k|            SCN_UNREACHABLE;
 6208|  1.31k|        }
 6209|  1.31k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    456|    {
 6120|    456|        const bool need_skipped_width =
 6121|    456|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 264, False: 192]
  |  Branch (6121:33): [True: 96, False: 96]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    456|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    456|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    456|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    456|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    456|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 456]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    456|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    456|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    456|        auto [it, prefix_width] = prefix_result;
 6126|    456|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    456|        std::ptrdiff_t value_width = 0;
 6130|    456|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 106, False: 350]
  ------------------
 6131|    106|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 106]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    106|            const auto initial_width = specs.precision - prefix_width;
 6139|    106|            auto max_width_view =
 6140|    106|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    106|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    106|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 106, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    106|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    106|    }                                                  \
  |  |  |  | 3667|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    350|        else {
 6146|    350|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    350|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    350|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    350|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 350, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    350|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    350|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    350|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    350|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    350|    }                                                  \
  |  | 3667|    350|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    350|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6177|  1.29k|    {
 6178|  1.29k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.29k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.29k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.29k|            auto rd = make_reader<T, char_type>();
 6183|  1.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 1.22k]
  |  |  ------------------
  ------------------
 6184|     70|                return unexpected(e);
 6185|     70|            }
 6186|       |
 6187|  1.22k|            return impl(rd, range, value);
 6188|  1.29k|        }
 6189|  1.29k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.29k|            auto rd = make_reader<T, char_type>();
 6191|  1.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.29k|                return unexpected(e);
 6193|  1.29k|            }
 6194|       |
 6195|  1.29k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.29k|                specs.width != 0) {
 6197|  1.29k|                return impl(rd, range, value);
 6198|  1.29k|            }
 6199|       |
 6200|  1.29k|            auto crange = get_as_contiguous(range);
 6201|  1.29k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.29k|            return ranges::next(range.begin(),
 6203|  1.29k|                                ranges::distance(crange.begin(), it));
 6204|  1.29k|        }
 6205|  1.29k|        else {
 6206|  1.29k|            SCN_EXPECT(false);
 6207|  1.29k|            SCN_UNREACHABLE;
 6208|  1.29k|        }
 6209|  1.29k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6119|  1.22k|    {
 6120|  1.22k|        const bool need_skipped_width =
 6121|  1.22k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 974, False: 254]
  |  Branch (6121:33): [True: 112, False: 142]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  1.22k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  1.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  1.22k|        auto [it, prefix_width] = prefix_result;
 6126|  1.22k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  1.22k|        std::ptrdiff_t value_width = 0;
 6130|  1.22k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 130, False: 1.09k]
  ------------------
 6131|    130|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 130]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    130|            const auto initial_width = specs.precision - prefix_width;
 6139|    130|            auto max_width_view =
 6140|    130|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    130|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    130|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    130|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    130|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    130|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 74, False: 56]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     74|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     74|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     74|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     74|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     74|    }                                                  \
  |  |  |  | 3667|    130|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     56|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|     56|            it = w_it.base();
 6143|     56|            value_width = initial_width - w_it.count();
 6144|     56|        }
 6145|  1.09k|        else {
 6146|  1.09k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  1.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 782, False: 316]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    782|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    782|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    782|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    782|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    782|    }                                                  \
  |  | 3667|  1.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    316|                                             specs, value, loc));
 6148|       |
 6149|    316|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 232, False: 84]
  ------------------
 6150|    232|                value_width = calculate_text_width(
 6151|    232|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    232|                        .view());
 6153|    232|            }
 6154|    316|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    372|        std::ptrdiff_t postfix_width = 0;
 6158|    372|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 152, False: 220]
  ------------------
 6159|    152|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    152|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    152|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    152|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 152]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    152|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    152|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    152|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    152|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    152|                                 value_width));
 6163|    152|            std::tie(it, postfix_width) = postfix_result;
 6164|    152|        }
 6165|       |
 6166|    372|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    372|                                                 value_width, postfix_width);
 6168|    372|            !e) {
  ------------------
  |  Branch (6168:13): [True: 26, False: 346]
  ------------------
 6169|     26|            return unexpected(e);
 6170|     26|        }
 6171|       |
 6172|    346|        return it;
 6173|    372|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6177|  1.29k|    {
 6178|  1.29k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.29k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.29k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.29k|            auto rd = make_reader<T, char_type>();
 6183|  1.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 1.22k]
  |  |  ------------------
  ------------------
 6184|     70|                return unexpected(e);
 6185|     70|            }
 6186|       |
 6187|  1.22k|            return impl(rd, range, value);
 6188|  1.29k|        }
 6189|  1.29k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.29k|            auto rd = make_reader<T, char_type>();
 6191|  1.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.29k|                return unexpected(e);
 6193|  1.29k|            }
 6194|       |
 6195|  1.29k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.29k|                specs.width != 0) {
 6197|  1.29k|                return impl(rd, range, value);
 6198|  1.29k|            }
 6199|       |
 6200|  1.29k|            auto crange = get_as_contiguous(range);
 6201|  1.29k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.29k|            return ranges::next(range.begin(),
 6203|  1.29k|                                ranges::distance(crange.begin(), it));
 6204|  1.29k|        }
 6205|  1.29k|        else {
 6206|  1.29k|            SCN_EXPECT(false);
 6207|  1.29k|            SCN_UNREACHABLE;
 6208|  1.29k|        }
 6209|  1.29k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6119|  1.22k|    {
 6120|  1.22k|        const bool need_skipped_width =
 6121|  1.22k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 974, False: 254]
  |  Branch (6121:33): [True: 112, False: 142]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  1.22k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  1.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  1.22k|        auto [it, prefix_width] = prefix_result;
 6126|  1.22k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  1.22k|        std::ptrdiff_t value_width = 0;
 6130|  1.22k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 130, False: 1.09k]
  ------------------
 6131|    130|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 130]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    130|            const auto initial_width = specs.precision - prefix_width;
 6139|    130|            auto max_width_view =
 6140|    130|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    130|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    130|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    130|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    130|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    130|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 74, False: 56]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     74|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     74|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     74|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     74|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     74|    }                                                  \
  |  |  |  | 3667|    130|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     56|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|     56|            it = w_it.base();
 6143|     56|            value_width = initial_width - w_it.count();
 6144|     56|        }
 6145|  1.09k|        else {
 6146|  1.09k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  1.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 782, False: 316]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    782|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    782|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    782|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    782|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    782|    }                                                  \
  |  | 3667|  1.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    316|                                             specs, value, loc));
 6148|       |
 6149|    316|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 232, False: 84]
  ------------------
 6150|    232|                value_width = calculate_text_width(
 6151|    232|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    232|                        .view());
 6153|    232|            }
 6154|    316|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    372|        std::ptrdiff_t postfix_width = 0;
 6158|    372|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 152, False: 220]
  ------------------
 6159|    152|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    152|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    152|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    152|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 152]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    152|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    152|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    152|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    152|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    152|                                 value_width));
 6163|    152|            std::tie(it, postfix_width) = postfix_result;
 6164|    152|        }
 6165|       |
 6166|    372|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    372|                                                 value_width, postfix_width);
 6168|    372|            !e) {
  ------------------
  |  Branch (6168:13): [True: 26, False: 346]
  ------------------
 6169|     26|            return unexpected(e);
 6170|     26|        }
 6171|       |
 6172|    346|        return it;
 6173|    372|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6177|  1.29k|    {
 6178|  1.29k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.29k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.29k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.29k|            auto rd = make_reader<T, char_type>();
 6183|  1.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 1.22k]
  |  |  ------------------
  ------------------
 6184|     70|                return unexpected(e);
 6185|     70|            }
 6186|       |
 6187|  1.22k|            return impl(rd, range, value);
 6188|  1.29k|        }
 6189|  1.29k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.29k|            auto rd = make_reader<T, char_type>();
 6191|  1.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.29k|                return unexpected(e);
 6193|  1.29k|            }
 6194|       |
 6195|  1.29k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.29k|                specs.width != 0) {
 6197|  1.29k|                return impl(rd, range, value);
 6198|  1.29k|            }
 6199|       |
 6200|  1.29k|            auto crange = get_as_contiguous(range);
 6201|  1.29k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.29k|            return ranges::next(range.begin(),
 6203|  1.29k|                                ranges::distance(crange.begin(), it));
 6204|  1.29k|        }
 6205|  1.29k|        else {
 6206|  1.29k|            SCN_EXPECT(false);
 6207|  1.29k|            SCN_UNREACHABLE;
 6208|  1.29k|        }
 6209|  1.29k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6119|  1.22k|    {
 6120|  1.22k|        const bool need_skipped_width =
 6121|  1.22k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 974, False: 254]
  |  Branch (6121:33): [True: 112, False: 142]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  1.22k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  1.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  1.22k|        auto [it, prefix_width] = prefix_result;
 6126|  1.22k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  1.22k|        std::ptrdiff_t value_width = 0;
 6130|  1.22k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 130, False: 1.09k]
  ------------------
 6131|    130|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 130]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    130|            const auto initial_width = specs.precision - prefix_width;
 6139|    130|            auto max_width_view =
 6140|    130|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    130|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    130|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    130|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    130|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    130|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 74, False: 56]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     74|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     74|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     74|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     74|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     74|    }                                                  \
  |  |  |  | 3667|    130|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     56|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|     56|            it = w_it.base();
 6143|     56|            value_width = initial_width - w_it.count();
 6144|     56|        }
 6145|  1.09k|        else {
 6146|  1.09k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  1.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 782, False: 316]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    782|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    782|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    782|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    782|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    782|    }                                                  \
  |  | 3667|  1.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    316|                                             specs, value, loc));
 6148|       |
 6149|    316|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 232, False: 84]
  ------------------
 6150|    232|                value_width = calculate_text_width(
 6151|    232|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    232|                        .view());
 6153|    232|            }
 6154|    316|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    372|        std::ptrdiff_t postfix_width = 0;
 6158|    372|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 152, False: 220]
  ------------------
 6159|    152|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    152|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    152|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    152|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 152]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    152|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    152|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    152|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    152|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    152|                                 value_width));
 6163|    152|            std::tie(it, postfix_width) = postfix_result;
 6164|    152|        }
 6165|       |
 6166|    372|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    372|                                                 value_width, postfix_width);
 6168|    372|            !e) {
  ------------------
  |  Branch (6168:13): [True: 26, False: 346]
  ------------------
 6169|     26|            return unexpected(e);
 6170|     26|        }
 6171|       |
 6172|    346|        return it;
 6173|    372|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    652|    {
 3492|    652|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    652|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    652|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    652|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    652|                return unexpected_scan_error(
 3498|    652|                    scan_error::invalid_scanned_value,
 3499|    652|                    "Unexpected '-' sign when parsing an "
 3500|    652|                    "unsigned value");
 3501|    652|            }
 3502|    652|        }
 3503|       |
 3504|    652|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 652]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.30k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.30k|                parse_integer_digits_without_thsep(
 3511|  1.30k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.30k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.30k|        auto buf = make_contiguous_buffer(
 3515|  1.30k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.30k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 652, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    652|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    652|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    652|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    652|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    652|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.30k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    652|    {
 3492|    652|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    652|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    652|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    652|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 652]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    652|        }
 3503|       |
 3504|    652|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 652]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.30k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.30k|                parse_integer_digits_without_thsep(
 3511|  1.30k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.30k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.30k|        auto buf = make_contiguous_buffer(
 3515|  1.30k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.30k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 652, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    652|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    652|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    652|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    652|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    652|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.30k|    }

LLVMFuzzerTestOneInput:
   68|  4.32k|{
   69|  4.32k|    scn::fuzz::run(data, size);
   70|  4.32k|    return 0;
   71|  4.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  4.32k|{
   52|  4.32k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 4.32k]
  |  Branch (52:35): [True: 0, False: 4.32k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  4.32k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  4.32k|    run_for_source(sv);
   59|  4.32k|    run_for_source(wsv_reinterpret);
   60|  4.32k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 4.32k, False: 0]
  ------------------
   61|  4.32k|        run_for_source(wsv_transcode);
   62|  4.32k|    }
   63|  4.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  4.32k|{
   37|  4.32k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  4.32k|    run_for_type<char_type>(source);
   40|  4.32k|    run_for_type<int>(source);
   41|  4.32k|    run_for_type<unsigned>(source);
   42|  4.32k|    run_for_type<double>(source);
   43|  4.32k|    run_for_type<bool>(source);
   44|  4.32k|    run_for_type<void*>(source);
   45|  4.32k|    run_for_type<std::string>(source);
   46|  4.32k|    run_for_type<std::wstring>(source);
   47|  4.32k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  4.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.32k|{
   25|  4.32k|    {
   26|  4.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.32k|    }
   28|  4.32k|    {
   29|  4.32k|        auto _ =
   30|  4.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.32k|    }
   32|  4.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.32k|{
   25|  4.32k|    {
   26|  4.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.32k|    }
   28|  4.32k|    {
   29|  4.32k|        auto _ =
   30|  4.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.32k|    }
   32|  4.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.32k|{
   25|  4.32k|    {
   26|  4.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.32k|    }
   28|  4.32k|    {
   29|  4.32k|        auto _ =
   30|  4.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.32k|    }
   32|  4.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.32k|{
   25|  4.32k|    {
   26|  4.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.32k|    }
   28|  4.32k|    {
   29|  4.32k|        auto _ =
   30|  4.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.32k|    }
   32|  4.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.32k|{
   25|  4.32k|    {
   26|  4.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.32k|    }
   28|  4.32k|    {
   29|  4.32k|        auto _ =
   30|  4.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.32k|    }
   32|  4.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  4.32k|{
   25|  4.32k|    {
   26|  4.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.32k|    }
   28|  4.32k|    {
   29|  4.32k|        auto _ =
   30|  4.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.32k|    }
   32|  4.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  4.32k|{
   25|  4.32k|    {
   26|  4.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.32k|    }
   28|  4.32k|    {
   29|  4.32k|        auto _ =
   30|  4.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.32k|    }
   32|  4.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  4.32k|{
   25|  4.32k|    {
   26|  4.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.32k|    }
   28|  4.32k|    {
   29|  4.32k|        auto _ =
   30|  4.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.32k|    }
   32|  4.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  4.32k|{
   25|  4.32k|    {
   26|  4.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.32k|    }
   28|  4.32k|    {
   29|  4.32k|        auto _ =
   30|  4.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.32k|    }
   32|  4.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  8.65k|{
   37|  8.65k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  8.65k|    run_for_type<char_type>(source);
   40|  8.65k|    run_for_type<int>(source);
   41|  8.65k|    run_for_type<unsigned>(source);
   42|  8.65k|    run_for_type<double>(source);
   43|  8.65k|    run_for_type<bool>(source);
   44|  8.65k|    run_for_type<void*>(source);
   45|  8.65k|    run_for_type<std::string>(source);
   46|  8.65k|    run_for_type<std::wstring>(source);
   47|  8.65k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  8.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.65k|{
   25|  8.65k|    {
   26|  8.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.65k|    }
   28|  8.65k|    {
   29|  8.65k|        auto _ =
   30|  8.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.65k|    }
   32|  8.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.65k|{
   25|  8.65k|    {
   26|  8.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.65k|    }
   28|  8.65k|    {
   29|  8.65k|        auto _ =
   30|  8.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.65k|    }
   32|  8.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.65k|{
   25|  8.65k|    {
   26|  8.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.65k|    }
   28|  8.65k|    {
   29|  8.65k|        auto _ =
   30|  8.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.65k|    }
   32|  8.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.65k|{
   25|  8.65k|    {
   26|  8.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.65k|    }
   28|  8.65k|    {
   29|  8.65k|        auto _ =
   30|  8.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.65k|    }
   32|  8.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.65k|{
   25|  8.65k|    {
   26|  8.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.65k|    }
   28|  8.65k|    {
   29|  8.65k|        auto _ =
   30|  8.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.65k|    }
   32|  8.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  8.65k|{
   25|  8.65k|    {
   26|  8.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.65k|    }
   28|  8.65k|    {
   29|  8.65k|        auto _ =
   30|  8.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.65k|    }
   32|  8.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  8.65k|{
   25|  8.65k|    {
   26|  8.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.65k|    }
   28|  8.65k|    {
   29|  8.65k|        auto _ =
   30|  8.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.65k|    }
   32|  8.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  8.65k|{
   25|  8.65k|    {
   26|  8.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.65k|    }
   28|  8.65k|    {
   29|  8.65k|        auto _ =
   30|  8.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.65k|    }
   32|  8.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  8.65k|{
   25|  8.65k|    {
   26|  8.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.65k|    }
   28|  8.65k|    {
   29|  8.65k|        auto _ =
   30|  8.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.65k|    }
   32|  8.65k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  4.32k|{
   52|  4.32k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  4.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  4.32k|    string_buffer.resize(size);
   56|  4.32k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  4.32k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  4.32k|    const auto wsv_reinterpret_size =
   61|  4.32k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 88, False: 4.23k]
  ------------------
   62|  4.32k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  4.32k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  4.32k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  4.32k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  4.32k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  4.32k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  4.32k|}

