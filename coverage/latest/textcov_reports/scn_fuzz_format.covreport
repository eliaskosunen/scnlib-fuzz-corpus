_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|    956|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|    552|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  3.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  3.60M|{
 3807|  3.60M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  3.60M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  3.60M|    }
 3810|  3.60M|    else if constexpr (sizeof(U) == 2) {
 3811|  3.60M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  3.60M|    }
 3813|  3.60M|    else {
 3814|       |        // utf-32
 3815|  3.60M|        static_assert(sizeof(U) == 4);
 3816|  3.60M|        SCN_UNUSED(ch);
 3817|  3.60M|        return 1;
 3818|  3.60M|    }
 3819|  3.60M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  3.60M|{
 3771|  3.60M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  3.60M|    SCN_GCC_COMPAT_PUSH
 3774|  3.60M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  3.60M|    constexpr char lengths[] =
 3776|  3.60M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  3.60M|        "\1\1\1\1\1\1\1\1"
 3778|  3.60M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  3.60M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  3.60M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  3.60M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  3.60M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  3.60M|    SCN_GCC_COMPAT_POP
 3785|  3.60M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  3.33M|{
 4013|  3.33M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  3.33M|        return decode_utf8_code_point_exhaustive(input);
 4015|  3.33M|    }
 4016|  3.33M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  3.33M|        return decode_utf16_code_point_exhaustive(input);
 4018|  3.33M|    }
 4019|  3.33M|    else {
 4020|  3.33M|        SCN_EXPECT(input.size() == 1);
 4021|  3.33M|        auto cp = static_cast<char32_t>(input.front());
 4022|  3.33M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  3.33M|            return invalid_code_point;
 4024|  3.33M|        }
 4025|  3.33M|        return cp;
 4026|  3.33M|    }
 4027|  3.33M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  3.33M|{
 3826|  3.33M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  3.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  3.33M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  3.33M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  3.33M|    };
 3831|       |
 3832|  3.33M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 2.96M, False: 367k]
  ------------------
 3833|  2.96M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 84, False: 2.96M]
  ------------------
 3834|     84|            SCN_UNLIKELY_ATTR
 3835|     84|            return invalid_code_point;
 3836|     84|        }
 3837|  2.96M|        return static_cast<char32_t>(input[0]);
 3838|  2.96M|    }
 3839|       |
 3840|   367k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 334k, False: 32.4k]
  ------------------
 3841|   334k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 18, False: 334k]
  ------------------
 3842|     18|            SCN_UNLIKELY_ATTR
 3843|     18|            return invalid_code_point;
 3844|     18|        }
 3845|   334k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 4.28k, False: 330k]
  ------------------
 3846|  4.28k|            SCN_UNLIKELY_ATTR
 3847|  4.28k|            return invalid_code_point;
 3848|  4.28k|        }
 3849|       |
 3850|   330k|        char32_t cp{};
 3851|   330k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   330k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   330k|        return cp;
 3854|   334k|    }
 3855|       |
 3856|  32.4k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 27.1k, False: 5.30k]
  ------------------
 3857|  27.1k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 18, False: 27.1k]
  ------------------
 3858|     18|            SCN_UNLIKELY_ATTR
 3859|     18|            return invalid_code_point;
 3860|     18|        }
 3861|  27.1k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 4.16k, False: 22.9k]
  ------------------
 3862|  27.1k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 378, False: 22.6k]
  ------------------
 3863|  4.54k|            SCN_UNLIKELY_ATTR
 3864|  4.54k|            return invalid_code_point;
 3865|  4.54k|        }
 3866|       |
 3867|  22.6k|        char32_t cp{};
 3868|  22.6k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  22.6k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  22.6k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  22.6k|        return cp;
 3872|  27.1k|    }
 3873|       |
 3874|  5.30k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 5.30k, False: 0]
  ------------------
 3875|  5.30k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 5.30k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  5.30k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 685, False: 4.61k]
  ------------------
 3880|    685|            SCN_UNLIKELY_ATTR
 3881|    685|            return invalid_code_point;
 3882|    685|        }
 3883|  4.61k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 801, False: 3.81k]
  ------------------
 3884|  4.61k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 388, False: 3.42k]
  ------------------
 3885|  4.61k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 322, False: 3.10k]
  ------------------
 3886|  1.51k|            SCN_UNLIKELY_ATTR
 3887|  1.51k|            return invalid_code_point;
 3888|  1.51k|        }
 3889|       |
 3890|  3.10k|        char32_t cp{};
 3891|  3.10k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  3.10k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  3.10k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  3.10k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  3.10k|        return cp;
 3896|  4.61k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|   396k|    const auto is_trailing_code_unit = [](char ch) {
 3829|   396k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|   396k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  1.48M|{
 3699|  1.48M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  1.48M|                                          decltype(first), decltype(last)> &&
 3701|  1.48M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  1.48M|        return {first, last};
 3703|  1.48M|    }
 3704|  1.48M|    else {
 3705|  1.48M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  1.48M|                                       to_address(first), to_address(last)))};
 3707|  1.48M|    }
 3708|  1.48M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  4.49M|{
  326|  4.49M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  4.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  4.49M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  4.50M|{
  304|  4.50M|    return p;
  305|  4.50M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|   985k|{
 3730|   985k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|   985k|                      typename std::basic_string_view<CharT>::iterator,
 3732|   985k|                      decltype(it)> &&
 3733|   985k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|   985k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|   985k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|   985k|        return it;
 3736|   985k|    }
 3737|   985k|    else {
 3738|   985k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|   985k|    }
 3740|   985k|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  5.05k|{
 8867|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.05k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.05k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5395|  10.1k|{
 5396|  10.1k|    detail::check_scan_arg_types<Args...>();
 5397|  10.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  10.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5134|  10.1k|{
 5135|  10.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  10.1k|                  "Scan argument types must be default constructible");
 5137|  10.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  10.1k|                  "Scan argument types must be Destructible");
 5139|  10.1k|    static_assert(
 5140|  10.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  10.1k|        "Scan argument types must not be references");
 5142|  10.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5348|  10.1k|    {
 5349|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  10.1k|    {
 5360|  10.1k|        return {detail::make_arg<
 5361|  10.1k|            kind, Context,
 5362|  10.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  10.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  10.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5169|  10.1k|{
 5170|  10.1k|    return make_value<Context>(value).ref_value;
 5171|  10.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5119|  10.1k|{
 5120|  10.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  10.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  10.1k|                                  needs_context_tag>) {
 5124|  10.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  10.1k|    }
 5126|  10.1k|    else {
 5127|  10.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  10.1k|            value, context_tag<Context>{}));
 5129|  10.1k|    }
 5130|  10.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4987|  10.1k|    {
 4988|  10.1k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (4988:23): [Folded - Ignored]
  |  Branch (4988:23): [Folded - Ignored]
  ------------------
 4989|  10.1k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (4989:23): [Folded - Ignored]
  ------------------
 4990|  10.1k|            return val;
 4991|  10.1k|        }
 4992|  10.1k|        else if constexpr (is_type_disabled<char_type>) {
 4993|  10.1k|            return unscannable_disabled{val};
 4994|  10.1k|        }
 4995|  10.1k|        else {
 4996|  10.1k|            SCN_UNUSED(val);
 4997|  10.1k|            return unscannable_char{};
 4998|  10.1k|        }
 4999|  10.1k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5088|  10.1k|{
 5089|  10.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  10.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  10.1k|    constexpr bool scannable_char =
 5093|  10.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  10.1k|    static_assert(scannable_char,
 5095|  10.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  10.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  10.1k|    constexpr bool scannable_const =
 5099|  10.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  10.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  10.1k|    constexpr bool scannable_disabled =
 5103|  10.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  10.1k|    static_assert(scannable_disabled,
 5105|  10.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  10.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  10.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  10.1k|    static_assert(
 5110|  10.1k|        scannable,
 5111|  10.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  10.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  10.1k|    return arg_value{arg};
 5115|  10.1k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4901|  10.1k|    {
 4902|  10.1k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  45.5k|{
 8654|  45.5k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  45.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  45.5k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|  45.5k|{
 8591|  45.5k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  45.5k|    auto result = vscan_impl(buffer, format, args);
 8594|  45.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44.0k, False: 1.49k]
  |  |  ------------------
  ------------------
 8595|  44.0k|        return unexpected(result.error());
 8596|  44.0k|    }
 8597|  1.49k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  45.5k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4719|  91.0k|{
 4720|  91.0k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  91.0k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  91.0k|                  "\n"
 4724|  91.0k|                  "Unsupported range type given as input to a scanning "
 4725|  91.0k|                  "function.\n"
 4726|  91.0k|                  "A range needs to have a character type (value type) "
 4727|  91.0k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  91.0k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  91.0k|                  "to be included.\n"
 4730|  91.0k|                  "See the scnlib documentation for more details.");
 4731|  91.0k|    static_assert(
 4732|  91.0k|        !std::is_same_v<T, custom_char_traits>,
 4733|  91.0k|        "\n"
 4734|  91.0k|        "Unsupported range type given as input to a scanning "
 4735|  91.0k|        "function.\n"
 4736|  91.0k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  91.0k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  91.0k|        "not supported.");
 4739|  91.0k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  91.0k|                  "\n"
 4741|  91.0k|                  "Unsupported range type given as input to a scanning "
 4742|  91.0k|                  "function.\n"
 4743|  91.0k|                  "file_marker_found cannot be used as an "
 4744|  91.0k|                  "source range type to scn::scan.\n"
 4745|  91.0k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  91.0k|                  "and do not provide an explicit source range, "
 4747|  91.0k|                  "or use scn::scan with a FILE* directly.");
 4748|  91.0k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  91.0k|                  "\n"
 4750|  91.0k|                  "Unsupported range type given as input to a scanning "
 4751|  91.0k|                  "function.\n"
 4752|  91.0k|                  "In order to be scannable, a range needs to satisfy "
 4753|  91.0k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  91.0k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  91.0k|                  "\n"
 4756|  91.0k|                  "Unsupported range type given as input to a scanning "
 4757|  91.0k|                  "function.\n"
 4758|  91.0k|                  "A range needs to model forward_range and have a valid "
 4759|  91.0k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  91.0k|                  "Examples of scannable ranges are std::string, "
 4761|  91.0k|                  "std::string_view, "
 4762|  91.0k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  91.0k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  91.0k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  91.0k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|  91.0k|{
 4612|  91.0k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|  91.0k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|  91.0k|    }
 4616|  91.0k|    else {
 4617|  91.0k|        return invalid_char_type{};
 4618|  91.0k|    }
 4619|  91.0k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|   276k|    {
 1598|   276k|        return has_value();
 1599|   276k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|   552k|    {
  485|   552k|        return m_has_value;
  486|   552k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   272k|    {
 1604|   272k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   272k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   272k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   272k|        return this->get_unexpected().error();
 1606|   272k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   272k|    {
  468|   272k|        return m_unexpected;
  469|   272k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  1.62M|    {
  361|  1.62M|        return m_unexpected;
  362|  1.62M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|   916k|    {
  347|   916k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   916k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   916k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  88.0k|    {
 1476|  88.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  88.0k|    {
  447|  88.0k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|   950k|    {
  356|   950k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   950k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   950k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  91.0k|    {
 1177|  91.0k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  2.98k|{
 5923|  2.98k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  2.98k|                      ranges::iterator_t<SourceRange>>) {
 5925|  2.98k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  2.98k|    }
 5927|  2.98k|    else {
 5928|  2.98k|        auto it = ranges::begin(source);
 5929|  2.98k|        while (n > 0) {
 5930|  2.98k|            --n;
 5931|  2.98k|            ++it;
 5932|  2.98k|        }
 5933|  2.98k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  2.98k|    }
 5935|  2.98k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.98k|    {
 2724|  2.98k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.98k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.98k|    {
 2705|  2.98k|        return decay_copy(t.begin());
 2706|  2.98k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  48.7k|{
 1949|  48.7k|    return SCN_FWD(t);
  ------------------
  |  |  930|  48.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  48.7k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5909|  2.98k|{
 5910|  2.98k|    return ranges::end(source);
 5911|  2.98k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.98k|    {
 2781|  2.98k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.98k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.98k|    {
 2763|  2.98k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.98k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|   541k|    {
 3316|   541k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  4.07k|    {
 1653|  4.07k|        return value();
 1654|  4.07k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  4.07k|    {
 1627|  4.07k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.07k|        return this->get_value();
 1629|  4.07k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  4.07k|    {
  451|  4.07k|        return m_value;
  452|  4.07k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  2.98k|    {
 1430|  2.98k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  2.98k|    {
  437|  2.98k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7974|  10.1k|    {
 7975|  10.1k|        return m_str;
 7976|  10.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  10.1k|    {
 5426|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5378|  10.1k|    {
 5379|  10.1k|        return m_argptrs;
 5380|  10.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|  91.0k|    {
 5478|  91.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  10.1k|{
 8820|  10.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.90k, False: 206]
  |  |  ------------------
  ------------------
 8821|  9.90k|        return unexpected(result.error());
 8822|  9.90k|    }
 8823|    206|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    206|    static_cast<    \
  |  |  929|    206|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    206|    static_cast<    \
  |  |  929|    206|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  10.1k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  91.0k|    {
 1598|  91.0k|        return has_value();
 1599|  91.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   182k|    {
  485|   182k|        return m_has_value;
  486|   182k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  88.0k|    {
 1604|  88.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  88.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  88.0k|        return this->get_unexpected().error();
 1606|  88.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  88.0k|    {
  468|  88.0k|        return m_unexpected;
  469|  88.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  9.90k|    {
 1476|  9.90k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  9.90k|    {
  447|  9.90k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.1k|    {
 1177|  10.1k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  2.98k|    {
 1653|  2.98k|        return value();
 1654|  2.98k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  2.98k|    {
 1627|  2.98k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.98k|        return this->get_value();
 1629|  2.98k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.98k|    {
  451|  2.98k|        return m_value;
  452|  2.98k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5829|    206|    {
 5830|    206|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|  2.98k|    {
 5681|  2.98k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5615|    206|    {
 5616|    206|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|    206|    {
 1430|    206|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|    206|    {
  437|    206|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5373|  10.1k|    {
 5374|  10.1k|        return m_args;
 5375|  10.1k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  91.0k|{
 7691|  91.0k|    return s;
 7692|  91.0k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  91.0k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  10.1k|    {
 7971|  10.1k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  5.05k|{
 8934|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.05k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.05k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  45.5k|{
 8672|  45.5k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  45.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  45.5k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|  45.5k|{
 8607|  45.5k|#if !SCN_DISABLE_LOCALE
 8608|  45.5k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  45.5k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  45.5k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  45.5k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  45.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44.0k, False: 1.49k]
  |  |  ------------------
  ------------------
 8615|  44.0k|        return unexpected(result.error());
 8616|  44.0k|    }
 8617|  1.49k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  45.5k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  5.05k|{
 8867|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.05k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.05k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5395|  10.1k|{
 5396|  10.1k|    detail::check_scan_arg_types<Args...>();
 5397|  10.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  10.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5134|  30.3k|{
 5135|  30.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  30.3k|                  "Scan argument types must be default constructible");
 5137|  30.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  30.3k|                  "Scan argument types must be Destructible");
 5139|  30.3k|    static_assert(
 5140|  30.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  30.3k|        "Scan argument types must not be references");
 5142|  30.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5348|  10.1k|    {
 5349|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  10.1k|    {
 5360|  10.1k|        return {detail::make_arg<
 5361|  10.1k|            kind, Context,
 5362|  10.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  10.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  10.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  10.1k|{
 5170|  10.1k|    return make_value<Context>(value).ref_value;
 5171|  10.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5119|  10.1k|{
 5120|  10.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  10.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  10.1k|                                  needs_context_tag>) {
 5124|  10.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  10.1k|    }
 5126|  10.1k|    else {
 5127|  10.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  10.1k|            value, context_tag<Context>{}));
 5129|  10.1k|    }
 5130|  10.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4958|  10.1k|    {                                                                        \
 4959|  10.1k|        return val;                                                          \
 4960|  10.1k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5088|  30.3k|{
 5089|  30.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  30.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  30.3k|    constexpr bool scannable_char =
 5093|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  30.3k|    static_assert(scannable_char,
 5095|  30.3k|                  "Cannot scan an argument of an unsupported character "
 5096|  30.3k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  30.3k|    constexpr bool scannable_const =
 5099|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  30.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  30.3k|    constexpr bool scannable_disabled =
 5103|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  30.3k|    static_assert(scannable_disabled,
 5105|  30.3k|                  "Cannot scan an argument that has been disabled by "
 5106|  30.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  30.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  30.3k|    static_assert(
 5110|  30.3k|        scannable,
 5111|  30.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  30.3k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  30.3k|    return arg_value{arg};
 5115|  30.3k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4901|  30.3k|    {
 4902|  30.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7974|  10.1k|    {
 7975|  10.1k|        return m_str;
 7976|  10.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  10.1k|    {
 5426|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5378|  10.1k|    {
 5379|  10.1k|        return m_argptrs;
 5380|  10.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  10.1k|{
 8820|  10.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.1k, False: 0]
  |  |  ------------------
  ------------------
 8821|  10.1k|        return unexpected(result.error());
 8822|  10.1k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  10.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  10.1k|    {
 1476|  10.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  10.1k|    {
  447|  10.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.1k|    {
 1177|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5373|  10.1k|    {
 5374|  10.1k|        return m_args;
 5375|  10.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  10.1k|    {
 7971|  10.1k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  5.05k|{
 8934|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.05k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.05k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  5.05k|{
 8867|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.05k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.05k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5395|  10.1k|{
 5396|  10.1k|    detail::check_scan_arg_types<Args...>();
 5397|  10.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  10.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5134|  30.3k|{
 5135|  30.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  30.3k|                  "Scan argument types must be default constructible");
 5137|  30.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  30.3k|                  "Scan argument types must be Destructible");
 5139|  30.3k|    static_assert(
 5140|  30.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  30.3k|        "Scan argument types must not be references");
 5142|  30.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5348|  10.1k|    {
 5349|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  10.1k|    {
 5360|  10.1k|        return {detail::make_arg<
 5361|  10.1k|            kind, Context,
 5362|  10.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  10.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  10.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  10.1k|{
 5170|  10.1k|    return make_value<Context>(value).ref_value;
 5171|  10.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5119|  10.1k|{
 5120|  10.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  10.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  10.1k|                                  needs_context_tag>) {
 5124|  10.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  10.1k|    }
 5126|  10.1k|    else {
 5127|  10.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  10.1k|            value, context_tag<Context>{}));
 5129|  10.1k|    }
 5130|  10.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4958|  10.1k|    {                                                                        \
 4959|  10.1k|        return val;                                                          \
 4960|  10.1k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5088|  30.3k|{
 5089|  30.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  30.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  30.3k|    constexpr bool scannable_char =
 5093|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  30.3k|    static_assert(scannable_char,
 5095|  30.3k|                  "Cannot scan an argument of an unsupported character "
 5096|  30.3k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  30.3k|    constexpr bool scannable_const =
 5099|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  30.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  30.3k|    constexpr bool scannable_disabled =
 5103|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  30.3k|    static_assert(scannable_disabled,
 5105|  30.3k|                  "Cannot scan an argument that has been disabled by "
 5106|  30.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  30.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  30.3k|    static_assert(
 5110|  30.3k|        scannable,
 5111|  30.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  30.3k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  30.3k|    return arg_value{arg};
 5115|  30.3k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4901|  30.3k|    {
 4902|  30.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7974|  10.1k|    {
 7975|  10.1k|        return m_str;
 7976|  10.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  10.1k|    {
 5426|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5378|  10.1k|    {
 5379|  10.1k|        return m_argptrs;
 5380|  10.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  10.1k|{
 8820|  10.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.1k, False: 0]
  |  |  ------------------
  ------------------
 8821|  10.1k|        return unexpected(result.error());
 8822|  10.1k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  10.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  10.1k|    {
 1476|  10.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  10.1k|    {
  447|  10.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.1k|    {
 1177|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5373|  10.1k|    {
 5374|  10.1k|        return m_args;
 5375|  10.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  10.1k|    {
 7971|  10.1k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  5.05k|{
 8934|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.05k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.05k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  5.05k|{
 8867|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.05k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.05k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|  10.1k|{
 5396|  10.1k|    detail::check_scan_arg_types<Args...>();
 5397|  10.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  10.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  30.3k|{
 5135|  30.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  30.3k|                  "Scan argument types must be default constructible");
 5137|  30.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  30.3k|                  "Scan argument types must be Destructible");
 5139|  30.3k|    static_assert(
 5140|  30.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  30.3k|        "Scan argument types must not be references");
 5142|  30.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|  10.1k|    {
 5349|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  10.1k|    {
 5360|  10.1k|        return {detail::make_arg<
 5361|  10.1k|            kind, Context,
 5362|  10.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  10.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  10.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  10.1k|{
 5170|  10.1k|    return make_value<Context>(value).ref_value;
 5171|  10.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  10.1k|{
 5120|  10.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  10.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  10.1k|                                  needs_context_tag>) {
 5124|  10.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  10.1k|    }
 5126|  10.1k|    else {
 5127|  10.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  10.1k|            value, context_tag<Context>{}));
 5129|  10.1k|    }
 5130|  10.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  10.1k|    {                                                                        \
 4959|  10.1k|        return val;                                                          \
 4960|  10.1k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  30.3k|{
 5089|  30.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  30.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  30.3k|    constexpr bool scannable_char =
 5093|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  30.3k|    static_assert(scannable_char,
 5095|  30.3k|                  "Cannot scan an argument of an unsupported character "
 5096|  30.3k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  30.3k|    constexpr bool scannable_const =
 5099|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  30.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  30.3k|    constexpr bool scannable_disabled =
 5103|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  30.3k|    static_assert(scannable_disabled,
 5105|  30.3k|                  "Cannot scan an argument that has been disabled by "
 5106|  30.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  30.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  30.3k|    static_assert(
 5110|  30.3k|        scannable,
 5111|  30.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  30.3k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  30.3k|    return arg_value{arg};
 5115|  30.3k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  30.3k|    {
 4902|  30.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7974|  10.1k|    {
 7975|  10.1k|        return m_str;
 7976|  10.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  10.1k|    {
 5426|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|  10.1k|    {
 5379|  10.1k|        return m_argptrs;
 5380|  10.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  10.1k|{
 8820|  10.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.1k, False: 0]
  |  |  ------------------
  ------------------
 8821|  10.1k|        return unexpected(result.error());
 8822|  10.1k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  10.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  10.1k|    {
 1476|  10.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  10.1k|    {
  447|  10.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.1k|    {
 1177|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|  10.1k|    {
 5374|  10.1k|        return m_args;
 5375|  10.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  10.1k|    {
 7971|  10.1k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  5.05k|{
 8934|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.05k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.05k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  5.05k|{
 8867|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.05k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.05k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5395|  10.1k|{
 5396|  10.1k|    detail::check_scan_arg_types<Args...>();
 5397|  10.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  10.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5134|  30.3k|{
 5135|  30.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  30.3k|                  "Scan argument types must be default constructible");
 5137|  30.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  30.3k|                  "Scan argument types must be Destructible");
 5139|  30.3k|    static_assert(
 5140|  30.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  30.3k|        "Scan argument types must not be references");
 5142|  30.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5348|  10.1k|    {
 5349|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  10.1k|    {
 5360|  10.1k|        return {detail::make_arg<
 5361|  10.1k|            kind, Context,
 5362|  10.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  10.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  10.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  10.1k|{
 5170|  10.1k|    return make_value<Context>(value).ref_value;
 5171|  10.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5119|  10.1k|{
 5120|  10.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  10.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  10.1k|                                  needs_context_tag>) {
 5124|  10.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  10.1k|    }
 5126|  10.1k|    else {
 5127|  10.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  10.1k|            value, context_tag<Context>{}));
 5129|  10.1k|    }
 5130|  10.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4958|  10.1k|    {                                                                        \
 4959|  10.1k|        return val;                                                          \
 4960|  10.1k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5088|  30.3k|{
 5089|  30.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  30.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  30.3k|    constexpr bool scannable_char =
 5093|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  30.3k|    static_assert(scannable_char,
 5095|  30.3k|                  "Cannot scan an argument of an unsupported character "
 5096|  30.3k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  30.3k|    constexpr bool scannable_const =
 5099|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  30.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  30.3k|    constexpr bool scannable_disabled =
 5103|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  30.3k|    static_assert(scannable_disabled,
 5105|  30.3k|                  "Cannot scan an argument that has been disabled by "
 5106|  30.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  30.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  30.3k|    static_assert(
 5110|  30.3k|        scannable,
 5111|  30.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  30.3k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  30.3k|    return arg_value{arg};
 5115|  30.3k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4901|  30.3k|    {
 4902|  30.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7974|  10.1k|    {
 7975|  10.1k|        return m_str;
 7976|  10.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  10.1k|    {
 5426|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5378|  10.1k|    {
 5379|  10.1k|        return m_argptrs;
 5380|  10.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  10.1k|{
 8820|  10.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.1k, False: 0]
  |  |  ------------------
  ------------------
 8821|  10.1k|        return unexpected(result.error());
 8822|  10.1k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  10.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  10.1k|    {
 1476|  10.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  10.1k|    {
  447|  10.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.1k|    {
 1177|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5373|  10.1k|    {
 5374|  10.1k|        return m_args;
 5375|  10.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  10.1k|    {
 7971|  10.1k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  5.05k|{
 8934|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.05k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.05k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8866|  5.05k|{
 8867|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.05k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.05k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5395|  10.1k|{
 5396|  10.1k|    detail::check_scan_arg_types<Args...>();
 5397|  10.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  10.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5134|  30.3k|{
 5135|  30.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  30.3k|                  "Scan argument types must be default constructible");
 5137|  30.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  30.3k|                  "Scan argument types must be Destructible");
 5139|  30.3k|    static_assert(
 5140|  30.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  30.3k|        "Scan argument types must not be references");
 5142|  30.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5348|  10.1k|    {
 5349|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  10.1k|    {
 5360|  10.1k|        return {detail::make_arg<
 5361|  10.1k|            kind, Context,
 5362|  10.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  10.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  10.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  10.1k|{
 5170|  10.1k|    return make_value<Context>(value).ref_value;
 5171|  10.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5119|  10.1k|{
 5120|  10.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  10.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  10.1k|                                  needs_context_tag>) {
 5124|  10.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  10.1k|    }
 5126|  10.1k|    else {
 5127|  10.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  10.1k|            value, context_tag<Context>{}));
 5129|  10.1k|    }
 5130|  10.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4958|  10.1k|    {                                                                        \
 4959|  10.1k|        return val;                                                          \
 4960|  10.1k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5088|  30.3k|{
 5089|  30.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  30.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  30.3k|    constexpr bool scannable_char =
 5093|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  30.3k|    static_assert(scannable_char,
 5095|  30.3k|                  "Cannot scan an argument of an unsupported character "
 5096|  30.3k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  30.3k|    constexpr bool scannable_const =
 5099|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  30.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  30.3k|    constexpr bool scannable_disabled =
 5103|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  30.3k|    static_assert(scannable_disabled,
 5105|  30.3k|                  "Cannot scan an argument that has been disabled by "
 5106|  30.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  30.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  30.3k|    static_assert(
 5110|  30.3k|        scannable,
 5111|  30.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  30.3k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  30.3k|    return arg_value{arg};
 5115|  30.3k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4901|  30.3k|    {
 4902|  30.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7974|  10.1k|    {
 7975|  10.1k|        return m_str;
 7976|  10.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  10.1k|    {
 5426|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5378|  10.1k|    {
 5379|  10.1k|        return m_argptrs;
 5380|  10.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  10.1k|{
 8820|  10.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.1k, False: 0]
  |  |  ------------------
  ------------------
 8821|  10.1k|        return unexpected(result.error());
 8822|  10.1k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  10.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  10.1k|    {
 1476|  10.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  10.1k|    {
  447|  10.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.1k|    {
 1177|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5373|  10.1k|    {
 5374|  10.1k|        return m_args;
 5375|  10.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  10.1k|    {
 7971|  10.1k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8933|  5.05k|{
 8934|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.05k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.05k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8866|  5.05k|{
 8867|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.05k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.05k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  10.1k|{
 5396|  10.1k|    detail::check_scan_arg_types<Args...>();
 5397|  10.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  10.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|  30.3k|{
 5135|  30.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  30.3k|                  "Scan argument types must be default constructible");
 5137|  30.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  30.3k|                  "Scan argument types must be Destructible");
 5139|  30.3k|    static_assert(
 5140|  30.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  30.3k|        "Scan argument types must not be references");
 5142|  30.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  10.1k|    {
 5349|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  10.1k|    {
 5360|  10.1k|        return {detail::make_arg<
 5361|  10.1k|            kind, Context,
 5362|  10.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  10.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  10.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  10.1k|{
 5170|  10.1k|    return make_value<Context>(value).ref_value;
 5171|  10.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  10.1k|{
 5120|  10.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  10.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  10.1k|                                  needs_context_tag>) {
 5124|  10.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  10.1k|    }
 5126|  10.1k|    else {
 5127|  10.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  10.1k|            value, context_tag<Context>{}));
 5129|  10.1k|    }
 5130|  10.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  10.1k|    {                                                                        \
 4959|  10.1k|        return val;                                                          \
 4960|  10.1k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|  30.3k|{
 5089|  30.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  30.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  30.3k|    constexpr bool scannable_char =
 5093|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  30.3k|    static_assert(scannable_char,
 5095|  30.3k|                  "Cannot scan an argument of an unsupported character "
 5096|  30.3k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  30.3k|    constexpr bool scannable_const =
 5099|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  30.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  30.3k|    constexpr bool scannable_disabled =
 5103|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  30.3k|    static_assert(scannable_disabled,
 5105|  30.3k|                  "Cannot scan an argument that has been disabled by "
 5106|  30.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  30.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  30.3k|    static_assert(
 5110|  30.3k|        scannable,
 5111|  30.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  30.3k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  30.3k|    return arg_value{arg};
 5115|  30.3k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4901|  30.3k|    {
 4902|  30.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  10.1k|    {
 7975|  10.1k|        return m_str;
 7976|  10.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  10.1k|    {
 5426|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  10.1k|    {
 5379|  10.1k|        return m_argptrs;
 5380|  10.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  10.1k|{
 8820|  10.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.18k, False: 926]
  |  |  ------------------
  ------------------
 8821|  9.18k|        return unexpected(result.error());
 8822|  9.18k|    }
 8823|    926|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    926|    static_cast<    \
  |  |  929|    926|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    926|    static_cast<    \
  |  |  929|    926|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  10.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  9.18k|    {
 1476|  9.18k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  9.18k|    {
  626|  9.18k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  9.18k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  9.18k|    {
  689|  9.18k|        scn::detail::construct_at(unexpected_ptr(),
  690|  9.18k|                                  std::forward<Args>(args)...);
  691|  9.18k|        m_has_value = false;
  692|  9.18k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  58.2k|{
  392|  58.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  58.2k|        T(std::forward<Args>(args)...);
  394|  58.2k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  18.3k|    {
  718|  18.3k|        return reinterpret_cast<unexpected<E>*>(
  719|  18.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  18.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  18.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.1k|    {
 1177|  10.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    926|    {
 5830|    926|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.26k|    {
 5616|  1.26k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    926|    {
 1430|    926|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    926|    {
  616|    926|        construct(std::forward<Args>(args)...);
  617|    926|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    926|    {
  682|    926|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    926|        m_has_value = true;
  684|    926|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    926|{
  392|    926|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    926|        T(std::forward<Args>(args)...);
  394|    926|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|    926|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.85k|    {
  706|  1.85k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.85k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.85k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|  1.85k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  10.1k|    {
 5374|  10.1k|        return m_args;
 5375|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  10.1k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  10.1k|    {
 7971|  10.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  10.1k|    {
  631|  10.1k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 926, False: 9.18k]
  ------------------
  632|    926|            destroy_value();
  633|    926|        }
  634|  9.18k|        else {
  635|  9.18k|            destroy_unexpected();
  636|  9.18k|        }
  637|  10.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  10.1k|    {
  675|  10.1k|        return m_has_value;
  676|  10.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    926|    {
  696|    926|        scn::detail::destroy_at(value_ptr());
  697|    926|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    926|{
  398|    926|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    926|        for (auto& elem : *p) {
  400|    926|            scn::detail::destroy_at(&elem);
  401|    926|        }
  402|    926|    }
  403|    926|    else {
  404|    926|        p->~T();
  405|    926|    }
  406|    926|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  9.18k|    {
  700|  9.18k|        scn::detail::destroy_at(unexpected_ptr());
  701|  9.18k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  58.2k|{
  398|  58.2k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  58.2k|        for (auto& elem : *p) {
  400|  58.2k|            scn::detail::destroy_at(&elem);
  401|  58.2k|        }
  402|  58.2k|    }
  403|  58.2k|    else {
  404|  58.2k|        p->~T();
  405|  58.2k|    }
  406|  58.2k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8933|  5.05k|{
 8934|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.05k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.05k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8866|  5.05k|{
 8867|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.05k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.05k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  10.1k|{
 5396|  10.1k|    detail::check_scan_arg_types<Args...>();
 5397|  10.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  10.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|  30.3k|{
 5135|  30.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  30.3k|                  "Scan argument types must be default constructible");
 5137|  30.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  30.3k|                  "Scan argument types must be Destructible");
 5139|  30.3k|    static_assert(
 5140|  30.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  30.3k|        "Scan argument types must not be references");
 5142|  30.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  10.1k|    {
 5349|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  10.1k|    {
 5360|  10.1k|        return {detail::make_arg<
 5361|  10.1k|            kind, Context,
 5362|  10.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  10.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  10.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  10.1k|{
 5170|  10.1k|    return make_value<Context>(value).ref_value;
 5171|  10.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  10.1k|{
 5120|  10.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  10.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  10.1k|                                  needs_context_tag>) {
 5124|  10.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  10.1k|    }
 5126|  10.1k|    else {
 5127|  10.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  10.1k|            value, context_tag<Context>{}));
 5129|  10.1k|    }
 5130|  10.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  10.1k|    {                                                                        \
 4959|  10.1k|        return val;                                                          \
 4960|  10.1k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|  30.3k|{
 5089|  30.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  30.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  30.3k|    constexpr bool scannable_char =
 5093|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  30.3k|    static_assert(scannable_char,
 5095|  30.3k|                  "Cannot scan an argument of an unsupported character "
 5096|  30.3k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  30.3k|    constexpr bool scannable_const =
 5099|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  30.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  30.3k|    constexpr bool scannable_disabled =
 5103|  30.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  30.3k|    static_assert(scannable_disabled,
 5105|  30.3k|                  "Cannot scan an argument that has been disabled by "
 5106|  30.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  30.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  30.3k|    static_assert(
 5110|  30.3k|        scannable,
 5111|  30.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  30.3k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  30.3k|    return arg_value{arg};
 5115|  30.3k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4901|  30.3k|    {
 4902|  30.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  10.1k|    {
 7975|  10.1k|        return m_str;
 7976|  10.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  10.1k|    {
 5426|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  10.1k|    {
 5379|  10.1k|        return m_argptrs;
 5380|  10.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  10.1k|{
 8820|  10.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.18k, False: 926]
  |  |  ------------------
  ------------------
 8821|  9.18k|        return unexpected(result.error());
 8822|  9.18k|    }
 8823|    926|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    926|    static_cast<    \
  |  |  929|    926|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    926|    static_cast<    \
  |  |  929|    926|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  10.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  9.18k|    {
 1476|  9.18k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  9.18k|    {
  626|  9.18k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  9.18k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  9.18k|    {
  689|  9.18k|        scn::detail::construct_at(unexpected_ptr(),
  690|  9.18k|                                  std::forward<Args>(args)...);
  691|  9.18k|        m_has_value = false;
  692|  9.18k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  18.3k|    {
  718|  18.3k|        return reinterpret_cast<unexpected<E>*>(
  719|  18.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  18.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  18.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.1k|    {
 1177|  10.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    926|    {
 5830|    926|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.26k|    {
 5616|  1.26k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    926|    {
 1430|    926|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    926|    {
  616|    926|        construct(std::forward<Args>(args)...);
  617|    926|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    926|    {
  682|    926|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    926|        m_has_value = true;
  684|    926|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    926|{
  392|    926|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    926|        T(std::forward<Args>(args)...);
  394|    926|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|    926|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.85k|    {
  706|  1.85k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.85k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.85k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  1.85k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  10.1k|    {
 5374|  10.1k|        return m_args;
 5375|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  10.1k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  10.1k|    {
 7971|  10.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  10.1k|    {
  631|  10.1k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 926, False: 9.18k]
  ------------------
  632|    926|            destroy_value();
  633|    926|        }
  634|  9.18k|        else {
  635|  9.18k|            destroy_unexpected();
  636|  9.18k|        }
  637|  10.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  10.1k|    {
  675|  10.1k|        return m_has_value;
  676|  10.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    926|    {
  696|    926|        scn::detail::destroy_at(value_ptr());
  697|    926|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    926|{
  398|    926|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    926|        for (auto& elem : *p) {
  400|    926|            scn::detail::destroy_at(&elem);
  401|    926|        }
  402|    926|    }
  403|    926|    else {
  404|    926|        p->~T();
  405|    926|    }
  406|    926|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  9.18k|    {
  700|  9.18k|        scn::detail::destroy_at(unexpected_ptr());
  701|  9.18k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8933|  5.05k|{
 8934|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.05k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.05k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  5.05k|{
 8867|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  5.05k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  5.05k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|  10.1k|{
 5396|  10.1k|    detail::check_scan_arg_types<Args...>();
 5397|  10.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  10.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|  10.1k|{
 5135|  10.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  10.1k|                  "Scan argument types must be default constructible");
 5137|  10.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  10.1k|                  "Scan argument types must be Destructible");
 5139|  10.1k|    static_assert(
 5140|  10.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  10.1k|        "Scan argument types must not be references");
 5142|  10.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5348|  10.1k|    {
 5349|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  10.1k|    {
 5360|  10.1k|        return {detail::make_arg<
 5361|  10.1k|            kind, Context,
 5362|  10.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  10.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  10.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|  10.1k|{
 5170|  10.1k|    return make_value<Context>(value).ref_value;
 5171|  10.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|  10.1k|{
 5120|  10.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  10.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  10.1k|                                  needs_context_tag>) {
 5124|  10.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  10.1k|    }
 5126|  10.1k|    else {
 5127|  10.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  10.1k|            value, context_tag<Context>{}));
 5129|  10.1k|    }
 5130|  10.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|  10.1k|    {                                                                        \
 4959|  10.1k|        return val;                                                          \
 4960|  10.1k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|  10.1k|{
 5089|  10.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  10.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  10.1k|    constexpr bool scannable_char =
 5093|  10.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  10.1k|    static_assert(scannable_char,
 5095|  10.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  10.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  10.1k|    constexpr bool scannable_const =
 5099|  10.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  10.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  10.1k|    constexpr bool scannable_disabled =
 5103|  10.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  10.1k|    static_assert(scannable_disabled,
 5105|  10.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  10.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  10.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  10.1k|    static_assert(
 5110|  10.1k|        scannable,
 5111|  10.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  10.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  10.1k|    return arg_value{arg};
 5115|  10.1k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4901|  10.1k|    {
 4902|  10.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7974|  10.1k|    {
 7975|  10.1k|        return m_str;
 7976|  10.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  10.1k|    {
 5426|  10.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|  10.1k|    {
 5379|  10.1k|        return m_argptrs;
 5380|  10.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  10.1k|{
 8820|  10.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.18k, False: 926]
  |  |  ------------------
  ------------------
 8821|  9.18k|        return unexpected(result.error());
 8822|  9.18k|    }
 8823|    926|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    926|    static_cast<    \
  |  |  929|    926|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    926|    static_cast<    \
  |  |  929|    926|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  10.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  9.18k|    {
 1476|  9.18k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  9.18k|    {
  447|  9.18k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.1k|    {
 1177|  10.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|    926|    {
 5830|    926|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|    926|    {
 5616|    926|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|    926|    {
 1430|    926|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|    926|    {
  437|    926|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|  10.1k|    {
 5374|  10.1k|        return m_args;
 5375|  10.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  10.1k|    {
 7971|  10.1k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  5.05k|{
 8934|  5.05k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  5.05k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  5.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  5.05k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  5.05k|    static_cast<    \
  |  |  929|  5.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  5.05k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5395|  20.2k|{
 5396|  20.2k|    detail::check_scan_arg_types<Args...>();
 5397|  20.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  20.2k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5134|  20.2k|{
 5135|  20.2k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  20.2k|                  "Scan argument types must be default constructible");
 5137|  20.2k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  20.2k|                  "Scan argument types must be Destructible");
 5139|  20.2k|    static_assert(
 5140|  20.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  20.2k|        "Scan argument types must not be references");
 5142|  20.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5348|  20.2k|    {
 5349|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  20.2k|    {
 5360|  20.2k|        return {detail::make_arg<
 5361|  20.2k|            kind, Context,
 5362|  20.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  20.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  20.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5169|  20.2k|{
 5170|  20.2k|    return make_value<Context>(value).ref_value;
 5171|  20.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5119|  20.2k|{
 5120|  20.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  20.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  20.2k|                                  needs_context_tag>) {
 5124|  20.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  20.2k|    }
 5126|  20.2k|    else {
 5127|  20.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  20.2k|            value, context_tag<Context>{}));
 5129|  20.2k|    }
 5130|  20.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4958|  20.2k|    {                                                                        \
 4959|  20.2k|        return val;                                                          \
 4960|  20.2k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5088|  20.2k|{
 5089|  20.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  20.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  20.2k|    constexpr bool scannable_char =
 5093|  20.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  20.2k|    static_assert(scannable_char,
 5095|  20.2k|                  "Cannot scan an argument of an unsupported character "
 5096|  20.2k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  20.2k|    constexpr bool scannable_const =
 5099|  20.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  20.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  20.2k|    constexpr bool scannable_disabled =
 5103|  20.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  20.2k|    static_assert(scannable_disabled,
 5105|  20.2k|                  "Cannot scan an argument that has been disabled by "
 5106|  20.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  20.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  20.2k|    static_assert(
 5110|  20.2k|        scannable,
 5111|  20.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  20.2k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  20.2k|    return arg_value{arg};
 5115|  20.2k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4901|  20.2k|    {
 4902|  20.2k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|  91.0k|{
 8591|  91.0k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  91.0k|    auto result = vscan_impl(buffer, format, args);
 8594|  91.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  91.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90.4k, False: 547]
  |  |  ------------------
  ------------------
 8595|  90.4k|        return unexpected(result.error());
 8596|  90.4k|    }
 8597|    547|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    547|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  91.0k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4719|   182k|{
 4720|   182k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   182k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   182k|                  "\n"
 4724|   182k|                  "Unsupported range type given as input to a scanning "
 4725|   182k|                  "function.\n"
 4726|   182k|                  "A range needs to have a character type (value type) "
 4727|   182k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   182k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   182k|                  "to be included.\n"
 4730|   182k|                  "See the scnlib documentation for more details.");
 4731|   182k|    static_assert(
 4732|   182k|        !std::is_same_v<T, custom_char_traits>,
 4733|   182k|        "\n"
 4734|   182k|        "Unsupported range type given as input to a scanning "
 4735|   182k|        "function.\n"
 4736|   182k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   182k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   182k|        "not supported.");
 4739|   182k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   182k|                  "\n"
 4741|   182k|                  "Unsupported range type given as input to a scanning "
 4742|   182k|                  "function.\n"
 4743|   182k|                  "file_marker_found cannot be used as an "
 4744|   182k|                  "source range type to scn::scan.\n"
 4745|   182k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   182k|                  "and do not provide an explicit source range, "
 4747|   182k|                  "or use scn::scan with a FILE* directly.");
 4748|   182k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   182k|                  "\n"
 4750|   182k|                  "Unsupported range type given as input to a scanning "
 4751|   182k|                  "function.\n"
 4752|   182k|                  "In order to be scannable, a range needs to satisfy "
 4753|   182k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   182k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   182k|                  "\n"
 4756|   182k|                  "Unsupported range type given as input to a scanning "
 4757|   182k|                  "function.\n"
 4758|   182k|                  "A range needs to model forward_range and have a valid "
 4759|   182k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   182k|                  "Examples of scannable ranges are std::string, "
 4761|   182k|                  "std::string_view, "
 4762|   182k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   182k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   182k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   182k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   182k|{
 4612|   182k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|   182k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|   182k|    }
 4616|   182k|    else {
 4617|   182k|        return invalid_char_type{};
 4618|   182k|    }
 4619|   182k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   180k|    {
 1476|   180k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   180k|    {
  447|   180k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   182k|    {
 1177|   182k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  1.09k|{
 5923|  1.09k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  1.09k|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.09k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  1.09k|    }
 5927|  1.09k|    else {
 5928|  1.09k|        auto it = ranges::begin(source);
 5929|  1.09k|        while (n > 0) {
 5930|  1.09k|            --n;
 5931|  1.09k|            ++it;
 5932|  1.09k|        }
 5933|  1.09k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  1.09k|    }
 5935|  1.09k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.09k|    {
 2724|  1.09k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.09k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.09k|    {
 2705|  1.09k|        return decay_copy(t.begin());
 2706|  1.09k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  18.0k|{
 1949|  18.0k|    return SCN_FWD(t);
  ------------------
  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  18.0k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5909|  1.09k|{
 5910|  1.09k|    return ranges::end(source);
 5911|  1.09k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.09k|    {
 2781|  1.09k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.09k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.09k|    {
 2763|  1.09k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.09k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|   300k|    {
 3316|   300k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.09k|    {
 1430|  1.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  1.09k|    {
  437|  1.09k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7974|  20.2k|    {
 7975|  20.2k|        return m_str;
 7976|  20.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  20.2k|    {
 5426|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5378|  20.2k|    {
 5379|  20.2k|        return m_argptrs;
 5380|  20.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   182k|    {
 5478|   182k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  20.2k|{
 8820|  20.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.1k, False: 92]
  |  |  ------------------
  ------------------
 8821|  20.1k|        return unexpected(result.error());
 8822|  20.1k|    }
 8823|     92|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     92|    static_cast<    \
  |  |  929|     92|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     92|    static_cast<    \
  |  |  929|     92|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  20.2k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   182k|    {
 1598|   182k|        return has_value();
 1599|   182k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   364k|    {
  485|   364k|        return m_has_value;
  486|   364k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   180k|    {
 1604|   180k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   180k|        return this->get_unexpected().error();
 1606|   180k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   180k|    {
  468|   180k|        return m_unexpected;
  469|   180k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  20.1k|    {
 1476|  20.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  20.1k|    {
  447|  20.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  20.2k|    {
 1177|  20.2k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  1.09k|    {
 1653|  1.09k|        return value();
 1654|  1.09k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.09k|    {
 1627|  1.09k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.09k|        return this->get_value();
 1629|  1.09k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.09k|    {
  451|  1.09k|        return m_value;
  452|  1.09k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5829|     92|    {
 5830|     92|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|  1.09k|    {
 5681|  1.09k|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5615|     92|    {
 5616|     92|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|     92|    {
 1430|     92|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|     92|    {
  437|     92|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5373|  20.2k|    {
 5374|  20.2k|        return m_args;
 5375|  20.2k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   182k|{
 7696|   182k|    return s;
 7697|   182k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   182k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  20.2k|    {
 7971|  20.2k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|  91.0k|{
 8607|  91.0k|#if !SCN_DISABLE_LOCALE
 8608|  91.0k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  91.0k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  91.0k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  91.0k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  91.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  91.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90.4k, False: 547]
  |  |  ------------------
  ------------------
 8615|  90.4k|        return unexpected(result.error());
 8616|  90.4k|    }
 8617|    547|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    547|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  91.0k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5395|  20.2k|{
 5396|  20.2k|    detail::check_scan_arg_types<Args...>();
 5397|  20.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  20.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5348|  20.2k|    {
 5349|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  20.2k|    {
 5360|  20.2k|        return {detail::make_arg<
 5361|  20.2k|            kind, Context,
 5362|  20.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  20.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  20.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  20.2k|{
 5170|  20.2k|    return make_value<Context>(value).ref_value;
 5171|  20.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5119|  20.2k|{
 5120|  20.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  20.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  20.2k|                                  needs_context_tag>) {
 5124|  20.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  20.2k|    }
 5126|  20.2k|    else {
 5127|  20.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  20.2k|            value, context_tag<Context>{}));
 5129|  20.2k|    }
 5130|  20.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4958|  20.2k|    {                                                                        \
 4959|  20.2k|        return val;                                                          \
 4960|  20.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7974|  20.2k|    {
 7975|  20.2k|        return m_str;
 7976|  20.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  20.2k|    {
 5426|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5378|  20.2k|    {
 5379|  20.2k|        return m_argptrs;
 5380|  20.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  20.2k|{
 8820|  20.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.2k, False: 0]
  |  |  ------------------
  ------------------
 8821|  20.2k|        return unexpected(result.error());
 8822|  20.2k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  20.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  20.2k|    {
 1476|  20.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  20.2k|    {
  447|  20.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  20.2k|    {
 1177|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5373|  20.2k|    {
 5374|  20.2k|        return m_args;
 5375|  20.2k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  20.2k|    {
 7971|  20.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5395|  20.2k|{
 5396|  20.2k|    detail::check_scan_arg_types<Args...>();
 5397|  20.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  20.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5348|  20.2k|    {
 5349|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  20.2k|    {
 5360|  20.2k|        return {detail::make_arg<
 5361|  20.2k|            kind, Context,
 5362|  20.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  20.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  20.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  20.2k|{
 5170|  20.2k|    return make_value<Context>(value).ref_value;
 5171|  20.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5119|  20.2k|{
 5120|  20.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  20.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  20.2k|                                  needs_context_tag>) {
 5124|  20.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  20.2k|    }
 5126|  20.2k|    else {
 5127|  20.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  20.2k|            value, context_tag<Context>{}));
 5129|  20.2k|    }
 5130|  20.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4958|  20.2k|    {                                                                        \
 4959|  20.2k|        return val;                                                          \
 4960|  20.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7974|  20.2k|    {
 7975|  20.2k|        return m_str;
 7976|  20.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  20.2k|    {
 5426|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5378|  20.2k|    {
 5379|  20.2k|        return m_argptrs;
 5380|  20.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  20.2k|{
 8820|  20.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.2k, False: 0]
  |  |  ------------------
  ------------------
 8821|  20.2k|        return unexpected(result.error());
 8822|  20.2k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  20.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  20.2k|    {
 1476|  20.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  20.2k|    {
  447|  20.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  20.2k|    {
 1177|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5373|  20.2k|    {
 5374|  20.2k|        return m_args;
 5375|  20.2k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  20.2k|    {
 7971|  20.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|  20.2k|{
 5396|  20.2k|    detail::check_scan_arg_types<Args...>();
 5397|  20.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  20.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|  20.2k|    {
 5349|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  20.2k|    {
 5360|  20.2k|        return {detail::make_arg<
 5361|  20.2k|            kind, Context,
 5362|  20.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  20.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  20.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  20.2k|{
 5170|  20.2k|    return make_value<Context>(value).ref_value;
 5171|  20.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|  20.2k|{
 5120|  20.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  20.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  20.2k|                                  needs_context_tag>) {
 5124|  20.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  20.2k|    }
 5126|  20.2k|    else {
 5127|  20.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  20.2k|            value, context_tag<Context>{}));
 5129|  20.2k|    }
 5130|  20.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|  20.2k|    {                                                                        \
 4959|  20.2k|        return val;                                                          \
 4960|  20.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7974|  20.2k|    {
 7975|  20.2k|        return m_str;
 7976|  20.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  20.2k|    {
 5426|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|  20.2k|    {
 5379|  20.2k|        return m_argptrs;
 5380|  20.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  20.2k|{
 8820|  20.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.2k, False: 0]
  |  |  ------------------
  ------------------
 8821|  20.2k|        return unexpected(result.error());
 8822|  20.2k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  20.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  20.2k|    {
 1476|  20.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  20.2k|    {
  447|  20.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  20.2k|    {
 1177|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|  20.2k|    {
 5374|  20.2k|        return m_args;
 5375|  20.2k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  20.2k|    {
 7971|  20.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5395|  20.2k|{
 5396|  20.2k|    detail::check_scan_arg_types<Args...>();
 5397|  20.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  20.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5348|  20.2k|    {
 5349|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  20.2k|    {
 5360|  20.2k|        return {detail::make_arg<
 5361|  20.2k|            kind, Context,
 5362|  20.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  20.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  20.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  20.2k|{
 5170|  20.2k|    return make_value<Context>(value).ref_value;
 5171|  20.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5119|  20.2k|{
 5120|  20.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  20.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  20.2k|                                  needs_context_tag>) {
 5124|  20.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  20.2k|    }
 5126|  20.2k|    else {
 5127|  20.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  20.2k|            value, context_tag<Context>{}));
 5129|  20.2k|    }
 5130|  20.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4958|  20.2k|    {                                                                        \
 4959|  20.2k|        return val;                                                          \
 4960|  20.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7974|  20.2k|    {
 7975|  20.2k|        return m_str;
 7976|  20.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  20.2k|    {
 5426|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5378|  20.2k|    {
 5379|  20.2k|        return m_argptrs;
 5380|  20.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  20.2k|{
 8820|  20.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.2k, False: 0]
  |  |  ------------------
  ------------------
 8821|  20.2k|        return unexpected(result.error());
 8822|  20.2k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  20.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  20.2k|    {
 1476|  20.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  20.2k|    {
  447|  20.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  20.2k|    {
 1177|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5373|  20.2k|    {
 5374|  20.2k|        return m_args;
 5375|  20.2k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  20.2k|    {
 7971|  20.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5395|  20.2k|{
 5396|  20.2k|    detail::check_scan_arg_types<Args...>();
 5397|  20.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  20.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5348|  20.2k|    {
 5349|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  20.2k|    {
 5360|  20.2k|        return {detail::make_arg<
 5361|  20.2k|            kind, Context,
 5362|  20.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  20.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  20.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  20.2k|{
 5170|  20.2k|    return make_value<Context>(value).ref_value;
 5171|  20.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5119|  20.2k|{
 5120|  20.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  20.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  20.2k|                                  needs_context_tag>) {
 5124|  20.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  20.2k|    }
 5126|  20.2k|    else {
 5127|  20.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  20.2k|            value, context_tag<Context>{}));
 5129|  20.2k|    }
 5130|  20.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4958|  20.2k|    {                                                                        \
 4959|  20.2k|        return val;                                                          \
 4960|  20.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7974|  20.2k|    {
 7975|  20.2k|        return m_str;
 7976|  20.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  20.2k|    {
 5426|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5378|  20.2k|    {
 5379|  20.2k|        return m_argptrs;
 5380|  20.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  20.2k|{
 8820|  20.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.2k, False: 0]
  |  |  ------------------
  ------------------
 8821|  20.2k|        return unexpected(result.error());
 8822|  20.2k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  20.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  20.2k|    {
 1476|  20.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  20.2k|    {
  447|  20.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  20.2k|    {
 1177|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5373|  20.2k|    {
 5374|  20.2k|        return m_args;
 5375|  20.2k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  20.2k|    {
 7971|  20.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  20.2k|{
 5396|  20.2k|    detail::check_scan_arg_types<Args...>();
 5397|  20.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  20.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  20.2k|    {
 5349|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  20.2k|    {
 5360|  20.2k|        return {detail::make_arg<
 5361|  20.2k|            kind, Context,
 5362|  20.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  20.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  20.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  20.2k|{
 5170|  20.2k|    return make_value<Context>(value).ref_value;
 5171|  20.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  20.2k|{
 5120|  20.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  20.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  20.2k|                                  needs_context_tag>) {
 5124|  20.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  20.2k|    }
 5126|  20.2k|    else {
 5127|  20.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  20.2k|            value, context_tag<Context>{}));
 5129|  20.2k|    }
 5130|  20.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  20.2k|    {                                                                        \
 4959|  20.2k|        return val;                                                          \
 4960|  20.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  20.2k|    {
 7975|  20.2k|        return m_str;
 7976|  20.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  20.2k|    {
 5426|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  20.2k|    {
 5379|  20.2k|        return m_argptrs;
 5380|  20.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  20.2k|{
 8820|  20.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.8k, False: 334]
  |  |  ------------------
  ------------------
 8821|  19.8k|        return unexpected(result.error());
 8822|  19.8k|    }
 8823|    334|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    334|    static_cast<    \
  |  |  929|    334|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    334|    static_cast<    \
  |  |  929|    334|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  20.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  19.8k|    {
 1476|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  19.8k|    {
  626|  19.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  19.8k|    {
  689|  19.8k|        scn::detail::construct_at(unexpected_ptr(),
  690|  19.8k|                                  std::forward<Args>(args)...);
  691|  19.8k|        m_has_value = false;
  692|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  39.7k|    {
  718|  39.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  39.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  39.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  39.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  20.2k|    {
 1177|  20.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    334|    {
 5830|    334|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    334|    {
 1430|    334|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    334|    {
  616|    334|        construct(std::forward<Args>(args)...);
  617|    334|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    334|    {
  682|    334|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    334|        m_has_value = true;
  684|    334|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    334|{
  392|    334|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    334|        T(std::forward<Args>(args)...);
  394|    334|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|    334|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    668|    {
  706|    668|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    668|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    668|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|    668|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  20.2k|    {
 5374|  20.2k|        return m_args;
 5375|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  20.2k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  20.2k|    {
 7971|  20.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  20.2k|    {
  631|  20.2k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 334, False: 19.8k]
  ------------------
  632|    334|            destroy_value();
  633|    334|        }
  634|  19.8k|        else {
  635|  19.8k|            destroy_unexpected();
  636|  19.8k|        }
  637|  20.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  20.2k|    {
  675|  20.2k|        return m_has_value;
  676|  20.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    334|    {
  696|    334|        scn::detail::destroy_at(value_ptr());
  697|    334|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    334|{
  398|    334|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    334|        for (auto& elem : *p) {
  400|    334|            scn::detail::destroy_at(&elem);
  401|    334|        }
  402|    334|    }
  403|    334|    else {
  404|    334|        p->~T();
  405|    334|    }
  406|    334|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  19.8k|    {
  700|  19.8k|        scn::detail::destroy_at(unexpected_ptr());
  701|  19.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  20.2k|{
 5396|  20.2k|    detail::check_scan_arg_types<Args...>();
 5397|  20.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  20.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  20.2k|    {
 5349|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  20.2k|    {
 5360|  20.2k|        return {detail::make_arg<
 5361|  20.2k|            kind, Context,
 5362|  20.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  20.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  20.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  20.2k|{
 5170|  20.2k|    return make_value<Context>(value).ref_value;
 5171|  20.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  20.2k|{
 5120|  20.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  20.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  20.2k|                                  needs_context_tag>) {
 5124|  20.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  20.2k|    }
 5126|  20.2k|    else {
 5127|  20.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  20.2k|            value, context_tag<Context>{}));
 5129|  20.2k|    }
 5130|  20.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  20.2k|    {                                                                        \
 4959|  20.2k|        return val;                                                          \
 4960|  20.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  20.2k|    {
 7975|  20.2k|        return m_str;
 7976|  20.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  20.2k|    {
 5426|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  20.2k|    {
 5379|  20.2k|        return m_argptrs;
 5380|  20.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  20.2k|{
 8820|  20.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.8k, False: 334]
  |  |  ------------------
  ------------------
 8821|  19.8k|        return unexpected(result.error());
 8822|  19.8k|    }
 8823|    334|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    334|    static_cast<    \
  |  |  929|    334|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    334|    static_cast<    \
  |  |  929|    334|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  20.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  19.8k|    {
 1476|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  19.8k|    {
  626|  19.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  19.8k|    {
  689|  19.8k|        scn::detail::construct_at(unexpected_ptr(),
  690|  19.8k|                                  std::forward<Args>(args)...);
  691|  19.8k|        m_has_value = false;
  692|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  39.7k|    {
  718|  39.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  39.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  39.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  39.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  20.2k|    {
 1177|  20.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    334|    {
 5830|    334|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    334|    {
 1430|    334|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    334|    {
  616|    334|        construct(std::forward<Args>(args)...);
  617|    334|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    334|    {
  682|    334|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    334|        m_has_value = true;
  684|    334|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    334|{
  392|    334|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    334|        T(std::forward<Args>(args)...);
  394|    334|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|    334|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    668|    {
  706|    668|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    668|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    668|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|    668|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  20.2k|    {
 5374|  20.2k|        return m_args;
 5375|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  20.2k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  20.2k|    {
 7971|  20.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  20.2k|    {
  631|  20.2k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 334, False: 19.8k]
  ------------------
  632|    334|            destroy_value();
  633|    334|        }
  634|  19.8k|        else {
  635|  19.8k|            destroy_unexpected();
  636|  19.8k|        }
  637|  20.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  20.2k|    {
  675|  20.2k|        return m_has_value;
  676|  20.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    334|    {
  696|    334|        scn::detail::destroy_at(value_ptr());
  697|    334|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    334|{
  398|    334|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    334|        for (auto& elem : *p) {
  400|    334|            scn::detail::destroy_at(&elem);
  401|    334|        }
  402|    334|    }
  403|    334|    else {
  404|    334|        p->~T();
  405|    334|    }
  406|    334|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  19.8k|    {
  700|  19.8k|        scn::detail::destroy_at(unexpected_ptr());
  701|  19.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|  20.2k|{
 5396|  20.2k|    detail::check_scan_arg_types<Args...>();
 5397|  20.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  20.2k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|  20.2k|{
 5135|  20.2k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  20.2k|                  "Scan argument types must be default constructible");
 5137|  20.2k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  20.2k|                  "Scan argument types must be Destructible");
 5139|  20.2k|    static_assert(
 5140|  20.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  20.2k|        "Scan argument types must not be references");
 5142|  20.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5348|  20.2k|    {
 5349|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  20.2k|    {
 5360|  20.2k|        return {detail::make_arg<
 5361|  20.2k|            kind, Context,
 5362|  20.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  20.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  20.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|  20.2k|{
 5170|  20.2k|    return make_value<Context>(value).ref_value;
 5171|  20.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|  20.2k|{
 5120|  20.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  20.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  20.2k|                                  needs_context_tag>) {
 5124|  20.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  20.2k|    }
 5126|  20.2k|    else {
 5127|  20.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  20.2k|            value, context_tag<Context>{}));
 5129|  20.2k|    }
 5130|  20.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|  20.2k|    {                                                                        \
 4959|  20.2k|        return val;                                                          \
 4960|  20.2k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|  20.2k|{
 5089|  20.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  20.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  20.2k|    constexpr bool scannable_char =
 5093|  20.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  20.2k|    static_assert(scannable_char,
 5095|  20.2k|                  "Cannot scan an argument of an unsupported character "
 5096|  20.2k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  20.2k|    constexpr bool scannable_const =
 5099|  20.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  20.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  20.2k|    constexpr bool scannable_disabled =
 5103|  20.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  20.2k|    static_assert(scannable_disabled,
 5105|  20.2k|                  "Cannot scan an argument that has been disabled by "
 5106|  20.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  20.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  20.2k|    static_assert(
 5110|  20.2k|        scannable,
 5111|  20.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  20.2k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  20.2k|    return arg_value{arg};
 5115|  20.2k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4901|  20.2k|    {
 4902|  20.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7974|  20.2k|    {
 7975|  20.2k|        return m_str;
 7976|  20.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  20.2k|    {
 5426|  20.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|  20.2k|    {
 5379|  20.2k|        return m_argptrs;
 5380|  20.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  20.2k|{
 8820|  20.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.8k, False: 334]
  |  |  ------------------
  ------------------
 8821|  19.8k|        return unexpected(result.error());
 8822|  19.8k|    }
 8823|    334|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    334|    static_cast<    \
  |  |  929|    334|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    334|    static_cast<    \
  |  |  929|    334|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  20.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  19.8k|    {
 1476|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  19.8k|    {
  447|  19.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  20.2k|    {
 1177|  20.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|    334|    {
 5830|    334|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|    334|    {
 5616|    334|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|    334|    {
 1430|    334|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|    334|    {
  437|    334|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|  20.2k|    {
 5374|  20.2k|        return m_args;
 5375|  20.2k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  20.2k|    {
 7971|  20.2k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|   513k|    {
 3568|   513k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   513k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|   513k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  2.31M|    {
 3574|  2.31M|        return m_code == good;
 3575|  2.31M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|  73.6k|    {
 3585|  73.6k|        return m_code;
 3586|  73.6k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6180|  3.85k|    {
 6181|  3.85k|        return m_size;
 6182|  3.85k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6221|  4.17k|    {
 6222|  4.17k|        SCN_GCC_COMPAT_PUSH
 6223|  4.17k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6224|  4.17k|        switch (type) {
 6225|  1.84k|            case presentation_type::none:
  ------------------
  |  Branch (6225:13): [True: 1.84k, False: 2.32k]
  ------------------
 6226|  1.84k|                return 10;
 6227|     70|            case presentation_type::int_generic:
  ------------------
  |  Branch (6227:13): [True: 70, False: 4.10k]
  ------------------
 6228|     70|                return 0;
 6229|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6229:13): [True: 0, False: 4.17k]
  ------------------
 6230|      0|                return arbitrary_base;
 6231|       |
 6232|     38|            case presentation_type::int_binary:
  ------------------
  |  Branch (6232:13): [True: 38, False: 4.13k]
  ------------------
 6233|     38|                return 2;
 6234|     66|            case presentation_type::int_octal:
  ------------------
  |  Branch (6234:13): [True: 66, False: 4.10k]
  ------------------
 6235|     66|                return 8;
 6236|     40|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6236:13): [True: 40, False: 4.13k]
  ------------------
 6237|     84|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6237:13): [True: 44, False: 4.12k]
  ------------------
 6238|     84|                return 10;
 6239|  2.07k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6239:13): [True: 2.07k, False: 2.10k]
  ------------------
 6240|  2.07k|                return 16;
 6241|       |
 6242|      0|            default:
  ------------------
  |  Branch (6242:13): [True: 0, False: 4.17k]
  ------------------
 6243|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6244|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6245|  4.17k|        }
 6246|  4.17k|        SCN_GCC_COMPAT_POP
 6247|  4.17k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  79.8k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6262|  9.08k|    {
 6263|  9.08k|        m_specs.align = align;
 6264|  9.08k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|    336|    {
 6272|    336|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|    336|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|    336|            m_specs.localized = true;
 6274|    336|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|    336|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|  14.3k|    {
 6282|  14.3k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 14.3k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|  14.3k|        m_specs.width = width;
 6289|  14.3k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6291|  9.55k|    {
 6292|  9.55k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6292:13): [True: 86, False: 9.46k]
  ------------------
 6293|       |            // clang-format off
 6294|     86|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6295|       |            // clang-format on
 6296|     86|        }
 6297|       |
 6298|  9.46k|        m_specs.precision = prec;
 6299|  9.46k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  91.8k|    {
 6303|  91.8k|        m_specs.type = type;
 6304|  91.8k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6307|  1.23M|    {
 6308|  1.23M|        const auto cp_value = static_cast<unsigned>(cp);
 6309|  1.23M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  1.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.06M, False: 167k]
  |  |  ------------------
  ------------------
 6310|  1.06M|            m_specs.charset_literals[cp_value / 8] |=
 6311|  1.06M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6312|  1.06M|        }
 6313|   167k|        else {
 6314|   167k|            m_specs.charset_has_nonascii = true;
 6315|   167k|        }
 6316|  1.23M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  9.86k|    {
 6320|  9.86k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  9.86k|        const auto end_value = static_cast<unsigned>(end);
 6322|  9.86k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  9.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  9.86k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  9.86k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.08k, False: 4.78k]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  5.08k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  5.08k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|   328k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 323k, False: 5.08k]
  ------------------
 6329|   323k|                m_specs.charset_literals[v / 8] |=
 6330|   323k|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|   323k|            }
 6332|  5.08k|        }
 6333|  4.78k|        else {
 6334|  4.78k|            m_specs.charset_has_nonascii = true;
 6335|  4.78k|        }
 6336|  9.86k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6339|  2.41k|    {
 6340|  2.41k|        m_specs.charset_is_inverted = true;
 6341|  2.41k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6358|  49.8k|    {
 6359|  49.8k|        m_specs.regexp_flags = flags;
 6360|  49.8k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  10.4k|    {
 6365|  10.4k|        SCN_UNLIKELY_ATTR
 6366|  10.4k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  10.4k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  1.32M|    {
 6376|  1.32M|        return static_cast<bool>(m_error);
 6377|  1.32M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|  73.6k|{
 3609|  73.6k|    return a.code() == b;
 3610|  73.6k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|  73.6k|{
 3613|  73.6k|    return !(a == b);
 3614|  73.6k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3907|   118k|{
 3908|   118k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3909|       |
 3910|   118k|    const auto is_trailing_code_unit = [](char ch) {
 3911|   118k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|   118k|    };
 3913|       |
 3914|   118k|    if (input.size() == 1) {
  ------------------
  |  Branch (3914:9): [True: 104k, False: 13.9k]
  ------------------
 3915|   104k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3916|   104k|        return static_cast<char32_t>(input[0]);
 3917|   104k|    }
 3918|       |
 3919|  13.9k|    if (input.size() == 2) {
  ------------------
  |  Branch (3919:9): [True: 13.3k, False: 640]
  ------------------
 3920|  13.3k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  13.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3921|  13.3k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  13.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3922|       |
 3923|  13.3k|        char32_t cp{};
 3924|  13.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3925|  13.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3926|  13.3k|        return cp;
 3927|  13.3k|    }
 3928|       |
 3929|    640|    if (input.size() == 3) {
  ------------------
  |  Branch (3929:9): [True: 516, False: 124]
  ------------------
 3930|    516|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|    516|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    516|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3931|    516|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    516|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    516|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3932|    516|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    516|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    516|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3933|       |
 3934|    516|        char32_t cp{};
 3935|    516|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3936|    516|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3937|    516|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3938|    516|        return cp;
 3939|    516|    }
 3940|       |
 3941|    124|    if (input.size() == 4) {
  ------------------
  |  Branch (3941:9): [True: 124, False: 0]
  ------------------
 3942|    124|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|    124|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3944|    124|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3945|    124|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3946|    124|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3947|       |
 3948|    124|        char32_t cp{};
 3949|    124|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3950|    124|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3951|    124|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3952|    124|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3953|    124|        return cp;
 3954|    124|    }
 3955|       |
 3956|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3957|       |    // gcc 7 thinks we'll get here, even when we won't
 3958|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3959|      0|#endif
 3960|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3961|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6110|  72.6k|{
 6111|  72.6k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6112|  72.6k|                                    static_cast<unsigned>(b));
 6113|  72.6k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6115|  7.99k|{
 6116|  7.99k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6117|  7.99k|                                    static_cast<unsigned>(b));
 6118|  7.99k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6130|  7.99k|{
 6131|  7.99k|    return a = a | b;
 6132|  7.99k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|    856|{
 7063|    856|    switch (type) {
 7064|    100|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 100, False: 756]
  ------------------
 7065|    100|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 856]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 856]
  ------------------
 7069|     84|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 84, False: 772]
  ------------------
 7070|     84|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 856]
  ------------------
 7071|     84|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 856]
  ------------------
 7072|     84|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 856]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 856]
  ------------------
 7076|     84|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 84, False: 772]
  ------------------
 7077|     84|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 856]
  ------------------
 7078|     84|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 856]
  ------------------
 7079|     84|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|     84|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 84, False: 772]
  ------------------
 7082|     84|            return arg_type_category::pointer;
 7083|     84|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 84, False: 772]
  ------------------
 7084|     84|            return arg_type_category::boolean;
 7085|     44|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 44, False: 812]
  ------------------
 7086|     84|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 40, False: 816]
  ------------------
 7087|     84|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 856]
  ------------------
 7088|     84|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 856]
  ------------------
 7091|     84|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 84, False: 772]
  ------------------
 7092|     84|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 856]
  ------------------
 7093|     84|            return arg_type_category::floating;
 7094|       |
 7095|     44|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 44, False: 812]
  ------------------
 7096|    128|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 84, False: 772]
  ------------------
 7097|    168|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 40, False: 816]
  ------------------
 7098|    252|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 84, False: 772]
  ------------------
 7099|    252|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 856]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 856]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|    856|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|    856|            SCN_CLANG_POP
 7110|    856|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|    856|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  1.16k|{
 3654|  1.16k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.16k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7148|  16.4k|{
 7149|  16.4k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.2k, False: 2.13k]
  |  |  ------------------
  ------------------
 7150|  14.2k|        return handler.on_error("Invalid type specifier for integer type");
 7151|  14.2k|    }
 7152|  2.13k|    if (specs.localized) {
  ------------------
  |  Branch (7152:9): [True: 108, False: 2.02k]
  ------------------
 7153|    108|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 100]
  |  |  ------------------
  ------------------
 7154|       |            // clang-format off
 7155|      8|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7156|       |            // clang-format on
 7157|      8|            return;
 7158|      8|        }
 7159|    100|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|    100|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100]
  |  |  ------------------
  ------------------
 7160|       |            // clang-format off
 7161|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7162|       |            // clang-format on
 7163|      0|        }
 7164|    100|    }
 7165|  2.13k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|     52|{
 1949|     52|    return SCN_FWD(t);
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|     52|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.21k|{
 3654|  2.21k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.21k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  8.21k|{
 7193|  8.21k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 7.27k, False: 944]
  ------------------
 7194|  8.21k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 124, False: 7.14k]
  ------------------
 7195|  7.27k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 7.04k, False: 100]
  ------------------
 7196|  7.17k|        SCN_UNLIKELY_ATTR
 7197|  7.17k|        return handler.on_error("Invalid type specifier for float type");
 7198|  7.17k|    }
 7199|  8.21k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  484|  32.3k|    {
  485|  32.3k|        return m_has_value;
  486|  32.3k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1597|  16.1k|    {
 1598|  16.1k|        return has_value();
 1599|  16.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  450|  16.1k|    {
  451|  16.1k|        return m_value;
  452|  16.1k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1626|  16.1k|    {
 1627|  16.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  16.1k|        return this->get_value();
 1629|  16.1k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1662|  16.1k|    {
 1663|  16.1k|        return std::move(value());
 1664|  16.1k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3653|  7.78k|{
 3654|  7.78k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  7.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  7.78k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3653|  5.33k|{
 3654|  5.33k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  5.33k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3653|    252|{
 3654|    252|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    252|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3653|    396|{
 3654|    396|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    396|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    396|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  1.10k|{
 3654|  1.10k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.10k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|  24.4k|{
 7205|  24.4k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 2.75k, False: 21.6k]
  ------------------
 7206|  24.4k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 714, False: 20.9k]
  ------------------
 7207|  24.4k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 3.63k, False: 17.3k]
  ------------------
 7208|  24.4k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 15.3k, False: 1.98k]
  ------------------
 7209|  24.4k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 1.21k, False: 768]
  ------------------
 7210|  23.6k|        return;
 7211|  23.6k|    }
 7212|    768|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 162, False: 606]
  ------------------
 7213|    162|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 150]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|     12|        }
 7218|    150|        return;
 7219|    162|    }
 7220|    606|    SCN_UNLIKELY_ATTR
 7221|    606|    handler.on_error("Invalid type specifier for string");
 7222|    606|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3653|  4.38k|{
 3654|  4.38k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  4.38k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3653|     40|{
 3654|     40|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     40|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|     40|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7238|  8.21k|{
 7239|  8.21k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7239:9): [True: 7.27k, False: 944]
  ------------------
 7240|  8.21k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7240:9): [True: 7.02k, False: 252]
  ------------------
 7241|  8.21k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7241:9): [True: 6.99k, False: 28]
  ------------------
 7242|  8.21k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7242:9): [True: 6.97k, False: 20]
  ------------------
 7243|  8.21k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7243:9): [True: 6.95k, False: 18]
  ------------------
 7244|  8.21k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7244:9): [True: 6.93k, False: 16]
  ------------------
 7245|  8.21k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7245:9): [True: 6.91k, False: 26]
  ------------------
 7246|  8.21k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7246:9): [True: 6.89k, False: 16]
  ------------------
 7247|  6.89k|        SCN_UNLIKELY_ATTR
 7248|  6.89k|        return handler.on_error("Invalid type specifier for boolean");
 7249|  6.89k|    }
 7250|  8.21k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7170|  8.14k|{
 7171|  8.14k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7171:9): [True: 7.13k, False: 1.01k]
  ------------------
 7172|  8.14k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7172:9): [True: 0, False: 1.01k]
  ------------------
 7173|  7.13k|        SCN_UNLIKELY_ATTR
 7174|  7.13k|        return handler.on_error("Invalid type specifier for character type");
 7175|  7.13k|    }
 7176|  8.14k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7227|  8.14k|{
 7228|  8.14k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7228:9): [True: 7.22k, False: 918]
  ------------------
 7229|  8.14k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7229:9): [True: 7.21k, False: 10]
  ------------------
 7230|  7.21k|        SCN_UNLIKELY_ATTR
 7231|  7.21k|        return handler.on_error("Invalid type specifier for pointer");
 7232|  7.21k|    }
 7233|  8.14k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA79_KcEEEDaDpOT_:
 3653|     88|{
 3654|     88|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|     88|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  78.1k|{
 3715|  78.1k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|  78.1k|                                          const CharT*, const CharT*>) {
 3717|  78.1k|        return {first, last};
 3718|  78.1k|    }
 3719|  78.1k|    else {
 3720|  78.1k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  78.1k|    }
 3722|  78.1k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   609k|{
 3715|   609k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   609k|                                          const CharT*, const CharT*>) {
 3717|   609k|        return {first, last};
 3718|   609k|    }
 3719|   609k|    else {
 3720|   609k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   609k|    }
 3722|   609k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  1.22M|    {
 3330|  1.22M|        return m_iterator;
 3331|  1.22M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  1.27M|    {
 3334|  1.27M|        return m_sentinel;
 3335|  1.27M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|   443k|    {
 3330|   443k|        return m_iterator;
 3331|   443k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  1.36M|    {
 3334|  1.36M|        return m_sentinel;
 3335|  1.36M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|   142k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    174|{
 1211|    174|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    174|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  2.15k|    {
  361|  2.15k|        return m_unexpected;
  362|  2.15k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3653|  5.07k|{
 3654|  5.07k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  5.07k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|  29.5k|    {
  347|  29.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  29.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  29.5k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  83.8k|    {
 1476|  83.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  84.7k|    {
  447|  84.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   113k|    {
 1177|   113k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  26.8k|    {
 1430|  26.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  26.8k|    {
  437|  26.8k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   114k|    {
 1598|   114k|        return has_value();
 1599|   114k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   225k|    {
  485|   225k|        return m_has_value;
  486|   225k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  83.8k|    {
 1604|  83.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  83.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  83.8k|        return this->get_unexpected().error();
 1606|  83.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  83.8k|    {
  468|  83.8k|        return m_unexpected;
  469|  83.8k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  19.2k|    {
 1663|  19.2k|        return std::move(value());
 1664|  19.2k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  27.6k|    {
 1627|  27.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  27.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  27.6k|        return this->get_value();
 1629|  27.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  27.6k|    {
  451|  27.6k|        return m_value;
  452|  27.6k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  46.6k|    {
 1476|  46.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  47.4k|    {
  447|  47.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  67.3k|    {
 1177|  67.3k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  19.5k|    {
 1430|  19.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  19.5k|    {
  437|  19.5k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  68.1k|    {
 1598|  68.1k|        return has_value();
 1599|  68.1k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|   133k|    {
  485|   133k|        return m_has_value;
  486|   133k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  46.6k|    {
 1604|  46.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  46.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  46.6k|        return this->get_unexpected().error();
 1606|  46.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  46.6k|    {
  468|  46.6k|        return m_unexpected;
  469|  46.6k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  15.6k|    {
 1663|  15.6k|        return std::move(value());
 1664|  15.6k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  19.0k|    {
 1627|  19.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  19.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  19.0k|        return this->get_value();
 1629|  19.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  19.0k|    {
  451|  19.0k|        return m_value;
  452|  19.0k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  8.24k|    {
 1837|  8.24k|        return detail::transform_error_impl(std::move(*this),
 1838|  8.24k|                                            std::forward<F>(f));
 1839|  8.24k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  8.24k|{
 1323|  8.24k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  8.24k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  8.24k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  8.24k|            return result(*std::forward<Exp>(exp));
 1327|  8.24k|        }
 1328|       |
 1329|  8.24k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  8.24k|        return result(unexpect, monostate{});
 1331|  8.24k|    }
 1332|  8.24k|    else {
 1333|  8.24k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  8.24k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.24k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.24k, False: 0]
  |  |  ------------------
  ------------------
 1335|  8.24k|                   ? result(*std::forward<Exp>(exp))
 1336|  8.24k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  8.24k|    }
 1340|  8.24k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  62.0k|    {
  485|  62.0k|        return m_has_value;
  486|  62.0k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  10.0k|    {
 1663|  10.0k|        return std::move(value());
 1664|  10.0k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  28.1k|    {
 1627|  28.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  28.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  28.1k|        return this->get_value();
 1629|  28.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  28.1k|    {
  451|  28.1k|        return m_value;
  452|  28.1k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|    102|    {
 1614|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    102|        return std::move(this->get_unexpected().error());
 1616|    102|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    102|    {
  468|    102|        return m_unexpected;
  469|    102|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|    906|    {
 1486|    906|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|   403k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6186|  2.49k|    {
 6187|  2.49k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|  2.49k|        CharT r{};
 6189|  2.49k|        std::memcpy(&r, m_data, m_size);
 6190|  2.49k|        return r;
 6191|  2.49k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|  1.12k|    {
  347|  1.12k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.12k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  1.29k|    {
  356|  1.29k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.29k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.29k|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6195|    556|    {
 6196|    556|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6197|    556|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2961|     52|    {
 2962|     52|        return fn::impl(std::forward<T>(t));
 2963|     52|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2952|     52|    {
 2953|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|     52|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|     52|    {
 2930|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|     52|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2895|     52|    {
 2896|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|     52|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|    174|    {
  347|    174|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    174|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|    174|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|      8|    {
  347|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  17.8k|    {
  361|  17.8k|        return m_unexpected;
  362|  17.8k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  3.49k|    {
  356|  3.49k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.49k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.49k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  27.2k|    {
  347|  27.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  27.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  27.2k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  27.2k|    {
  361|  27.2k|        return m_unexpected;
  362|  27.2k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  27.2k|    {
  356|  27.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  27.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  27.2k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    684|{
 1211|    684|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    684|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  2.80k|    {
  347|  2.80k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.80k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.80k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|  1.21k|{
 1211|  1.21k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  1.21k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  8.10k|{
  326|  8.10k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  8.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  8.10k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  57.9k|    {
 3346|  57.9k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  57.9k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    440|    {
 1476|    440|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    440|    {
  447|    440|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.8k|    {
 1177|  33.8k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  33.3k|    {
 1430|  33.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  33.3k|    {
  437|  33.3k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  23.6k|    {
 1598|  23.6k|        return has_value();
 1599|  23.6k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  18.0k|    {
 1653|  18.0k|        return value();
 1654|  18.0k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  6.18k|    {
 1430|  6.18k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  6.18k|    {
  437|  6.18k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.53k|    {
 1177|  6.53k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    344|    {
 1476|    344|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    344|    {
  447|    344|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1597|  4.06k|    {
 1598|  4.06k|        return has_value();
 1599|  4.06k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  11.4k|    {
  485|  11.4k|        return m_has_value;
  486|  11.4k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEERT_v:
 1652|  2.41k|    {
 1653|  2.41k|        return value();
 1654|  2.41k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  4.56k|    {
 1627|  4.56k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.56k|        return this->get_value();
 1629|  4.56k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  4.56k|    {
  451|  4.56k|        return m_value;
  452|  4.56k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    174|    {
 1476|    174|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|    174|    {
  447|    174|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.89k|    {
 1177|  3.89k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  3.71k|    {
 1430|  3.71k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  3.71k|    {
  437|  3.71k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    712|    {
 1837|    712|        return detail::transform_error_impl(std::move(*this),
 1838|    712|                                            std::forward<F>(f));
 1839|    712|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    712|{
 1323|    712|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    712|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    712|        if (SCN_LIKELY(exp.has_value())) {
 1326|    712|            return result(*std::forward<Exp>(exp));
 1327|    712|        }
 1328|       |
 1329|    712|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    712|        return result(unexpect, monostate{});
 1331|    712|    }
 1332|    712|    else {
 1333|    712|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    712|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    712|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 712, False: 0]
  |  |  ------------------
  ------------------
 1335|    712|                   ? result(*std::forward<Exp>(exp))
 1336|    712|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    712|    }
 1340|    712|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  2.14k|    {
 1663|  2.14k|        return std::move(value());
 1664|  2.14k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|  2.07k|    {
 1430|  2.07k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  2.07k|    {
  437|  2.07k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.80k|    {
 1177|  7.80k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1613|    320|    {
 1614|    320|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    320|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    320|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    320|        return std::move(this->get_unexpected().error());
 1616|    320|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    320|    {
  468|    320|        return m_unexpected;
  469|    320|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.33k|    {
 1486|  1.33k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  5.13k|    {
  447|  5.13k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.53k|    {
 2724|  1.53k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.53k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.53k|    {
 2705|  1.53k|        return decay_copy(t.begin());
 2706|  1.53k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1948|  3.32k|{
 1949|  3.32k|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.32k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3329|  1.53k|    {
 3330|  1.53k|        return m_iterator;
 3331|  1.53k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.53k|    {
 2781|  1.53k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.53k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.53k|    {
 2763|  1.53k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.53k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3333|  1.53k|    {
 3334|  1.53k|        return m_sentinel;
 3335|  1.53k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|  1.53k|    {
 3316|  1.53k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  3.89k|    {
 1598|  3.89k|        return has_value();
 1599|  3.89k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  7.78k|    {
  485|  7.78k|        return m_has_value;
  486|  7.78k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1603|    174|    {
 1604|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    174|        return this->get_unexpected().error();
 1606|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  3.71k|    {
 1663|  3.71k|        return std::move(value());
 1664|  3.71k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  3.71k|    {
 1627|  3.71k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.71k|        return this->get_value();
 1629|  3.71k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.71k|    {
  451|  3.71k|        return m_value;
  452|  3.71k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.8k|    {
 1177|  19.8k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  19.8k|    {
 1430|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  19.8k|    {
  437|  19.8k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  19.8k|    {
 1598|  19.8k|        return has_value();
 1599|  19.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  39.6k|    {
  485|  39.6k|        return m_has_value;
  486|  39.6k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  19.8k|    {
 1663|  19.8k|        return std::move(value());
 1664|  19.8k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  19.8k|    {
 1627|  19.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  19.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  19.8k|        return this->get_value();
 1629|  19.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  19.8k|    {
  451|  19.8k|        return m_value;
  452|  19.8k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  3.80k|    {
 1476|  3.80k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    590|    {
 1476|    590|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    910|    {
  447|    910|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.54k|    {
 1177|  6.54k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  4.19k|    {
 1476|  4.19k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  4.19k|    {
  447|  4.19k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1597|  6.01k|    {
 1598|  6.01k|        return has_value();
 1599|  6.01k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  11.7k|    {
  485|  11.7k|        return m_has_value;
  486|  11.7k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1603|  2.21k|    {
 1604|  2.21k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.21k|        return this->get_unexpected().error();
 1606|  2.21k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  3.01k|    {
  468|  3.01k|        return m_unexpected;
  469|  3.01k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|  1.08k|    {
 1430|  1.08k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|  1.08k|    {
  437|  1.08k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.08k|    {
 1177|  1.08k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.43k|    {
 1627|  1.43k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.43k|        return this->get_value();
 1629|  1.43k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.43k|    {
  451|  1.43k|        return m_value;
  452|  1.43k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    816|    {
 1598|    816|        return has_value();
 1599|    816|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  2.17k|    {
  485|  2.17k|        return m_has_value;
  486|  2.17k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    816|    {
 1177|    816|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|  1.08k|    {
 1663|  1.08k|        return std::move(value());
 1664|  1.08k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|  1.08k|    {
 1627|  1.08k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.08k|        return this->get_value();
 1629|  1.08k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|  1.08k|    {
  451|  1.08k|        return m_value;
  452|  1.08k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|  55.2k|    {
 3334|  55.2k|        return m_sentinel;
 3335|  55.2k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.75k|    {
 1837|  1.75k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.75k|                                            std::forward<F>(f));
 1839|  1.75k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  1.75k|{
 1323|  1.75k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.75k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.75k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.75k|            return result(*std::forward<Exp>(exp));
 1327|  1.75k|        }
 1328|       |
 1329|  1.75k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.75k|        return result(unexpect, monostate{});
 1331|  1.75k|    }
 1332|  1.75k|    else {
 1333|  1.75k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.75k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.75k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.43k, False: 320]
  |  |  ------------------
  ------------------
 1335|  1.75k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.75k|                   : result(unexpect,
 1337|    320|                            trivial_invoke(std::forward<F>(f),
 1338|    320|                                           std::forward<Exp>(exp).error()));
 1339|  1.75k|    }
 1340|  1.75k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|  1.43k|    {
 1430|  1.43k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.43k|    {
  437|  1.43k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    320|    {
 1486|    320|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.43k|    {
 1663|  1.43k|        return std::move(value());
 1664|  1.43k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|  69.4k|    {
 3330|  69.4k|        return m_iterator;
 3331|  69.4k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|    816|    {
 1430|    816|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    816|    {
  437|    816|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    816|    {
 1837|    816|        return detail::transform_error_impl(std::move(*this),
 1838|    816|                                            std::forward<F>(f));
 1839|    816|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|    816|{
 1323|    816|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    816|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    816|        if (SCN_LIKELY(exp.has_value())) {
 1326|    816|            return result(*std::forward<Exp>(exp));
 1327|    816|        }
 1328|       |
 1329|    816|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    816|        return result(unexpect, monostate{});
 1331|    816|    }
 1332|    816|    else {
 1333|    816|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    816|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    816|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 816, False: 0]
  |  |  ------------------
  ------------------
 1335|    816|                   ? result(*std::forward<Exp>(exp))
 1336|    816|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    816|    }
 1340|    816|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.63k|    {
  485|  1.63k|        return m_has_value;
  486|  1.63k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|    816|    {
 1663|    816|        return std::move(value());
 1664|    816|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|    816|    {
 1627|    816|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    816|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    816|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    816|        return this->get_value();
 1629|    816|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    816|    {
  451|    816|        return m_value;
  452|    816|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|    816|    {
 1430|    816|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    816|    {
  437|    816|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    816|    {
 1177|    816|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    816|    {
 1598|    816|        return has_value();
 1599|    816|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.63k|    {
  485|  1.63k|        return m_has_value;
  486|  1.63k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|    816|    {
 1663|    816|        return std::move(value());
 1664|    816|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|    816|    {
 1627|    816|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    816|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    816|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    816|        return this->get_value();
 1629|    816|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    816|    {
  451|    816|        return m_value;
  452|    816|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    796|    {
 1837|    796|        return detail::transform_error_impl(std::move(*this),
 1838|    796|                                            std::forward<F>(f));
 1839|    796|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|    796|{
 1323|    796|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    796|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    796|        if (SCN_LIKELY(exp.has_value())) {
 1326|    796|            return result(*std::forward<Exp>(exp));
 1327|    796|        }
 1328|       |
 1329|    796|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    796|        return result(unexpect, monostate{});
 1331|    796|    }
 1332|    796|    else {
 1333|    796|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    796|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    796|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 796]
  |  |  ------------------
  ------------------
 1335|    796|                   ? result(*std::forward<Exp>(exp))
 1336|    796|                   : result(unexpect,
 1337|    796|                            trivial_invoke(std::forward<F>(f),
 1338|    796|                                           std::forward<Exp>(exp).error()));
 1339|    796|    }
 1340|    796|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1613|    796|    {
 1614|    796|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    796|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    796|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    796|        return std::move(this->get_unexpected().error());
 1616|    796|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|  1.33k|    {
 3648|  1.33k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|  27.0k|    {
 3316|  27.0k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|     20|    {
 1476|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  625|     20|    {
  626|     20|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|     20|    {
  689|     20|        scn::detail::construct_at(unexpected_ptr(),
  690|     20|                                  std::forward<Args>(args)...);
  691|     20|        m_has_value = false;
  692|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     60|    {
  718|     60|        return reinterpret_cast<unexpected<E>*>(
  719|     60|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     60|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     60|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     20|    {
 1177|     20|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1597|     20|    {
 1598|     20|        return has_value();
 1599|     20|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     60|    {
  675|     60|        return m_has_value;
  676|     60|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1603|     20|    {
 1604|     20|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     20|        return this->get_unexpected().error();
 1606|     20|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     20|    {
  658|     20|        return *unexpected_ptr();
  659|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  630|     20|    {
  631|     20|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 20]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     20|        else {
  635|     20|            destroy_unexpected();
  636|     20|        }
  637|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     20|    {
  700|     20|        scn::detail::destroy_at(unexpected_ptr());
  701|     20|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1597|  8.07k|    {
 1598|  8.07k|        return has_value();
 1599|  8.07k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  15.6k|    {
  485|  15.6k|        return m_has_value;
  486|  15.6k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1603|  4.86k|    {
 1604|  4.86k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.86k|        return this->get_unexpected().error();
 1606|  4.86k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  4.86k|    {
  468|  4.86k|        return m_unexpected;
  469|  4.86k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|  2.07k|    {
 1663|  2.07k|        return std::move(value());
 1664|  2.07k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|  2.67k|    {
 1627|  2.67k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.67k|        return this->get_value();
 1629|  2.67k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.67k|    {
  451|  2.67k|        return m_value;
  452|  2.67k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    992|    {
 1476|    992|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.09k|    {
  447|  1.09k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.6k|    {
 1177|  13.6k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  10.7k|    {
 1476|  10.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  10.7k|    {
  447|  10.7k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  14.5k|    {
 1598|  14.5k|        return has_value();
 1599|  14.5k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  22.6k|    {
  485|  22.6k|        return m_has_value;
  486|  22.6k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  5.39k|    {
 1604|  5.39k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.39k|        return this->get_unexpected().error();
 1606|  5.39k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.39k|    {
  468|  5.39k|        return m_unexpected;
  469|  5.39k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  3.50k|    {
 1430|  3.50k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  3.50k|    {
  437|  3.50k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.50k|    {
 1177|  3.50k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.82k|    {
 1627|  1.82k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.82k|        return this->get_value();
 1629|  1.82k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.82k|    {
  451|  1.82k|        return m_value;
  452|  1.82k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.62k|    {
 1598|  2.62k|        return has_value();
 1599|  2.62k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  7.01k|    {
  485|  7.01k|        return m_has_value;
  486|  7.01k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.62k|    {
 1177|  2.62k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.50k|    {
 1663|  3.50k|        return std::move(value());
 1664|  3.50k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.50k|    {
 1627|  3.50k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.50k|        return this->get_value();
 1629|  3.50k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.50k|    {
  451|  3.50k|        return m_value;
  452|  3.50k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  44.3k|    {
 3221|  44.3k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 1.63k, False: 42.7k]
  ------------------
 3222|  44.3k|                   ? nullptr
 3223|  44.3k|                   : std::addressof(*ranges::begin(derived()));
 3224|  44.3k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  44.3k|    {
 3005|  44.3k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  44.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  44.3k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  44.3k|    {
 2978|  44.3k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  44.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  44.3k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  44.3k|    {
 3339|  44.3k|        return m_iterator == m_sentinel;
 3340|  44.3k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  87.1k|    {
 3180|  87.1k|        return static_cast<D&>(*this);
 3181|  87.1k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  42.7k|    {
 2724|  42.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  42.7k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  42.7k|    {
 2705|  42.7k|        return decay_copy(t.begin());
 2706|  42.7k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.82k|    {
 1430|  1.82k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.82k|    {
  437|  1.82k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  2.62k|    {
 1430|  2.62k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.62k|    {
  437|  2.62k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.62k|    {
 1837|  2.62k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.62k|                                            std::forward<F>(f));
 1839|  2.62k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  2.62k|{
 1323|  2.62k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.62k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.62k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.62k|            return result(*std::forward<Exp>(exp));
 1327|  2.62k|        }
 1328|       |
 1329|  2.62k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.62k|        return result(unexpect, monostate{});
 1331|  2.62k|    }
 1332|  2.62k|    else {
 1333|  2.62k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.62k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.62k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.62k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.62k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.62k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.62k|    }
 1340|  2.62k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.25k|    {
  485|  5.25k|        return m_has_value;
  486|  5.25k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.62k|    {
 1663|  2.62k|        return std::move(value());
 1664|  2.62k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.62k|    {
 1627|  2.62k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.62k|        return this->get_value();
 1629|  2.62k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.62k|    {
  451|  2.62k|        return m_value;
  452|  2.62k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  2.62k|    {
 1430|  2.62k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.62k|    {
  437|  2.62k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.62k|    {
 1177|  2.62k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|  2.62k|    {
 1598|  2.62k|        return has_value();
 1599|  2.62k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.25k|    {
  485|  5.25k|        return m_has_value;
  486|  5.25k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.62k|    {
 1663|  2.62k|        return std::move(value());
 1664|  2.62k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.62k|    {
 1627|  2.62k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.62k|        return this->get_value();
 1629|  2.62k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.62k|    {
  451|  2.62k|        return m_value;
  452|  2.62k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1475|     24|    {
 1476|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  625|     24|    {
  626|     24|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|     24|    {
  689|     24|        scn::detail::construct_at(unexpected_ptr(),
  690|     24|                                  std::forward<Args>(args)...);
  691|     24|        m_has_value = false;
  692|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     72|    {
  718|     72|        return reinterpret_cast<unexpected<E>*>(
  719|     72|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     72|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     72|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     24|    {
 1177|     24|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|     24|    {
 1598|     24|        return has_value();
 1599|     24|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     72|    {
  675|     72|        return m_has_value;
  676|     72|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|     24|    {
 1604|     24|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     24|        return this->get_unexpected().error();
 1606|     24|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     24|    {
  658|     24|        return *unexpected_ptr();
  659|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|     24|    {
  631|     24|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 24]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     24|        else {
  635|     24|            destroy_unexpected();
  636|     24|        }
  637|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     24|    {
  700|     24|        scn::detail::destroy_at(unexpected_ptr());
  701|     24|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  29.2k|    {
 2855|  29.2k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  29.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  29.2k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  29.2k|    {
 2836|  29.2k|        return t.data();
 2837|  29.2k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   272k|    {
 1476|   272k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   272k|    {
  447|   272k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   276k|    {
 1177|   276k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  4.07k|    {
 1430|  4.07k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  4.07k|    {
  437|  4.07k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  2.56k|{
 1211|  2.56k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  2.56k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    270|    {
 1837|    270|        return detail::transform_error_impl(std::move(*this),
 1838|    270|                                            std::forward<F>(f));
 1839|    270|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    270|{
 1323|    270|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    270|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    270|        if (SCN_LIKELY(exp.has_value())) {
 1326|    270|            return result(*std::forward<Exp>(exp));
 1327|    270|        }
 1328|       |
 1329|    270|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    270|        return result(unexpect, monostate{});
 1331|    270|    }
 1332|    270|    else {
 1333|    270|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    270|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    270|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 270, False: 0]
  |  |  ------------------
  ------------------
 1335|    270|                   ? result(*std::forward<Exp>(exp))
 1336|    270|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    270|    }
 1340|    270|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    270|    {
 1430|    270|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    270|    {
  437|    270|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    270|    {
 1177|    270|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    270|    {
 1598|    270|        return has_value();
 1599|    270|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    540|    {
  485|    540|        return m_has_value;
  486|    540|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    270|    {
 1663|    270|        return std::move(value());
 1664|    270|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    270|    {
 1627|    270|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    270|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    270|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    270|        return this->get_value();
 1629|    270|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    270|    {
  451|    270|        return m_value;
  452|    270|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1822|    540|    {
 1823|    540|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    540|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    540|{
 1323|    540|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    540|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    540|        if (SCN_LIKELY(exp.has_value())) {
 1326|    540|            return result(*std::forward<Exp>(exp));
 1327|    540|        }
 1328|       |
 1329|    540|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    540|        return result(unexpect, monostate{});
 1331|    540|    }
 1332|    540|    else {
 1333|    540|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    540|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    540|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 540]
  |  |  ------------------
  ------------------
 1335|    540|                   ? result(*std::forward<Exp>(exp))
 1336|    540|                   : result(unexpect,
 1337|    540|                            trivial_invoke(std::forward<F>(f),
 1338|    540|                                           std::forward<Exp>(exp).error()));
 1339|    540|    }
 1340|    540|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1652|    594|    {
 1653|    594|        return value();
 1654|    594|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    264|    {
 2724|    264|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    264|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    264|    {
 2705|    264|        return decay_copy(t.begin());
 2706|    264|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    246|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    882|    {
 1837|    882|        return detail::transform_error_impl(std::move(*this),
 1838|    882|                                            std::forward<F>(f));
 1839|    882|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|    882|{
 1323|    882|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    882|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    882|        if (SCN_LIKELY(exp.has_value())) {
 1326|    882|            return result(*std::forward<Exp>(exp));
 1327|    882|        }
 1328|       |
 1329|    882|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    882|        return result(unexpect, monostate{});
 1331|    882|    }
 1332|    882|    else {
 1333|    882|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    882|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    882|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 882, False: 0]
  |  |  ------------------
  ------------------
 1335|    882|                   ? result(*std::forward<Exp>(exp))
 1336|    882|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    882|    }
 1340|    882|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|    882|    {
 1430|    882|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|    882|    {
  437|    882|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    882|    {
 1177|    882|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    882|    {
 1598|    882|        return has_value();
 1599|    882|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.76k|    {
  485|  1.76k|        return m_has_value;
  486|  1.76k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|    882|    {
 1663|    882|        return std::move(value());
 1664|    882|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|    882|    {
 1627|    882|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    882|        return this->get_value();
 1629|    882|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    882|    {
  451|    882|        return m_value;
  452|    882|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|    906|    {
 1823|    906|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    906|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|    906|{
 1323|    906|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    906|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    906|        if (SCN_LIKELY(exp.has_value())) {
 1326|    906|            return result(*std::forward<Exp>(exp));
 1327|    906|        }
 1328|       |
 1329|    906|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    906|        return result(unexpect, monostate{});
 1331|    906|    }
 1332|    906|    else {
 1333|    906|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    906|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    906|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 906]
  |  |  ------------------
  ------------------
 1335|    906|                   ? result(*std::forward<Exp>(exp))
 1336|    906|                   : result(unexpect,
 1337|    906|                            trivial_invoke(std::forward<F>(f),
 1338|    906|                                           std::forward<Exp>(exp).error()));
 1339|    906|    }
 1340|    906|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|    906|    {
 3648|    906|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  8.40k|    {
 1653|  8.40k|        return value();
 1654|  8.40k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|  2.70k|{
 6697|  2.70k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  2.70k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  2.70k|    auto start = begin;
 6701|  2.70k|    ++begin;
 6702|       |
 6703|  2.70k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.70k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  2.70k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 354, False: 2.34k]
  ------------------
 6710|    354|        handler.on_charset_inverted();
 6711|    354|        ++begin;
 6712|    354|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    354|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 6, False: 348]
  ------------------
 6719|      6|            handler.on_charset_single(char32_t{']'});
 6720|      6|            ++begin;
 6721|      6|        }
 6722|    354|    }
 6723|  2.34k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 2.34k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|   408k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 408k, False: 0]
  ------------------
 6728|   408k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   408k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 408k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|   408k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 2.70k, False: 405k]
  ------------------
 6733|  2.70k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  2.70k|        }
 6735|       |
 6736|   405k|        parse_presentation_set_literal(begin, end, handler);
 6737|   405k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  2.70k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|   405k|{
 6661|   405k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   405k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   405k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|   405k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|   405k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|   405k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 405k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|   405k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 405k, False: 0]
  |  Branch (6668:25): [True: 2.61k, False: 403k]
  |  Branch (6668:49): [True: 2.61k, False: 0]
  ------------------
 6669|   405k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 2.52k, False: 84]
  ------------------
 6670|  2.52k|        ++begin;
 6671|       |
 6672|  2.52k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  2.52k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  2.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.52k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  2.52k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  2.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.52k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  2.52k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  2.52k|        return;
 6686|  2.52k|    }
 6687|       |
 6688|   403k|    handler.on_charset_single(cp_first);
 6689|   403k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|   408k|{
 6637|   408k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   408k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   408k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|   408k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|   408k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|   816k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 408k]
  |  |  |  Branch (859:45): [True: 0, False: 408k]
  |  |  |  Branch (859:45): [True: 0, False: 408k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|   408k|    const auto cp =
 6646|   408k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|   408k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   408k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 408k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|   408k|    begin += len;
 6653|   408k|    return cp;
 6654|   408k|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.1k|    {
 1177|  16.1k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1429|  16.1k|    {
 1430|  16.1k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  436|  16.1k|    {
  437|  16.1k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  13.5k|    {
 6252|  13.5k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  13.5k|                charset_string_size};
 6254|  13.5k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1429|    594|    {
 1430|    594|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  436|    594|    {
  437|    594|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  1.68k|    {
 1430|  1.68k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.68k|    {
  437|  1.68k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4032|   118k|{
 4033|   118k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4033:19): [Folded - Ignored]
  ------------------
 4034|   118k|        return decode_utf8_code_point_exhaustive_valid(input);
 4035|   118k|    }
 4036|   118k|    else if constexpr (sizeof(CharT) == 2) {
 4037|   118k|        return decode_utf16_code_point_exhaustive_valid(input);
 4038|   118k|    }
 4039|   118k|    else {
 4040|   118k|        SCN_EXPECT(input.size() == 1);
 4041|   118k|        return static_cast<char32_t>(input.front());
 4042|   118k|    }
 4043|   118k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3910|  14.7k|    const auto is_trailing_code_unit = [](char ch) {
 3911|  14.7k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|  14.7k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6186|    800|    {
 6187|    800|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|    800|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    800|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|    800|        CharT r{};
 6189|    800|        std::memcpy(&r, m_data, m_size);
 6190|    800|        return r;
 6191|    800|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|   737k|{
 3807|   737k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|   737k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|   737k|    }
 3810|   737k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|   737k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|   737k|    }
 3813|   737k|    else {
 3814|       |        // utf-32
 3815|   737k|        static_assert(sizeof(U) == 4);
 3816|   737k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   737k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|   737k|        return 1;
 3818|   737k|    }
 3819|   737k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|   711k|{
 4013|   711k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|   711k|        return decode_utf8_code_point_exhaustive(input);
 4015|   711k|    }
 4016|   711k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|   711k|        return decode_utf16_code_point_exhaustive(input);
 4018|   711k|    }
 4019|   711k|    else {
 4020|   711k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   711k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   711k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|   711k|        auto cp = static_cast<char32_t>(input.front());
 4022|   711k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   711k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72.2k, False: 639k]
  |  |  ------------------
  ------------------
 4023|  72.2k|            return invalid_code_point;
 4024|  72.2k|        }
 4025|   639k|        return cp;
 4026|   711k|    }
 4027|   711k|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  47.5k|{
 3699|  47.5k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  47.5k|                                          decltype(first), decltype(last)> &&
 3701|  47.5k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  47.5k|        return {first, last};
 3703|  47.5k|    }
 3704|  47.5k|    else {
 3705|  47.5k|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  47.5k|                                       to_address(first), to_address(last)))};
 3707|  47.5k|    }
 3708|  47.5k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   148k|{
  326|   148k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   148k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   149k|{
  304|   149k|    return p;
  305|   149k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  6.64k|{
 3730|  6.64k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  6.64k|                      typename std::basic_string_view<CharT>::iterator,
 3732|  6.64k|                      decltype(it)> &&
 3733|  6.64k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  6.64k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  6.64k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  6.64k|        return it;
 3736|  6.64k|    }
 3737|  6.64k|    else {
 3738|  6.64k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  6.64k|    }
 3740|  6.64k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|    756|{
  326|    756|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|    756|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|    756|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  19.3k|    {
 3346|  19.3k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  19.3k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    120|    {
 1476|    120|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    120|    {
  447|    120|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.1k|    {
 1177|  18.1k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  18.0k|    {
 1430|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  18.0k|    {
  437|  18.0k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  5.02k|    {
 1598|  5.02k|        return has_value();
 1599|  5.02k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  31.3k|    {
  485|  31.3k|        return m_has_value;
  486|  31.3k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  13.0k|    {
 1627|  13.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  13.0k|        return this->get_value();
 1629|  13.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  13.0k|    {
  451|  13.0k|        return m_value;
  452|  13.0k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  1.95k|    {
 1430|  1.95k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.95k|    {
  437|  1.95k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.09k|    {
 1177|  2.09k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    142|    {
 1476|    142|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    142|    {
  447|    142|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1597|    934|    {
 1598|    934|        return has_value();
 1599|    934|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  3.25k|    {
  485|  3.25k|        return m_has_value;
  486|  3.25k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.02k|    {
 1627|  1.02k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.02k|        return this->get_value();
 1629|  1.02k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.02k|    {
  451|  1.02k|        return m_value;
  452|  1.02k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.43k|    {
 1177|  1.43k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  1.43k|    {
 1430|  1.43k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  1.43k|    {
  437|  1.43k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    224|    {
 1837|    224|        return detail::transform_error_impl(std::move(*this),
 1838|    224|                                            std::forward<F>(f));
 1839|    224|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    224|{
 1323|    224|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    224|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    224|        if (SCN_LIKELY(exp.has_value())) {
 1326|    224|            return result(*std::forward<Exp>(exp));
 1327|    224|        }
 1328|       |
 1329|    224|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    224|        return result(unexpect, monostate{});
 1331|    224|    }
 1332|    224|    else {
 1333|    224|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    224|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    224|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 224, False: 0]
  |  |  ------------------
  ------------------
 1335|    224|                   ? result(*std::forward<Exp>(exp))
 1336|    224|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    224|    }
 1340|    224|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.02k|    {
 1663|  1.02k|        return std::move(value());
 1664|  1.02k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|    584|    {
 1430|    584|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|    584|    {
  437|    584|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.91k|    {
 1177|  2.91k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1613|    142|    {
 1614|    142|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    142|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    142|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    142|        return std::move(this->get_unexpected().error());
 1616|    142|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    142|    {
  468|    142|        return m_unexpected;
  469|    142|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    706|    {
 1486|    706|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  2.33k|    {
  447|  2.33k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    332|    {
 2724|    332|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    332|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    332|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    332|    {
 2705|    332|        return decay_copy(t.begin());
 2706|    332|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1948|    800|{
 1949|    800|    return SCN_FWD(t);
  ------------------
  |  |  930|    800|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|    800|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3329|    332|    {
 3330|    332|        return m_iterator;
 3331|    332|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    332|    {
 2781|    332|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    332|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    332|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    332|    {
 2763|    332|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    332|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    332|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3333|    332|    {
 3334|    332|        return m_sentinel;
 3335|    332|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|    332|    {
 3316|    332|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  1.43k|    {
 1598|  1.43k|        return has_value();
 1599|  1.43k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.86k|    {
  485|  2.86k|        return m_has_value;
  486|  2.86k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.43k|    {
 1663|  1.43k|        return std::move(value());
 1664|  1.43k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.43k|    {
 1627|  1.43k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.43k|        return this->get_value();
 1629|  1.43k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.43k|    {
  451|  1.43k|        return m_value;
  452|  1.43k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.9k|    {
 1177|  10.9k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  10.9k|    {
 1430|  10.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  10.9k|    {
  437|  10.9k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  8.10k|    {
 1837|  8.10k|        return detail::transform_error_impl(std::move(*this),
 1838|  8.10k|                                            std::forward<F>(f));
 1839|  8.10k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  8.10k|{
 1323|  8.10k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  8.10k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  8.10k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  8.10k|            return result(*std::forward<Exp>(exp));
 1327|  8.10k|        }
 1328|       |
 1329|  8.10k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  8.10k|        return result(unexpect, monostate{});
 1331|  8.10k|    }
 1332|  8.10k|    else {
 1333|  8.10k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  8.10k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.10k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.10k, False: 0]
  |  |  ------------------
  ------------------
 1335|  8.10k|                   ? result(*std::forward<Exp>(exp))
 1336|  8.10k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  8.10k|    }
 1340|  8.10k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  13.0k|    {
 1663|  13.0k|        return std::move(value());
 1664|  13.0k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|    120|    {
 1614|    120|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    120|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    120|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    120|        return std::move(this->get_unexpected().error());
 1616|    120|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    120|    {
  468|    120|        return m_unexpected;
  469|    120|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|    830|    {
 1486|    830|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  10.9k|    {
 1598|  10.9k|        return has_value();
 1599|  10.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  21.9k|    {
  485|  21.9k|        return m_has_value;
  486|  21.9k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  10.9k|    {
 1663|  10.9k|        return std::move(value());
 1664|  10.9k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  10.9k|    {
 1627|  10.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  10.9k|        return this->get_value();
 1629|  10.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  10.9k|    {
  451|  10.9k|        return m_value;
  452|  10.9k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  1.62k|    {
 1476|  1.62k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    284|    {
 1476|    284|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    426|    {
  447|    426|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.55k|    {
 1177|  3.55k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  2.32k|    {
 1476|  2.32k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  2.32k|    {
  447|  2.32k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1597|  3.27k|    {
 1598|  3.27k|        return has_value();
 1599|  3.27k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  6.35k|    {
  485|  6.35k|        return m_has_value;
  486|  6.35k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1603|  1.16k|    {
 1604|  1.16k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.16k|        return this->get_unexpected().error();
 1606|  1.16k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  1.58k|    {
  468|  1.58k|        return m_unexpected;
  469|  1.58k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|    592|    {
 1430|    592|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    592|    {
  437|    592|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    592|    {
 1177|    592|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|    796|    {
 1627|    796|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    796|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    796|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    796|        return this->get_value();
 1629|    796|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|    796|    {
  451|    796|        return m_value;
  452|    796|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    450|    {
 1598|    450|        return has_value();
 1599|    450|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  1.18k|    {
  485|  1.18k|        return m_has_value;
  486|  1.18k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    450|    {
 1177|    450|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|    592|    {
 1663|    592|        return std::move(value());
 1664|    592|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|    592|    {
 1627|    592|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    592|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    592|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    592|        return this->get_value();
 1629|    592|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|    592|    {
  451|    592|        return m_value;
  452|    592|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|  32.6k|    {
 3334|  32.6k|        return m_sentinel;
 3335|  32.6k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    938|    {
 1837|    938|        return detail::transform_error_impl(std::move(*this),
 1838|    938|                                            std::forward<F>(f));
 1839|    938|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    938|{
 1323|    938|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    938|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    938|        if (SCN_LIKELY(exp.has_value())) {
 1326|    938|            return result(*std::forward<Exp>(exp));
 1327|    938|        }
 1328|       |
 1329|    938|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    938|        return result(unexpect, monostate{});
 1331|    938|    }
 1332|    938|    else {
 1333|    938|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    938|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    938|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 796, False: 142]
  |  |  ------------------
  ------------------
 1335|    938|                   ? result(*std::forward<Exp>(exp))
 1336|    938|                   : result(unexpect,
 1337|    142|                            trivial_invoke(std::forward<F>(f),
 1338|    142|                                           std::forward<Exp>(exp).error()));
 1339|    938|    }
 1340|    938|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|    796|    {
 1430|    796|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|    796|    {
  437|    796|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    142|    {
 1486|    142|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|    796|    {
 1663|    796|        return std::move(value());
 1664|    796|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|  33.9k|    {
 3330|  33.9k|        return m_iterator;
 3331|  33.9k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|    450|    {
 1430|    450|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    450|    {
  437|    450|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    450|    {
 1837|    450|        return detail::transform_error_impl(std::move(*this),
 1838|    450|                                            std::forward<F>(f));
 1839|    450|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|    450|{
 1323|    450|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    450|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    450|        if (SCN_LIKELY(exp.has_value())) {
 1326|    450|            return result(*std::forward<Exp>(exp));
 1327|    450|        }
 1328|       |
 1329|    450|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    450|        return result(unexpect, monostate{});
 1331|    450|    }
 1332|    450|    else {
 1333|    450|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    450|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    450|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 450, False: 0]
  |  |  ------------------
  ------------------
 1335|    450|                   ? result(*std::forward<Exp>(exp))
 1336|    450|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    450|    }
 1340|    450|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|    900|    {
  485|    900|        return m_has_value;
  486|    900|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|    450|    {
 1663|    450|        return std::move(value());
 1664|    450|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|    450|    {
 1627|    450|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    450|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    450|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    450|        return this->get_value();
 1629|    450|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    450|    {
  451|    450|        return m_value;
  452|    450|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|    450|    {
 1430|    450|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    450|    {
  437|    450|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    450|    {
 1177|    450|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    450|    {
 1598|    450|        return has_value();
 1599|    450|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    900|    {
  485|    900|        return m_has_value;
  486|    900|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|    450|    {
 1663|    450|        return std::move(value());
 1664|    450|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|    450|    {
 1627|    450|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    450|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    450|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    450|        return this->get_value();
 1629|    450|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    450|    {
  451|    450|        return m_value;
  452|    450|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    422|    {
 1837|    422|        return detail::transform_error_impl(std::move(*this),
 1838|    422|                                            std::forward<F>(f));
 1839|    422|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|    422|{
 1323|    422|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    422|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    422|        if (SCN_LIKELY(exp.has_value())) {
 1326|    422|            return result(*std::forward<Exp>(exp));
 1327|    422|        }
 1328|       |
 1329|    422|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    422|        return result(unexpect, monostate{});
 1331|    422|    }
 1332|    422|    else {
 1333|    422|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    422|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    422|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 422]
  |  |  ------------------
  ------------------
 1335|    422|                   ? result(*std::forward<Exp>(exp))
 1336|    422|                   : result(unexpect,
 1337|    422|                            trivial_invoke(std::forward<F>(f),
 1338|    422|                                           std::forward<Exp>(exp).error()));
 1339|    422|    }
 1340|    422|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1613|    422|    {
 1614|    422|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    422|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    422|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    422|        return std::move(this->get_unexpected().error());
 1616|    422|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|    706|    {
 3648|    706|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|  11.6k|    {
 3316|  11.6k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_LPv0ELSN_0EEEONS0_10unexpectedIT_EE:
 1475|     28|    {
 1476|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  625|     28|    {
  626|     28|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  688|     28|    {
  689|     28|        scn::detail::construct_at(unexpected_ptr(),
  690|     28|                                  std::forward<Args>(args)...);
  691|     28|        m_has_value = false;
  692|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     84|    {
  718|     84|        return reinterpret_cast<unexpected<E>*>(
  719|     84|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     84|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     84|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     28|    {
 1177|     28|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     28|    {
 1598|     28|        return has_value();
 1599|     28|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|     84|    {
  675|     84|        return m_has_value;
  676|     84|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     28|    {
 1604|     28|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     28|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     28|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     28|        return this->get_unexpected().error();
 1606|     28|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     28|    {
  658|     28|        return *unexpected_ptr();
  659|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     28|    {
  631|     28|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 28]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     28|        else {
  635|     28|            destroy_unexpected();
  636|     28|        }
  637|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     28|    {
  700|     28|        scn::detail::destroy_at(unexpected_ptr());
  701|     28|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1597|  3.05k|    {
 1598|  3.05k|        return has_value();
 1599|  3.05k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.83k|    {
  485|  5.83k|        return m_has_value;
  486|  5.83k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1603|  2.19k|    {
 1604|  2.19k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.19k|        return this->get_unexpected().error();
 1606|  2.19k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.19k|    {
  468|  2.19k|        return m_unexpected;
  469|  2.19k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|    584|    {
 1663|    584|        return std::move(value());
 1664|    584|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|    584|    {
 1627|    584|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    584|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    584|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    584|        return this->get_value();
 1629|    584|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|    584|    {
  451|    584|        return m_value;
  452|    584|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    944|    {
 1476|    944|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.06k|    {
  447|  1.06k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  15.9k|    {
 1177|  15.9k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  9.99k|    {
 1476|  9.99k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  9.99k|    {
  447|  9.99k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  16.8k|    {
 1598|  16.8k|        return has_value();
 1599|  16.8k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  27.6k|    {
  485|  27.6k|        return m_has_value;
  486|  27.6k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  5.09k|    {
 1604|  5.09k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.09k|        return this->get_unexpected().error();
 1606|  5.09k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.09k|    {
  468|  5.09k|        return m_unexpected;
  469|  5.09k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  3.32k|    {
 1430|  3.32k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  3.32k|    {
  437|  3.32k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.32k|    {
 1177|  3.32k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  4.94k|    {
 1627|  4.94k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.94k|        return this->get_value();
 1629|  4.94k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  4.94k|    {
  451|  4.94k|        return m_value;
  452|  4.94k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.49k|    {
 1598|  2.49k|        return has_value();
 1599|  2.49k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  6.64k|    {
  485|  6.64k|        return m_has_value;
  486|  6.64k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.49k|    {
 1177|  2.49k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.32k|    {
 1663|  3.32k|        return std::move(value());
 1664|  3.32k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.32k|    {
 1627|  3.32k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.32k|        return this->get_value();
 1629|  3.32k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.32k|    {
  451|  3.32k|        return m_value;
  452|  3.32k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  5.06k|    {
 1837|  5.06k|        return detail::transform_error_impl(std::move(*this),
 1838|  5.06k|                                            std::forward<F>(f));
 1839|  5.06k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  5.06k|{
 1323|  5.06k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  5.06k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  5.06k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  5.06k|            return result(*std::forward<Exp>(exp));
 1327|  5.06k|        }
 1328|       |
 1329|  5.06k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  5.06k|        return result(unexpect, monostate{});
 1331|  5.06k|    }
 1332|  5.06k|    else {
 1333|  5.06k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  5.06k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  5.06k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.94k, False: 120]
  |  |  ------------------
  ------------------
 1335|  5.06k|                   ? result(*std::forward<Exp>(exp))
 1336|  5.06k|                   : result(unexpect,
 1337|    120|                            trivial_invoke(std::forward<F>(f),
 1338|    120|                                           std::forward<Exp>(exp).error()));
 1339|  5.06k|    }
 1340|  5.06k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  4.94k|    {
 1430|  4.94k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  4.94k|    {
  437|  4.94k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    120|    {
 1486|    120|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  4.94k|    {
 1663|  4.94k|        return std::move(value());
 1664|  4.94k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  2.49k|    {
 1430|  2.49k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.49k|    {
  437|  2.49k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.49k|    {
 1837|  2.49k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.49k|                                            std::forward<F>(f));
 1839|  2.49k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  2.49k|{
 1323|  2.49k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.49k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.49k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.49k|            return result(*std::forward<Exp>(exp));
 1327|  2.49k|        }
 1328|       |
 1329|  2.49k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.49k|        return result(unexpect, monostate{});
 1331|  2.49k|    }
 1332|  2.49k|    else {
 1333|  2.49k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.49k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.49k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.49k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.49k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.49k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.49k|    }
 1340|  2.49k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.99k|    {
  485|  4.99k|        return m_has_value;
  486|  4.99k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.49k|    {
 1663|  2.49k|        return std::move(value());
 1664|  2.49k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.49k|    {
 1627|  2.49k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.49k|        return this->get_value();
 1629|  2.49k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.49k|    {
  451|  2.49k|        return m_value;
  452|  2.49k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  2.49k|    {
 1430|  2.49k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.49k|    {
  437|  2.49k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.49k|    {
 1177|  2.49k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|  2.49k|    {
 1598|  2.49k|        return has_value();
 1599|  2.49k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.99k|    {
  485|  4.99k|        return m_has_value;
  486|  4.99k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.49k|    {
 1663|  2.49k|        return std::move(value());
 1664|  2.49k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.49k|    {
 1627|  2.49k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.49k|        return this->get_value();
 1629|  2.49k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.49k|    {
  451|  2.49k|        return m_value;
  452|  2.49k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|     28|    {
 1476|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  625|     28|    {
  626|     28|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|     28|    {
  689|     28|        scn::detail::construct_at(unexpected_ptr(),
  690|     28|                                  std::forward<Args>(args)...);
  691|     28|        m_has_value = false;
  692|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     84|    {
  718|     84|        return reinterpret_cast<unexpected<E>*>(
  719|     84|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     84|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     84|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     28|    {
 1177|     28|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     28|    {
 1598|     28|        return has_value();
 1599|     28|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|     84|    {
  675|     84|        return m_has_value;
  676|     84|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     28|    {
 1604|     28|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     28|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     28|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     28|        return this->get_unexpected().error();
 1606|     28|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     28|    {
  658|     28|        return *unexpected_ptr();
  659|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     28|    {
  631|     28|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 28]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     28|        else {
  635|     28|            destroy_unexpected();
  636|     28|        }
  637|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     28|    {
  700|     28|        scn::detail::destroy_at(unexpected_ptr());
  701|     28|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  10.9k|    {
 2855|  10.9k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  10.9k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  10.9k|    {
 2836|  10.9k|        return t.data();
 2837|  10.9k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  18.8k|    {
 3221|  18.8k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 2.97k, False: 15.8k]
  ------------------
 3222|  18.8k|                   ? nullptr
 3223|  18.8k|                   : std::addressof(*ranges::begin(derived()));
 3224|  18.8k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  18.8k|    {
 3005|  18.8k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  18.8k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  18.8k|    {
 2978|  18.8k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  18.8k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  18.8k|    {
 3339|  18.8k|        return m_iterator == m_sentinel;
 3340|  18.8k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  34.6k|    {
 3180|  34.6k|        return static_cast<D&>(*this);
 3181|  34.6k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  15.8k|    {
 2724|  15.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  15.8k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  15.8k|    {
 2705|  15.8k|        return decay_copy(t.begin());
 2706|  15.8k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    142|    {
 1837|    142|        return detail::transform_error_impl(std::move(*this),
 1838|    142|                                            std::forward<F>(f));
 1839|    142|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    142|{
 1323|    142|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    142|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    142|        if (SCN_LIKELY(exp.has_value())) {
 1326|    142|            return result(*std::forward<Exp>(exp));
 1327|    142|        }
 1328|       |
 1329|    142|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    142|        return result(unexpect, monostate{});
 1331|    142|    }
 1332|    142|    else {
 1333|    142|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    142|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    142|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 142, False: 0]
  |  |  ------------------
  ------------------
 1335|    142|                   ? result(*std::forward<Exp>(exp))
 1336|    142|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    142|    }
 1340|    142|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    142|    {
 1430|    142|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    142|    {
  437|    142|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    142|    {
 1177|    142|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    142|    {
 1598|    142|        return has_value();
 1599|    142|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    284|    {
  485|    284|        return m_has_value;
  486|    284|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    142|    {
 1663|    142|        return std::move(value());
 1664|    142|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    142|    {
 1627|    142|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    142|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    142|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    142|        return this->get_value();
 1629|    142|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    142|    {
  451|    142|        return m_value;
  452|    142|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1822|    284|    {
 1823|    284|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    284|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    284|{
 1323|    284|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    284|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    284|        if (SCN_LIKELY(exp.has_value())) {
 1326|    284|            return result(*std::forward<Exp>(exp));
 1327|    284|        }
 1328|       |
 1329|    284|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    284|        return result(unexpect, monostate{});
 1331|    284|    }
 1332|    284|    else {
 1333|    284|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    284|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    284|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 284]
  |  |  ------------------
  ------------------
 1335|    284|                   ? result(*std::forward<Exp>(exp))
 1336|    284|                   : result(unexpect,
 1337|    284|                            trivial_invoke(std::forward<F>(f),
 1338|    284|                                           std::forward<Exp>(exp).error()));
 1339|    284|    }
 1340|    284|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    136|    {
 2724|    136|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    136|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    136|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    136|    {
 2705|    136|        return decay_copy(t.begin());
 2706|    136|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    128|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    824|    {
 1837|    824|        return detail::transform_error_impl(std::move(*this),
 1838|    824|                                            std::forward<F>(f));
 1839|    824|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|    824|{
 1323|    824|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    824|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    824|        if (SCN_LIKELY(exp.has_value())) {
 1326|    824|            return result(*std::forward<Exp>(exp));
 1327|    824|        }
 1328|       |
 1329|    824|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    824|        return result(unexpect, monostate{});
 1331|    824|    }
 1332|    824|    else {
 1333|    824|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    824|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    824|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 824, False: 0]
  |  |  ------------------
  ------------------
 1335|    824|                   ? result(*std::forward<Exp>(exp))
 1336|    824|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    824|    }
 1340|    824|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|    824|    {
 1430|    824|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|    824|    {
  437|    824|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    824|    {
 1177|    824|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    824|    {
 1598|    824|        return has_value();
 1599|    824|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.64k|    {
  485|  1.64k|        return m_has_value;
  486|  1.64k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|    824|    {
 1663|    824|        return std::move(value());
 1664|    824|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|    824|    {
 1627|    824|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    824|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    824|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    824|        return this->get_value();
 1629|    824|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    824|    {
  451|    824|        return m_value;
  452|    824|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|    830|    {
 1823|    830|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    830|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|    830|{
 1323|    830|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    830|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    830|        if (SCN_LIKELY(exp.has_value())) {
 1326|    830|            return result(*std::forward<Exp>(exp));
 1327|    830|        }
 1328|       |
 1329|    830|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    830|        return result(unexpect, monostate{});
 1331|    830|    }
 1332|    830|    else {
 1333|    830|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    830|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    830|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 830]
  |  |  ------------------
  ------------------
 1335|    830|                   ? result(*std::forward<Exp>(exp))
 1336|    830|                   : result(unexpect,
 1337|    830|                            trivial_invoke(std::forward<F>(f),
 1338|    830|                                           std::forward<Exp>(exp).error()));
 1339|    830|    }
 1340|    830|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|    830|    {
 3648|    830|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  3.41k|    {
 1653|  3.41k|        return value();
 1654|  3.41k|    }
_ZN3scn2v36detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|    252|{
 6697|    252|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    252|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    252|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|    252|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    252|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    252|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|    252|    auto start = begin;
 6701|    252|    ++begin;
 6702|       |
 6703|    252|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|    252|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 78, False: 174]
  ------------------
 6710|     78|        handler.on_charset_inverted();
 6711|     78|        ++begin;
 6712|     78|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 78]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|     78|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 6, False: 72]
  ------------------
 6719|      6|            handler.on_charset_single(char32_t{']'});
 6720|      6|            ++begin;
 6721|      6|        }
 6722|     78|    }
 6723|    174|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 174]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  3.49k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 3.49k, False: 0]
  ------------------
 6728|  3.49k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  3.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.49k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  3.49k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 252, False: 3.24k]
  ------------------
 6733|    252|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|    252|        }
 6735|       |
 6736|  3.24k|        parse_presentation_set_literal(begin, end, handler);
 6737|  3.24k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|    252|}
_ZN3scn2v36detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|  3.24k|{
 6661|  3.24k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  3.24k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  3.24k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  3.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.24k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  3.24k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 3.24k, False: 0]
  |  Branch (6668:25): [True: 240, False: 3.00k]
  |  Branch (6668:49): [True: 240, False: 0]
  ------------------
 6669|  3.24k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 234, False: 6]
  ------------------
 6670|    234|        ++begin;
 6671|       |
 6672|    234|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|    234|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 234]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|    234|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 234]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|    234|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|    234|        return;
 6686|    234|    }
 6687|       |
 6688|  3.01k|    handler.on_charset_single(cp_first);
 6689|  3.01k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|  3.48k|{
 6637|  3.48k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  3.48k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  3.48k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  6.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.48k]
  |  |  |  Branch (859:45): [True: 0, False: 3.48k]
  |  |  |  Branch (859:45): [True: 0, False: 3.48k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  3.48k|    const auto cp =
 6646|  3.48k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  3.48k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  3.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.48k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  3.48k|    begin += len;
 6653|  3.48k|    return cp;
 6654|  3.48k|}
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  6.00k|    {
 6252|  6.00k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  6.00k|                charset_string_size};
 6254|  6.00k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|    282|    {
 1430|    282|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|    282|    {
  437|    282|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|  1.67k|{
 3654|  1.67k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.67k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  5.73k|    {
 2855|  5.73k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  5.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  5.73k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  5.73k|    {
 2836|  5.73k|        return t.data();
 2837|  5.73k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  91.0k|    {
 5466|  91.0k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  91.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.0k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  91.0k|        return static_cast<std::size_t>(m_desc &
 5471|  91.0k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  91.0k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|   149k|    {
 5491|   149k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   149k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  58.8k|    {
 5434|  58.8k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  58.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 58.8k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  58.8k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  58.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 58.7k]
  |  |  ------------------
  ------------------
 5442|     68|            return {};
 5443|     68|        }
 5444|       |
 5445|  58.7k|        const auto t = type(id);
 5446|  58.7k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  58.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.36k, False: 57.4k]
  |  |  ------------------
  ------------------
 5447|  1.36k|            return {};
 5448|  1.36k|        }
 5449|       |
 5450|  57.4k|        basic_scan_arg<Context> arg;
 5451|  57.4k|        arg.m_type = t;
 5452|  57.4k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 57.4k, False: 0]
  ------------------
 5453|  57.4k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  57.4k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  57.4k|        return arg;
 5459|  58.7k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  58.8k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  90.1k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  58.7k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  58.7k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  58.7k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  58.7k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  58.7k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  57.4k|    {
 5495|  57.4k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  57.4k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|   114k|    {
 5247|   114k|        return m_type != detail::arg_type::none_type;
 5248|   114k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  5.65k|{
 8417|  5.65k|#define SCN_VISIT(Type)                                         \
 8418|  5.65k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  5.65k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  5.65k|    }                                                           \
 8421|  5.65k|    else {                                                      \
 8422|  5.65k|        return vis(monostate_val);                              \
 8423|  5.65k|    }
 8424|       |
 8425|  5.65k|    monostate monostate_val{};
 8426|       |
 8427|  5.65k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 5.65k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 5.65k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    628|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 628, False: 5.02k]
  ------------------
 8433|    628|            SCN_VISIT(int);
  ------------------
  |  | 8418|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    628|    }                                                           \
  |  | 8421|    628|    else {                                                      \
  |  | 8422|    628|        return vis(monostate_val);                              \
  |  | 8423|    628|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 5.65k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 5.65k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 5.65k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 5.65k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    628|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 628, False: 5.02k]
  ------------------
 8443|    628|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    628|    }                                                           \
  |  | 8421|    628|    else {                                                      \
  |  | 8422|    628|        return vis(monostate_val);                              \
  |  | 8423|    628|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 5.65k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 5.65k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    628|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 628, False: 5.02k]
  ------------------
 8449|    628|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    628|    }                                                           \
  |  | 8421|    628|    else {                                                      \
  |  | 8422|    628|        return vis(monostate_val);                              \
  |  | 8423|    628|    }
  ------------------
 8450|    628|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 628, False: 5.02k]
  ------------------
 8451|    628|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    628|    }                                                           \
  |  | 8421|    628|    else {                                                      \
  |  | 8422|    628|        return vis(monostate_val);                              \
  |  | 8423|    628|    }
  ------------------
 8452|    628|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 628, False: 5.02k]
  ------------------
 8453|    628|            SCN_VISIT(char);
  ------------------
  |  | 8418|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    628|    }                                                           \
  |  | 8421|    628|    else {                                                      \
  |  | 8422|    628|        return vis(monostate_val);                              \
  |  | 8423|    628|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 5.65k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 5.65k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 5.65k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    628|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 628, False: 5.02k]
  ------------------
 8461|    628|            SCN_VISIT(double);
  ------------------
  |  | 8418|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    628|    }                                                           \
  |  | 8421|    628|    else {                                                      \
  |  | 8422|    628|        return vis(monostate_val);                              \
  |  | 8423|    628|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 5.65k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|    628|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 628, False: 5.02k]
  ------------------
 8465|    628|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    628|    }                                                           \
  |  | 8421|    628|    else {                                                      \
  |  | 8422|    628|        return vis(monostate_val);                              \
  |  | 8423|    628|    }
  ------------------
 8466|    628|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 628, False: 5.02k]
  ------------------
 8467|    628|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    628|    }                                                           \
  |  | 8421|    628|    else {                                                      \
  |  | 8422|    628|        return vis(monostate_val);                              \
  |  | 8423|    628|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 5.65k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|    628|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 628, False: 5.02k]
  ------------------
 8471|    628|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    628|    }                                                           \
  |  | 8421|    628|    else {                                                      \
  |  | 8422|    628|        return vis(monostate_val);                              \
  |  | 8423|    628|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 5.65k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 5.65k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 5.65k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 5.65k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 5.65k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  5.65k|            SCN_CLANG_POP
 8495|  5.65k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.92k|    {
 1837|  1.92k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.92k|                                            std::forward<F>(f));
 1839|  1.92k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.92k|{
 1323|  1.92k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.92k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.92k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.92k|            return result(*std::forward<Exp>(exp));
 1327|  1.92k|        }
 1328|       |
 1329|  1.92k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.92k|        return result(unexpect, monostate{});
 1331|  1.92k|    }
 1332|  1.92k|    else {
 1333|  1.92k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.92k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.92k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.82k, False: 102]
  |  |  ------------------
  ------------------
 1335|  1.92k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.92k|                   : result(unexpect,
 1337|    102|                            trivial_invoke(std::forward<F>(f),
 1338|    102|                                           std::forward<Exp>(exp).error()));
 1339|  1.92k|    }
 1340|  1.92k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    102|    {
 1486|    102|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.82k|    {
 1663|  1.82k|        return std::move(value());
 1664|  1.82k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|  90.9k|    {
 5545|  90.9k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|  90.9k|    {
 8056|  90.9k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  90.9k|{
 7044|  90.9k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  90.9k|    handler.check_args_exhausted();
 7046|  90.9k|    return handler.get_error();
 7047|  90.9k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  90.9k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  90.9k|    auto begin = format.data();
 7013|  90.9k|    auto it = begin;
 7014|  90.9k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   196k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 190k, False: 6.83k]
  ------------------
 7017|   190k|        const auto ch = *it++;
 7018|   190k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 94.9k, False: 95.1k]
  ------------------
 7019|  94.9k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  94.9k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  94.9k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 83.2k, False: 11.7k]
  ------------------
 7023|  83.2k|                return;
 7024|  83.2k|            }
 7025|  94.9k|        }
 7026|  95.1k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 2.04k, False: 93.0k]
  ------------------
 7027|  2.04k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  3.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 872, False: 1.17k]
  |  |  |  Branch (859:45): [True: 264, False: 1.78k]
  |  |  |  Branch (859:45): [True: 608, False: 1.17k]
  |  |  ------------------
  ------------------
 7028|    872|                handler.on_error("Unmatched '}' in format string");
 7029|    872|                return;
 7030|    872|            }
 7031|       |
 7032|  1.17k|            handler.on_literal_text(begin, it);
 7033|  1.17k|            begin = ++it;
 7034|  1.17k|        }
 7035|   190k|    }
 7036|       |
 7037|  6.83k|    handler.on_literal_text(begin, end);
 7038|  6.83k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|  94.9k|{
 6942|  94.9k|    struct id_adapter {
 6943|  94.9k|        constexpr void operator()()
 6944|  94.9k|        {
 6945|  94.9k|            arg_id = handler.on_arg_id();
 6946|  94.9k|        }
 6947|  94.9k|        constexpr void operator()(std::size_t id)
 6948|  94.9k|        {
 6949|  94.9k|            arg_id = handler.on_arg_id(id);
 6950|  94.9k|        }
 6951|       |
 6952|  94.9k|        constexpr void on_error(const char* msg)
 6953|  94.9k|        {
 6954|  94.9k|            SCN_UNLIKELY_ATTR
 6955|  94.9k|            handler.on_error(msg);
 6956|  94.9k|        }
 6957|       |
 6958|  94.9k|        Handler& handler;
 6959|  94.9k|        std::size_t arg_id;
 6960|  94.9k|    };
 6961|       |
 6962|  94.9k|    ++begin;
 6963|  94.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 94.8k]
  |  |  ------------------
  ------------------
 6964|    134|        handler.on_error("Unexpected end of replacement field");
 6965|    134|        return begin;
 6966|    134|    }
 6967|       |
 6968|  94.8k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 5.62k, False: 89.2k]
  ------------------
 6969|  5.62k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  5.62k|    }
 6971|  89.2k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 5.16k, False: 84.0k]
  ------------------
 6972|  5.16k|        handler.on_literal_text(begin, begin + 1);
 6973|  5.16k|    }
 6974|  84.0k|    else {
 6975|  84.0k|        auto adapter = id_adapter{handler, 0};
 6976|  84.0k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  84.0k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  84.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 83.9k]
  |  |  ------------------
  ------------------
 6979|    110|            handler.on_error("Missing '}' in format string");
 6980|    110|            return begin;
 6981|    110|        }
 6982|       |
 6983|  83.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 140, False: 83.8k]
  ------------------
 6984|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    140|        }
 6986|  83.8k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 53.1k, False: 30.6k]
  ------------------
 6987|  53.1k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  53.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 53.0k]
  |  |  ------------------
  ------------------
 6988|     74|                handler.on_error("Unexpected end of replacement field");
 6989|     74|                return begin;
 6990|     74|            }
 6991|  53.0k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  53.0k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.00k, False: 50.0k]
  |  |  |  Branch (859:45): [True: 0, False: 53.0k]
  |  |  |  Branch (859:45): [True: 3.00k, False: 50.0k]
  |  |  ------------------
  ------------------
 6993|  3.00k|                handler.on_error("Unknown format specifier");
 6994|  3.00k|                return begin;
 6995|  3.00k|            }
 6996|  53.0k|        }
 6997|  30.6k|        else {
 6998|  30.6k|            SCN_UNLIKELY_ATTR
 6999|  30.6k|            handler.on_error("Missing '}' in format string");
 7000|  30.6k|            return begin;
 7001|  30.6k|        }
 7002|  83.9k|    }
 7003|  61.0k|    return begin + 1;
 7004|  94.8k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  58.8k|    {
 8039|  58.8k|        return m_args.get(id);
 8040|  58.8k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8043|  5.76k|    {
 8044|  5.76k|        return m_args;
 8045|  5.76k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  55.5k|    {
 8049|  55.5k|        return m_locale;
 8050|  55.5k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  56.4k|    {
 5566|  56.4k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  56.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 56.4k]
  |  |  ------------------
  ------------------
 5567|     42|            on_error(
 5568|     42|                "Cannot switch from manual to automatic argument indexing");
 5569|     42|            return 0;
 5570|     42|        }
 5571|       |
 5572|  56.4k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  56.4k|        do_check_arg_id(id);
 5574|  56.4k|        return id;
 5575|  56.4k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5589|    112|    {
 5590|    112|        return detail::handle_error(
 5591|    112|            scan_error{scan_error::invalid_format_string, msg});
 5592|    112|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  58.8k|{
 6054|  58.8k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  58.8k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  58.8k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  84.0k|{
 6443|  84.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  84.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  84.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  84.0k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 84.0k, False: 0]
  |  Branch (6444:26): [True: 33.2k, False: 50.8k]
  ------------------
 6445|  33.2k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  33.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|  33.2k|    }
 6447|       |
 6448|  50.8k|    handler();
 6449|  50.8k|    return begin;
 6450|  84.0k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|  33.2k|{
 6413|  33.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  33.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|  33.2k|    CharT c = *begin;
 6416|  33.2k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 30.4k, False: 2.77k]
  |  Branch (6416:27): [True: 144, False: 2.63k]
  ------------------
 6417|  30.5k|        handler.on_error("Invalid argument ID");
 6418|  30.5k|        return begin;
 6419|  30.5k|    }
 6420|       |
 6421|  2.63k|    int idx = 0;
 6422|  2.63k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 324, False: 2.31k]
  ------------------
 6423|    324|        idx = parse_simple_int(begin, end);
 6424|    324|    }
 6425|  2.31k|    else {
 6426|  2.31k|        ++begin;
 6427|  2.31k|    }
 6428|       |
 6429|  2.63k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 110, False: 2.52k]
  |  Branch (6429:26): [True: 2.38k, False: 140]
  |  Branch (6429:50): [True: 78, False: 2.30k]
  ------------------
 6430|    188|        handler.on_error("Invalid argument ID");
 6431|    188|        return begin;
 6432|    188|    }
 6433|  2.44k|    handler(idx);
 6434|       |
 6435|  2.44k|    return begin;
 6436|  2.63k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|  30.7k|        {
 6954|  30.7k|            SCN_UNLIKELY_ATTR
 6955|  30.7k|            handler.on_error(msg);
 6956|  30.7k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  10.8k|{
 6392|  10.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  10.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  10.8k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  10.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  10.8k|    unsigned long long value = 0;
 6396|  26.2k|    do {
 6397|  26.2k|        value *= 10;
 6398|  26.2k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  26.2k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 116, False: 26.1k]
  ------------------
 6400|  26.2k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|    116|            return -1;
 6402|    116|        }
 6403|  26.1k|        ++begin;
 6404|  26.1k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 25.7k, False: 312]
  |  Branch (6404:30): [True: 23.6k, False: 2.14k]
  |  Branch (6404:47): [True: 15.4k, False: 8.22k]
  ------------------
 6405|  10.6k|    return static_cast<int>(value);
 6406|  10.8k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|  2.44k|        {
 6949|  2.44k|            arg_id = handler.on_arg_id(id);
 6950|  2.44k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5578|  2.44k|    {
 5579|  2.44k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 2.37k]
  |  |  ------------------
  ------------------
 5580|     70|            on_error(
 5581|     70|                "Cannot switch from manual to automatic argument indexing");
 5582|     70|            return;
 5583|     70|        }
 5584|  2.37k|        m_next_arg_id = -1;
 5585|  2.37k|        do_check_arg_id(id);
 5586|  2.37k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  50.8k|        {
 6945|  50.8k|            arg_id = handler.on_arg_id();
 6946|  50.8k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|   106k|    {
 5252|   106k|        return m_type;
 5253|   106k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  49.7k|    {
 5561|  49.7k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  49.7k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|   102k|    {
 5550|   102k|        return m_format.data();
 5551|   102k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  53.0k|    {
 7122|  53.0k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  53.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  53.0k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|  53.0k|{
 6858|  53.0k|    auto do_presentation = [&]() -> const CharT* {
 6859|  53.0k|        if (*begin == CharT{'['}) {
 6860|  53.0k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  53.0k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  53.0k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  53.0k|                return begin;
 6866|  53.0k|            }
 6867|  53.0k|            handler.on_character_set_string(set);
 6868|  53.0k|            return begin;
 6869|  53.0k|        }
 6870|  53.0k|        if (*begin == CharT{'/'}) {
 6871|  53.0k|            return parse_presentation_regex(begin, end, handler);
 6872|  53.0k|        }
 6873|  53.0k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  53.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  53.0k|            handler.on_error("Invalid type specifier in format string");
 6876|  53.0k|            return begin;
 6877|  53.0k|        }
 6878|  53.0k|        handler.on_type(type);
 6879|  53.0k|        return begin;
 6880|  53.0k|    };
 6881|       |
 6882|  53.0k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 51.9k, False: 1.09k]
  |  Branch (6882:28): [True: 2.24k, False: 49.7k]
  ------------------
 6883|  53.0k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 878, False: 1.36k]
  |  Branch (6883:36): [True: 826, False: 52]
  ------------------
 6884|    826|        return do_presentation();
 6885|    826|    }
 6886|       |
 6887|  52.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.2k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  52.2k|    begin = parse_align(begin, end, handler);
 6893|  52.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 52.1k]
  |  |  ------------------
  ------------------
 6894|    126|        handler.on_error("Unexpected end of format string");
 6895|    126|        return begin;
 6896|    126|    }
 6897|       |
 6898|  52.1k|    begin = parse_width(begin, end, handler);
 6899|  52.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 52.0k]
  |  |  ------------------
  ------------------
 6900|    120|        handler.on_error("Unexpected end of format string");
 6901|    120|        return begin;
 6902|    120|    }
 6903|       |
 6904|  52.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 7.29k, False: 44.7k]
  ------------------
 6905|  7.29k|        ++begin;
 6906|  7.29k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 7.26k]
  |  |  ------------------
  ------------------
 6907|     34|            handler.on_error("Unexpected end of format string");
 6908|     34|            return begin;
 6909|     34|        }
 6910|  7.26k|        begin = parse_precision(begin, end, handler);
 6911|  7.26k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 7.14k]
  |  |  ------------------
  ------------------
 6912|    114|            handler.on_error("Unexpected end of format string");
 6913|    114|            return begin;
 6914|    114|        }
 6915|  7.26k|    }
 6916|       |
 6917|  51.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 446, False: 51.4k]
  ------------------
 6918|    446|        handler.on_localized();
 6919|    446|        ++begin;
 6920|    446|    }
 6921|  51.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 51.8k]
  |  |  ------------------
  ------------------
 6922|     52|        handler.on_error("Unexpected end of format string");
 6923|     52|        return begin;
 6924|     52|    }
 6925|       |
 6926|  51.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 51.8k, False: 0]
  |  Branch (6926:25): [True: 47.3k, False: 4.46k]
  ------------------
 6927|  47.3k|        do_presentation();
 6928|  47.3k|    }
 6929|  51.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.95k, False: 49.8k]
  |  |  ------------------
  ------------------
 6930|  1.95k|        handler.on_error("Unexpected end of format string");
 6931|  1.95k|        return begin;
 6932|  1.95k|    }
 6933|       |
 6934|  49.8k|    return begin;
 6935|  51.8k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  2.24k|{
 6507|  2.24k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 824, False: 1.41k]
  |  Branch (6507:33): [True: 772, False: 52]
  ------------------
 6508|  2.24k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 250, False: 1.21k]
  |  Branch (6508:33): [True: 106, False: 144]
  ------------------
 6509|  2.24k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  48.1k|    auto do_presentation = [&]() -> const CharT* {
 6859|  48.1k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 10.7k, False: 37.4k]
  ------------------
 6860|  10.7k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  10.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 812, False: 9.95k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    812|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    812|                return begin;
 6866|    812|            }
 6867|  9.95k|            handler.on_character_set_string(set);
 6868|  9.95k|            return begin;
 6869|  10.7k|        }
 6870|  37.4k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 32.8k, False: 4.53k]
  ------------------
 6871|  32.8k|            return parse_presentation_regex(begin, end, handler);
 6872|  32.8k|        }
 6873|  4.53k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  4.53k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  4.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 620, False: 3.91k]
  |  |  ------------------
  ------------------
 6875|    620|            handler.on_error("Invalid type specifier in format string");
 6876|    620|            return begin;
 6877|    620|        }
 6878|  3.91k|        handler.on_type(type);
 6879|  3.91k|        return begin;
 6880|  4.53k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  10.7k|{
 6697|  10.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  10.7k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  10.7k|    auto start = begin;
 6701|  10.7k|    ++begin;
 6702|       |
 6703|  10.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 10.7k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     42|        return {};
 6708|     42|    }
 6709|  10.7k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 1.99k, False: 8.73k]
  ------------------
 6710|  1.99k|        handler.on_charset_inverted();
 6711|  1.99k|        ++begin;
 6712|  1.99k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.95k]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     34|            return {};
 6717|     34|        }
 6718|  1.95k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 52, False: 1.90k]
  ------------------
 6719|     52|            handler.on_charset_single(char32_t{']'});
 6720|     52|            ++begin;
 6721|     52|        }
 6722|  1.95k|    }
 6723|  8.73k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 8.69k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  1.23M|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 1.23M, False: 484]
  ------------------
 6728|  1.23M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 218, False: 1.23M]
  |  |  ------------------
  ------------------
 6729|    218|            break;
 6730|    218|        }
 6731|       |
 6732|  1.23M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 9.95k, False: 1.22M]
  ------------------
 6733|  9.95k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  9.95k|        }
 6735|       |
 6736|  1.22M|        parse_presentation_set_literal(begin, end, handler);
 6737|  1.22M|    }
 6738|       |
 6739|    702|    SCN_UNLIKELY_ATTR
 6740|    702|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    702|    return {};
 6742|  10.6k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  1.22M|{
 6661|  1.22M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  1.22M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  1.22M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 1.22M]
  |  |  ------------------
  ------------------
 6665|    106|        return;
 6666|    106|    }
 6667|       |
 6668|  1.22M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 1.22M, False: 188]
  |  Branch (6668:25): [True: 9.07k, False: 1.21M]
  |  Branch (6668:49): [True: 9.03k, False: 34]
  ------------------
 6669|  1.22M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 8.75k, False: 286]
  ------------------
 6670|  8.75k|        ++begin;
 6671|       |
 6672|  8.75k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  8.75k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  8.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 8.68k]
  |  |  ------------------
  ------------------
 6674|     70|            return;
 6675|     70|        }
 6676|       |
 6677|  8.68k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  8.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 8.64k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     34|            return;
 6682|     34|        }
 6683|       |
 6684|  8.64k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  8.64k|        return;
 6686|  8.68k|    }
 6687|       |
 6688|  1.21M|    handler.on_charset_single(cp_first);
 6689|  1.21M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  1.23M|{
 6637|  1.23M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  1.23M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  1.23M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  2.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 1.23M]
  |  |  |  Branch (859:45): [True: 70, False: 1.23M]
  |  |  |  Branch (859:45): [True: 26, False: 1.23M]
  |  |  ------------------
  ------------------
 6641|     96|        handler.on_error("Invalid encoding in format string");
 6642|     96|        return invalid_code_point;
 6643|     96|    }
 6644|       |
 6645|  1.23M|    const auto cp =
 6646|  1.23M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  1.23M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80, False: 1.23M]
  |  |  ------------------
  ------------------
 6648|     80|        handler.on_error("Invalid encoding in format string");
 6649|     80|        return invalid_code_point;
 6650|     80|    }
 6651|       |
 6652|  1.23M|    begin += len;
 6653|  1.23M|    return cp;
 6654|  1.23M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  9.95k|    {
 6346|  9.95k|        m_specs.charset_string_data = fmt.data();
 6347|  9.95k|        m_specs.charset_string_size = fmt.size();
 6348|  9.95k|        on_type(presentation_type::string_set);
 6349|  9.95k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  32.8k|{
 6749|  32.8k|#if !SCN_DISABLE_REGEX
 6750|  32.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  32.8k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|  32.8k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  65.7k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|  32.8k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|  32.8k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|  32.8k|        return begin;
 6757|  32.8k|    }
 6758|       |
 6759|  32.8k|    auto start = begin;
 6760|  32.8k|    ++begin;
 6761|       |
 6762|  32.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 32.8k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  32.8k|    handler.on_type(presentation_type::regex);
 6768|  6.05M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 6.05M, False: 178]
  ------------------
 6769|  6.05M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 52.3k, False: 5.99M]
  ------------------
 6770|  52.3k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 32.6k, False: 19.6k]
  ------------------
 6771|  32.6k|                break;
 6772|  32.6k|            }
 6773|  19.6k|            else {
 6774|  19.6k|                handler.on_type(presentation_type::regex_escaped);
 6775|  19.6k|            }
 6776|  52.3k|        }
 6777|  6.05M|    }
 6778|  32.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 178, False: 32.6k]
  |  |  ------------------
  ------------------
 6779|    178|        handler.on_error("Unexpected end of regex in format string");
 6780|    178|        return begin;
 6781|    178|    }
 6782|       |
 6783|  32.6k|    auto regex_end = begin;
 6784|  32.6k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  32.6k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 32.6k]
  |  |  ------------------
  ------------------
 6786|     34|        handler.on_error("Invalid (empty) regex in format string");
 6787|     34|        return begin;
 6788|     34|    }
 6789|  32.6k|    handler.on_regex_pattern(regex_pattern);
 6790|  32.6k|    ++begin;
 6791|       |
 6792|  32.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 32.5k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  32.5k|    regex_flags flags{regex_flags::none};
 6798|  32.5k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  32.5k|        {{'m', regex_flags::multiline},
 6800|  32.5k|         {'s', regex_flags::singleline},
 6801|  32.5k|         {'i', regex_flags::nocase},
 6802|  32.5k|         {'n', regex_flags::nocapture}}};
 6803|  38.2k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 38.1k, False: 58]
  ------------------
 6804|  38.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 32.4k, False: 5.71k]
  ------------------
 6805|  32.4k|            break;
 6806|  32.4k|        }
 6807|  5.71k|        bool found_flag = false;
 6808|  15.2k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 15.2k, False: 62]
  ------------------
 6809|  15.2k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 9.56k, False: 5.65k]
  ------------------
 6810|  9.56k|                continue;
 6811|  9.56k|            }
 6812|  5.65k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 34, False: 5.62k]
  ------------------
 6813|     34|                handler.on_error("Flag set multiple times in regex");
 6814|     34|                return begin;
 6815|     34|            }
 6816|  5.62k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  5.62k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 48, False: 5.57k]
  ------------------
 6818|       |                // clang-format off
 6819|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     48|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  5.62k|#endif
 6830|  5.62k|            flags |= flag.second;
 6831|  5.62k|            found_flag = true;
 6832|  5.62k|            break;
 6833|  5.65k|        }
 6834|  5.68k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 62, False: 5.62k]
  ------------------
 6835|     62|            handler.on_error("Invalid flag in regex");
 6836|     62|            return begin;
 6837|     62|        }
 6838|  5.68k|    }
 6839|  32.4k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  32.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 32.4k]
  |  |  ------------------
  ------------------
 6842|     58|        handler.on_error("Unexpected end of regex in format string");
 6843|     58|        return begin;
 6844|     58|    }
 6845|       |
 6846|  32.4k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  32.4k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  32.6k|    {
 6354|  32.6k|        m_specs.charset_string_data = pattern.data();
 6355|  32.6k|        m_specs.charset_string_size = pattern.size();
 6356|  32.6k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  4.53k|{
 6455|  4.53k|    switch (type) {
 6456|    106|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 106, False: 4.42k]
  ------------------
 6457|    158|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 52, False: 4.48k]
  ------------------
 6458|    158|            return presentation_type::int_binary;
 6459|    108|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 108, False: 4.42k]
  ------------------
 6460|    108|            return presentation_type::int_decimal;
 6461|    160|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 160, False: 4.37k]
  ------------------
 6462|    160|            return presentation_type::int_generic;
 6463|     88|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 88, False: 4.44k]
  ------------------
 6464|     88|            return presentation_type::int_unsigned_decimal;
 6465|    196|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 196, False: 4.33k]
  ------------------
 6466|    196|            return presentation_type::int_octal;
 6467|    114|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 114, False: 4.41k]
  ------------------
 6468|    166|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 52, False: 4.48k]
  ------------------
 6469|    166|            return presentation_type::int_hex;
 6470|     34|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 34, False: 4.49k]
  ------------------
 6471|     68|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 34, False: 4.49k]
  ------------------
 6472|     68|            return presentation_type::int_arbitrary_base;
 6473|    106|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 106, False: 4.42k]
  ------------------
 6474|    212|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 106, False: 4.42k]
  ------------------
 6475|    212|            return presentation_type::float_hex;
 6476|     70|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 70, False: 4.46k]
  ------------------
 6477|    140|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 70, False: 4.46k]
  ------------------
 6478|    140|            return presentation_type::float_scientific;
 6479|    232|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 232, False: 4.30k]
  ------------------
 6480|    338|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 106, False: 4.42k]
  ------------------
 6481|    338|            return presentation_type::float_fixed;
 6482|    132|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 132, False: 4.40k]
  ------------------
 6483|    190|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 58, False: 4.47k]
  ------------------
 6484|    190|            return presentation_type::float_general;
 6485|  1.63k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 1.63k, False: 2.89k]
  ------------------
 6486|  1.63k|            return presentation_type::string;
 6487|    340|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 340, False: 4.19k]
  ------------------
 6488|    340|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 4.49k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     78|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 78, False: 4.45k]
  ------------------
 6492|     78|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 4.53k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 4.53k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    620|        default:
  ------------------
  |  Branch (6499:9): [True: 620, False: 3.91k]
  ------------------
 6500|    620|            return presentation_type::none;
 6501|  4.53k|    }
 6502|  4.53k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|  52.2k|{
 6532|  52.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  52.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  52.2k|    auto check_align = [](wchar_t ch) {
 6535|  52.2k|        switch (ch) {
 6536|  52.2k|            case L'<':
 6537|  52.2k|                return align_type::left;
 6538|  52.2k|            case L'>':
 6539|  52.2k|                return align_type::right;
 6540|  52.2k|            case L'^':
 6541|  52.2k|                return align_type::center;
 6542|  52.2k|            default:
 6543|  52.2k|                return align_type::none;
 6544|  52.2k|        }
 6545|  52.2k|    };
 6546|       |
 6547|  52.2k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  52.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 52.2k]
  |  |  |  Branch (859:45): [True: 38, False: 52.2k]
  |  |  |  Branch (859:45): [True: 4, False: 52.2k]
  |  |  ------------------
  ------------------
 6549|  52.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|     42|        handler.on_error("Invalid encoding in fill character");
 6551|     42|        return begin;
 6552|     42|    }
 6553|       |
 6554|  52.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  52.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  52.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  52.2k|    const auto begin_before_fill = begin;
 6559|  52.2k|    begin += potential_fill_len;
 6560|       |
 6561|  52.2k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 1.06k, False: 51.1k]
  ------------------
 6562|  1.06k|        return begin_before_fill;
 6563|  1.06k|    }
 6564|       |
 6565|  51.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  51.1k|    const auto begin_after_fill = begin;
 6567|  51.1k|    ++begin;
 6568|       |
 6569|  51.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 50.2k, False: 904]
  ------------------
 6570|  50.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60, False: 50.1k]
  |  |  ------------------
  ------------------
 6571|     60|            handler.on_error("Invalid fill character '{' in format string");
 6572|     60|            return begin;
 6573|     60|        }
 6574|  50.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 8.14k, False: 42.0k]
  ------------------
 6575|  8.14k|            return begin_before_fill;
 6576|  8.14k|        }
 6577|  50.1k|    }
 6578|       |
 6579|  42.9k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 39.0k, False: 3.93k]
  ------------------
 6580|  39.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 3.02k, False: 35.9k]
  ------------------
 6581|  3.02k|            handler.on_align(potential_align_on_fill);
 6582|  3.02k|            return begin_after_fill;
 6583|  3.02k|        }
 6584|  35.9k|        return begin_before_fill;
 6585|  39.0k|    }
 6586|       |
 6587|  3.93k|    handler.on_fill(potential_fill);
 6588|  3.93k|    handler.on_align(potential_align_after_fill);
 6589|  3.93k|    return begin;
 6590|  42.9k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  52.2k|{
 6514|  52.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  52.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  52.2k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  52.2k|        return 1;
 6517|  52.2k|    }
 6518|  52.2k|    else {
 6519|  52.2k|        const auto lengths =
 6520|  52.2k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  52.2k|            "\3\4";
 6522|  52.2k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  52.2k|        return len;
 6524|  52.2k|    }
 6525|  52.2k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   103k|    auto check_align = [](wchar_t ch) {
 6535|   103k|        switch (ch) {
 6536|  1.16k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 1.16k, False: 102k]
  ------------------
 6537|  1.16k|                return align_type::left;
 6538|    850|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 850, False: 102k]
  ------------------
 6539|    850|                return align_type::right;
 6540|  6.04k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 6.04k, False: 97.3k]
  ------------------
 6541|  6.04k|                return align_type::center;
 6542|  95.3k|            default:
  ------------------
  |  Branch (6542:13): [True: 95.3k, False: 8.05k]
  ------------------
 6543|  95.3k|                return align_type::none;
 6544|   103k|        }
 6545|   103k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|  3.93k|    {
 6268|  3.93k|        m_specs.fill = fill;
 6269|  3.93k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|  3.93k|    {
 6149|  3.93k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  3.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|  3.93k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  3.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|  3.93k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|  9.39k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6152:32): [True: 5.46k, False: 3.93k]
  ------------------
 6153|  5.46k|                SCN_GCC_PUSH
 6154|  5.46k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|  5.46k|                m_data[i] = s[i];
 6156|  5.46k|                SCN_GCC_POP
 6157|  5.46k|            }
 6158|  3.93k|            m_size = static_cast<unsigned char>(s.size());
 6159|  3.93k|        }
 6160|  3.93k|        else if constexpr (sizeof(CharT) == 2) {
 6161|  3.93k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|  3.93k|            m_data[1] =
 6163|  3.93k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|  3.93k|            if (s.size() == 1) {
 6165|  3.93k|                return;
 6166|  3.93k|            }
 6167|  3.93k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|  3.93k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|  3.93k|        }
 6170|  3.93k|        else {
 6171|  3.93k|            const auto front = static_cast<unsigned>(s.front());
 6172|  3.93k|            m_data[0] = static_cast<char>(front);
 6173|  3.93k|            m_data[1] = static_cast<char>(front >> 8);
 6174|  3.93k|            m_data[2] = static_cast<char>(front >> 16);
 6175|  3.93k|            m_data[3] = static_cast<char>(front >> 24);
 6176|  3.93k|        }
 6177|  3.93k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|  52.1k|{
 6597|  52.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  52.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  52.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 13.7k, False: 38.4k]
  |  Branch (6599:33): [True: 3.28k, False: 10.4k]
  ------------------
 6600|  3.28k|        int width = parse_simple_int(begin, end);
 6601|  3.28k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  3.28k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.25k, False: 34]
  |  |  ------------------
  ------------------
 6602|  3.25k|            handler.on_width(width);
 6603|  3.25k|        }
 6604|     34|        else {
 6605|     34|            handler.on_error("Invalid field width");
 6606|     34|            return begin;
 6607|     34|        }
 6608|  3.28k|    }
 6609|  52.0k|    return begin;
 6610|  52.1k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6616|  7.26k|{
 6617|  7.26k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  7.26k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 7.22k, False: 34]
  |  Branch (6619:33): [True: 7.19k, False: 34]
  ------------------
 6620|  7.19k|        int prec = parse_simple_int(begin, end);
 6621|  7.19k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  7.19k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.14k, False: 48]
  |  |  ------------------
  ------------------
 6622|  7.14k|            handler.on_precision(prec);
 6623|  7.14k|        }
 6624|     48|        else {
 6625|     48|            handler.on_error("Invalid field precision");
 6626|     48|            return begin;
 6627|     48|        }
 6628|  7.19k|    }
 6629|  7.21k|    return begin;
 6630|  7.26k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|    446|    {
 7127|    446|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    446|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 402, False: 44]
  ------------------
 7129|    446|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 358, False: 44]
  ------------------
 7130|    446|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 314, False: 44]
  ------------------
 7131|    446|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 270, False: 44]
  ------------------
 7132|    270|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    270|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    270|        }
 7137|       |
 7138|    176|        Handler::on_localized();
 7139|    176|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  49.6k|{
 8417|  49.6k|#define SCN_VISIT(Type)                                         \
 8418|  49.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  49.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  49.6k|    }                                                           \
 8421|  49.6k|    else {                                                      \
 8422|  49.6k|        return vis(monostate_val);                              \
 8423|  49.6k|    }
 8424|       |
 8425|  49.6k|    monostate monostate_val{};
 8426|       |
 8427|  49.6k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 49.6k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 49.6k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  5.53k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 5.53k, False: 44.1k]
  ------------------
 8433|  5.53k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  5.53k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.53k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.53k|    }                                                           \
  |  | 8421|  5.53k|    else {                                                      \
  |  | 8422|  5.53k|        return vis(monostate_val);                              \
  |  | 8423|  5.53k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 49.6k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 49.6k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 49.6k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 49.6k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  5.53k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 5.53k, False: 44.1k]
  ------------------
 8443|  5.53k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  5.53k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.53k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.53k|    }                                                           \
  |  | 8421|  5.53k|    else {                                                      \
  |  | 8422|  5.53k|        return vis(monostate_val);                              \
  |  | 8423|  5.53k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 49.6k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 49.6k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  5.50k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 5.50k, False: 44.1k]
  ------------------
 8449|  5.50k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  5.50k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.50k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.50k|    }                                                           \
  |  | 8421|  5.50k|    else {                                                      \
  |  | 8422|  5.50k|        return vis(monostate_val);                              \
  |  | 8423|  5.50k|    }
  ------------------
 8450|  5.53k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 5.53k, False: 44.1k]
  ------------------
 8451|  5.53k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  5.53k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.53k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.53k|    }                                                           \
  |  | 8421|  5.53k|    else {                                                      \
  |  | 8422|  5.53k|        return vis(monostate_val);                              \
  |  | 8423|  5.53k|    }
  ------------------
 8452|  5.50k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 5.50k, False: 44.1k]
  ------------------
 8453|  5.50k|            SCN_VISIT(char);
  ------------------
  |  | 8418|  5.50k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.50k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.50k|    }                                                           \
  |  | 8421|  5.50k|    else {                                                      \
  |  | 8422|  5.50k|        return vis(monostate_val);                              \
  |  | 8423|  5.50k|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 49.6k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 49.6k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 49.6k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  5.53k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 5.53k, False: 44.1k]
  ------------------
 8461|  5.53k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  5.53k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.53k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.53k|    }                                                           \
  |  | 8421|  5.53k|    else {                                                      \
  |  | 8422|  5.53k|        return vis(monostate_val);                              \
  |  | 8423|  5.53k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 49.6k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  5.50k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 5.50k, False: 44.1k]
  ------------------
 8465|  5.50k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  5.50k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.50k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.50k|    }                                                           \
  |  | 8421|  5.50k|    else {                                                      \
  |  | 8422|  5.50k|        return vis(monostate_val);                              \
  |  | 8423|  5.50k|    }
  ------------------
 8466|  5.50k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 5.50k, False: 44.1k]
  ------------------
 8467|  5.50k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  5.50k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.50k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.50k|    }                                                           \
  |  | 8421|  5.50k|    else {                                                      \
  |  | 8422|  5.50k|        return vis(monostate_val);                              \
  |  | 8423|  5.50k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 49.6k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  5.50k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 5.50k, False: 44.1k]
  ------------------
 8471|  5.50k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  5.50k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.50k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.50k|    }                                                           \
  |  | 8421|  5.50k|    else {                                                      \
  |  | 8422|  5.50k|        return vis(monostate_val);                              \
  |  | 8423|  5.50k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 49.6k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 49.6k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 49.6k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 49.6k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 49.6k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  49.6k|            SCN_CLANG_POP
 8495|  49.6k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  11.2k|    {
 3330|  11.2k|        return m_iterator;
 3331|  11.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|  1.88k|    {
 1430|  1.88k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.88k|    {
  437|  1.88k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.13k|    {
 1177|  2.13k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  6.37k|    {
 3334|  6.37k|        return m_sentinel;
 3335|  6.37k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|    252|    {
 1476|    252|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    252|    {
  447|    252|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  5.16k|    {
 3316|  5.16k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1597|    224|    {
 1598|    224|        return has_value();
 1599|    224|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.19k|    {
  485|  4.19k|        return m_has_value;
  486|  4.19k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEERT_v:
 1652|    146|    {
 1653|    146|        return value();
 1654|    146|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.88k|    {
 1627|  1.88k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.88k|        return this->get_value();
 1629|  1.88k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.88k|    {
  451|  1.88k|        return m_value;
  452|  1.88k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  1.91k|    {
 1837|  1.91k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.91k|                                            std::forward<F>(f));
 1839|  1.91k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|  1.91k|{
 1323|  1.91k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.91k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.91k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.91k|            return result(*std::forward<Exp>(exp));
 1327|  1.91k|        }
 1328|       |
 1329|  1.91k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.91k|        return result(unexpect, monostate{});
 1331|  1.91k|    }
 1332|  1.91k|    else {
 1333|  1.91k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.91k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.91k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.73k, False: 174]
  |  |  ------------------
  ------------------
 1335|  1.91k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.91k|                   : result(unexpect,
 1337|    174|                            trivial_invoke(std::forward<F>(f),
 1338|    174|                                           std::forward<Exp>(exp).error()));
 1339|  1.91k|    }
 1340|  1.91k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.73k|    {
 1663|  1.73k|        return std::move(value());
 1664|  1.73k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.73k|    {
 1430|  1.73k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.73k|    {
  437|  1.73k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.91k|    {
 1177|  1.91k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1613|    174|    {
 1614|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    174|        return std::move(this->get_unexpected().error());
 1616|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1485|    174|    {
 1486|    174|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    174|    {
  447|    174|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  1.91k|    {
 1598|  1.91k|        return has_value();
 1599|  1.91k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.82k|    {
  485|  3.82k|        return m_has_value;
  486|  3.82k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1603|    174|    {
 1604|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    174|        return this->get_unexpected().error();
 1606|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.73k|    {
 1663|  1.73k|        return std::move(value());
 1664|  1.73k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.73k|    {
 1627|  1.73k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.73k|        return this->get_value();
 1629|  1.73k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.73k|    {
  451|  1.73k|        return m_value;
  452|  1.73k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   182k|    {
 5466|   182k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 182k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   182k|        return static_cast<std::size_t>(m_desc &
 5471|   182k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   182k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|   213k|    {
 5491|   213k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   213k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  31.3k|    {
 5434|  31.3k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  31.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 31.3k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  31.3k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  31.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 31.2k]
  |  |  ------------------
  ------------------
 5442|     68|            return {};
 5443|     68|        }
 5444|       |
 5445|  31.2k|        const auto t = type(id);
 5446|  31.2k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  31.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.13k, False: 30.1k]
  |  |  ------------------
  ------------------
 5447|  1.13k|            return {};
 5448|  1.13k|        }
 5449|       |
 5450|  30.1k|        basic_scan_arg<Context> arg;
 5451|  30.1k|        arg.m_type = t;
 5452|  30.1k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 30.1k, False: 0]
  ------------------
 5453|  30.1k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  30.1k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  30.1k|        return arg;
 5459|  31.2k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  31.3k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  31.2k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  31.2k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  31.2k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  31.2k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  31.2k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  30.1k|    {
 5495|  30.1k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  30.1k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  59.5k|    {
 5247|  59.5k|        return m_type != detail::arg_type::none_type;
 5248|  59.5k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  4.32k|{
 8417|  4.32k|#define SCN_VISIT(Type)                                         \
 8418|  4.32k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  4.32k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  4.32k|    }                                                           \
 8421|  4.32k|    else {                                                      \
 8422|  4.32k|        return vis(monostate_val);                              \
 8423|  4.32k|    }
 8424|       |
 8425|  4.32k|    monostate monostate_val{};
 8426|       |
 8427|  4.32k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 4.32k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 4.32k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    480|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 480, False: 3.84k]
  ------------------
 8433|    480|            SCN_VISIT(int);
  ------------------
  |  | 8418|    480|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    480|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    480|    }                                                           \
  |  | 8421|    480|    else {                                                      \
  |  | 8422|    480|        return vis(monostate_val);                              \
  |  | 8423|    480|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 4.32k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 4.32k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 4.32k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 4.32k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    480|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 480, False: 3.84k]
  ------------------
 8443|    480|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    480|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    480|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    480|    }                                                           \
  |  | 8421|    480|    else {                                                      \
  |  | 8422|    480|        return vis(monostate_val);                              \
  |  | 8423|    480|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 4.32k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 4.32k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    480|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 480, False: 3.84k]
  ------------------
 8449|    480|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    480|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    480|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    480|    }                                                           \
  |  | 8421|    480|    else {                                                      \
  |  | 8422|    480|        return vis(monostate_val);                              \
  |  | 8423|    480|    }
  ------------------
 8450|    480|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 480, False: 3.84k]
  ------------------
 8451|    480|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    480|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    480|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    480|    }                                                           \
  |  | 8421|    480|    else {                                                      \
  |  | 8422|    480|        return vis(monostate_val);                              \
  |  | 8423|    480|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 4.32k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|    480|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 480, False: 3.84k]
  ------------------
 8455|    480|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|    480|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    480|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    480|    }                                                           \
  |  | 8421|    480|    else {                                                      \
  |  | 8422|    480|        return vis(monostate_val);                              \
  |  | 8423|    480|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 4.32k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 4.32k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    480|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 480, False: 3.84k]
  ------------------
 8461|    480|            SCN_VISIT(double);
  ------------------
  |  | 8418|    480|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    480|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    480|    }                                                           \
  |  | 8421|    480|    else {                                                      \
  |  | 8422|    480|        return vis(monostate_val);                              \
  |  | 8423|    480|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 4.32k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 4.32k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|    480|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 480, False: 3.84k]
  ------------------
 8467|    480|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    480|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    480|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    480|    }                                                           \
  |  | 8421|    480|    else {                                                      \
  |  | 8422|    480|        return vis(monostate_val);                              \
  |  | 8423|    480|    }
  ------------------
 8468|    480|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 480, False: 3.84k]
  ------------------
 8469|    480|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|    480|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    480|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    480|    }                                                           \
  |  | 8421|    480|    else {                                                      \
  |  | 8422|    480|        return vis(monostate_val);                              \
  |  | 8423|    480|    }
  ------------------
 8470|    480|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 480, False: 3.84k]
  ------------------
 8471|    480|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    480|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    480|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    480|    }                                                           \
  |  | 8421|    480|    else {                                                      \
  |  | 8422|    480|        return vis(monostate_val);                              \
  |  | 8423|    480|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 4.32k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 4.32k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 4.32k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 4.32k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 4.32k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  4.32k|            SCN_CLANG_POP
 8495|  4.32k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   181k|    {
 5545|   181k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   181k|    {
 8056|   181k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   181k|{
 7044|   181k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   181k|    handler.check_args_exhausted();
 7046|   181k|    return handler.get_error();
 7047|   181k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   181k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   181k|    auto begin = format.data();
 7013|   181k|    auto it = begin;
 7014|   181k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   375M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 375M, False: 62.0k]
  ------------------
 7017|   375M|        const auto ch = *it++;
 7018|   375M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 31.9k, False: 375M]
  ------------------
 7019|  31.9k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  31.9k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  31.9k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 28.7k, False: 3.18k]
  ------------------
 7023|  28.7k|                return;
 7024|  28.7k|            }
 7025|  31.9k|        }
 7026|   375M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 91.9k, False: 375M]
  ------------------
 7027|  91.9k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 91.2k, False: 752]
  |  |  |  Branch (859:45): [True: 268, False: 91.6k]
  |  |  |  Branch (859:45): [True: 90.9k, False: 752]
  |  |  ------------------
  ------------------
 7028|  91.2k|                handler.on_error("Unmatched '}' in format string");
 7029|  91.2k|                return;
 7030|  91.2k|            }
 7031|       |
 7032|    752|            handler.on_literal_text(begin, it);
 7033|    752|            begin = ++it;
 7034|    752|        }
 7035|   375M|    }
 7036|       |
 7037|  62.0k|    handler.on_literal_text(begin, end);
 7038|  62.0k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|  31.9k|{
 6942|  31.9k|    struct id_adapter {
 6943|  31.9k|        constexpr void operator()()
 6944|  31.9k|        {
 6945|  31.9k|            arg_id = handler.on_arg_id();
 6946|  31.9k|        }
 6947|  31.9k|        constexpr void operator()(std::size_t id)
 6948|  31.9k|        {
 6949|  31.9k|            arg_id = handler.on_arg_id(id);
 6950|  31.9k|        }
 6951|       |
 6952|  31.9k|        constexpr void on_error(const char* msg)
 6953|  31.9k|        {
 6954|  31.9k|            SCN_UNLIKELY_ATTR
 6955|  31.9k|            handler.on_error(msg);
 6956|  31.9k|        }
 6957|       |
 6958|  31.9k|        Handler& handler;
 6959|  31.9k|        std::size_t arg_id;
 6960|  31.9k|    };
 6961|       |
 6962|  31.9k|    ++begin;
 6963|  31.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 31.9k]
  |  |  ------------------
  ------------------
 6964|     52|        handler.on_error("Unexpected end of replacement field");
 6965|     52|        return begin;
 6966|     52|    }
 6967|       |
 6968|  31.9k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 4.37k, False: 27.5k]
  ------------------
 6969|  4.37k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  4.37k|    }
 6971|  27.5k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 106, False: 27.4k]
  ------------------
 6972|    106|        handler.on_literal_text(begin, begin + 1);
 6973|    106|    }
 6974|  27.4k|    else {
 6975|  27.4k|        auto adapter = id_adapter{handler, 0};
 6976|  27.4k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  27.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 27.3k]
  |  |  ------------------
  ------------------
 6979|    120|            handler.on_error("Missing '}' in format string");
 6980|    120|            return begin;
 6981|    120|        }
 6982|       |
 6983|  27.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 132, False: 27.1k]
  ------------------
 6984|    132|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    132|        }
 6986|  27.1k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 26.8k, False: 334]
  ------------------
 6987|  26.8k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 26.8k]
  |  |  ------------------
  ------------------
 6988|     50|                handler.on_error("Unexpected end of replacement field");
 6989|     50|                return begin;
 6990|     50|            }
 6991|  26.8k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  26.8k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.40k, False: 24.3k]
  |  |  |  Branch (859:45): [True: 0, False: 26.8k]
  |  |  |  Branch (859:45): [True: 2.40k, False: 24.3k]
  |  |  ------------------
  ------------------
 6993|  2.40k|                handler.on_error("Unknown format specifier");
 6994|  2.40k|                return begin;
 6995|  2.40k|            }
 6996|  26.8k|        }
 6997|    334|        else {
 6998|    334|            SCN_UNLIKELY_ATTR
 6999|    334|            handler.on_error("Missing '}' in format string");
 7000|    334|            return begin;
 7001|    334|        }
 7002|  27.3k|    }
 7003|  29.0k|    return begin + 1;
 7004|  31.9k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|  31.3k|    {
 8039|  31.3k|        return m_args.get(id);
 8040|  31.3k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8043|  4.50k|    {
 8044|  4.50k|        return m_args;
 8045|  4.50k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|  28.5k|    {
 8049|  28.5k|        return m_locale;
 8050|  28.5k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|  30.9k|    {
 5566|  30.9k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56, False: 30.8k]
  |  |  ------------------
  ------------------
 5567|     56|            on_error(
 5568|     56|                "Cannot switch from manual to automatic argument indexing");
 5569|     56|            return 0;
 5570|     56|        }
 5571|       |
 5572|  30.8k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  30.8k|        do_check_arg_id(id);
 5574|  30.8k|        return id;
 5575|  30.9k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5589|    126|    {
 5590|    126|        return detail::handle_error(
 5591|    126|            scan_error{scan_error::invalid_format_string, msg});
 5592|    126|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|  31.2k|{
 6054|  31.2k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  31.2k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  31.2k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  27.4k|{
 6443|  27.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  27.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  27.4k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 27.4k, False: 0]
  |  Branch (6444:26): [True: 866, False: 26.5k]
  ------------------
 6445|    866|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|    866|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|    866|    }
 6447|       |
 6448|  26.5k|    handler();
 6449|  26.5k|    return begin;
 6450|  27.4k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|    866|{
 6413|    866|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    866|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    866|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|    866|    CharT c = *begin;
 6416|    866|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 66, False: 800]
  |  Branch (6416:27): [True: 180, False: 620]
  ------------------
 6417|    246|        handler.on_error("Invalid argument ID");
 6418|    246|        return begin;
 6419|    246|    }
 6420|       |
 6421|    620|    int idx = 0;
 6422|    620|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 282, False: 338]
  ------------------
 6423|    282|        idx = parse_simple_int(begin, end);
 6424|    282|    }
 6425|    338|    else {
 6426|    338|        ++begin;
 6427|    338|    }
 6428|       |
 6429|    620|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 120, False: 500]
  |  Branch (6429:26): [True: 368, False: 132]
  |  Branch (6429:50): [True: 88, False: 280]
  ------------------
 6430|    208|        handler.on_error("Invalid argument ID");
 6431|    208|        return begin;
 6432|    208|    }
 6433|    412|    handler(idx);
 6434|       |
 6435|    412|    return begin;
 6436|    620|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|    454|        {
 6954|    454|            SCN_UNLIKELY_ATTR
 6955|    454|            handler.on_error(msg);
 6956|    454|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  13.7k|{
 6392|  13.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  13.7k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  13.7k|    unsigned long long value = 0;
 6396|  15.8k|    do {
 6397|  15.8k|        value *= 10;
 6398|  15.8k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  15.8k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 52, False: 15.7k]
  ------------------
 6400|  15.8k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|     52|            return -1;
 6402|     52|        }
 6403|  15.7k|        ++begin;
 6404|  15.7k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 15.4k, False: 308]
  |  Branch (6404:30): [True: 6.65k, False: 8.81k]
  |  Branch (6404:47): [True: 2.04k, False: 4.61k]
  ------------------
 6405|  13.7k|    return static_cast<int>(value);
 6406|  13.7k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|    412|        {
 6949|    412|            arg_id = handler.on_arg_id(id);
 6950|    412|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5578|    412|    {
 5579|    412|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    412|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 342]
  |  |  ------------------
  ------------------
 5580|     70|            on_error(
 5581|     70|                "Cannot switch from manual to automatic argument indexing");
 5582|     70|            return;
 5583|     70|        }
 5584|    342|        m_next_arg_id = -1;
 5585|    342|        do_check_arg_id(id);
 5586|    342|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  26.5k|        {
 6945|  26.5k|            arg_id = handler.on_arg_id();
 6946|  26.5k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  53.6k|    {
 5252|  53.6k|        return m_type;
 5253|  53.6k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|  24.0k|    {
 5561|  24.0k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  24.0k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  50.8k|    {
 5550|  50.8k|        return m_format.data();
 5551|  50.8k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  26.8k|    {
 7122|  26.8k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  26.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  26.8k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|  26.8k|{
 6858|  26.8k|    auto do_presentation = [&]() -> const CharT* {
 6859|  26.8k|        if (*begin == CharT{'['}) {
 6860|  26.8k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  26.8k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  26.8k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  26.8k|                return begin;
 6866|  26.8k|            }
 6867|  26.8k|            handler.on_character_set_string(set);
 6868|  26.8k|            return begin;
 6869|  26.8k|        }
 6870|  26.8k|        if (*begin == CharT{'/'}) {
 6871|  26.8k|            return parse_presentation_regex(begin, end, handler);
 6872|  26.8k|        }
 6873|  26.8k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  26.8k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  26.8k|            handler.on_error("Invalid type specifier in format string");
 6876|  26.8k|            return begin;
 6877|  26.8k|        }
 6878|  26.8k|        handler.on_type(type);
 6879|  26.8k|        return begin;
 6880|  26.8k|    };
 6881|       |
 6882|  26.8k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 25.8k, False: 932]
  |  Branch (6882:28): [True: 2.71k, False: 23.1k]
  ------------------
 6883|  26.8k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 266, False: 2.45k]
  |  Branch (6883:36): [True: 214, False: 52]
  ------------------
 6884|    214|        return do_presentation();
 6885|    214|    }
 6886|       |
 6887|  26.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26.5k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  26.5k|    begin = parse_align(begin, end, handler);
 6893|  26.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 26.4k]
  |  |  ------------------
  ------------------
 6894|    102|        handler.on_error("Unexpected end of format string");
 6895|    102|        return begin;
 6896|    102|    }
 6897|       |
 6898|  26.4k|    begin = parse_width(begin, end, handler);
 6899|  26.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  26.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 26.3k]
  |  |  ------------------
  ------------------
 6900|     98|        handler.on_error("Unexpected end of format string");
 6901|     98|        return begin;
 6902|     98|    }
 6903|       |
 6904|  26.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 2.51k, False: 23.8k]
  ------------------
 6905|  2.51k|        ++begin;
 6906|  2.51k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.47k]
  |  |  ------------------
  ------------------
 6907|     34|            handler.on_error("Unexpected end of format string");
 6908|     34|            return begin;
 6909|     34|        }
 6910|  2.47k|        begin = parse_precision(begin, end, handler);
 6911|  2.47k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116, False: 2.36k]
  |  |  ------------------
  ------------------
 6912|    116|            handler.on_error("Unexpected end of format string");
 6913|    116|            return begin;
 6914|    116|        }
 6915|  2.47k|    }
 6916|       |
 6917|  26.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 410, False: 25.8k]
  ------------------
 6918|    410|        handler.on_localized();
 6919|    410|        ++begin;
 6920|    410|    }
 6921|  26.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 26.1k]
  |  |  ------------------
  ------------------
 6922|     52|        handler.on_error("Unexpected end of format string");
 6923|     52|        return begin;
 6924|     52|    }
 6925|       |
 6926|  26.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 26.1k, False: 0]
  |  Branch (6926:25): [True: 21.9k, False: 4.19k]
  ------------------
 6927|  21.9k|        do_presentation();
 6928|  21.9k|    }
 6929|  26.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.59k, False: 24.5k]
  |  |  ------------------
  ------------------
 6930|  1.59k|        handler.on_error("Unexpected end of format string");
 6931|  1.59k|        return begin;
 6932|  1.59k|    }
 6933|       |
 6934|  24.5k|    return begin;
 6935|  26.1k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  2.71k|{
 6507|  2.71k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 212, False: 2.50k]
  |  Branch (6507:33): [True: 178, False: 34]
  ------------------
 6508|  2.71k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 158, False: 2.38k]
  |  Branch (6508:33): [True: 88, False: 70]
  ------------------
 6509|  2.71k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  22.2k|    auto do_presentation = [&]() -> const CharT* {
 6859|  22.2k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 1.66k, False: 20.5k]
  ------------------
 6860|  1.66k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  1.66k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 598, False: 1.06k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    598|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    598|                return begin;
 6866|    598|            }
 6867|  1.06k|            handler.on_character_set_string(set);
 6868|  1.06k|            return begin;
 6869|  1.66k|        }
 6870|  20.5k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 17.6k, False: 2.87k]
  ------------------
 6871|  17.6k|            return parse_presentation_regex(begin, end, handler);
 6872|  17.6k|        }
 6873|  2.87k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  2.87k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  2.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 496, False: 2.38k]
  |  |  ------------------
  ------------------
 6875|    496|            handler.on_error("Invalid type specifier in format string");
 6876|    496|            return begin;
 6877|    496|        }
 6878|  2.38k|        handler.on_type(type);
 6879|  2.38k|        return begin;
 6880|  2.87k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  1.66k|{
 6697|  1.66k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  1.66k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  1.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  1.66k|    auto start = begin;
 6701|  1.66k|    ++begin;
 6702|       |
 6703|  1.66k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.63k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     34|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     34|        return {};
 6708|     34|    }
 6709|  1.63k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 426, False: 1.20k]
  ------------------
 6710|    426|        handler.on_charset_inverted();
 6711|    426|        ++begin;
 6712|    426|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    426|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 392]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     34|            return {};
 6717|     34|        }
 6718|    392|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 52, False: 340]
  ------------------
 6719|     52|            handler.on_charset_single(char32_t{']'});
 6720|     52|            ++begin;
 6721|     52|        }
 6722|    392|    }
 6723|  1.20k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 1.17k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  15.3k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 14.9k, False: 332]
  ------------------
 6728|  14.9k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 164, False: 14.8k]
  |  |  ------------------
  ------------------
 6729|    164|            break;
 6730|    164|        }
 6731|       |
 6732|  14.8k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 1.06k, False: 13.7k]
  ------------------
 6733|  1.06k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  1.06k|        }
 6735|       |
 6736|  13.7k|        parse_presentation_set_literal(begin, end, handler);
 6737|  13.7k|    }
 6738|       |
 6739|    496|    SCN_UNLIKELY_ATTR
 6740|    496|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    496|    return {};
 6742|  1.56k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  13.7k|{
 6661|  13.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  13.7k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  13.7k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 13.6k]
  |  |  ------------------
  ------------------
 6665|    128|        return;
 6666|    128|    }
 6667|       |
 6668|  13.6k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 13.5k, False: 88]
  |  Branch (6668:25): [True: 1.37k, False: 12.1k]
  |  Branch (6668:49): [True: 1.33k, False: 34]
  ------------------
 6669|  13.6k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 1.28k, False: 52]
  ------------------
 6670|  1.28k|        ++begin;
 6671|       |
 6672|  1.28k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  1.28k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  1.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.25k]
  |  |  ------------------
  ------------------
 6674|     34|            return;
 6675|     34|        }
 6676|       |
 6677|  1.25k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  1.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.21k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     34|            return;
 6682|     34|        }
 6683|       |
 6684|  1.21k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  1.21k|        return;
 6686|  1.25k|    }
 6687|       |
 6688|  12.3k|    handler.on_charset_single(cp_first);
 6689|  12.3k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  15.0k|{
 6637|  15.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  15.0k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  15.0k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  30.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.0k]
  |  |  |  Branch (859:45): [True: 0, False: 15.0k]
  |  |  |  Branch (859:45): [True: 0, False: 15.0k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  15.0k|    const auto cp =
 6646|  15.0k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  15.0k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  15.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 162, False: 14.8k]
  |  |  ------------------
  ------------------
 6648|    162|        handler.on_error("Invalid encoding in format string");
 6649|    162|        return invalid_code_point;
 6650|    162|    }
 6651|       |
 6652|  14.8k|    begin += len;
 6653|  14.8k|    return cp;
 6654|  15.0k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  1.06k|    {
 6346|  1.06k|        m_specs.charset_string_data = fmt.data();
 6347|  1.06k|        m_specs.charset_string_size = fmt.size();
 6348|  1.06k|        on_type(presentation_type::string_set);
 6349|  1.06k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  17.6k|{
 6749|  17.6k|#if !SCN_DISABLE_REGEX
 6750|  17.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  17.6k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  17.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|  17.6k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  35.3k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|  17.6k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|  17.6k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|  17.6k|        return begin;
 6757|  17.6k|    }
 6758|       |
 6759|  17.6k|    auto start = begin;
 6760|  17.6k|    ++begin;
 6761|       |
 6762|  17.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 17.6k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  17.6k|    handler.on_type(presentation_type::regex);
 6768|  1.32M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 1.32M, False: 118]
  ------------------
 6769|  1.32M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 21.9k, False: 1.29M]
  ------------------
 6770|  21.9k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 17.5k, False: 4.44k]
  ------------------
 6771|  17.5k|                break;
 6772|  17.5k|            }
 6773|  4.44k|            else {
 6774|  4.44k|                handler.on_type(presentation_type::regex_escaped);
 6775|  4.44k|            }
 6776|  21.9k|        }
 6777|  1.32M|    }
 6778|  17.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118, False: 17.5k]
  |  |  ------------------
  ------------------
 6779|    118|        handler.on_error("Unexpected end of regex in format string");
 6780|    118|        return begin;
 6781|    118|    }
 6782|       |
 6783|  17.5k|    auto regex_end = begin;
 6784|  17.5k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  17.5k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 17.4k]
  |  |  ------------------
  ------------------
 6786|     34|        handler.on_error("Invalid (empty) regex in format string");
 6787|     34|        return begin;
 6788|     34|    }
 6789|  17.4k|    handler.on_regex_pattern(regex_pattern);
 6790|  17.4k|    ++begin;
 6791|       |
 6792|  17.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 17.4k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  17.4k|    regex_flags flags{regex_flags::none};
 6798|  17.4k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  17.4k|        {{'m', regex_flags::multiline},
 6800|  17.4k|         {'s', regex_flags::singleline},
 6801|  17.4k|         {'i', regex_flags::nocase},
 6802|  17.4k|         {'n', regex_flags::nocapture}}};
 6803|  19.8k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 19.7k, False: 44]
  ------------------
 6804|  19.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 17.3k, False: 2.46k]
  ------------------
 6805|  17.3k|            break;
 6806|  17.3k|        }
 6807|  2.46k|        bool found_flag = false;
 6808|  6.64k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 6.64k, False: 54]
  ------------------
 6809|  6.64k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 4.23k, False: 2.40k]
  ------------------
 6810|  4.23k|                continue;
 6811|  4.23k|            }
 6812|  2.40k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 34, False: 2.37k]
  ------------------
 6813|     34|                handler.on_error("Flag set multiple times in regex");
 6814|     34|                return begin;
 6815|     34|            }
 6816|  2.37k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  2.37k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 40, False: 2.33k]
  ------------------
 6818|       |                // clang-format off
 6819|     40|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     40|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  2.37k|#endif
 6830|  2.37k|            flags |= flag.second;
 6831|  2.37k|            found_flag = true;
 6832|  2.37k|            break;
 6833|  2.40k|        }
 6834|  2.42k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 54, False: 2.37k]
  ------------------
 6835|     54|            handler.on_error("Invalid flag in regex");
 6836|     54|            return begin;
 6837|     54|        }
 6838|  2.42k|    }
 6839|  17.3k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  17.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 17.3k]
  |  |  ------------------
  ------------------
 6842|     44|        handler.on_error("Unexpected end of regex in format string");
 6843|     44|        return begin;
 6844|     44|    }
 6845|       |
 6846|  17.3k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  17.3k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  17.4k|    {
 6354|  17.4k|        m_specs.charset_string_data = pattern.data();
 6355|  17.4k|        m_specs.charset_string_size = pattern.size();
 6356|  17.4k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|  2.87k|{
 6455|  2.87k|    switch (type) {
 6456|     88|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 88, False: 2.79k]
  ------------------
 6457|    122|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 34, False: 2.84k]
  ------------------
 6458|    122|            return presentation_type::int_binary;
 6459|    106|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 106, False: 2.77k]
  ------------------
 6460|    106|            return presentation_type::int_decimal;
 6461|    160|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 160, False: 2.71k]
  ------------------
 6462|    160|            return presentation_type::int_generic;
 6463|    124|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 124, False: 2.75k]
  ------------------
 6464|    124|            return presentation_type::int_unsigned_decimal;
 6465|    106|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 106, False: 2.77k]
  ------------------
 6466|    106|            return presentation_type::int_octal;
 6467|     70|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 70, False: 2.80k]
  ------------------
 6468|    122|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 52, False: 2.82k]
  ------------------
 6469|    122|            return presentation_type::int_hex;
 6470|     34|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 34, False: 2.84k]
  ------------------
 6471|     74|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 40, False: 2.83k]
  ------------------
 6472|     74|            return presentation_type::int_arbitrary_base;
 6473|    150|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 150, False: 2.72k]
  ------------------
 6474|    238|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 88, False: 2.79k]
  ------------------
 6475|    238|            return presentation_type::float_hex;
 6476|     70|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 70, False: 2.80k]
  ------------------
 6477|    104|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 34, False: 2.84k]
  ------------------
 6478|    104|            return presentation_type::float_scientific;
 6479|     70|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 70, False: 2.80k]
  ------------------
 6480|    158|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 88, False: 2.79k]
  ------------------
 6481|    158|            return presentation_type::float_fixed;
 6482|     34|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 34, False: 2.84k]
  ------------------
 6483|     68|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 34, False: 2.84k]
  ------------------
 6484|     68|            return presentation_type::float_general;
 6485|    682|        case 's':
  ------------------
  |  Branch (6485:9): [True: 682, False: 2.19k]
  ------------------
 6486|    682|            return presentation_type::string;
 6487|    214|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 214, False: 2.66k]
  ------------------
 6488|    214|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 2.84k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     70|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 70, False: 2.80k]
  ------------------
 6492|     70|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 2.87k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 2.87k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    496|        default:
  ------------------
  |  Branch (6499:9): [True: 496, False: 2.38k]
  ------------------
 6500|    496|            return presentation_type::none;
 6501|  2.87k|    }
 6502|  2.87k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  26.5k|{
 6532|  26.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  26.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  26.5k|    auto check_align = [](wchar_t ch) {
 6535|  26.5k|        switch (ch) {
 6536|  26.5k|            case L'<':
 6537|  26.5k|                return align_type::left;
 6538|  26.5k|            case L'>':
 6539|  26.5k|                return align_type::right;
 6540|  26.5k|            case L'^':
 6541|  26.5k|                return align_type::center;
 6542|  26.5k|            default:
 6543|  26.5k|                return align_type::none;
 6544|  26.5k|        }
 6545|  26.5k|    };
 6546|       |
 6547|  26.5k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  26.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  53.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26.5k]
  |  |  |  Branch (859:45): [True: 0, False: 26.5k]
  |  |  |  Branch (859:45): [True: 0, False: 26.5k]
  |  |  ------------------
  ------------------
 6549|  26.5k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  26.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  26.5k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  26.5k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  26.5k|    const auto begin_before_fill = begin;
 6559|  26.5k|    begin += potential_fill_len;
 6560|       |
 6561|  26.5k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 932, False: 25.6k]
  ------------------
 6562|    932|        return begin_before_fill;
 6563|    932|    }
 6564|       |
 6565|  25.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  25.6k|    const auto begin_after_fill = begin;
 6567|  25.6k|    ++begin;
 6568|       |
 6569|  25.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 25.6k, False: 0]
  ------------------
 6570|  25.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  25.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 25.6k]
  |  |  ------------------
  ------------------
 6571|     42|            handler.on_error("Invalid fill character '{' in format string");
 6572|     42|            return begin;
 6573|     42|        }
 6574|  25.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 1.54k, False: 24.0k]
  ------------------
 6575|  1.54k|            return begin_before_fill;
 6576|  1.54k|        }
 6577|  25.6k|    }
 6578|       |
 6579|  24.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 23.2k, False: 870]
  ------------------
 6580|  23.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 1.25k, False: 21.9k]
  ------------------
 6581|  1.25k|            handler.on_align(potential_align_on_fill);
 6582|  1.25k|            return begin_after_fill;
 6583|  1.25k|        }
 6584|  21.9k|        return begin_before_fill;
 6585|  23.2k|    }
 6586|       |
 6587|    870|    handler.on_fill(potential_fill);
 6588|    870|    handler.on_align(potential_align_after_fill);
 6589|    870|    return begin;
 6590|  24.0k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|  26.5k|{
 6514|  26.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  26.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  26.5k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  26.5k|        return 1;
 6517|  26.5k|    }
 6518|  26.5k|    else {
 6519|  26.5k|        const auto lengths =
 6520|  26.5k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  26.5k|            "\3\4";
 6522|  26.5k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  26.5k|        return len;
 6524|  26.5k|    }
 6525|  26.5k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  52.2k|    auto check_align = [](wchar_t ch) {
 6535|  52.2k|        switch (ch) {
 6536|  1.13k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 1.13k, False: 51.1k]
  ------------------
 6537|  1.13k|                return align_type::left;
 6538|    230|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 230, False: 52.0k]
  ------------------
 6539|    230|                return align_type::right;
 6540|  1.18k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 1.18k, False: 51.0k]
  ------------------
 6541|  1.18k|                return align_type::center;
 6542|  49.6k|            default:
  ------------------
  |  Branch (6542:13): [True: 49.6k, False: 2.54k]
  ------------------
 6543|  49.6k|                return align_type::none;
 6544|  52.2k|        }
 6545|  52.2k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|    870|    {
 6268|    870|        m_specs.fill = fill;
 6269|    870|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|    870|    {
 6149|    870|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|    870|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    870|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|    870|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|    870|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    870|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|    870|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|    870|            for (size_t i = 0; i < s.size(); ++i) {
 6153|    870|                SCN_GCC_PUSH
 6154|    870|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|    870|                m_data[i] = s[i];
 6156|    870|                SCN_GCC_POP
 6157|    870|            }
 6158|    870|            m_size = static_cast<unsigned char>(s.size());
 6159|    870|        }
 6160|    870|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (6160:28): [Folded - Ignored]
  ------------------
 6161|    870|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|    870|            m_data[1] =
 6163|    870|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|    870|            if (s.size() == 1) {
 6165|    870|                return;
 6166|    870|            }
 6167|    870|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|    870|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|    870|        }
 6170|    870|        else {
 6171|    870|            const auto front = static_cast<unsigned>(s.front());
 6172|    870|            m_data[0] = static_cast<char>(front);
 6173|    870|            m_data[1] = static_cast<char>(front >> 8);
 6174|    870|            m_data[2] = static_cast<char>(front >> 16);
 6175|    870|            m_data[3] = static_cast<char>(front >> 24);
 6176|    870|        }
 6177|    870|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  26.4k|{
 6597|  26.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  26.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  26.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 14.8k, False: 11.6k]
  |  Branch (6599:33): [True: 11.0k, False: 3.71k]
  ------------------
 6600|  11.0k|        int width = parse_simple_int(begin, end);
 6601|  11.0k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  11.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.0k, False: 22]
  |  |  ------------------
  ------------------
 6602|  11.0k|            handler.on_width(width);
 6603|  11.0k|        }
 6604|     22|        else {
 6605|     22|            handler.on_error("Invalid field width");
 6606|     22|            return begin;
 6607|     22|        }
 6608|  11.0k|    }
 6609|  26.4k|    return begin;
 6610|  26.4k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6616|  2.47k|{
 6617|  2.47k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  2.47k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 2.44k, False: 34]
  |  Branch (6619:33): [True: 2.40k, False: 34]
  ------------------
 6620|  2.40k|        int prec = parse_simple_int(begin, end);
 6621|  2.40k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  2.40k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.40k, False: 0]
  |  |  ------------------
  ------------------
 6622|  2.40k|            handler.on_precision(prec);
 6623|  2.40k|        }
 6624|      0|        else {
 6625|      0|            handler.on_error("Invalid field precision");
 6626|      0|            return begin;
 6627|      0|        }
 6628|  2.40k|    }
 6629|  2.47k|    return begin;
 6630|  2.47k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|    410|    {
 7127|    410|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    410|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 370, False: 40]
  ------------------
 7129|    410|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 330, False: 40]
  ------------------
 7130|    410|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 290, False: 40]
  ------------------
 7131|    410|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 250, False: 40]
  ------------------
 7132|    250|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    250|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    250|        }
 7137|       |
 7138|    160|        Handler::on_localized();
 7139|    160|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  23.9k|{
 8417|  23.9k|#define SCN_VISIT(Type)                                         \
 8418|  23.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  23.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  23.9k|    }                                                           \
 8421|  23.9k|    else {                                                      \
 8422|  23.9k|        return vis(monostate_val);                              \
 8423|  23.9k|    }
 8424|       |
 8425|  23.9k|    monostate monostate_val{};
 8426|       |
 8427|  23.9k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 23.9k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 23.9k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  2.67k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 2.67k, False: 21.2k]
  ------------------
 8433|  2.67k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  2.67k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.67k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.67k|    }                                                           \
  |  | 8421|  2.67k|    else {                                                      \
  |  | 8422|  2.67k|        return vis(monostate_val);                              \
  |  | 8423|  2.67k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 23.9k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 23.9k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 23.9k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 23.9k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  2.67k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 2.67k, False: 21.2k]
  ------------------
 8443|  2.67k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  2.67k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.67k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.67k|    }                                                           \
  |  | 8421|  2.67k|    else {                                                      \
  |  | 8422|  2.67k|        return vis(monostate_val);                              \
  |  | 8423|  2.67k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 23.9k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 23.9k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  2.64k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 2.64k, False: 21.2k]
  ------------------
 8449|  2.64k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  2.64k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.64k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.64k|    }                                                           \
  |  | 8421|  2.64k|    else {                                                      \
  |  | 8422|  2.64k|        return vis(monostate_val);                              \
  |  | 8423|  2.64k|    }
  ------------------
 8450|  2.67k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 2.67k, False: 21.2k]
  ------------------
 8451|  2.67k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  2.67k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.67k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.67k|    }                                                           \
  |  | 8421|  2.67k|    else {                                                      \
  |  | 8422|  2.67k|        return vis(monostate_val);                              \
  |  | 8423|  2.67k|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 23.9k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|  2.64k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 2.64k, False: 21.2k]
  ------------------
 8455|  2.64k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  2.64k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.64k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.64k|    }                                                           \
  |  | 8421|  2.64k|    else {                                                      \
  |  | 8422|  2.64k|        return vis(monostate_val);                              \
  |  | 8423|  2.64k|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 23.9k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 23.9k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  2.67k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 2.67k, False: 21.2k]
  ------------------
 8461|  2.67k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  2.67k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.67k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.67k|    }                                                           \
  |  | 8421|  2.67k|    else {                                                      \
  |  | 8422|  2.67k|        return vis(monostate_val);                              \
  |  | 8423|  2.67k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 23.9k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 23.9k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  2.64k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 2.64k, False: 21.2k]
  ------------------
 8467|  2.64k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  2.64k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.64k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.64k|    }                                                           \
  |  | 8421|  2.64k|    else {                                                      \
  |  | 8422|  2.64k|        return vis(monostate_val);                              \
  |  | 8423|  2.64k|    }
  ------------------
 8468|  2.64k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 2.64k, False: 21.2k]
  ------------------
 8469|  2.64k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  2.64k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.64k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.64k|    }                                                           \
  |  | 8421|  2.64k|    else {                                                      \
  |  | 8422|  2.64k|        return vis(monostate_val);                              \
  |  | 8423|  2.64k|    }
  ------------------
 8470|  2.64k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 2.64k, False: 21.2k]
  ------------------
 8471|  2.64k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  2.64k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.64k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.64k|    }                                                           \
  |  | 8421|  2.64k|    else {                                                      \
  |  | 8422|  2.64k|        return vis(monostate_val);                              \
  |  | 8423|  2.64k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 23.9k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 23.9k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 23.9k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 23.9k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 23.9k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  23.9k|            SCN_CLANG_POP
 8495|  23.9k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  3.83k|    {
 3330|  3.83k|        return m_iterator;
 3331|  3.83k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|    958|    {
 1430|    958|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|    958|    {
  437|    958|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    958|    {
 1177|    958|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  1.91k|    {
 3334|  1.91k|        return m_sentinel;
 3335|  1.91k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  1.91k|    {
 3316|  1.91k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.91k|    {
  485|  1.91k|        return m_has_value;
  486|  1.91k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|    958|    {
 1627|    958|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    958|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    958|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    958|        return this->get_value();
 1629|    958|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    958|    {
  451|    958|        return m_value;
  452|    958|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|    958|    {
 1837|    958|        return detail::transform_error_impl(std::move(*this),
 1838|    958|                                            std::forward<F>(f));
 1839|    958|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|    958|{
 1323|    958|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    958|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    958|        if (SCN_LIKELY(exp.has_value())) {
 1326|    958|            return result(*std::forward<Exp>(exp));
 1327|    958|        }
 1328|       |
 1329|    958|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    958|        return result(unexpect, monostate{});
 1331|    958|    }
 1332|    958|    else {
 1333|    958|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    958|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    958|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 958, False: 0]
  |  |  ------------------
  ------------------
 1335|    958|                   ? result(*std::forward<Exp>(exp))
 1336|    958|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    958|    }
 1340|    958|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|    958|    {
 1663|    958|        return std::move(value());
 1664|    958|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    958|    {
 1430|    958|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|    958|    {
  437|    958|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    958|    {
 1177|    958|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|    958|    {
 1598|    958|        return has_value();
 1599|    958|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.91k|    {
  485|  1.91k|        return m_has_value;
  486|  1.91k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|    958|    {
 1663|    958|        return std::move(value());
 1664|    958|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|    958|    {
 1627|    958|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    958|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    958|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    958|        return this->get_value();
 1629|    958|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    958|    {
  451|    958|        return m_value;
  452|    958|    }

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  10.1k|{
   89|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  10.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  10.1k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  91.0k|{
   44|  91.0k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  91.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  91.0k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  10.1k|{
  127|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  10.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  10.1k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  91.0k|{
   60|  91.0k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  91.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  91.0k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  10.1k|{
   89|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  10.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  10.1k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  10.1k|{
  127|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  10.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  10.1k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  10.1k|{
   89|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  10.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  10.1k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  10.1k|{
  127|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  10.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  10.1k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  10.1k|{
   89|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  10.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  10.1k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  10.1k|{
  127|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  10.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  10.1k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  10.1k|{
   89|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  10.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  10.1k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  10.1k|{
  127|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  10.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  10.1k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  10.1k|{
   89|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  10.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  10.1k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  10.1k|{
  127|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  10.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  10.1k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
   88|  10.1k|{
   89|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  10.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  10.1k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  10.1k|{
  127|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  10.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  10.1k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  10.1k|{
   89|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  10.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  10.1k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
  126|  10.1k|{
  127|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  10.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  10.1k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  10.1k|{
   89|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  10.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  10.1k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  10.1k|{
  127|  10.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  10.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  10.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  10.1k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   136k|{
  653|   136k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   136k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    170|{
  659|    170|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    170|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 85, False: 85]
  ------------------
  661|    170|                    : std::locale{};
  662|    170|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    858|{
 1221|    858|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    858|                                  m_nan_payload_buffer, value);
 1223|    858|    value = this->setsign(value);
 1224|    858|    return n;
 1225|    858|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    818|{
 1221|    818|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    818|                                  m_nan_payload_buffer, value);
 1223|    818|    value = this->setsign(value);
 1224|    818|    return n;
 1225|    818|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     22|{
 1461|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 22, False: 0]
  ------------------
 1467|     22|        SCN_UNLIKELY_ATTR
 1468|     22|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     22|                                     "Invalid integer value");
 1470|     22|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    866|{
 1461|    866|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    866|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    866|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    866|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    866|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    866|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    866|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    866|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    866|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    866|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    866|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    866|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    866|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 866, False: 0]
  ------------------
 1467|    866|        SCN_UNLIKELY_ATTR
 1468|    866|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    866|                                     "Invalid integer value");
 1470|    866|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    842|{
 1461|    842|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    842|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    842|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    842|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    842|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    842|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    842|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    842|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    842|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    842|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    842|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    842|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    842|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 842, False: 0]
  ------------------
 1467|    842|        SCN_UNLIKELY_ATTR
 1468|    842|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    842|                                     "Invalid integer value");
 1470|    842|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    866|{
 1461|    866|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    866|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    866|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    866|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    866|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    866|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    866|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    866|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    866|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    866|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    866|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    866|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    866|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 866, False: 0]
  ------------------
 1467|    866|        SCN_UNLIKELY_ATTR
 1468|    866|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    866|                                     "Invalid integer value");
 1470|    866|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    822|{
 1461|    822|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    822|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    822|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    822|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    822|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    822|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    822|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    822|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    822|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    822|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    822|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    822|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    822|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 822, False: 0]
  ------------------
 1467|    822|        SCN_UNLIKELY_ATTR
 1468|    822|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    822|                                     "Invalid integer value");
 1470|    822|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    848|{
 1461|    848|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    848|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    848|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    848|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    848|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    848|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    848|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    848|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    848|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    848|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    848|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    848|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    848|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 848, False: 0]
  ------------------
 1467|    848|        SCN_UNLIKELY_ATTR
 1468|    848|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    848|                                     "Invalid integer value");
 1470|    848|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    804|{
 1461|    804|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    804|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    804|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    804|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    804|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    804|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    804|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    804|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    804|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    804|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    804|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    804|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    804|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 804, False: 0]
  ------------------
 1467|    804|        SCN_UNLIKELY_ATTR
 1468|    804|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    804|                                     "Invalid integer value");
 1470|    804|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  45.5k|{
 2184|  45.5k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  45.5k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|  91.0k|{
 2208|  91.0k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|  91.0k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  3.45k|{
  194|  3.45k|    return find_classic_impl(
  195|  3.45k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  3.45k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  3.45k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  20.6k|{
  202|  20.6k|    return find_classic_impl(
  203|  20.6k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  20.6k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  20.6k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    238|{
  673|    238|    return e;
  674|    238|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  45.5k|{
 2141|  45.5k|    return vscan_internal(source, format, args);
 2142|  45.5k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|  91.0k|{
 2161|  91.0k|    return vscan_internal(source, format, args);
 2162|  91.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.45k|{
  118|  3.45k|    auto it = source.begin();
  119|       |
  120|  10.9k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 8.20k, False: 2.76k]
  ------------------
  121|  8.20k|        auto sv =
  122|  8.20k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  8.20k|                .substr(0, 8);
  124|       |
  125|  8.20k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.81k, False: 5.38k]
  ------------------
  126|  2.81k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.81k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.81k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 444, False: 2.37k]
  ------------------
  129|    444|                break;
  130|    444|            }
  131|  2.37k|            continue;
  132|  2.81k|        }
  133|       |
  134|  21.2k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 16.1k, False: 5.14k]
  ------------------
  135|  16.1k|            auto tmp =
  136|  16.1k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  16.1k|            auto res = get_next_code_point(tmp);
  138|  16.1k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 246, False: 15.8k]
  ------------------
  139|    246|                return it;
  140|    246|            }
  141|  15.8k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  15.8k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  15.8k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  15.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  15.8k|        }
  145|  5.38k|    }
  146|       |
  147|  3.21k|    return detail::make_string_view_iterator(source, it);
  148|  3.45k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  28.5k|{
  105|  28.5k|    static_assert(sizeof(*source.data()) == 1);
  106|  28.5k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  28.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  28.5k|    uint64_t word{};
  108|  28.5k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  28.5k|    return has_byte_greater(word, 127) != 0;
  111|  28.5k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  16.1k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  16.1k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  20.6k|{
  118|  20.6k|    auto it = source.begin();
  119|       |
  120|  26.5k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 20.3k, False: 6.26k]
  ------------------
  121|  20.3k|        auto sv =
  122|  20.3k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  20.3k|                .substr(0, 8);
  124|       |
  125|  20.3k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 9.63k, False: 10.6k]
  ------------------
  126|  9.63k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  9.63k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  9.63k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 7.66k, False: 1.97k]
  ------------------
  129|  7.66k|                break;
  130|  7.66k|            }
  131|  1.97k|            continue;
  132|  9.63k|        }
  133|       |
  134|  22.1k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 18.1k, False: 3.99k]
  ------------------
  135|  18.1k|            auto tmp =
  136|  18.1k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  18.1k|            auto res = get_next_code_point(tmp);
  138|  18.1k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 6.69k, False: 11.4k]
  ------------------
  139|  6.69k|                return it;
  140|  6.69k|            }
  141|  11.4k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  11.4k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  11.4k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  11.4k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  11.4k|        }
  145|  10.6k|    }
  146|       |
  147|  13.9k|    return detail::make_string_view_iterator(source, it);
  148|  20.6k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  19.3k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  18.1k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    858|{
 1138|    858|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 858]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    858|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 858]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    858|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 858]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    858|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 858]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    858|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    858|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    858|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    858|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 8, False: 850]
  ------------------
 1185|      8|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 1186|      8|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|      8|                                         "Invalid floating-point digit");
 1188|      8|        }
 1189|      8|    }
 1190|    850|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 850, False: 0]
  |  |  ------------------
  ------------------
 1191|    850|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    850|                                     "Invalid floating-point digit");
 1193|    850|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    818|{
 1138|    818|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 818]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    818|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 818]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    818|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 818]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    818|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 818]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    818|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    818|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    818|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    818|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 12, False: 806]
  ------------------
 1185|     12|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 1186|     12|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     12|                                         "Invalid floating-point digit");
 1188|     12|        }
 1189|     12|    }
 1190|    806|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    806|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 806, False: 0]
  |  |  ------------------
  ------------------
 1191|    806|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    806|                                     "Invalid floating-point digit");
 1193|    806|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  91.0k|{
 1625|  91.0k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 90.6k, False: 378]
  ------------------
 1626|  90.6k|        return false;
 1627|  90.6k|    }
 1628|    378|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 252]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|  91.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  90.9k|    {
 1903|  90.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   272k|    {
 1722|   272k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   272k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 272k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   272k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  90.9k|    {
 1853|  90.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  90.9k|{
 2038|  90.9k|    const auto beg = handler.get_ctx().begin();
 2039|  90.9k|    detail::parse_format_string<false>(format, handler);
 2040|  90.9k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  90.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 88.0k, False: 2.97k]
  |  |  ------------------
  ------------------
 2041|  88.0k|        return unexpected(handler.error);
 2042|  88.0k|    }
 2043|  2.97k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  90.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|   452k|    {
 2022|   452k|        return ctx.get();
 2023|   452k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   452k|    {
 1857|   452k|        return contiguous_ctx;
 1858|   452k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   108k|    {
 1907|   144k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 40.8k, False: 103k]
  ------------------
 1908|  40.8k|            auto it = get_ctx().begin();
 1909|  40.8k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.05k, False: 39.7k]
  ------------------
 1910|  1.05k|                SCN_UNLIKELY_ATTR
 1911|  1.05k|                return on_error("Unexpected end of source");
 1912|  1.05k|            }
 1913|       |
 1914|  39.7k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|  39.7k|                    detail::make_string_view_from_pointers(begin, end));
 1916|  39.7k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 2.62k, False: 37.1k]
  ------------------
 1917|  2.62k|                SCN_UNLIKELY_ATTR
 1918|  2.62k|                return on_error("Invalid encoding in format string");
 1919|  2.62k|            }
 1920|  37.1k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 5.73k, False: 31.4k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  5.73k|                get_ctx().advance_to(
 1923|  5.73k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  5.73k|                auto begin_it = impl::read_while_classic_space(
 1926|  5.73k|                    detail::make_string_view_from_pointers(
 1927|  5.73k|                        detail::to_address(after_space_it),
 1928|  5.73k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  5.73k|                begin = detail::to_address(begin_it) - 1;
 1931|  5.73k|                continue;
 1932|  5.73k|            }
 1933|       |
 1934|  31.4k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 1.09k, False: 30.3k]
  ------------------
 1935|  1.09k|                SCN_UNLIKELY_ATTR
 1936|  1.09k|                return on_error("Unexpected literal character in source");
 1937|  1.09k|            }
 1938|  30.3k|            get_ctx().advance_to(ranges::next(it));
 1939|  30.3k|        }
 1940|   108k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1971|  5.76k|    {
 1972|  5.76k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  5.76k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  5.76k|        on_visit_scan_arg(
 1976|  5.76k|            impl::default_arg_reader<context_type>{
 1977|  5.76k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  5.76k|            arg);
 1979|  5.76k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  58.8k|{
 1681|  58.8k|    auto arg = ctx.arg(id);
 1682|  58.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  58.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.43k, False: 57.4k]
  |  |  ------------------
  ------------------
 1683|  1.43k|        handler.on_error("Failed to find argument with ID");
 1684|  1.43k|    }
 1685|  58.8k|    return arg;
 1686|  58.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  90.1k|    {
 1797|  90.1k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  90.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.63k, False: 87.5k]
  |  |  ------------------
  ------------------
 1798|  2.63k|            on_error("Invalid out-of-range argument ID");
 1799|  2.63k|            return;
 1800|  2.63k|        }
 1801|       |
 1802|  87.5k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  87.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 87.4k]
  |  |  ------------------
  ------------------
 1803|    112|            return on_error("Argument with this ID has already been scanned");
 1804|    112|        }
 1805|       |
 1806|  87.4k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  87.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 87.4k, False: 0]
  |  |  ------------------
  ------------------
 1807|  87.4k|            visited_args_lower64 |= (1ull << id);
 1808|  87.4k|            return;
 1809|  87.4k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  87.5k|    {
 1782|  87.5k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  87.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 87.5k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  87.5k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  87.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 87.5k, False: 0]
  |  |  ------------------
  ------------------
 1788|  87.5k|            return (visited_args_lower64 >> id) & 1ull;
 1789|  87.5k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  87.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  5.76k|    {
 1956|  5.76k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 128, False: 5.63k]
  |  Branch (1956:23): [True: 0, False: 5.63k]
  ------------------
 1957|    128|            SCN_UNLIKELY_ATTR
 1958|    128|            return;
 1959|    128|        }
 1960|       |
 1961|  5.63k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  5.63k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.88k, False: 1.74k]
  |  |  ------------------
  ------------------
 1963|  3.88k|            on_error(r.error());
 1964|  3.88k|        }
 1965|  1.74k|        else {
 1966|  1.74k|            get_ctx().advance_to(*r);
 1967|  1.74k|        }
 1968|  5.63k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  73.6k|    {
 1766|  73.6k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  73.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 73.6k, False: 0]
  |  |  ------------------
  ------------------
 1767|  73.6k|            error = err;
 1768|  73.6k|        }
 1769|  73.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  56.4k|    {
 1944|  56.4k|        return parse_ctx.next_arg_id();
 1945|  56.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1947|  2.44k|    {
 1948|  2.44k|        parse_ctx.check_arg_id(id);
 1949|  2.44k|        return id;
 1950|  2.44k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  53.0k|    {
 1985|  53.0k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  53.0k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  53.0k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 53.0k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  53.0k|        auto specs = detail::format_specs{};
 1998|  53.0k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  53.0k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  53.0k|            arg.type()};
 2001|       |
 2002|  53.0k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  53.0k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.40k, False: 50.6k]
  |  Branch (2003:29): [True: 658, False: 50.0k]
  ------------------
 2004|  3.06k|            SCN_UNLIKELY_ATTR
 2005|  3.06k|            on_error("Missing '}' in format string");
 2006|  3.06k|            return parse_ctx.begin();
 2007|  3.06k|        }
 2008|  50.0k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  50.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 230, False: 49.7k]
  |  |  ------------------
  ------------------
 2009|    230|            return parse_ctx.begin();
 2010|    230|        }
 2011|  49.7k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  49.7k|        on_visit_scan_arg(
 2014|  49.7k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  49.7k|                                           get_ctx().locale()},
 2016|  49.7k|            arg);
 2017|  49.7k|        return parse_ctx.begin();
 2018|  50.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  53.0k|    {
 1701|  53.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  49.7k|    {
 1956|  49.7k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 120, False: 49.6k]
  |  Branch (1956:23): [True: 0, False: 49.6k]
  ------------------
 1957|    120|            SCN_UNLIKELY_ATTR
 1958|    120|            return;
 1959|    120|        }
 1960|       |
 1961|  49.6k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  49.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  49.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  49.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44.7k, False: 4.96k]
  |  |  ------------------
  ------------------
 1963|  44.7k|            on_error(r.error());
 1964|  44.7k|        }
 1965|  4.96k|        else {
 1966|  4.96k|            get_ctx().advance_to(*r);
 1967|  4.96k|        }
 1968|  49.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   422k|    {
 1761|   422k|        SCN_UNLIKELY_ATTR
 1762|   422k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   422k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   272k|    {
 1729|   272k|        {
 1730|   272k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 272k]
  ------------------
 1731|   272k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 272k]
  ------------------
 1732|   272k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   272k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   272k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 185k, False: 87.4k]
  ------------------
 1736|   185k|                return on_error("Argument list not exhausted");
 1737|   185k|            }
 1738|   272k|        }
 1739|       |
 1740|  87.4k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 87.4k, False: 0]
  ------------------
 1741|  87.4k|            return;
 1742|  87.4k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   272k|    {
 1777|   272k|        return error;
 1778|   272k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|   484k|    {
 1773|   484k|        return static_cast<bool>(error);
 1774|   484k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  91.0k|{
 2053|  91.0k|    const auto argcount = args.size();
 2054|  91.0k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 90.9k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|  90.9k|    auto handler = format_handler<true, CharT>{
 2060|  90.9k|        ranges::subrange<const CharT*>{source.data(),
 2061|  90.9k|                                       source.data() + source.size()},
 2062|  90.9k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  90.9k|    static_cast<    \
  |  |  929|  90.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  90.9k|    static_cast<    \
  |  |  929|  90.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  90.9k|    return vscan_parse_format_string(format, handler);
 2064|  91.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   182k|{
 2053|   182k|    const auto argcount = args.size();
 2054|   182k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 181k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   181k|    auto handler = format_handler<true, CharT>{
 2060|   181k|        ranges::subrange<const CharT*>{source.data(),
 2061|   181k|                                       source.data() + source.size()},
 2062|   181k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   181k|    return vscan_parse_format_string(format, handler);
 2064|   182k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   182k|{
 1625|   182k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 170k, False: 11.2k]
  ------------------
 1626|   170k|        return false;
 1627|   170k|    }
 1628|  11.2k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 11.0k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   182k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   181k|    {
 1903|   181k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   181k|    {
 1853|   181k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   181k|{
 2038|   181k|    const auto beg = handler.get_ctx().begin();
 2039|   181k|    detail::parse_format_string<false>(format, handler);
 2040|   181k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180k, False: 1.08k]
  |  |  ------------------
  ------------------
 2041|   180k|        return unexpected(handler.error);
 2042|   180k|    }
 2043|  1.08k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   181k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  2.01M|    {
 2022|  2.01M|        return ctx.get();
 2023|  2.01M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  2.01M|    {
 1857|  2.01M|        return contiguous_ctx;
 1858|  2.01M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  94.8k|    {
 1907|   624k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 590k, False: 33.9k]
  ------------------
 1908|   590k|            auto it = get_ctx().begin();
 1909|   590k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 372, False: 590k]
  ------------------
 1910|    372|                SCN_UNLIKELY_ATTR
 1911|    372|                return on_error("Unexpected end of source");
 1912|    372|            }
 1913|       |
 1914|   590k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   590k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   590k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 60.2k, False: 530k]
  ------------------
 1917|  60.2k|                SCN_UNLIKELY_ATTR
 1918|  60.2k|                return on_error("Invalid encoding in format string");
 1919|  60.2k|            }
 1920|   530k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 1.87k, False: 528k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  1.87k|                get_ctx().advance_to(
 1923|  1.87k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  1.87k|                auto begin_it = impl::read_while_classic_space(
 1926|  1.87k|                    detail::make_string_view_from_pointers(
 1927|  1.87k|                        detail::to_address(after_space_it),
 1928|  1.87k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  1.87k|                begin = detail::to_address(begin_it) - 1;
 1931|  1.87k|                continue;
 1932|  1.87k|            }
 1933|       |
 1934|   528k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 308, False: 527k]
  ------------------
 1935|    308|                SCN_UNLIKELY_ATTR
 1936|    308|                return on_error("Unexpected literal character in source");
 1937|    308|            }
 1938|   527k|            get_ctx().advance_to(ranges::next(it));
 1939|   527k|        }
 1940|  94.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1971|  4.50k|    {
 1972|  4.50k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  4.50k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  4.50k|        on_visit_scan_arg(
 1976|  4.50k|            impl::default_arg_reader<context_type>{
 1977|  4.50k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  4.50k|            arg);
 1979|  4.50k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  31.3k|{
 1681|  31.3k|    auto arg = ctx.arg(id);
 1682|  31.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  31.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.20k, False: 30.1k]
  |  |  ------------------
  ------------------
 1683|  1.20k|        handler.on_error("Failed to find argument with ID");
 1684|  1.20k|    }
 1685|  31.3k|    return arg;
 1686|  31.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  4.50k|    {
 1956|  4.50k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 204, False: 4.30k]
  |  Branch (1956:23): [True: 0, False: 4.30k]
  ------------------
 1957|    204|            SCN_UNLIKELY_ATTR
 1958|    204|            return;
 1959|    204|        }
 1960|       |
 1961|  4.30k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  4.30k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.09k, False: 1.21k]
  |  |  ------------------
  ------------------
 1963|  3.09k|            on_error(r.error());
 1964|  3.09k|        }
 1965|  1.21k|        else {
 1966|  1.21k|            get_ctx().advance_to(*r);
 1967|  1.21k|        }
 1968|  4.30k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|  30.9k|    {
 1944|  30.9k|        return parse_ctx.next_arg_id();
 1945|  30.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1947|    412|    {
 1948|    412|        parse_ctx.check_arg_id(id);
 1949|    412|        return id;
 1950|    412|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  26.8k|    {
 1985|  26.8k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  26.8k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  26.8k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 26.8k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  26.8k|        auto specs = detail::format_specs{};
 1998|  26.8k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  26.8k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  26.8k|            arg.type()};
 2001|       |
 2002|  26.8k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  26.8k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.00k, False: 24.8k]
  |  Branch (2003:29): [True: 536, False: 24.2k]
  ------------------
 2004|  2.53k|            SCN_UNLIKELY_ATTR
 2005|  2.53k|            on_error("Missing '}' in format string");
 2006|  2.53k|            return parse_ctx.begin();
 2007|  2.53k|        }
 2008|  24.2k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 234, False: 24.0k]
  |  |  ------------------
  ------------------
 2009|    234|            return parse_ctx.begin();
 2010|    234|        }
 2011|  24.0k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  24.0k|        on_visit_scan_arg(
 2014|  24.0k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  24.0k|                                           get_ctx().locale()},
 2016|  24.0k|            arg);
 2017|  24.0k|        return parse_ctx.begin();
 2018|  24.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  26.8k|    {
 1701|  26.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  24.0k|    {
 1956|  24.0k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 118, False: 23.9k]
  |  Branch (1956:23): [True: 0, False: 23.9k]
  ------------------
 1957|    118|            SCN_UNLIKELY_ATTR
 1958|    118|            return;
 1959|    118|        }
 1960|       |
 1961|  23.9k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  23.9k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.9k, False: 1.92k]
  |  |  ------------------
  ------------------
 1963|  21.9k|            on_error(r.error());
 1964|  21.9k|        }
 1965|  1.92k|        else {
 1966|  1.92k|            get_ctx().advance_to(*r);
 1967|  1.92k|        }
 1968|  23.9k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  5.05k|{
 1363|  5.05k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  5.05k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  5.05k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  5.05k|            std::u32string tmp;
 1368|  5.05k|            transcode_to_string_impl_to32(src, tmp);
 1369|  5.05k|            return transcode_to_string_impl_32to16<false>(
 1370|  5.05k|                std::u32string_view{tmp}, dest);
 1371|  5.05k|        }
 1372|  5.05k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  5.05k|            return transcode_to_string_impl_to32(src, dest);
 1374|  5.05k|        }
 1375|  5.05k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  5.05k|{
 1256|  5.05k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  5.05k|    auto it = src.begin();
 1259|   774k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 768k, False: 5.05k]
  ------------------
 1260|   768k|        auto res = get_next_code_point(
 1261|   768k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   768k|                                                                 src.end()));
 1263|   768k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   768k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.3k, False: 750k]
  |  |  ------------------
  ------------------
 1264|  18.3k|            dest.push_back(DestCharT{0xfffd});
 1265|  18.3k|        }
 1266|   750k|        else {
 1267|   750k|            dest.push_back(res.value);
 1268|   750k|        }
 1269|   768k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   768k|    }
 1271|  5.05k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   884k|{
 1169|   884k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   884k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   884k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   884k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   884k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   884k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.2k, False: 867k]
  |  |  ------------------
  ------------------
 1173|  16.2k|        return {get_start_for_next_code_point(input),
 1174|  16.2k|                detail::invalid_code_point};
 1175|  16.2k|    }
 1176|   867k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   867k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 943, False: 866k]
  |  |  ------------------
  ------------------
 1177|    943|        return {input.end(), detail::invalid_code_point};
 1178|    943|    }
 1179|       |
 1180|   866k|    return {input.begin() + len,
 1181|   866k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   867k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  16.2k|{
 1155|  16.2k|    auto it = input.begin();
 1156|  58.4k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 57.2k, False: 1.28k]
  ------------------
 1157|  57.2k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 15.0k, False: 42.1k]
  ------------------
 1158|  15.0k|            break;
 1159|  15.0k|        }
 1160|  57.2k|    }
 1161|  16.2k|    return it;
 1162|  16.2k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  44.0k|    {
  809|  44.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  44.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  44.0k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  16.0k|    {
  823|  16.0k|        return a.m_code == b.m_code;
  824|  16.0k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  43.3k|    {
 2931|  43.3k|        SCN_UNLIKELY_ATTR
 2932|  43.3k|        m_msg = msg;
 2933|  43.3k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  73.5k|    {
 2936|  73.5k|        return m_msg == nullptr;
 2937|  73.5k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  1.01k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4989|   406k|    {
 4990|   406k|        on_charset_range(cp, cp + 1);
 4991|   406k|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4994|   408k|    {
 4995|   408k|        if (end <= 127) {
  ------------------
  |  Branch (4995:13): [True: 217k, False: 191k]
  ------------------
 4996|   217k|            return;
 4997|   217k|        }
 4998|       |
 4999|  34.6M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4999:25): [True: 34.6M, False: 189k]
  ------------------
 5000|       |            // TODO: check for overlap
 5001|  34.6M|            if (elem.first == end) {
  ------------------
  |  Branch (5001:17): [True: 912, False: 34.6M]
  ------------------
 5002|    912|                elem.first = begin;
 5003|    912|                return;
 5004|    912|            }
 5005|       |
 5006|  34.6M|            if (elem.second == begin) {
  ------------------
  |  Branch (5006:17): [True: 1.42k, False: 34.6M]
  ------------------
 5007|  1.42k|                elem.second = end;
 5008|  1.42k|                return;
 5009|  1.42k|            }
 5010|  34.6M|        }
 5011|       |
 5012|   189k|        extra_ranges.push_back(std::make_pair(begin, end));
 5013|   189k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5016|    432|    {
 5017|       |        // no-op
 5018|    432|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5031|   414k|    {
 5032|   414k|        return static_cast<bool>(err);
 5033|   414k|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5349|  1.28k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  35.5k|{
  458|  35.5k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  35.5k|        static_cast<unsigned char>(ch))];
  460|  35.5k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   298k|{
  469|   298k|    return static_cast<unsigned char>(ch) <= 127;
  470|   298k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  1.18k|{
  474|  1.18k|#if WCHAR_MIN < 0
  475|  1.18k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 1.17k, False: 12]
  |  Branch (475:23): [True: 1.17k, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  1.18k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|   322k|{
  483|   322k|    return cp <= 127;
  484|   322k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  28.5k|{
  539|  28.5k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  28.5k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  45.8k|{
  784|  45.8k|    return e != eof_error::good;
  785|  45.8k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    174|{
  798|    174|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    174|    return scan_error{scan_error::end_of_range, "EOF"};
  800|    174|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    692|{
  845|    692|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    692|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    692|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    692|    return parse_error::eof;
  847|    692|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.77k|{
  854|  3.77k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.77k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.77k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 76, False: 3.70k]
  ------------------
  859|     76|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     76|    }
  861|       |
  862|  3.70k|    return scan_error{code, msg};
  863|  3.77k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.77k|{
  868|  3.77k|    return [code, msg](parse_error err) {
  869|  3.77k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.77k|    };
  871|  3.77k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   727k|{
 1200|       |    // Pattern_White_Space property
 1201|   727k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 169k, False: 558k]
  |  Branch (1201:27): [True: 9.20k, False: 160k]
  ------------------
 1202|   727k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 4.72k, False: 713k]
  ------------------
 1203|   727k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 5.30k, False: 708k]
  ------------------
 1204|   727k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 1.58k, False: 706k]
  ------------------
 1205|   727k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 3.33k, False: 703k]
  ------------------
 1206|   727k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 1.36k, False: 701k]
  ------------------
 1207|   727k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 90, False: 701k]
  ------------------
 1208|   727k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  3.54k|{
 2220|  3.54k|    unsigned char running_diff{0};
 2221|  12.3k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 8.84k, False: 3.54k]
  ------------------
 2222|  8.84k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  8.84k|    }
 2224|  3.54k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 3.54k]
  |  Branch (2224:33): [True: 0, False: 3.54k]
  ------------------
 2225|  3.54k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|   119k|{
 2303|   119k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 23.4k, False: 96.3k]
  ------------------
 2304|   119k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 222, False: 23.2k]
  ------------------
 2305|  23.4k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 72, False: 23.1k]
  ------------------
 2306|  23.4k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 72, False: 23.0k]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|  23.4k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 12.5k, False: 10.5k]
  |  Branch (2308:27): [True: 1.69k, False: 10.8k]
  |  Branch (2308:43): [True: 864, False: 834]
  ------------------
 2309|  23.4k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 10.8k, False: 11.4k]
  |  Branch (2309:27): [True: 286, False: 10.5k]
  ------------------
 2310|  23.4k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 10.4k, False: 11.4k]
  |  Branch (2310:27): [True: 118, False: 10.3k]
  ------------------
 2311|  23.4k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 10.3k, False: 11.4k]
  |  Branch (2311:27): [True: 204, False: 10.1k]
  ------------------
 2312|  23.4k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 10.1k, False: 11.4k]
  |  Branch (2312:27): [True: 212, False: 9.90k]
  ------------------
 2313|  23.4k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 9.90k, False: 11.4k]
  |  Branch (2313:27): [True: 74, False: 9.83k]
  ------------------
 2314|  23.4k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 9.83k, False: 11.4k]
  |  Branch (2314:27): [True: 78, False: 9.75k]
  ------------------
 2315|  23.4k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 9.54k, False: 11.7k]
  |  Branch (2315:28): [True: 222, False: 9.31k]
  ------------------
 2316|  23.4k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 9.31k, False: 11.7k]
  |  Branch (2316:28): [True: 446, False: 8.87k]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|  23.4k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 9.02k, False: 11.5k]
  |  Branch (2318:28): [True: 84, False: 8.94k]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|  23.4k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 8.94k, False: 11.5k]
  |  Branch (2320:28): [True: 72, False: 8.87k]
  ------------------
 2321|  3.02k|        return 2;
 2322|  3.02k|    }
 2323|   116k|    return 1;
 2324|   119k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|  71.9k|{
 2328|  71.9k|    return calculate_text_width_for_fmt_v10(cp);
 2329|  71.9k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|    184|{
 2343|    184|    return calculate_text_width_for_fmt_v10(cp);
 2344|    184|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  14.8k|{
 3123|  14.8k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  14.8k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  6.85k|{
 3127|  6.85k|#if WCHAR_MIN < 0
 3128|  6.85k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 6.85k, False: 0]
  |  Branch (3128:20): [True: 6.85k, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  6.85k|        return char_to_int(static_cast<char>(ch));
 3133|  6.85k|    }
 3134|      0|    return 255;
 3135|  6.85k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4270|  16.1k|{
 4271|  16.1k|    std::regex_constants::syntax_option_type result{};
 4272|  16.1k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4272:9): [True: 426, False: 15.7k]
  ------------------
 4273|    426|#if SCN_HAS_STD_REGEX_MULTILINE
 4274|    426|        result |= std::regex_constants::multiline;
 4275|       |#else
 4276|       |        return unexpected_scan_error(
 4277|       |            scan_error::invalid_format_string,
 4278|       |            "/m flag for regex isn't supported by regex backend");
 4279|       |#endif
 4280|    426|    }
 4281|  16.1k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4281:9): [True: 0, False: 16.1k]
  ------------------
 4282|  16.1k|        detail::regex_flags::none) {
 4283|      0|        return unexpected_scan_error(
 4284|      0|            scan_error::invalid_format_string,
 4285|      0|            "/s flag for regex isn't supported by regex backend");
 4286|      0|    }
 4287|  16.1k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4287:9): [True: 2.13k, False: 14.0k]
  ------------------
 4288|  2.13k|        result |= std::regex_constants::icase;
 4289|  2.13k|    }
 4290|  16.1k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4290:9): [True: 12, False: 16.1k]
  ------------------
 4291|     12|        result |= std::regex_constants::nosubs;
 4292|     12|    }
 4293|  16.1k|    return result;
 4294|  16.1k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4637|  1.01k|{
 4638|  1.01k|    std::string result{pattern};
 4639|  7.51k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4639:24): [True: 6.49k, False: 1.01k]
  ------------------
 4640|  6.49k|        result.replace(n, 2, "/");
 4641|  6.49k|        ++n;
 4642|  6.49k|    }
 4643|  1.01k|    return result;
 4644|  1.01k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4646|    204|{
 4647|    204|    std::wstring result{pattern};
 4648|  1.61k|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4648:24): [True: 1.41k, False: 204]
  ------------------
 4649|  1.41k|        result.replace(n, 2, L"/");
 4650|  1.41k|        ++n;
 4651|  1.41k|    }
 4652|    204|    return result;
 4653|    204|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  7.92k|{
 6008|  7.92k|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 2.03k, False: 5.89k]
  ------------------
 6009|  2.03k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 942, False: 1.09k]
  ------------------
 6010|    942|            return {scan_error::invalid_scanned_value,
 6011|    942|                    "Scanned value too narrow, width did not exceed what "
 6012|    942|                    "was specified in the format string"};
 6013|    942|        }
 6014|  2.03k|    }
 6015|  6.98k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 1.72k, False: 5.26k]
  ------------------
 6016|  1.72k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 96, False: 1.62k]
  ------------------
 6017|     96|            return {scan_error::invalid_scanned_value,
 6018|     96|                    "Scanned value too wide, width exceeded the specified "
 6019|     96|                    "precision"};
 6020|     96|        }
 6021|  1.72k|    }
 6022|  6.88k|    return {};
 6023|  6.98k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  42.5k|    {
  304|  42.5k|        ranges::advance(x, n);
  305|  42.5k|        return x;
  306|  42.5k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  42.5k|    {
  268|  42.5k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  42.5k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  81.9k|    {
  151|  81.9k|        i += n;
  152|  81.9k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  54.9k|    {
  108|  54.9k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  54.9k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  54.9k|    {
   87|  54.9k|        return s - i;
   88|  54.9k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  5.98k|    {
  304|  5.98k|        ranges::advance(x, n);
  305|  5.98k|        return x;
  306|  5.98k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  5.98k|    {
  268|  5.98k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  5.98k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  5.98k|    {
  151|  5.98k|        i += n;
  152|  5.98k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.22k|    {
  108|  3.22k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.22k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.22k|    {
   87|  3.22k|        return s - i;
   88|  3.22k|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5623|  5.50k|    {
 5624|  5.50k|        reader_error_handler eh{};
 5625|  5.50k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  5.50k|            detail::check_code_point_type_specs(specs, eh);
 5627|  5.50k|        }
 5628|  5.50k|        else {
 5629|  5.50k|            detail::check_char_type_specs(specs, eh);
 5630|  5.50k|        }
 5631|  5.50k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.97k, False: 530]
  |  |  ------------------
  ------------------
 5632|  4.97k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  4.97k|        }
 5634|    530|        return {};
 5635|  5.50k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  24.6k|    {
  763|  24.6k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  24.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  24.6k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  3.70k|    {
  754|  3.70k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  7.75k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.75k|              cvref<T> obj = *get<T>(fn);
  745|  7.75k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.75k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.75k|              }
  748|  7.75k|              else {
  749|  7.75k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.75k|              }
  751|  7.75k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  7.75k|    {
  684|  7.75k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.75k|            return static_cast<T*>(s.m_cp);
  686|  7.75k|        }
  687|  7.75k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.75k|            return static_cast<T*>(s.m_p);
  689|  7.75k|        }
  690|  7.75k|        else {
  691|  7.75k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.75k|        }
  693|  7.75k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  3.70k|        {
  662|  3.70k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|   718k|    {
  763|   718k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   718k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   718k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  16.5k|    {
  754|  16.5k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|   333k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   333k|              cvref<T> obj = *get<T>(fn);
  745|   333k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   333k|                  obj(static_cast<decltype(args)>(args)...);
  747|   333k|              }
  748|   333k|              else {
  749|   333k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   333k|              }
  751|   333k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   333k|    {
  684|   333k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   333k|            return static_cast<T*>(s.m_cp);
  686|   333k|        }
  687|   333k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   333k|            return static_cast<T*>(s.m_p);
  689|   333k|        }
  690|   333k|        else {
  691|   333k|            return reinterpret_cast<T*>(s.m_fp);
  692|   333k|        }
  693|   333k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  16.5k|        {
  662|  16.5k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5618|  1.62k|    {
 5619|  1.62k|        return false;
 5620|  1.62k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.77k|    return [code, msg](parse_error err) {
  869|  3.77k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.77k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|     60|    {
 1780|     60|        auto stdloc = loc.get<std::locale>();
 1781|     60|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     60|        grouping = numpunct.grouping();
 1783|     60|        thousands_sep =
 1784|     60|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 60]
  ------------------
 1785|     60|        decimal_point = numpunct.decimal_point();
 1786|     60|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|     82|{
 1717|     82|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 82, False: 0]
  ------------------
 1718|     82|        return std::use_facet<Facet>(stdloc);
 1719|     82|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     82|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  22.0k|{
 2349|  22.0k|    size_t count{0};
 2350|  22.0k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  22.0k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  22.0k|    });
 2353|  22.0k|    return count;
 2354|  22.0k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  22.0k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  22.0k|    auto it = input.begin();
 1448|  63.1k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 41.0k, False: 22.0k]
  ------------------
 1449|  41.0k|        auto res = get_next_code_point(
 1450|  41.0k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  41.0k|        cb(res.value);
 1452|  41.0k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  41.0k|    }
 1454|  22.0k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  47.6k|    {
  763|  47.6k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  47.6k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  22.0k|    {
  754|  22.0k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  41.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.0k|              cvref<T> obj = *get<T>(fn);
  745|  41.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  41.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  41.0k|              }
  748|  41.0k|              else {
  749|  41.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.0k|              }
  751|  41.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  41.0k|    {
  684|  41.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  41.0k|            return static_cast<T*>(s.m_cp);
  686|  41.0k|        }
  687|  41.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  41.0k|            return static_cast<T*>(s.m_p);
  689|  41.0k|        }
  690|  41.0k|        else {
  691|  41.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  41.0k|        }
  693|  41.0k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  41.0k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  41.0k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  41.0k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  22.0k|        {
  662|  22.0k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  3.61k|    {
 1582|  3.61k|        return m_view;
 1583|  3.61k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  3.83k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2420|  3.54k|    {
 2421|  3.54k|        return m_multibyte_left;
 2422|  3.54k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|  97.9k|    {
 2426|  97.9k|        return *m_current;
 2427|  97.9k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|   108k|    {
 2435|   108k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|   108k|        _increment_current();
 2437|   108k|        return *this;
 2438|   108k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|   108k|    {
 2668|   108k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 61.5k, False: 46.8k]
  ------------------
 2669|  61.5k|            auto cplen = _get_cp_length_at_current();
 2670|  61.5k|            m_multibyte_left = cplen - 1;
 2671|  61.5k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  61.5k|        }
 2673|  46.8k|        else {
 2674|  46.8k|            --m_multibyte_left;
 2675|  46.8k|        }
 2676|       |
 2677|   108k|        ++m_current;
 2678|   108k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|  61.5k|    {
 2639|  61.5k|        return static_cast<difference_type>(
 2640|  61.5k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  61.5k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|  61.5k|    {
 2645|  61.5k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  61.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 530, False: 61.0k]
  |  |  ------------------
  ------------------
 2646|    530|            return 0;
 2647|    530|        }
 2648|       |
 2649|  61.0k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 42.8k, False: 18.1k]
  ------------------
 2650|  42.8k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  42.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  42.8k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  42.8k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  42.8k|        }
 2654|       |
 2655|  18.1k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  18.1k|                                           cplen);
 2657|  18.1k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 17.8k]
  |  |  ------------------
  ------------------
 2658|    332|            return 0;
 2659|    332|        }
 2660|       |
 2661|  17.8k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  17.8k|        return static_cast<difference_type>(
 2663|  17.8k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  18.1k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  20.2k|{
 1857|  20.2k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  20.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  20.2k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  20.2k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  20.2k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 440, False: 19.8k]
  ------------------
 1862|    440|            return unexpected(eof_error::eof);
 1863|    440|        }
 1864|       |
 1865|  19.8k|        return ranges::next(range.begin(), count);
 1866|  20.2k|    }
 1867|  20.2k|    else {
 1868|  20.2k|        auto it = range.begin();
 1869|  20.2k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  20.2k|            return ranges::next(it, count);
 1871|  20.2k|        }
 1872|       |
 1873|  20.2k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  20.2k|            if (it == range.end()) {
 1875|  20.2k|                return unexpected(eof_error::eof);
 1876|  20.2k|            }
 1877|  20.2k|        }
 1878|       |
 1879|  20.2k|        return it;
 1880|  20.2k|    }
 1881|  20.2k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  62.3k|    {
 2531|  62.3k|        return !(a == b);
 2532|  62.3k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  69.8k|    {
 2523|  69.8k|        return a.m_current == b.m_current;
 2524|  69.8k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2429|  8.45k|    {
 2430|  8.45k|        return *m_current;
 2431|  8.45k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.19k|    {
  268|  1.19k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.19k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.19k|    {
  161|  1.19k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.19k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.19k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.19k|        else {
  169|  1.19k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.19k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.19k|        }
  173|  1.19k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1889|  20.1k|    {
 1890|  20.1k|        return !codepoint.empty();
 1891|  20.1k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1682|  1.53k|{
 1683|  1.53k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.53k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.53k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.53k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  1.53k|    }
 1688|  1.53k|    else {
 1689|  1.53k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  1.53k|    }
 1691|  1.53k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EELPv0EEEOT_:
 1536|  1.53k|    {
 1537|  1.53k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  1.53k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1620|  1.53k|    {
 1621|  1.53k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.53k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.53k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.53k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.53k|            m_storage.reset();
 1627|  1.53k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.53k|        }
 1629|  1.53k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.53k|                                          std::basic_string<CharT>>) {
 1631|  1.53k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.53k|            m_view = string_view_type{*m_storage};
 1633|  1.53k|        }
 1634|  1.53k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  1.53k|                                          typename detail::basic_scan_buffer<
 1636|  1.53k|                                              value_t>::forward_iterator> &&
 1637|  1.53k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  1.53k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.53k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.53k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.53k|                             detail::to_address(end_seg.end()))) {
 1642|  1.53k|                auto& str = m_storage.emplace();
 1643|  1.53k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.53k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.53k|                m_view = string_view_type{str};
 1646|  1.53k|                return;
 1647|  1.53k|            }
 1648|       |
 1649|  1.53k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.53k|                                                            end_seg.data());
 1651|  1.53k|            m_storage.reset();
 1652|  1.53k|        }
 1653|  1.53k|        else {
 1654|  1.53k|            auto& str = m_storage.emplace();
 1655|  1.53k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|  1.53k|                str.reserve(range.size());
 1657|  1.53k|            }
 1658|  1.53k|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|  1.53k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.53k|                          std::back_inserter(str));
 1661|  1.53k|            }
 1662|  1.53k|            else {
 1663|  1.53k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.53k|                     ++it) {
 1665|  1.53k|                    str.push_back(*it);
 1666|  1.53k|                }
 1667|  1.53k|            }
 1668|  1.53k|            m_view = string_view_type{str};
 1669|  1.53k|        }
 1670|  1.53k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2381|  19.6k|    {
 2382|  19.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|   107k|    {
 2413|   107k|        return m_current;
 2414|   107k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  8.24k|    {
 2832|  8.24k|        return take_width_view{r, n};
 2833|  8.24k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2800|  8.24k|    {
 2801|  8.24k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|  8.24k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5662|    286|    {
 5663|    286|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 254, False: 32]
  ------------------
 5664|    286|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 32]
  ------------------
 5665|    254|            return read_default(range, value, loc);
 5666|    254|        }
 5667|       |
 5668|     32|        reader_impl_for_int<CharT> reader{};
 5669|     32|        signed char tmp_value{};
 5670|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     32|        value = static_cast<signed char>(value);
 5672|     32|        return ret;
 5673|    286|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5644|    254|    {
 5645|    254|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    254|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    254|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    254|            return code_unit_reader<char>{}.read(range, value);
 5648|    254|        }
 5649|    254|        else {
 5650|    254|            SCN_UNUSED(range);
 5651|    254|            SCN_EXPECT(false);
 5652|    254|            SCN_UNREACHABLE;
 5653|    254|        }
 5654|    254|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5563|    254|    {
 5564|    254|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    254|        ch = *range.begin();
 5566|    254|        return it;
 5567|    254|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  1.88k|{
 1846|  1.88k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.88k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  1.88k|    return ranges::next(range.begin());
 1851|  1.88k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  1.88k|{
  950|  1.88k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.88k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.88k|    return eof_error::good;
  954|  1.88k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  1.88k|{
  944|  1.88k|    return is_range_eof(r.begin(), r.end());
  945|  1.88k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  22.0k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  22.0k|    {
  937|  22.0k|        return begin == end;
  938|  22.0k|    }
  939|  22.0k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   101k|        {
 2770|   101k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 3.54k, False: 97.9k]
  |  Branch (2770:39): [True: 832, False: 2.71k]
  ------------------
 2771|   101k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 960, False: 99.7k]
  ------------------
 2772|   101k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|  54.9k|    {
 2816|  54.9k|        return sentinel<true>{m_base.get().end()};
 2817|  54.9k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|  94.3k|    {
 2717|  94.3k|        return view;
 2718|  94.3k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|  54.9k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.91k|    {
  296|  1.91k|        ++x;
  297|  1.91k|        return x;
  298|  1.91k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|  19.6k|    {
 2810|  19.6k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  19.6k|                                      m_count};
 2812|  19.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|     32|    {
 3539|     32|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     32|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     32|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 32]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     32|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 32]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     32|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3565|     32|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    816|{
 3326|    816|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|    816|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    816|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    816|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    816|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 816]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    816|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    816|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    816|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    816|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    816|        parse_integer_base_prefix(
 3331|    816|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    816|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 816]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    816|    else {
 3343|    816|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 816]
  |  Branch (3343:13): [True: 816, False: 0]
  ------------------
 3344|    816|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 816, False: 0]
  ------------------
 3345|    816|            digits_begin_it = base_prefix_begin_it;
 3346|    816|        }
 3347|    816|    }
 3348|       |
 3349|    816|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 816, False: 0]
  ------------------
 3350|    816|        sign = sign_type::plus_sign;
 3351|    816|    }
 3352|    816|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    816|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    816|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|  1.08k|{
 3141|  1.08k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.08k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.08k, False: 0]
  ------------------
 3143|  1.08k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.08k, False: 0]
  ------------------
 3144|  1.08k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.08k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.08k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|  1.08k|{
 2272|  1.08k|    auto it = read_code_unit(range);
 2273|  1.08k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.08k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  2.17k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.17k, False: 1.08k]
  ------------------
 2278|  2.17k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 2.17k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  2.17k|    }
 2282|       |
 2283|  1.08k|    return unexpected(parse_error::error);
 2284|  1.08k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    816|{
 3293|    816|    switch (base) {
 3294|     14|        case 2:
  ------------------
  |  Branch (3294:9): [True: 14, False: 802]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     14|                    false};
 3298|       |
 3299|     14|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 14, False: 802]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     14|            bool zero_parsed = false;
 3302|     14|            auto it = apply_opt(
 3303|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     14|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    262|        case 16:
  ------------------
  |  Branch (3307:9): [True: 262, False: 554]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    262|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    262|                    false};
 3311|       |
 3312|     20|        case 0:
  ------------------
  |  Branch (3312:9): [True: 20, False: 796]
  ------------------
 3313|       |            // detect base
 3314|     20|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    506|        default:
  ------------------
  |  Branch (3316:9): [True: 506, False: 310]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    506|            return {range.begin(), base, false};
 3319|    816|    }
 3320|    816|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    290|{
 2291|    290|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 290, False: 0]
  ------------------
 2292|    290|        return range.begin();
 2293|    290|    }
 2294|      0|    return *result;
 2295|    290|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     34|{
 3244|     34|    return read_matching_string_classic_nocase(range, "0b");
 3245|     34|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  1.14k|{
 2231|  1.14k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.14k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.14k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.14k|        if (range.size() < str.size()) {
 2236|  1.14k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.14k|        }
 2238|  1.14k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.14k|            return unexpected(parse_error::error);
 2240|  1.14k|        }
 2241|  1.14k|        return ranges::next(range.begin(), str.size());
 2242|  1.14k|    }
 2243|  1.14k|    else {
 2244|  1.14k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.14k|            if (ch < 'A' || ch > 'Z') {
 2246|  1.14k|                return ch;
 2247|  1.14k|            }
 2248|  1.14k|            return static_cast<char_type>(ch +
 2249|  1.14k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.14k|        };
 2251|       |
 2252|  1.14k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 186, False: 956]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    186|    }                                                  \
  |  |  |  | 3671|  1.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    956|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    956|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    956|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    956|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    956|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 956, False: 0]
  |  |  ------------------
  ------------------
 2257|    956|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    956|                    return ascii_tolower(a) ==
 2259|    956|                           static_cast<detail::char_t<Range>>(b);
 2260|    956|                }))) {
 2261|    956|            return unexpected(parse_error::error);
 2262|    956|        }
 2263|       |
 2264|      0|        return it;
 2265|    956|    }
 2266|  1.14k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  3.54k|{
 1857|  3.54k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  3.54k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  3.54k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  3.54k|        if (sz < count) {
 1862|  3.54k|            return unexpected(eof_error::eof);
 1863|  3.54k|        }
 1864|       |
 1865|  3.54k|        return ranges::next(range.begin(), count);
 1866|  3.54k|    }
 1867|  3.54k|    else {
 1868|  3.54k|        auto it = range.begin();
 1869|  3.54k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 3.54k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  13.0k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 9.73k, False: 3.33k]
  ------------------
 1874|  9.73k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 210, False: 9.52k]
  ------------------
 1875|    210|                return unexpected(eof_error::eof);
 1876|    210|            }
 1877|  9.73k|        }
 1878|       |
 1879|  3.33k|        return it;
 1880|  3.54k|    }
 1881|  3.54k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  3.54k|{
 1095|  3.54k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  3.54k|        return r.size();
 1097|  3.54k|    }
 1098|  3.54k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  3.54k|                           ranges::const_iterator_t<Range>,
 1100|  3.54k|                           typename detail::basic_scan_buffer<
 1101|  3.54k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  3.54k|        if constexpr (ranges::common_range<Range>) {
 1103|  3.54k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  3.54k|        }
 1105|  3.54k|        else {
 1106|  3.54k|            if (r.begin().stores_parent()) {
 1107|  3.54k|                return static_cast<size_t>(
 1108|  3.54k|                    r.begin().parent()->chars_available() -
 1109|  3.54k|                    r.begin().position());
 1110|  3.54k|            }
 1111|  3.54k|            return r.begin().contiguous_segment().size();
 1112|  3.54k|        }
 1113|  3.54k|    }
 1114|  3.54k|    else {
 1115|  3.54k|        return 0;
 1116|  3.54k|    }
 1117|  3.54k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2244|    956|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    956|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 42, False: 914]
  |  Branch (2245:29): [True: 914, False: 0]
  ------------------
 2246|    956|                return ch;
 2247|    956|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    956|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     34|{
 2146|     34|    auto it = read_code_unit(range);
 2147|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2152|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     34|        return unexpected(parse_error::error);
 2154|     34|    }
 2155|       |
 2156|      0|    return *it;
 2157|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     34|{
 1846|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     34|    return ranges::next(range.begin());
 1851|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  20.1k|{
  944|  20.1k|    return is_range_eof(r.begin(), r.end());
  945|  20.1k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    282|{
 3251|    282|    return read_matching_string_classic_nocase(range, "0x");
 3252|    282|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     20|{
 3274|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 20]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 20]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     20|    {
 3281|     20|        bool zero_parsed{false};
 3282|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 20]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     20|    }
 3286|     20|    return {range.begin(), 10, false};
 3287|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    796|{
 3360|    796|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    796|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    796|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    796|            return unexpected_scan_error(
 3365|    796|                scan_error::invalid_scanned_value,
 3366|    796|                "Failed to parse integer: No digits found");
 3367|    796|        }
 3368|    796|        return range.end();
 3369|    796|    }
 3370|    796|    else {
 3371|    796|        return read_while1_code_unit(range,
 3372|    796|                                     [&](char_type ch) noexcept {
 3373|    796|                                         return char_to_int(ch) < base;
 3374|    796|                                     })
 3375|    796|            .transform_error(map_parse_error_to_scan_error(
 3376|    796|                scan_error::invalid_scanned_value,
 3377|    796|                "Failed to parse integer: No digits found"));
 3378|    796|    }
 3379|    796|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|  1.06k|{
 1996|  1.06k|    auto it = read_while_code_unit(range, pred);
 1997|  1.06k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.06k, False: 0]
  ------------------
 1998|  1.06k|        return unexpected(parse_error::error);
 1999|  1.06k|    }
 2000|      0|    return it;
 2001|  1.06k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|  1.06k|{
 1976|  1.06k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.06k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|  1.06k|{
 1957|  1.06k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.06k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.06k|    }
 1960|  1.06k|    else {
 1961|  1.06k|        auto first = range.begin();
 1962|  1.06k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.06k, False: 0]
  ------------------
 1963|  1.06k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.06k, False: 0]
  ------------------
 1964|  1.06k|                return first;
 1965|  1.06k|            }
 1966|  1.06k|        }
 1967|      0|        return first;
 1968|  1.06k|    }
 1969|  1.06k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  54.5k|        {
 2781|  54.5k|            return !(y == x);
 2782|  54.5k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_:
  753|    796|    {
  754|    796|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|    796|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    796|              cvref<T> obj = *get<T>(fn);
  745|    796|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    796|                  obj(static_cast<decltype(args)>(args)...);
  747|    796|              }
  748|    796|              else {
  749|    796|                  return obj(static_cast<decltype(args)>(args)...);
  750|    796|              }
  751|    796|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|    796|    {
  684|    796|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    796|            return static_cast<T*>(s.m_cp);
  686|    796|        }
  687|    796|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    796|            return static_cast<T*>(s.m_p);
  689|    796|        }
  690|    796|        else {
  691|    796|            return reinterpret_cast<T*>(s.m_fp);
  692|    796|        }
  693|    796|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3372|    796|                                     [&](char_type ch) noexcept {
 3373|    796|                                         return char_to_int(ch) < base;
 3374|    796|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_LPv0EEEPSP_:
  661|    796|        {
  662|    796|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     20|{
 3390|     20|    std::basic_string<CharT> output;
 3391|     20|    std::string thsep_indices;
 3392|     20|    auto it = range.begin();
 3393|     20|    bool digit_matched = false;
 3394|     20|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 20, False: 0]
  ------------------
 3395|     20|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 20]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     20|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 20, False: 0]
  ------------------
 3400|     20|            break;
 3401|     20|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     20|    }
 3407|     20|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3408|     20|        return unexpected_scan_error(
 3409|     20|            scan_error::invalid_scanned_value,
 3410|     20|            "Failed to parse integer: No digits found");
 3411|     20|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     20|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|   103k|    {
 2417|   103k|        return m_count;
 2418|   103k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5662|    238|    {
 5663|    238|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 216, False: 22]
  ------------------
 5664|    238|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 22]
  ------------------
 5665|    216|            return read_default(range, value, loc);
 5666|    216|        }
 5667|       |
 5668|     22|        reader_impl_for_int<CharT> reader{};
 5669|     22|        signed char tmp_value{};
 5670|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     22|        value = static_cast<signed char>(value);
 5672|     22|        return ret;
 5673|    238|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5644|    844|    {
 5645|    844|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    844|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    844|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    844|            return code_unit_reader<char>{}.read(range, value);
 5648|    844|        }
 5649|    844|        else {
 5650|    844|            SCN_UNUSED(range);
 5651|    844|            SCN_EXPECT(false);
 5652|    844|            SCN_UNREACHABLE;
 5653|    844|        }
 5654|    844|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5563|    844|    {
 5564|    844|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    844|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    844|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    844|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    844|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 844]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    844|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    844|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    844|        ch = *range.begin();
 5566|    844|        return it;
 5567|    844|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.15k|{
 1846|  6.15k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.15k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.15k|    return ranges::next(range.begin());
 1851|  6.15k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  21.0k|{
  950|  21.0k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  21.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.0k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  21.0k|    return eof_error::good;
  954|  21.0k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   331k|{
  944|   331k|    return is_range_eof(r.begin(), r.end());
  945|   331k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   372k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   372k|    {
  937|   372k|        return begin == end;
  938|   372k|    }
  939|   372k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  36.4k|    {
  296|  36.4k|        ++x;
  297|  36.4k|        return x;
  298|  36.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|     22|    {
 3539|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     22|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 22]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 22]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3565|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|     22|                    parse_integer_digits_without_thsep(
 3567|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|     22|                        prefix_result.parsed_base));
 3569|       |
 3570|     22|            auto buf = make_contiguous_buffer(
 3571|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|     22|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.62k|{
 3326|  2.62k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  2.62k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.62k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.62k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.62k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.62k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.62k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.62k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.62k|        parse_integer_base_prefix(
 3331|  2.62k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.62k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.62k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.62k|    else {
 3343|  2.62k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.62k]
  ------------------
 3344|  2.62k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.62k, False: 0]
  ------------------
 3345|  2.62k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.62k|        }
 3347|  2.62k|    }
 3348|       |
 3349|  2.62k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.62k, False: 0]
  ------------------
 3350|  2.62k|        sign = sign_type::plus_sign;
 3351|  2.62k|    }
 3352|  2.62k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.62k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.62k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.50k|{
 3141|  3.50k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.50k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.50k, False: 0]
  ------------------
 3143|  3.50k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.50k, False: 0]
  ------------------
 3144|  3.50k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.50k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.50k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.50k|{
 2272|  3.50k|    auto it = read_code_unit(range);
 2273|  3.50k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.50k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.01k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.01k, False: 3.50k]
  ------------------
 2278|  7.01k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.01k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.01k|    }
 2282|       |
 2283|  3.50k|    return unexpected(parse_error::error);
 2284|  3.50k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.62k|{
 3293|  2.62k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 2.62k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     30|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 30, False: 2.59k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     30|            bool zero_parsed = false;
 3302|     30|            auto it = apply_opt(
 3303|     30|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     30|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    860|        case 16:
  ------------------
  |  Branch (3307:9): [True: 860, False: 1.76k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    860|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    860|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 2.61k]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.71k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.71k, False: 908]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.71k|            return {range.begin(), base, false};
 3319|  2.62k|    }
 3320|  2.62k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    896|{
 2291|    896|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 896, False: 0]
  ------------------
 2292|    896|        return range.begin();
 2293|    896|    }
 2294|      0|    return *result;
 2295|    896|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.55k|{
 2231|  3.55k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.55k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.55k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.55k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 3.54k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  3.54k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 3.54k, False: 0]
  ------------------
 2239|  3.54k|            return unexpected(parse_error::error);
 2240|  3.54k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|  3.54k|    }
 2243|  3.55k|    else {
 2244|  3.55k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.55k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.55k|                return ch;
 2247|  3.55k|            }
 2248|  3.55k|            return static_cast<char_type>(ch +
 2249|  3.55k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.55k|        };
 2251|       |
 2252|  3.55k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  3.55k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.55k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.55k|        if (SCN_UNLIKELY(!std::equal(
 2257|  3.55k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.55k|                    return ascii_tolower(a) ==
 2259|  3.55k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.55k|                }))) {
 2261|  3.55k|            return unexpected(parse_error::error);
 2262|  3.55k|        }
 2263|       |
 2264|  3.55k|        return it;
 2265|  3.55k|    }
 2266|  3.55k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     42|{
 3258|     42|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 42]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     42|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 42]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     42|    return unexpected(parse_error::error);
 3268|     42|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.80k|{
 2146|  1.80k|    auto it = read_code_unit(range);
 2147|  1.80k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.80k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.80k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.80k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.80k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.80k|        return unexpected(parse_error::error);
 2154|  1.80k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.80k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    872|{
 3251|    872|    return read_matching_string_classic_nocase(range, "0x");
 3252|    872|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.60k|{
 3360|  2.60k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.60k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.60k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.60k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.60k|        return range.end();
 3369|  2.60k|    }
 3370|  2.60k|    else {
 3371|  2.60k|        return read_while1_code_unit(range,
 3372|  2.60k|                                     [&](char_type ch) noexcept {
 3373|  2.60k|                                         return char_to_int(ch) < base;
 3374|  2.60k|                                     })
 3375|  2.60k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.60k|                scan_error::invalid_scanned_value,
 3377|  2.60k|                "Failed to parse integer: No digits found"));
 3378|  2.60k|    }
 3379|  2.60k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     24|{
 3390|     24|    std::basic_string<CharT> output;
 3391|     24|    std::string thsep_indices;
 3392|     24|    auto it = range.begin();
 3393|     24|    bool digit_matched = false;
 3394|     24|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 24, False: 0]
  ------------------
 3395|     24|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 24]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     24|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 24, False: 0]
  ------------------
 3400|     24|            break;
 3401|     24|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     24|    }
 3407|     24|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3408|     24|        return unexpected_scan_error(
 3409|     24|            scan_error::invalid_scanned_value,
 3410|     24|            "Failed to parse integer: No digits found");
 3411|     24|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     24|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  13.1k|{
 1683|  13.1k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  13.1k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  13.1k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  13.1k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  13.1k|    }
 1688|  13.1k|    else {
 1689|  13.1k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  13.1k|    }
 1691|  13.1k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  13.1k|    {
 1490|  13.1k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  58.3k|    {
 1503|  58.3k|        return sv;
 1504|  58.3k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|  2.07k|{
 5951|  2.07k|    using char_type = detail::char_t<Range>;
 5952|  2.07k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  2.07k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 1.83k, False: 236]
  ------------------
 5955|  1.83k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|  1.83k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|  1.83k|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 1.70k, False: 128]
  ------------------
 5959|  1.70k|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|  1.70k|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 142, False: 1.56k]
  ------------------
 5962|    142|                auto prefix_width =
 5963|    142|                    static_cast<std::ptrdiff_t>(
 5964|    142|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|    142|                    ranges::distance(range.begin(), it);
 5966|    142|                return result_type{it, prefix_width};
 5967|    142|            }
 5968|  1.56k|            return result_type{it, 0};
 5969|  1.70k|        }
 5970|       |
 5971|    128|        auto max_width_view = take_width(range, max_width);
 5972|    128|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    128|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 128, False: 0]
  ------------------
 5975|    128|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    128|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    128|    }
 5979|       |
 5980|    236|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    236|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 132, False: 104]
  ------------------
 5982|    132|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|    132|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 52, False: 80]
  ------------------
 5985|     52|            auto prefix_width =
 5986|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|     52|            return result_type{it, prefix_width};
 5989|     52|        }
 5990|     80|        return result_type{it, 0};
 5991|    132|    }
 5992|       |
 5993|    104|    auto max_width_view = take_width(range, max_width);
 5994|    104|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    104|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 104, False: 0]
  ------------------
 5997|    104|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    104|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    104|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.88k|{
 1976|  1.88k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.88k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  2.10k|{
 1957|  2.10k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.10k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.10k|    }
 1960|  2.10k|    else {
 1961|  2.10k|        auto first = range.begin();
 1962|  2.10k|        for (; first != range.end(); ++first) {
 1963|  2.10k|            if (pred(*first)) {
 1964|  2.10k|                return first;
 1965|  2.10k|            }
 1966|  2.10k|        }
 1967|  2.10k|        return first;
 1968|  2.10k|    }
 1969|  2.10k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_:
  753|  1.83k|    {
  754|  1.83k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  2.25k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.25k|              cvref<T> obj = *get<T>(fn);
  745|  2.25k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.25k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.25k|              }
  748|  2.25k|              else {
  749|  2.25k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.25k|              }
  751|  2.25k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  2.25k|    {
  684|  2.25k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.25k|            return static_cast<T*>(s.m_cp);
  686|  2.25k|        }
  687|  2.25k|        else if constexpr (std::is_object_v<T>) {
  688|  2.25k|            return static_cast<T*>(s.m_p);
  689|  2.25k|        }
  690|  2.25k|        else {
  691|  2.25k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.25k|        }
  693|  2.25k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  2.25k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSH_:
  666|  1.83k|        {
  667|  1.83k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    284|{
 1976|    284|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    284|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    536|{
 1957|    536|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    536|        return std::find_if(range.begin(), range.end(), pred);
 1959|    536|    }
 1960|    536|    else {
 1961|    536|        auto first = range.begin();
 1962|  8.54k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 8.26k, False: 274]
  ------------------
 1963|  8.26k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 262, False: 8.00k]
  ------------------
 1964|    262|                return first;
 1965|    262|            }
 1966|  8.26k|        }
 1967|    274|        return first;
 1968|    536|    }
 1969|    536|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|    132|{
 2037|    132|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    132|    auto it = range.begin();
 2040|    168|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 168, False: 0]
  ------------------
 2041|    168|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    168|                                           needle.size());
 2043|    168|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 6, False: 162]
  ------------------
 2044|      6|            return it;
 2045|      6|        }
 2046|    162|        static_assert(
 2047|    162|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    162|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 126, False: 36]
  ------------------
 2049|    126|            return it;
 2050|    126|        }
 2051|     36|        it = *r;
 2052|     36|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|    104|{
 2037|    104|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    104|    auto it = range.begin();
 2040|    146|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 116, False: 30]
  ------------------
 2041|    116|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    116|                                           needle.size());
 2043|    116|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 24, False: 92]
  ------------------
 2044|     24|            return it;
 2045|     24|        }
 2046|     92|        static_assert(
 2047|     92|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|     92|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 50, False: 42]
  ------------------
 2049|     50|            return it;
 2050|     50|        }
 2051|     42|        it = *r;
 2052|     42|    }
 2053|     30|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     30|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     30|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|     30|    return it;
 2055|     30|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    458|{
 2951|    458|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 458]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    458|    return read_while_classic_space(range);
 2962|    458|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    458|{
 2117|    458|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    458|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    458|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    458|        auto buf = make_contiguous_buffer(range);
 2121|    458|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    458|        return ranges::next(range.begin(),
 2123|    458|                            ranges::distance(buf.view().begin(), it));
 2124|    458|    }
 2125|    458|    else {
 2126|    458|        auto it = range.begin();
 2127|       |
 2128|    458|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    458|            auto seg = get_contiguous_beginning(range);
 2130|    458|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    458|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 458]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|    458|            ranges::advance(it, seg.size());
 2135|    458|        }
 2136|       |
 2137|    458|        return read_while_code_point(
 2138|    458|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    458|    }
 2140|    458|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  1.19k|{
 1039|  1.19k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  1.19k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  1.19k|        return r;
 1042|  1.19k|    }
 1043|  1.19k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  1.19k|                           ranges::const_iterator_t<Range>,
 1045|  1.19k|                           typename detail::basic_scan_buffer<
 1046|  1.19k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  1.19k|        if constexpr (ranges::common_range<Range>) {
 1048|  1.19k|            auto seg = r.begin().contiguous_segment();
 1049|  1.19k|            auto dist =
 1050|  1.19k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  1.19k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  1.19k|        }
 1053|  1.19k|        else {
 1054|  1.19k|            return r.begin().contiguous_segment();
 1055|  1.19k|        }
 1056|  1.19k|    }
 1057|  1.19k|    else {
 1058|  1.19k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.19k|    }
 1060|  1.19k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|    650|{
 2082|    650|    return read_until_code_point(range, std::not_fn(pred));
 2083|    650|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|    782|{
 2061|    782|    auto it = range.begin();
 2062|  12.1k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 11.8k, False: 232]
  ------------------
 2063|  11.8k|        const auto val =
 2064|  11.8k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  11.8k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  11.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.2k, False: 616]
  |  |  ------------------
  ------------------
 2066|  11.2k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  11.2k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  11.2k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 550, False: 10.7k]
  ------------------
 2069|    550|                return it;
 2070|    550|            }
 2071|  11.2k|        }
 2072|  11.3k|        it = val.iterator;
 2073|  11.3k|    }
 2074|       |
 2075|    232|    return it;
 2076|    782|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  20.1k|{
 1899|  20.1k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  20.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  20.1k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  20.1k|    auto it = range.begin();
 1903|  20.1k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  20.1k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.65k, False: 18.4k]
  |  |  ------------------
  ------------------
 1906|  1.65k|        ++it;
 1907|  1.65k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  1.65k|        return {it, {}};
 1909|  1.65k|    }
 1910|       |
 1911|  18.4k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 15.8k, False: 2.64k]
  ------------------
 1912|  15.8k|        ++it;
 1913|  15.8k|        return {it, string_type(1, *range.begin())};
 1914|  15.8k|    }
 1915|       |
 1916|  2.64k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  2.64k|    return {it, string_type{range.begin(), it}};
 1918|  18.4k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  1.65k|{
 1155|  1.65k|    auto it = input.begin();
 1156|  2.63k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 2.51k, False: 120]
  ------------------
 1157|  2.51k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.53k, False: 982]
  ------------------
 1158|  1.53k|            break;
 1159|  1.53k|        }
 1160|  2.51k|    }
 1161|  1.65k|    return it;
 1162|  1.65k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  2.64k|    {
  283|  2.64k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  2.64k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  2.64k|    {
  227|  2.64k|        constexpr iter_difference_t<I> zero{0};
  228|  2.64k|        iter_difference_t<I> counter{0};
  229|       |
  230|  2.64k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 2.64k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  2.64k|        else {
  237|  9.16k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 6.60k, False: 2.55k]
  |  Branch (237:34): [True: 6.51k, False: 90]
  ------------------
  238|  6.51k|                ++i;
  239|  6.51k|                ++counter;
  240|  6.51k|            }
  241|  2.64k|        }
  242|       |
  243|  2.64k|        return counter;
  244|  2.64k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    458|    {
  754|    458|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  1.32k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.32k|              cvref<T> obj = *get<T>(fn);
  745|  1.32k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.32k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.32k|              }
  748|  1.32k|              else {
  749|  1.32k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.32k|              }
  751|  1.32k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  1.32k|    {
  684|  1.32k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.32k|            return static_cast<T*>(s.m_cp);
  686|  1.32k|        }
  687|  1.32k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.32k|            return static_cast<T*>(s.m_p);
  689|  1.32k|        }
  690|  1.32k|        else {
  691|  1.32k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.32k|        }
  693|  1.32k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  1.32k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    458|        {
  662|    458|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  6.76k|{
 2951|  6.76k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 6.61k, False: 158]
  ------------------
 2952|  6.61k|        auto it = read_while_classic_space(range);
 2953|  6.61k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  6.61k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.61k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  6.61k|        return it;
 2959|  6.61k|    }
 2960|       |
 2961|    158|    return read_while_classic_space(range);
 2962|  6.76k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  12.5k|{
 2117|  12.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  12.5k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  12.5k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  12.5k|        auto buf = make_contiguous_buffer(range);
 2121|  12.5k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  12.5k|        return ranges::next(range.begin(),
 2123|  12.5k|                            ranges::distance(buf.view().begin(), it));
 2124|  12.5k|    }
 2125|  12.5k|    else {
 2126|  12.5k|        auto it = range.begin();
 2127|       |
 2128|  12.5k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  12.5k|            auto seg = get_contiguous_beginning(range);
 2130|  12.5k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  12.5k|                seg_it != seg.end()) {
 2132|  12.5k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  12.5k|            }
 2134|  12.5k|            ranges::advance(it, seg.size());
 2135|  12.5k|        }
 2136|       |
 2137|  12.5k|        return read_while_code_point(
 2138|  12.5k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  12.5k|    }
 2140|  12.5k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  15.2k|{
 1683|  15.2k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  15.2k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  15.2k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  15.2k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  15.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  15.2k|    }
 1688|  15.2k|    else {
 1689|  15.2k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  15.2k|    }
 1691|  15.2k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  15.2k|    {
 1490|  15.2k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  11.0k|    {
 3040|  11.0k|        reader_error_handler eh{};
 3041|  11.0k|        get_derived().check_specs_impl(specs, eh);
 3042|  11.0k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.97k, False: 1.10k]
  |  |  ------------------
  ------------------
 3043|  9.97k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.97k|        }
 3045|  1.10k|        return {};
 3046|  11.0k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  11.0k|    {
 3051|  11.0k|        return static_cast<Derived&>(*this);
 3052|  11.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  11.0k|    {
 3485|  11.0k|        detail::check_int_type_specs(specs, eh);
 3486|  11.0k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  2.36k|    {
 3035|  2.36k|        return true;
 3036|  2.36k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    272|    {
 3539|    272|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    272|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    272|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 272]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    272|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 272]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    272|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    272|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 262, False: 10]
  |  |  ------------------
  ------------------
 3565|    262|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 262, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    262|    }                                                  \
  |  |  |  | 3671|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     10|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     10|            localized_number_formatting_options<CharT>{loc};
 3586|     10|#endif
 3587|       |
 3588|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    250|    {
 3539|    250|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    250|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    250|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 250]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    250|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 250]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    250|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    250|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 238, False: 12]
  |  |  ------------------
  ------------------
 3565|    238|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 238]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    238|                    parse_integer_digits_without_thsep(
 3567|    238|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    238|                        prefix_result.parsed_base));
 3569|       |
 3570|    238|            auto buf = make_contiguous_buffer(
 3571|    238|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    238|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 238, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    238|    }                                                  \
  |  |  |  | 3671|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    238|        }
 3580|       |
 3581|     12|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     12|            localized_number_formatting_options<CharT>{loc};
 3586|     12|#endif
 3587|       |
 3588|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    272|    {
 3539|    272|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    272|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    272|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 272]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    272|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 272]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    272|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    272|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 262, False: 10]
  |  |  ------------------
  ------------------
 3565|    262|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 262, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    262|    }                                                  \
  |  |  |  | 3671|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     10|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     10|            localized_number_formatting_options<CharT>{loc};
 3586|     10|#endif
 3587|       |
 3588|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    250|    {
 3539|    250|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    250|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    250|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 250]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    250|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 250]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    250|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    250|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 238, False: 12]
  |  |  ------------------
  ------------------
 3565|    238|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 238]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    238|                    parse_integer_digits_without_thsep(
 3567|    238|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    238|                        prefix_result.parsed_base));
 3569|       |
 3570|    238|            auto buf = make_contiguous_buffer(
 3571|    238|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    238|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 238, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    238|    }                                                  \
  |  |  |  | 3671|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    238|        }
 3580|       |
 3581|     12|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     12|            localized_number_formatting_options<CharT>{loc};
 3586|     12|#endif
 3587|       |
 3588|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    240|    {
 3539|    240|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 240]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    240|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    240|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 240]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    240|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 240]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    240|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    240|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 240, False: 0]
  |  |  ------------------
  ------------------
 3565|    240|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 240, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    240|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    240|    }                                                  \
  |  |  |  | 3671|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    848|    {
 3539|    848|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    848|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    848|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    848|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    848|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 848]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    848|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    848|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    848|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    848|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 848]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    848|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 848]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    848|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    848|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 848, False: 0]
  |  |  ------------------
  ------------------
 3565|    848|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    848|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    848|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    848|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    848|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 848]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    848|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    848|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    848|                    parse_integer_digits_without_thsep(
 3567|    848|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    848|                        prefix_result.parsed_base));
 3569|       |
 3570|    848|            auto buf = make_contiguous_buffer(
 3571|    848|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    848|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    848|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    848|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    848|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    848|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 848, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    848|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    848|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    848|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    848|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    848|    }                                                  \
  |  |  |  | 3671|    848|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    848|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  5.53k|    {
 3040|  5.53k|        reader_error_handler eh{};
 3041|  5.53k|        get_derived().check_specs_impl(specs, eh);
 3042|  5.53k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.98k, False: 554]
  |  |  ------------------
  ------------------
 3043|  4.98k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.98k|        }
 3045|    554|        return {};
 3046|  5.53k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  5.53k|    {
 3051|  5.53k|        return static_cast<Derived&>(*this);
 3052|  5.53k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  5.53k|    {
 4145|  5.53k|        detail::check_float_type_specs(specs, eh);
 4146|  5.53k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  1.18k|    {
 3035|  1.18k|        return true;
 3036|  1.18k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|    524|    {
 4217|    524|        unsigned options{};
 4218|    524|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 16, False: 508]
  ------------------
 4219|     16|            options |= float_reader_base::allow_thsep;
 4220|     16|        }
 4221|       |
 4222|    524|        SCN_GCC_COMPAT_PUSH
 4223|    524|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    524|        switch (specs.type) {
 4226|     30|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 30, False: 494]
  ------------------
 4227|     30|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 4, False: 520]
  ------------------
 4230|      4|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     14|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 14, False: 510]
  ------------------
 4233|     14|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      8|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 8, False: 516]
  ------------------
 4236|      8|                return options | float_reader_base::allow_scientific |
 4237|      8|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    468|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 468, False: 56]
  ------------------
 4240|    468|                return options | float_reader_base::allow_scientific |
 4241|    468|                       float_reader_base::allow_fixed |
 4242|    468|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 524]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    524|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    524|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    524|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|    524|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  1.15k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  2.30k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|    858|    {
 4057|    858|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 858, False: 0]
  ------------------
 4058|    858|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 858, False: 0]
  ------------------
 4059|    858|            return;
 4060|    858|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|    740|    {
 1587|    740|        return m_storage.has_value();
 1588|    740|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|    370|    {
 1592|    370|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    370|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    370|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    370|        return *m_storage;
 1594|    370|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    270|    {
  763|    270|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    270|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    270|    {
 3705|    270|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    270|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    270|        auto it = sign_result.first;
 3708|    270|        m_sign = sign_result.second;
 3709|       |
 3710|    270|        auto digits_begin = it;
 3711|    270|        auto r = ranges::subrange{it, range.end()};
 3712|    270|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    270|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    270|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    270|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    270|                SCN_TRY_ASSIGN(
 3717|    270|                    it,
 3718|    270|                    do_read_source_impl(
 3719|    270|                        r,
 3720|    270|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    270|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    270|            }
 3723|    270|            else {
 3724|    270|                auto cb = [&](const auto& rr)
 3725|    270|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    270|                    auto res = read_all(rr);
 3727|    270|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    270|                        return unexpected_scan_error(
 3729|    270|                            scan_error::invalid_scanned_value,
 3730|    270|                            "Invalid float value");
 3731|    270|                    }
 3732|    270|                    return res;
 3733|    270|                };
 3734|    270|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    270|            }
 3736|    270|        }
 3737|    270|        else {
 3738|    270|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 270, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    270|    }                                                  \
  |  | 3671|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    270|    {
 4000|    270|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    270|        const bool allowed_nonhex =
 4002|    270|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    270|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    270|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 270, False: 0]
  |  Branch (4005:45): [True: 0, False: 270]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    270|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 270]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    270|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 270, False: 0]
  |  Branch (4014:45): [True: 0, False: 270]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    270|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 270]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    270|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 252, False: 18]
  |  Branch (4021:28): [True: 6, False: 246]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      6|            auto it = range.begin();
 4025|       |
 4026|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 6]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      6|            else {
 4031|      6|                m_kind = float_kind::hex_without_prefix;
 4032|      6|            }
 4033|       |
 4034|      6|            return read_hex(ranges::subrange{it, range.end()});
 4035|      6|        }
 4036|    264|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 18, False: 246]
  |  Branch (4036:29): [True: 18, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     18|            m_kind = float_kind::generic;
 4040|     18|            return read_regular_float(range);
 4041|     18|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    246|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    246|        m_kind = float_kind::generic;
 4052|    246|        return read_regular(range);
 4053|    246|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    270|    {
 3811|    270|        auto it = range.begin();
 3812|    270|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 270, False: 0]
  ------------------
 3813|    270|            return unexpected(r.error());
 3814|    270|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    270|    {
 3834|    270|        auto it = range.begin();
 3835|    270|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 270, False: 0]
  ------------------
 3836|    270|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    270|                scan_error::invalid_scanned_value,
 3838|    270|                "Invalid floating-point NaN value"));
 3839|    270|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    252|    {
 3804|    252|        return read_matching_string_classic_nocase(range, "0x");
 3805|    252|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      6|    {
 3904|      6|        auto it = range.begin();
 3905|       |
 3906|      6|        std::ptrdiff_t digits_count = 0;
 3907|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3909|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      6|                scan_error::invalid_scanned_value,
 3911|      6|                "Invalid hexadecimal floating-point value"));
 3912|      6|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      6|    {
 3789|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      6|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      6|        return read_while1_code_unit(
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      6|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    264|    {
 3944|    264|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    264|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 250, False: 14]
  |  Branch (3945:50): [True: 0, False: 250]
  ------------------
 3946|       |
 3947|    264|        auto it = ranges::begin(range);
 3948|    264|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    264|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    264|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 264, False: 0]
  |  |  ------------------
  ------------------
 3952|    264|            return r.transform_error(
 3953|    264|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    264|                                              "Invalid floating-point value"));
 3955|    264|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    264|    {
 3774|    264|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 264]
  |  |  |  Branch (859:45): [True: 0, False: 264]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    264|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    264|        return read_while1_code_unit(
 3783|    264|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    264|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|    264|    {
  754|    264|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|    264|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    264|              cvref<T> obj = *get<T>(fn);
  745|    264|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    264|                  obj(static_cast<decltype(args)>(args)...);
  747|    264|              }
  748|    264|              else {
  749|    264|                  return obj(static_cast<decltype(args)>(args)...);
  750|    264|              }
  751|    264|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    264|    {
  684|    264|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    264|            return static_cast<T*>(s.m_cp);
  686|    264|        }
  687|    264|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    264|            return static_cast<T*>(s.m_p);
  689|    264|        }
  690|    264|        else {
  691|    264|            return reinterpret_cast<T*>(s.m_fp);
  692|    264|        }
  693|    264|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3783|    264|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|    264|        {
  662|    264|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    262|    {
 3665|    262|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 262]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    262|        return read_source_impl(range);
 3671|    262|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    882|    {
  763|    882|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    882|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    882|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    882|    {
 3705|    882|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    882|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    882|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    882|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 882]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    882|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    882|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    882|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    882|        auto it = sign_result.first;
 3708|    882|        m_sign = sign_result.second;
 3709|       |
 3710|    882|        auto digits_begin = it;
 3711|    882|        auto r = ranges::subrange{it, range.end()};
 3712|    882|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    882|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    882|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 882]
  |  |  |  Branch (859:45): [True: 0, False: 882]
  |  |  |  Branch (859:45): [True: 0, False: 882]
  |  |  ------------------
  ------------------
 3715|    882|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    882|            else {
 3724|    882|                auto cb = [&](const auto& rr)
 3725|    882|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    882|                    auto res = read_all(rr);
 3727|    882|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    882|                        return unexpected_scan_error(
 3729|    882|                            scan_error::invalid_scanned_value,
 3730|    882|                            "Invalid float value");
 3731|    882|                    }
 3732|    882|                    return res;
 3733|    882|                };
 3734|    882|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|    882|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    882|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 24, False: 858]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     24|    }                                                  \
  |  | 3671|    882|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    882|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    858|            }
 3736|    882|        }
 3737|    858|        else {
 3738|    858|            SCN_TRY_ASSIGN(
 3739|    858|                it,
 3740|    858|                do_read_source_impl(
 3741|    858|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|    858|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|    858|        }
 3744|       |
 3745|    858|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    858|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    858|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    858|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 858, False: 0]
  |  Branch (3747:48): [True: 858, False: 0]
  ------------------
 3748|    858|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 858, False: 0]
  ------------------
 3749|    858|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 858, False: 0]
  ------------------
 3750|    858|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    858|        }
 3752|       |
 3753|    858|        handle_separators();
 3754|       |
 3755|    858|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 858]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    858|        return it;
 3768|    858|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    882|    {
 3811|    882|        auto it = range.begin();
 3812|    882|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 882, False: 0]
  ------------------
 3813|    882|            return unexpected(r.error());
 3814|    882|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    882|    {
 3834|    882|        auto it = range.begin();
 3835|    882|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 882, False: 0]
  ------------------
 3836|    882|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    882|                scan_error::invalid_scanned_value,
 3838|    882|                "Invalid floating-point NaN value"));
 3839|    882|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    858|    {
 3804|    858|        return read_matching_string_classic_nocase(range, "0x");
 3805|    858|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     24|{
 1996|     24|    auto it = read_while_code_unit(range, pred);
 1997|     24|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 24, False: 0]
  ------------------
 1998|     24|        return unexpected(parse_error::error);
 1999|     24|    }
 2000|      0|    return it;
 2001|     24|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     24|    {
 3944|     24|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     24|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 8, False: 16]
  |  Branch (3945:50): [True: 4, False: 4]
  ------------------
 3946|       |
 3947|     24|        auto it = ranges::begin(range);
 3948|     24|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     24|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     24|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3952|     24|            return r.transform_error(
 3953|     24|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     24|                                              "Invalid floating-point value"));
 3955|     24|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     24|    {
 3774|     24|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24]
  |  |  |  Branch (859:45): [True: 0, False: 24]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     24|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     24|        return read_while1_code_unit(
 3783|     24|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     24|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|     24|    {
  754|     24|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|     24|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     24|              cvref<T> obj = *get<T>(fn);
  745|     24|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     24|                  obj(static_cast<decltype(args)>(args)...);
  747|     24|              }
  748|     24|              else {
  749|     24|                  return obj(static_cast<decltype(args)>(args)...);
  750|     24|              }
  751|     24|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     24|    {
  684|     24|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     24|            return static_cast<T*>(s.m_cp);
  686|     24|        }
  687|     24|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     24|            return static_cast<T*>(s.m_p);
  689|     24|        }
  690|     24|        else {
  691|     24|            return reinterpret_cast<T*>(s.m_fp);
  692|     24|        }
  693|     24|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|     24|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|     24|        {
  662|     24|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    882|    {
 4000|    882|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    882|        const bool allowed_nonhex =
 4002|    882|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    882|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    882|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 882, False: 0]
  |  Branch (4005:45): [True: 0, False: 882]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    882|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 882]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    882|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 882, False: 0]
  |  Branch (4014:45): [True: 0, False: 882]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    882|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 882]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    882|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 858, False: 24]
  |  Branch (4021:28): [True: 8, False: 850]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      8|            auto it = range.begin();
 4025|       |
 4026|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 8]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      8|            else {
 4031|      8|                m_kind = float_kind::hex_without_prefix;
 4032|      8|            }
 4033|       |
 4034|      8|            return read_hex(ranges::subrange{it, range.end()});
 4035|      8|        }
 4036|    874|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 24, False: 850]
  |  Branch (4036:29): [True: 24, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     24|            m_kind = float_kind::generic;
 4040|     24|            return read_regular_float(range);
 4041|     24|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    850|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 850]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    850|        m_kind = float_kind::generic;
 4052|    850|        return read_regular(range);
 4053|    850|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    858|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    858|                    auto res = read_all(rr);
 3727|    858|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    858|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 858]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    858|                    return res;
 3733|    858|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    858|{
 1839|    858|    return ranges::next(range.begin(), range.end());
 1840|    858|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    858|    {
  313|    858|        ranges::advance(x, bound);
  314|    858|        return x;
  315|    858|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    858|    {
  275|    858|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    858|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    918|    {
  190|    918|        i = std::move(bound);
  191|    918|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|    858|    {
 1577|    858|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    858|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    858|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|    858|    {
 1621|    858|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    858|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    858|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    858|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    858|            m_storage.reset();
 1627|    858|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    858|        }
 1629|    858|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    858|                                          std::basic_string<CharT>>) {
 1631|    858|            m_storage.emplace(SCN_FWD(range));
 1632|    858|            m_view = string_view_type{*m_storage};
 1633|    858|        }
 1634|    858|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    858|                                          typename detail::basic_scan_buffer<
 1636|    858|                                              value_t>::forward_iterator> &&
 1637|    858|                           ranges::common_range<Range>) {
 1638|    858|            auto beg_seg = range.begin().contiguous_segment();
 1639|    858|            auto end_seg = range.end().contiguous_segment();
 1640|    858|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    858|                             detail::to_address(end_seg.end()))) {
 1642|    858|                auto& str = m_storage.emplace();
 1643|    858|                str.reserve(range.end().position() - range.begin().position());
 1644|    858|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    858|                m_view = string_view_type{str};
 1646|    858|                return;
 1647|    858|            }
 1648|       |
 1649|    858|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    858|                                                            end_seg.data());
 1651|    858|            m_storage.reset();
 1652|    858|        }
 1653|    858|        else {
 1654|    858|            auto& str = m_storage.emplace();
 1655|    858|            if constexpr (ranges::sized_range<Range>) {
 1656|    858|                str.reserve(range.size());
 1657|    858|            }
 1658|    858|            if constexpr (ranges::common_range<Range>) {
 1659|    858|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    858|                          std::back_inserter(str));
 1661|    858|            }
 1662|    858|            else {
 1663|    858|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    858|                     ++it) {
 1665|    858|                    str.push_back(*it);
 1666|    858|                }
 1667|    858|            }
 1668|    858|            m_view = string_view_type{str};
 1669|    858|        }
 1670|    858|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    874|    {
 3665|    874|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    874|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 874]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    874|        return read_source_impl(range);
 3671|    874|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    858|    {
 3691|    858|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    858|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    858|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    858|        const std::ptrdiff_t sign_len =
 3694|    858|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 858]
  ------------------
 3695|       |
 3696|    858|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|    858|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    858|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    858|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    858|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 858, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    858|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    858|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    858|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    858|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    858|    }                                                  \
  |  |  |  | 3671|    858|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    858|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    270|    {
 4170|    270|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    270|#if !SCN_DISABLE_LOCALE
 4173|    270|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 262]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    262|#endif
 4182|       |
 4183|    262|        return read_impl<Range>(
 4184|    262|            range, rd,
 4185|    262|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    262|                return r.read_source(SCN_FWD(args)...);
 4187|    262|            },
 4188|    262|            value);
 4189|    270|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    270|    {
 4206|    270|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    270|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 270, False: 0]
  |  |  ------------------
  ------------------
 4208|    270|            return unexpected(r.error());
 4209|    270|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    262|    {
  754|    262|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    262|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    262|              cvref<T> obj = *get<T>(fn);
  745|    262|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    262|                  obj(static_cast<decltype(args)>(args)...);
  747|    262|              }
  748|    262|              else {
  749|    262|                  return obj(static_cast<decltype(args)>(args)...);
  750|    262|              }
  751|    262|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    262|    {
  684|    262|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    262|            return static_cast<T*>(s.m_cp);
  686|    262|        }
  687|    262|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    262|            return static_cast<T*>(s.m_p);
  689|    262|        }
  690|    262|        else {
  691|    262|            return reinterpret_cast<T*>(s.m_fp);
  692|    262|        }
  693|    262|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    262|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    262|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    262|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  661|    262|        {
  662|    262|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    254|    {
 4170|    254|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    254|#if !SCN_DISABLE_LOCALE
 4173|    254|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 246]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    246|#endif
 4182|       |
 4183|    246|        return read_impl<Range>(
 4184|    246|            range, rd,
 4185|    246|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    246|                return r.read_source(SCN_FWD(args)...);
 4187|    246|            },
 4188|    246|            value);
 4189|    254|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    882|    {
 4206|    882|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    882|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 858]
  |  |  ------------------
  ------------------
 4208|     24|            return unexpected(r.error());
 4209|     24|        }
 4210|       |
 4211|    858|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|    858|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    858|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    858|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    858|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 858, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    858|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    858|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    858|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    858|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    858|    }                                                  \
  |  |  |  | 3671|    858|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    858|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    246|    {
  754|    246|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    246|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    246|              cvref<T> obj = *get<T>(fn);
  745|    246|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    246|                  obj(static_cast<decltype(args)>(args)...);
  747|    246|              }
  748|    246|              else {
  749|    246|                  return obj(static_cast<decltype(args)>(args)...);
  750|    246|              }
  751|    246|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    246|    {
  684|    246|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    246|            return static_cast<T*>(s.m_cp);
  686|    246|        }
  687|    246|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    246|            return static_cast<T*>(s.m_p);
  689|    246|        }
  690|    246|        else {
  691|    246|            return reinterpret_cast<T*>(s.m_fp);
  692|    246|        }
  693|    246|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    246|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    246|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    246|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|    246|        {
  662|    246|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|  6.13k|{
 5809|  6.13k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  6.13k|        return reader_impl_for_bool<CharT>{};
 5811|  6.13k|    }
 5812|  6.13k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  6.13k|        return reader_impl_for_char<CharT>{};
 5814|  6.13k|    }
 5815|  6.13k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  6.13k|        return reader_impl_for_wchar<CharT>{};
 5817|  6.13k|    }
 5818|  6.13k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  6.13k|        return reader_impl_for_code_point<CharT>{};
 5820|  6.13k|    }
 5821|  6.13k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  6.13k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.13k|        return reader_impl_for_string<CharT>{};
 5824|  6.13k|    }
 5825|  6.13k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  6.13k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  6.13k|        return reader_impl_for_string<CharT>{};
 5828|  6.13k|    }
 5829|  6.13k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  6.13k|                       std::is_same_v<T, wregex_matches>) {
 5831|  6.13k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  6.13k|    }
 5833|  6.13k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  6.13k|        return reader_impl_for_voidptr<CharT>{};
 5835|  6.13k|    }
 5836|  6.13k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  6.13k|        return reader_impl_for_float<CharT>{};
 5838|  6.13k|    }
 5839|  6.13k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  6.13k|                       !std::is_same_v<T, wchar_t> &&
 5841|  6.13k|                       !std::is_same_v<T, char32_t> &&
 5842|  6.13k|                       !std::is_same_v<T, bool>) {
 5843|  6.13k|        return reader_impl_for_int<CharT>{};
 5844|  6.13k|    }
 5845|  6.13k|    else {
 5846|  6.13k|        return reader_impl_for_monostate<CharT>{};
 5847|  6.13k|    }
 5848|  6.13k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|  18.3k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  16.5k|    {
 3040|  16.5k|        reader_error_handler eh{};
 3041|  16.5k|        get_derived().check_specs_impl(specs, eh);
 3042|  16.5k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 16.1k]
  |  |  ------------------
  ------------------
 3043|    384|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    384|        }
 3045|  16.1k|        return {};
 3046|  16.5k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  16.5k|    {
 3051|  16.5k|        return static_cast<Derived&>(*this);
 3052|  16.5k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  16.5k|    {
 5210|  16.5k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  16.5k|        SCN_GCC_PUSH
 5213|  16.5k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  16.5k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  16.5k|        SCN_CLANG_PUSH
 5217|  16.5k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  16.5k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  16.5k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 378, False: 16.1k]
  ------------------
 5221|  1.42k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.42k, False: 15.0k]
  ------------------
 5222|  1.42k|                m_type = reader_type::word;
 5223|  1.42k|                break;
 5224|       |
 5225|    510|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 510, False: 16.0k]
  ------------------
 5226|    510|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 84, False: 426]
  ------------------
 5227|    510|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 204, False: 222]
  ------------------
 5228|    288|                    m_type = reader_type::custom_word;
 5229|    288|                }
 5230|    222|                else {
 5231|    222|                    m_type = reader_type::word;
 5232|    222|                }
 5233|    510|                break;
 5234|      0|            }
 5235|       |
 5236|    102|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 102, False: 16.4k]
  ------------------
 5237|    102|                m_type = reader_type::character;
 5238|    102|                break;
 5239|       |
 5240|  3.30k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 3.30k, False: 13.2k]
  ------------------
 5241|  3.30k|                m_type = reader_type::character_set;
 5242|  3.30k|                break;
 5243|       |
 5244|  9.78k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 9.78k, False: 6.72k]
  ------------------
 5245|  9.78k|                m_type = reader_type::regex;
 5246|  9.78k|                break;
 5247|       |
 5248|  1.01k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 1.01k, False: 15.4k]
  ------------------
 5249|  1.01k|                m_type = reader_type::regex_escaped;
 5250|  1.01k|                break;
 5251|  16.5k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  16.5k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|  21.7k|    {
 5259|  21.7k|        return m_type == reader_type::word;
 5260|  21.7k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  9.88k|{
 1132|  9.88k|    auto it = src.begin();
 1133|   501k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 493k, False: 8.10k]
  ------------------
 1134|   493k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   493k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.11k, False: 491k]
  ------------------
 1136|  1.11k|            return false;
 1137|  1.11k|        }
 1138|   491k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 228, False: 491k]
  ------------------
 1139|    228|            return false;
 1140|    228|        }
 1141|   491k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   491k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   491k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 438, False: 491k]
  ------------------
 1144|    438|            return false;
 1145|    438|        }
 1146|   491k|        it += len;
 1147|   491k|    }
 1148|  8.10k|    return true;
 1149|  9.88k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    370|{
 2993|    370|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    370|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 370, False: 0]
  ------------------
 2995|    370|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    370|    static_cast<    \
  |  |  929|    370|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    370|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    370|    }
 3001|    370|    else {
 3002|    370|        return transcode_impl(source.view(), dest);
 3003|    370|    }
 3004|       |
 3005|    370|    return {};
 3006|    370|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  3.29k|        {
 5103|  3.29k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 594, False: 2.70k]
  ------------------
 5104|    594|                return {};
 5105|    594|            }
 5106|       |
 5107|  2.70k|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|  2.70k|            auto it = detail::to_address(charset_string.begin());
 5109|  2.70k|            auto set = detail::parse_presentation_set(
 5110|  2.70k|                it, detail::to_address(charset_string.end()), nonascii);
 5111|  2.70k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  2.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.70k]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|  2.70k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  2.70k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|  2.70k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  2.70k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|  2.70k|            std::sort(nonascii.extra_ranges.begin(),
 5118|  2.70k|                      nonascii.extra_ranges.end());
 5119|  2.70k|            return {};
 5120|  2.70k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|   318k|        {
 5138|   318k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 40.5k, False: 278k]
  ------------------
 5139|  40.5k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  40.5k|            }
 5141|       |
 5142|   278k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|   318k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  40.5k|        {
 5086|       |            // TODO: binary search?
 5087|  40.5k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 40.5k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  40.5k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  40.5k|            return std::find_if(
 5093|  40.5k|                       nonascii.extra_ranges.begin(),
 5094|  40.5k|                       nonascii.extra_ranges.end(),
 5095|  40.5k|                       [cp_val](const auto& pair) noexcept {
 5096|  40.5k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  40.5k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  40.5k|                       }) != nonascii.extra_ranges.end();
 5099|  40.5k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  8.57M|                       [cp_val](const auto& pair) noexcept {
 5096|  8.57M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 8.57M, False: 2.87k]
  ------------------
 5097|  8.57M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 39.4k, False: 8.53M]
  ------------------
 5098|  8.57M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|   285k|        {
 5076|   285k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|   285k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   285k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|   285k|            const auto val =
 5078|   285k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|   285k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|   285k|                    (val % 8)) &
 5081|   285k|                   1u;
 5082|   285k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  9.12k|        {
 5129|  9.12k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 1.69k, False: 7.43k]
  ------------------
 5130|  1.69k|                return false;
 5131|  1.69k|            }
 5132|       |
 5133|  7.43k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  9.12k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  3.29k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    664|    {
 5277|    664|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    664|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    664|        return read_impl(range, specs, value);
 5279|    664|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    664|    {
 5295|    664|        SCN_CLANG_PUSH
 5296|    664|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    664|        switch (m_type) {
 5299|    244|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 244, False: 420]
  ------------------
 5300|    244|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 52, False: 612]
  ------------------
 5303|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     52|                                                                   value);
 5305|       |
 5306|     32|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 32, False: 632]
  ------------------
 5307|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    210|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 210, False: 454]
  ------------------
 5310|    210|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    210|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 662]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    124|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 124, False: 540]
  ------------------
 5320|    124|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    124|                    range,
 5322|    124|                    get_unescaped_regex_pattern(
 5323|    124|                        specs.charset_string<SourceCharT>()),
 5324|    124|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 664]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    664|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    664|        }
 5331|       |
 5332|    664|        SCN_CLANG_POP
 5333|    664|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    244|    {
 4820|    244|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    244|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    328|{
 4752|    328|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    328|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    328|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 110, False: 218]
  ------------------
 4756|    110|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    110|                                     "Invalid encoding in scanned string");
 4758|    110|    }
 4759|    218|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    218|    static_cast<    \
  |  |  929|    218|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    218|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 218]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    218|    return SCN_MOVE(result);
  ------------------
  |  |  928|    218|    static_cast<    \
  |  |  929|    218|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    218|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    732|{
 2088|    732|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    732|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    732|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    732|        auto buf = make_contiguous_buffer(range);
 2092|    732|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    732|        return ranges::next(range.begin(),
 2094|    732|                            ranges::distance(buf.view().begin(), it));
 2095|    732|    }
 2096|    732|    else {
 2097|    732|        auto it = range.begin();
 2098|       |
 2099|    732|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    732|            auto seg = get_contiguous_beginning(range);
 2101|    732|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    732|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 732]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|    732|            ranges::advance(it, seg.size());
 2106|    732|        }
 2107|       |
 2108|    732|        return read_until_code_point(
 2109|    732|            ranges::subrange{it, range.end()},
 2110|    732|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    732|    }
 2112|    732|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    732|{
 2061|    732|    auto it = range.begin();
 2062|  8.79k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 8.24k, False: 552]
  ------------------
 2063|  8.24k|        const auto val =
 2064|  8.24k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  8.24k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  8.24k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.20k, False: 1.03k]
  |  |  ------------------
  ------------------
 2066|  7.20k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  7.20k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  7.20k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 180, False: 7.02k]
  ------------------
 2069|    180|                return it;
 2070|    180|            }
 2071|  7.20k|        }
 2072|  8.06k|        it = val.iterator;
 2073|  8.06k|    }
 2074|       |
 2075|    552|    return it;
 2076|    732|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    732|    {
  754|    732|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  7.20k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.20k|              cvref<T> obj = *get<T>(fn);
  745|  7.20k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.20k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.20k|              }
  748|  7.20k|              else {
  749|  7.20k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.20k|              }
  751|  7.20k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  7.20k|    {
  684|  7.20k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.20k|            return static_cast<T*>(s.m_cp);
  686|  7.20k|        }
  687|  7.20k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.20k|            return static_cast<T*>(s.m_p);
  689|  7.20k|        }
  690|  7.20k|        else {
  691|  7.20k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.20k|        }
  693|  7.20k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  7.20k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    732|        {
  662|    732|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     52|    {
 4841|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 18]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     18|        return read_string_impl(
 4851|     18|            range,
 4852|     18|            read_until_code_units(
 4853|     18|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     18|            value);
 4855|     52|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2006|     54|{
 2007|     54|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     54|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     54|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     54|                           needle.end());
 2012|     54|    }
 2013|     54|    else {
 2014|     54|        auto first = range.begin();
 2015|    204|        while (true) {
  ------------------
  |  Branch (2015:16): [Folded - Ignored]
  ------------------
 2016|    204|            auto it = first;
 2017|    300|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|    300|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2018:21): [True: 30, False: 270]
  ------------------
 2019|     30|                    return first;
 2020|     30|                }
 2021|    270|                if (it == range.end()) {
  ------------------
  |  Branch (2021:21): [True: 24, False: 246]
  ------------------
 2022|     24|                    return it;
 2023|     24|                }
 2024|    246|                if (*it != *needle_it) {
  ------------------
  |  Branch (2024:21): [True: 150, False: 96]
  ------------------
 2025|    150|                    break;
 2026|    150|                }
 2027|    246|            }
 2028|    150|            ++first;
 2029|    150|        }
 2030|     54|    }
 2031|     54|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     32|    {
 4947|     32|        return read_impl(
 4948|     32|            range,
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
 4952|     32|            detail::priority_tag<1>{});
 4953|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     32|    {
 4974|     32|        return read_cb(range);
 4975|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|     96|{
 1839|     96|    return ranges::next(range.begin(), range.end());
 1840|     96|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     96|    {
  313|     96|        ranges::advance(x, bound);
  314|     96|        return x;
  315|     96|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     96|    {
  275|     96|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     96|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     96|    {
  203|  1.96k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 1.87k, False: 96]
  ------------------
  204|  1.87k|            ++i;
  205|  1.87k|        }
  206|     96|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    210|    {
 5048|    210|        auto it = read_source_impl(range, {specs});
 5049|    210|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    210|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 198]
  |  |  ------------------
  ------------------
 5050|     12|            return unexpected(it.error());
 5051|     12|        }
 5052|       |
 5053|    198|        return read_string_impl(range, *it, value);
 5054|    210|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5152|    630|    {
 5153|    630|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    630|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    630|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 630]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    630|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    630|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 324, False: 306]
  ------------------
 5163|    324|            const auto cb = [&](char32_t cp) {
 5164|    324|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    324|            };
 5166|       |
 5167|    324|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 132, False: 192]
  ------------------
 5168|    132|                auto it = read_until_code_point(range, cb);
 5169|    132|                return check_nonempty(it, range);
 5170|    132|            }
 5171|    192|            auto it = read_while_code_point(range, cb);
 5172|    192|            return check_nonempty(it, range);
 5173|    324|        }
 5174|       |
 5175|    306|        const auto cb = [&](SourceCharT ch) {
 5176|    306|            return cb_wrapper.on_ascii_only(ch);
 5177|    306|        };
 5178|       |
 5179|    306|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 150, False: 156]
  ------------------
 5180|    150|            auto it = read_until_code_unit(range, cb);
 5181|    150|            return check_nonempty(it, range);
 5182|    150|        }
 5183|    156|        auto it = read_while_code_unit(range, cb);
 5184|    156|        return check_nonempty(it, range);
 5185|    306|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_:
  753|    324|    {
  754|    324|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  9.94k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.94k|              cvref<T> obj = *get<T>(fn);
  745|  9.94k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.94k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.94k|              }
  748|  9.94k|              else {
  749|  9.94k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.94k|              }
  751|  9.94k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  9.94k|    {
  684|  9.94k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.94k|            return static_cast<T*>(s.m_cp);
  686|  9.94k|        }
  687|  9.94k|        else if constexpr (std::is_object_v<T>) {
  688|  9.94k|            return static_cast<T*>(s.m_p);
  689|  9.94k|        }
  690|  9.94k|        else {
  691|  9.94k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.94k|        }
  693|  9.94k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  9.94k|            const auto cb = [&](char32_t cp) {
 5164|  9.94k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  9.94k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_LPv0EEEPKSL_:
  666|    324|        {
  667|    324|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5190|    630|    {
 5191|    630|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 36, False: 594]
  ------------------
 5192|     36|            return unexpected_scan_error(
 5193|     36|                scan_error::invalid_scanned_value,
 5194|     36|                "No characters matched in [character set]");
 5195|     36|        }
 5196|       |
 5197|    594|        return it;
 5198|    630|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_:
  753|    306|    {
  754|    306|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  5.60k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.60k|              cvref<T> obj = *get<T>(fn);
  745|  5.60k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.60k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.60k|              }
  748|  5.60k|              else {
  749|  5.60k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.60k|              }
  751|  5.60k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.60k|    {
  684|  5.60k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.60k|            return static_cast<T*>(s.m_cp);
  686|  5.60k|        }
  687|  5.60k|        else if constexpr (std::is_object_v<T>) {
  688|  5.60k|            return static_cast<T*>(s.m_p);
  689|  5.60k|        }
  690|  5.60k|        else {
  691|  5.60k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.60k|        }
  693|  5.60k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5175|  5.60k|        const auto cb = [&](SourceCharT ch) {
 5176|  5.60k|            return cb_wrapper.on_ascii_only(ch);
 5177|  5.60k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_LPv0EEEPKSL_:
  666|    306|        {
  667|    306|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    198|{
 4752|    198|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    198|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    198|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 46, False: 152]
  ------------------
 4756|     46|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     46|                                     "Invalid encoding in scanned string");
 4758|     46|    }
 4759|    152|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    152|    static_cast<    \
  |  |  929|    152|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    152|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 152]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    152|    return SCN_MOVE(result);
  ------------------
  |  |  928|    152|    static_cast<    \
  |  |  929|    152|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    152|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    126|    {
 4891|    126|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 126, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    126|    }                                                  \
  |  |  |  | 3671|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    126|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|    378|    {
 4913|    378|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|    756|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|    378|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|    378|            return unexpected_scan_error(
 4916|    378|                scan_error::invalid_scanned_value,
 4917|    378|                "Regex backend doesn't support wide strings as input");
 4918|    378|        }
 4919|    378|        else {
 4920|    378|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 378, False: 0]
  ------------------
 4921|    378|                return unexpected_scan_error(
 4922|    378|                    scan_error::invalid_scanned_value,
 4923|    378|                    "Cannot use regex with a non-contiguous source "
 4924|    378|                    "range");
 4925|    378|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|    378|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|    378|{
  959|    378|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|    378|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|    378|        return true;
  962|    378|    }
  963|    378|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|    378|                           ranges::const_iterator_t<Range>,
  965|    378|                           typename detail::basic_scan_buffer<
  966|    378|                               detail::char_t<Range>>::forward_iterator>) {
  967|    378|        auto beg = r.begin();
  968|    378|        if (!beg.stores_parent()) {
  969|    378|            return true;
  970|    378|        }
  971|    378|        return beg.parent()->is_contiguous();
  972|    378|    }
  973|    378|    else {
  974|    378|        return false;
  975|    378|    }
  976|    378|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  4.68k|    {
 5277|  4.68k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.68k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.68k|        return read_impl(range, specs, value);
 5279|  4.68k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  4.68k|    {
 5295|  4.68k|        SCN_CLANG_PUSH
 5296|  4.68k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.68k|        switch (m_type) {
 5299|    280|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 280, False: 4.40k]
  ------------------
 5300|    280|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     44|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 44, False: 4.64k]
  ------------------
 5303|     44|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     44|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.68k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    888|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 888, False: 3.79k]
  ------------------
 5310|    888|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    888|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.26k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.26k, False: 1.42k]
  ------------------
 5315|  3.26k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.26k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.26k|                    specs.regexp_flags, value);
 5318|       |
 5319|    214|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 214, False: 4.47k]
  ------------------
 5320|    214|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    214|                    range,
 5322|    214|                    get_unescaped_regex_pattern(
 5323|    214|                        specs.charset_string<SourceCharT>()),
 5324|    214|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.68k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.68k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.68k|        }
 5331|       |
 5332|  4.68k|        SCN_CLANG_POP
 5333|  4.68k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    908|    {
 4820|    908|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    908|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    952|{
 4752|    952|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    952|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    952|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 312, False: 640]
  ------------------
 4756|    312|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    312|                                     "Invalid encoding in scanned string");
 4758|    312|    }
 4759|    640|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    640|    static_cast<    \
  |  |  929|    640|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    640|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 640]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    640|    return SCN_MOVE(result);
  ------------------
  |  |  928|    640|    static_cast<    \
  |  |  929|    640|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    640|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.65k|{
 3012|  1.65k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.65k|        dest.assign(source.view());
 3014|  1.65k|    }
 3015|  1.65k|    else {
 3016|  1.65k|        return transcode_impl(source.view(), dest);
 3017|  1.65k|    }
 3018|       |
 3019|  1.65k|    return {};
 3020|  1.65k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.72k|{
 2088|  2.72k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.72k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.72k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.72k|        auto buf = make_contiguous_buffer(range);
 2092|  2.72k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.72k|        return ranges::next(range.begin(),
 2094|  2.72k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.72k|    }
 2096|  2.72k|    else {
 2097|  2.72k|        auto it = range.begin();
 2098|       |
 2099|  2.72k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.72k|            auto seg = get_contiguous_beginning(range);
 2101|  2.72k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.72k|                seg_it != seg.end()) {
 2103|  2.72k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.72k|            }
 2105|  2.72k|            ranges::advance(it, seg.size());
 2106|  2.72k|        }
 2107|       |
 2108|  2.72k|        return read_until_code_point(
 2109|  2.72k|            ranges::subrange{it, range.end()},
 2110|  2.72k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.72k|    }
 2112|  2.72k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     44|    {
 4841|     44|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 30, False: 14]
  ------------------
 4842|     30|            return read_string_impl(
 4843|     30|                range,
 4844|     30|                read_until_code_unit(
 4845|     30|                    range,
 4846|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     30|                        SourceCharT ch) { return ch == until; }),
 4848|     30|                value);
 4849|     30|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     44|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|    442|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    442|                  obj(static_cast<decltype(args)>(args)...);
  747|    442|              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|    442|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    442|            return static_cast<T*>(s.m_cp);
  686|    442|        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    442|            return static_cast<T*>(s.m_p);
  689|    442|        }
  690|    442|        else {
  691|    442|            return reinterpret_cast<T*>(s.m_fp);
  692|    442|        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2006|     42|{
 2007|     42|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     42|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     42|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     42|                           needle.end());
 2012|     42|    }
 2013|     42|    else {
 2014|     42|        auto first = range.begin();
 2015|     42|        while (true) {
 2016|     42|            auto it = first;
 2017|     42|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|     42|                if (needle_it == needle.end()) {
 2019|     42|                    return first;
 2020|     42|                }
 2021|     42|                if (it == range.end()) {
 2022|     42|                    return it;
 2023|     42|                }
 2024|     42|                if (*it != *needle_it) {
 2025|     42|                    break;
 2026|     42|                }
 2027|     42|            }
 2028|     42|            ++first;
 2029|     42|        }
 2030|     42|    }
 2031|     42|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    888|    {
 5048|    888|        auto it = read_source_impl(range, {specs});
 5049|    888|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 326, False: 562]
  |  |  ------------------
  ------------------
 5050|    326|            return unexpected(it.error());
 5051|    326|        }
 5052|       |
 5053|    562|        return read_string_impl(range, *it, value);
 5054|    888|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  2.66k|    {
 5153|  2.66k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  2.66k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  2.66k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.66k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  2.66k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  2.66k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 2.37k, False: 288]
  ------------------
 5163|  2.37k|            const auto cb = [&](char32_t cp) {
 5164|  2.37k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  2.37k|            };
 5166|       |
 5167|  2.37k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 222, False: 2.15k]
  ------------------
 5168|    222|                auto it = read_until_code_point(range, cb);
 5169|    222|                return check_nonempty(it, range);
 5170|    222|            }
 5171|  2.15k|            auto it = read_while_code_point(range, cb);
 5172|  2.15k|            return check_nonempty(it, range);
 5173|  2.37k|        }
 5174|       |
 5175|    288|        const auto cb = [&](SourceCharT ch) {
 5176|    288|            return cb_wrapper.on_ascii_only(ch);
 5177|    288|        };
 5178|       |
 5179|    288|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 132, False: 156]
  ------------------
 5180|    132|            auto it = read_until_code_unit(range, cb);
 5181|    132|            return check_nonempty(it, range);
 5182|    132|        }
 5183|    156|        auto it = read_while_code_unit(range, cb);
 5184|    156|        return check_nonempty(it, range);
 5185|    288|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  2.37k|{
 2061|  2.37k|    auto it = range.begin();
 2062|   310k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 310k, False: 180]
  ------------------
 2063|   310k|        const auto val =
 2064|   310k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   310k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   310k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 309k, False: 1.47k]
  |  |  ------------------
  ------------------
 2066|   309k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   309k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   309k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.19k, False: 306k]
  ------------------
 2069|  2.19k|                return it;
 2070|  2.19k|            }
 2071|   309k|        }
 2072|   308k|        it = val.iterator;
 2073|   308k|    }
 2074|       |
 2075|    180|    return it;
 2076|  2.37k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   310k|{
 1899|   310k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   310k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   310k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   310k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   310k|    auto it = range.begin();
 1903|   310k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   310k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.47k, False: 309k]
  |  |  ------------------
  ------------------
 1906|  1.47k|        ++it;
 1907|  1.47k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  1.47k|        return {it, {}};
 1909|  1.47k|    }
 1910|       |
 1911|   309k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 269k, False: 39.4k]
  ------------------
 1912|   269k|        ++it;
 1913|   269k|        return {it, string_type(1, *range.begin())};
 1914|   269k|    }
 1915|       |
 1916|  39.4k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  39.4k|    return {it, string_type{range.begin(), it}};
 1918|   309k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  1.47k|{
 1155|  1.47k|    auto it = input.begin();
 1156|  2.17k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 2.12k, False: 48]
  ------------------
 1157|  2.12k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.42k, False: 702]
  ------------------
 1158|  1.42k|            break;
 1159|  1.42k|        }
 1160|  2.12k|    }
 1161|  1.47k|    return it;
 1162|  1.47k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  39.4k|    {
  283|  39.4k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  39.4k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  39.4k|    {
  212|  39.4k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 60, False: 39.3k]
  ------------------
  213|     60|            auto dist = bound - i;
  214|     60|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     60|            return dist;
  216|     60|        }
  217|  39.3k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  39.3k|        return n;
  219|  39.4k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|  78.9k|    {
  132|  78.9k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 78.9k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|  78.9k|        return t;
  136|  78.9k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|   310k|    {
 1890|   310k|        return !codepoint.empty();
 1891|   310k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  2.37k|    {
  754|  2.37k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|   309k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   309k|              cvref<T> obj = *get<T>(fn);
  745|   309k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   309k|                  obj(static_cast<decltype(args)>(args)...);
  747|   309k|              }
  748|   309k|              else {
  749|   309k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   309k|              }
  751|   309k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   309k|    {
  684|   309k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   309k|            return static_cast<T*>(s.m_cp);
  686|   309k|        }
  687|   309k|        else if constexpr (std::is_object_v<T>) {
  688|   309k|            return static_cast<T*>(s.m_p);
  689|   309k|        }
  690|   309k|        else {
  691|   309k|            return reinterpret_cast<T*>(s.m_fp);
  692|   309k|        }
  693|   309k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|   309k|            const auto cb = [&](char32_t cp) {
 5164|   309k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|   309k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  2.37k|        {
  667|  2.37k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  2.66k|    {
 5191|  2.66k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 978, False: 1.68k]
  ------------------
 5192|    978|            return unexpected_scan_error(
 5193|    978|                scan_error::invalid_scanned_value,
 5194|    978|                "No characters matched in [character set]");
 5195|    978|        }
 5196|       |
 5197|  1.68k|        return it;
 5198|  2.66k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  2.15k|{
 2082|  2.15k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.15k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|    288|    {
  754|    288|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  3.52k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.52k|              cvref<T> obj = *get<T>(fn);
  745|  3.52k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.52k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.52k|              }
  748|  3.52k|              else {
  749|  3.52k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.52k|              }
  751|  3.52k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  3.52k|    {
  684|  3.52k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.52k|            return static_cast<T*>(s.m_cp);
  686|  3.52k|        }
  687|  3.52k|        else if constexpr (std::is_object_v<T>) {
  688|  3.52k|            return static_cast<T*>(s.m_p);
  689|  3.52k|        }
  690|  3.52k|        else {
  691|  3.52k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.52k|        }
  693|  3.52k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  3.52k|        const auto cb = [&](SourceCharT ch) {
 5176|  3.52k|            return cb_wrapper.on_ascii_only(ch);
 5177|  3.52k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|    288|        {
  667|    288|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.14k|{
 4752|  1.14k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.14k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.14k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 126, False: 1.01k]
  ------------------
 4756|    126|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    126|                                     "Invalid encoding in scanned string");
 4758|    126|    }
 4759|  1.01k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.01k|    static_cast<    \
  |  |  929|  1.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.01k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.01k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.01k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.01k|    static_cast<    \
  |  |  929|  1.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.01k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.47k|    {
 4891|  3.47k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.89k, False: 580]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.89k|    }                                                  \
  |  |  |  | 3671|  3.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    580|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    580|        return read_string_impl(range, it, value);
 4893|  3.47k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  10.4k|    {
 4913|  10.4k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  20.8k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  10.4k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  10.4k|            return unexpected_scan_error(
 4916|  10.4k|                scan_error::invalid_scanned_value,
 4917|  10.4k|                "Regex backend doesn't support wide strings as input");
 4918|  10.4k|        }
 4919|  10.4k|        else {
 4920|  10.4k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 10.4k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  10.4k|            auto input = get_as_contiguous(range);
 4928|  10.4k|            SCN_TRY(it,
  ------------------
  |  | 3672|  10.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.68k, False: 1.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.68k|    }                                                  \
  |  |  |  | 3671|  10.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  1.74k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  1.74k|            return ranges::next(range.begin(),
 4931|  1.74k|                                ranges::distance(input.begin(), it));
 4932|  10.4k|        }
 4933|  10.4k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  10.4k|{
  959|  10.4k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  10.4k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  10.4k|        return true;
  962|  10.4k|    }
  963|  10.4k|    else if constexpr (std::is_same_v<
  964|  10.4k|                           ranges::const_iterator_t<Range>,
  965|  10.4k|                           typename detail::basic_scan_buffer<
  966|  10.4k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  10.4k|        auto beg = r.begin();
  968|  10.4k|        if (!beg.stores_parent()) {
  969|  10.4k|            return true;
  970|  10.4k|        }
  971|  10.4k|        return beg.parent()->is_contiguous();
  972|  10.4k|    }
  973|  10.4k|    else {
  974|  10.4k|        return false;
  975|  10.4k|    }
  976|  10.4k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  10.4k|{
 1065|  10.4k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  10.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  10.4k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  10.4k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  10.4k|        return r;
 1070|  10.4k|    }
 1071|  10.4k|    else if constexpr (std::is_same_v<
 1072|  10.4k|                           ranges::const_iterator_t<Range>,
 1073|  10.4k|                           typename detail::basic_scan_buffer<
 1074|  10.4k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  10.4k|        if constexpr (ranges::common_range<Range>) {
 1076|  10.4k|            return detail::make_string_view_from_pointers(
 1077|  10.4k|                r.begin().to_contiguous_segment_iterator(),
 1078|  10.4k|                r.end().to_contiguous_segment_iterator());
 1079|  10.4k|        }
 1080|  10.4k|        else {
 1081|  10.4k|            return r.begin().contiguous_segment();
 1082|  10.4k|        }
 1083|  10.4k|    }
 1084|  10.4k|    else {
 1085|  10.4k|        SCN_EXPECT(false);
 1086|  10.4k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  10.4k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  10.4k|    }
 1090|  10.4k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  10.4k|{
  981|  10.4k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  10.4k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  10.4k|        return true;
  984|  10.4k|    }
  985|  10.4k|    else if constexpr (std::is_same_v<
  986|  10.4k|                           ranges::const_iterator_t<Range>,
  987|  10.4k|                           typename detail::basic_scan_buffer<
  988|  10.4k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  10.4k|        auto beg = r.begin();
  990|  10.4k|        if (beg.contiguous_segment().empty()) {
  991|  10.4k|            return false;
  992|  10.4k|        }
  993|  10.4k|        if constexpr (ranges::common_range<Range>) {
  994|  10.4k|            return beg.contiguous_segment().end() ==
  995|  10.4k|                   ranges::end(r).contiguous_segment().end();
  996|  10.4k|        }
  997|  10.4k|        else {
  998|  10.4k|            if (beg.stores_parent()) {
  999|  10.4k|                return beg.contiguous_segment().end() ==
 1000|  10.4k|                       beg.parent()->current_view().end();
 1001|  10.4k|            }
 1002|  10.4k|            return true;
 1003|  10.4k|        }
 1004|  10.4k|    }
 1005|  10.4k|    else {
 1006|  10.4k|        return false;
 1007|  10.4k|    }
 1008|  10.4k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  10.4k|{
 4346|  10.4k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  10.4k|                  ranges::borrowed_range<Input> &&
 4348|  10.4k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  10.4k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  10.4k|    std::basic_regex<CharT> re{};
 4352|  10.4k|    try {
 4353|  10.4k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  10.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 10.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  10.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  10.4k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  10.4k|                                     re_flags | std::regex_constants::nosubs};
 4356|  10.4k|    }
 4357|  10.4k|    catch (const std::regex_error& err) {
 4358|  5.48k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  5.48k|                                     "Invalid regex");
 4360|  5.48k|    }
 4361|       |
 4362|  4.93k|    std::match_results<const CharT*> matches{};
 4363|  4.93k|    try {
 4364|  4.93k|        bool found = std::regex_search(input.data(),
 4365|  4.93k|                                       input.data() + input.size(), matches, re,
 4366|  4.93k|                                       std::regex_constants::match_continuous);
 4367|  4.93k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 3.19k, False: 1.74k]
  |  Branch (4367:23): [True: 0, False: 1.74k]
  ------------------
 4368|  2.95k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  2.95k|                                         "Regular expression didn't match");
 4370|  2.95k|        }
 4371|  4.93k|    }
 4372|  4.93k|    catch (const std::regex_error& err) {
 4373|    246|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|    246|                                     "Regex matching failed with an error");
 4375|    246|    }
 4376|       |
 4377|  1.74k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  4.93k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5808|  6.13k|{
 5809|  6.13k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  6.13k|        return reader_impl_for_bool<CharT>{};
 5811|  6.13k|    }
 5812|  6.13k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  6.13k|        return reader_impl_for_char<CharT>{};
 5814|  6.13k|    }
 5815|  6.13k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  6.13k|        return reader_impl_for_wchar<CharT>{};
 5817|  6.13k|    }
 5818|  6.13k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  6.13k|        return reader_impl_for_code_point<CharT>{};
 5820|  6.13k|    }
 5821|  6.13k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  6.13k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.13k|        return reader_impl_for_string<CharT>{};
 5824|  6.13k|    }
 5825|  6.13k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  6.13k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  6.13k|        return reader_impl_for_string<CharT>{};
 5828|  6.13k|    }
 5829|  6.13k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  6.13k|                       std::is_same_v<T, wregex_matches>) {
 5831|  6.13k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  6.13k|    }
 5833|  6.13k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  6.13k|        return reader_impl_for_voidptr<CharT>{};
 5835|  6.13k|    }
 5836|  6.13k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  6.13k|        return reader_impl_for_float<CharT>{};
 5838|  6.13k|    }
 5839|  6.13k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  6.13k|                       !std::is_same_v<T, wchar_t> &&
 5841|  6.13k|                       !std::is_same_v<T, char32_t> &&
 5842|  6.13k|                       !std::is_same_v<T, bool>) {
 5843|  6.13k|        return reader_impl_for_int<CharT>{};
 5844|  6.13k|    }
 5845|  6.13k|    else {
 5846|  6.13k|        return reader_impl_for_monostate<CharT>{};
 5847|  6.13k|    }
 5848|  6.13k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    370|{
 2993|    370|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    370|        if (source.stores_allocated_string()) {
 2995|    370|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    370|        }
 2997|    370|        else {
 2998|    370|            dest.assign(source.view());
 2999|    370|        }
 3000|    370|    }
 3001|    370|    else {
 3002|    370|        return transcode_impl(source.view(), dest);
 3003|    370|    }
 3004|       |
 3005|      0|    return {};
 3006|    370|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  2.02k|{
 2968|  2.02k|    dst.clear();
 2969|  2.02k|    transcode_valid_to_string(src, dst);
 2970|  2.02k|    return {};
 2971|  2.02k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  2.02k|{
 1403|  2.02k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  2.02k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  2.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  2.02k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  2.02k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1407:23): [Folded - Ignored]
  ------------------
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  2.02k|            std::u32string tmp;
 1410|  2.02k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  2.02k|            return transcode_to_string_impl_32to16<true>(
 1412|  2.02k|                std::u32string_view{tmp}, dest);
 1413|  2.02k|        }
 1414|  2.02k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1414:28): [Folded - Ignored]
  ------------------
 1415|  2.02k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  2.02k|        }
 1417|  2.02k|    }
 1418|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1420|      0|            std::u32string tmp;
 1421|      0|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|      0|            return transcode_to_string_impl_32to8<true>(
 1423|      0|                std::u32string_view{tmp}, dest);
 1424|      0|        }
 1425|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|      0|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|      0|        }
 1428|      0|    }
 1429|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1431|      0|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|      0|        }
 1433|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|      0|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|      0|        }
 1436|      0|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  2.02k|{
 1277|  2.02k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  2.02k|    auto it = src.begin();
 1280|   120k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 118k, False: 2.02k]
  ------------------
 1281|   118k|        auto res = get_next_code_point_valid(
 1282|   118k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   118k|                                                                 src.end()));
 1284|   118k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   118k|        dest.push_back(res.value);
 1286|   118k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   118k|    }
 1288|  2.02k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   118k|{
 1189|   118k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   118k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   118k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   118k|    return {input.begin() + len,
 1195|   118k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   118k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    664|    {
 5277|    664|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    664|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    664|        return read_impl(range, specs, value);
 5279|    664|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    664|    {
 5295|    664|        SCN_CLANG_PUSH
 5296|    664|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    664|        switch (m_type) {
 5299|    244|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 244, False: 420]
  ------------------
 5300|    244|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 52, False: 612]
  ------------------
 5303|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     52|                                                                   value);
 5305|       |
 5306|     32|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 32, False: 632]
  ------------------
 5307|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    210|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 210, False: 454]
  ------------------
 5310|    210|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    210|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 662]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    124|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 124, False: 540]
  ------------------
 5320|    124|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    124|                    range,
 5322|    124|                    get_unescaped_regex_pattern(
 5323|    124|                        specs.charset_string<SourceCharT>()),
 5324|    124|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 664]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    664|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    664|        }
 5331|       |
 5332|    664|        SCN_CLANG_POP
 5333|    664|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    244|    {
 4820|    244|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    244|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    328|{
 4752|    328|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    328|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    328|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 110, False: 218]
  ------------------
 4756|    110|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    110|                                     "Invalid encoding in scanned string");
 4758|    110|    }
 4759|    218|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    218|    static_cast<    \
  |  |  929|    218|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    218|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 218]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    218|    return SCN_MOVE(result);
  ------------------
  |  |  928|    218|    static_cast<    \
  |  |  929|    218|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    218|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     52|    {
 4841|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 18]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     18|        return read_string_impl(
 4851|     18|            range,
 4852|     18|            read_until_code_units(
 4853|     18|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     18|            value);
 4855|     52|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     32|    {
 4947|     32|        return read_impl(
 4948|     32|            range,
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
 4952|     32|            detail::priority_tag<1>{});
 4953|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     32|    {
 4974|     32|        return read_cb(range);
 4975|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    210|    {
 5048|    210|        auto it = read_source_impl(range, {specs});
 5049|    210|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    210|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 198]
  |  |  ------------------
  ------------------
 5050|     12|            return unexpected(it.error());
 5051|     12|        }
 5052|       |
 5053|    198|        return read_string_impl(range, *it, value);
 5054|    210|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    198|{
 4752|    198|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    198|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    198|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 46, False: 152]
  ------------------
 4756|     46|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     46|                                     "Invalid encoding in scanned string");
 4758|     46|    }
 4759|    152|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    152|    static_cast<    \
  |  |  929|    152|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    152|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 152]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    152|    return SCN_MOVE(result);
  ------------------
  |  |  928|    152|    static_cast<    \
  |  |  929|    152|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    152|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    126|    {
 4891|    126|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 126, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    126|    }                                                  \
  |  |  |  | 3671|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    126|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  4.68k|    {
 5277|  4.68k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.68k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.68k|        return read_impl(range, specs, value);
 5279|  4.68k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  4.68k|    {
 5295|  4.68k|        SCN_CLANG_PUSH
 5296|  4.68k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.68k|        switch (m_type) {
 5299|    280|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 280, False: 4.40k]
  ------------------
 5300|    280|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     44|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 44, False: 4.64k]
  ------------------
 5303|     44|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     44|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.68k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    888|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 888, False: 3.79k]
  ------------------
 5310|    888|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    888|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.26k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.26k, False: 1.42k]
  ------------------
 5315|  3.26k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.26k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.26k|                    specs.regexp_flags, value);
 5318|       |
 5319|    214|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 214, False: 4.47k]
  ------------------
 5320|    214|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    214|                    range,
 5322|    214|                    get_unescaped_regex_pattern(
 5323|    214|                        specs.charset_string<SourceCharT>()),
 5324|    214|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.68k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.68k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.68k|        }
 5331|       |
 5332|  4.68k|        SCN_CLANG_POP
 5333|  4.68k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    908|    {
 4820|    908|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    908|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    952|{
 4752|    952|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    952|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    952|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 312, False: 640]
  ------------------
 4756|    312|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    312|                                     "Invalid encoding in scanned string");
 4758|    312|    }
 4759|    640|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    640|    static_cast<    \
  |  |  929|    640|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    640|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 640]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    640|    return SCN_MOVE(result);
  ------------------
  |  |  928|    640|    static_cast<    \
  |  |  929|    640|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    640|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.65k|{
 3012|  1.65k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.65k|        dest.assign(source.view());
 3014|  1.65k|    }
 3015|  1.65k|    else {
 3016|  1.65k|        return transcode_impl(source.view(), dest);
 3017|  1.65k|    }
 3018|       |
 3019|      0|    return {};
 3020|  1.65k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     44|    {
 4841|     44|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 30, False: 14]
  ------------------
 4842|     30|            return read_string_impl(
 4843|     30|                range,
 4844|     30|                read_until_code_unit(
 4845|     30|                    range,
 4846|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     30|                        SourceCharT ch) { return ch == until; }),
 4848|     30|                value);
 4849|     30|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     44|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|    442|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    442|                  obj(static_cast<decltype(args)>(args)...);
  747|    442|              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|    442|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    442|            return static_cast<T*>(s.m_cp);
  686|    442|        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    442|            return static_cast<T*>(s.m_p);
  689|    442|        }
  690|    442|        else {
  691|    442|            return reinterpret_cast<T*>(s.m_fp);
  692|    442|        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    888|    {
 5048|    888|        auto it = read_source_impl(range, {specs});
 5049|    888|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 326, False: 562]
  |  |  ------------------
  ------------------
 5050|    326|            return unexpected(it.error());
 5051|    326|        }
 5052|       |
 5053|    562|        return read_string_impl(range, *it, value);
 5054|    888|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.14k|{
 4752|  1.14k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.14k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.14k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 126, False: 1.01k]
  ------------------
 4756|    126|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    126|                                     "Invalid encoding in scanned string");
 4758|    126|    }
 4759|  1.01k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.01k|    static_cast<    \
  |  |  929|  1.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.01k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.01k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.01k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.01k|    static_cast<    \
  |  |  929|  1.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.01k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.47k|    {
 4891|  3.47k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.89k, False: 580]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.89k|    }                                                  \
  |  |  |  | 3671|  3.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    580|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    580|        return read_string_impl(range, it, value);
 4893|  3.47k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|  6.13k|{
 5809|  6.13k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  6.13k|        return reader_impl_for_bool<CharT>{};
 5811|  6.13k|    }
 5812|  6.13k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  6.13k|        return reader_impl_for_char<CharT>{};
 5814|  6.13k|    }
 5815|  6.13k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  6.13k|        return reader_impl_for_wchar<CharT>{};
 5817|  6.13k|    }
 5818|  6.13k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  6.13k|        return reader_impl_for_code_point<CharT>{};
 5820|  6.13k|    }
 5821|  6.13k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  6.13k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.13k|        return reader_impl_for_string<CharT>{};
 5824|  6.13k|    }
 5825|  6.13k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  6.13k|                       std::is_same_v<T, std::wstring>) {
 5827|  6.13k|        return reader_impl_for_string<CharT>{};
 5828|  6.13k|    }
 5829|  6.13k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  6.13k|                       std::is_same_v<T, wregex_matches>) {
 5831|  6.13k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  6.13k|    }
 5833|  6.13k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  6.13k|        return reader_impl_for_voidptr<CharT>{};
 5835|  6.13k|    }
 5836|  6.13k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  6.13k|        return reader_impl_for_float<CharT>{};
 5838|  6.13k|    }
 5839|  6.13k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  6.13k|                       !std::is_same_v<T, wchar_t> &&
 5841|  6.13k|                       !std::is_same_v<T, char32_t> &&
 5842|  6.13k|                       !std::is_same_v<T, bool>) {
 5843|  6.13k|        return reader_impl_for_int<CharT>{};
 5844|  6.13k|    }
 5845|  6.13k|    else {
 5846|  6.13k|        return reader_impl_for_monostate<CharT>{};
 5847|  6.13k|    }
 5848|  6.13k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    664|    {
 5277|    664|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    664|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    664|        return read_impl(range, specs, value);
 5279|    664|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    664|    {
 5295|    664|        SCN_CLANG_PUSH
 5296|    664|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    664|        switch (m_type) {
 5299|    244|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 244, False: 420]
  ------------------
 5300|    244|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 52, False: 612]
  ------------------
 5303|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     52|                                                                   value);
 5305|       |
 5306|     32|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 32, False: 632]
  ------------------
 5307|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    210|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 210, False: 454]
  ------------------
 5310|    210|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    210|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 662]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    124|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 124, False: 540]
  ------------------
 5320|    124|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    124|                    range,
 5322|    124|                    get_unescaped_regex_pattern(
 5323|    124|                        specs.charset_string<SourceCharT>()),
 5324|    124|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 664]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    664|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    664|        }
 5331|       |
 5332|    664|        SCN_CLANG_POP
 5333|    664|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    244|    {
 4827|    244|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    244|                                     value);
 4829|    244|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    328|{
 4773|    328|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    328|    auto src = [&]() {
 4776|    328|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    328|            return make_contiguous_buffer(
 4778|    328|                ranges::subrange{range.begin().base(), result.base()});
 4779|    328|        }
 4780|    328|        else {
 4781|    328|            return make_contiguous_buffer(
 4782|    328|                ranges::subrange{range.begin(), result});
 4783|    328|        }
 4784|    328|    }();
 4785|    328|    using src_type = decltype(src);
 4786|       |
 4787|    328|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    328|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    328|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    328|                                     "Cannot read a string_view from "
 4796|    328|                                     "this source range (would require "
 4797|    328|                                     "transcoding)");
 4798|    328|    }
 4799|    328|    else {
 4800|    328|        const auto view = src.view();
 4801|    328|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    328|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 110, False: 218]
  ------------------
 4804|    110|            return unexpected_scan_error(
 4805|    110|                scan_error::invalid_scanned_value,
 4806|    110|                "Invalid encoding in scanned string_view");
 4807|    110|        }
 4808|       |
 4809|    218|        return SCN_MOVE(result);
  ------------------
  |  |  928|    218|    static_cast<    \
  |  |  929|    218|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    328|    }
 4811|    328|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    328|    auto src = [&]() {
 4776|    328|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    328|            return make_contiguous_buffer(
 4778|    328|                ranges::subrange{range.begin().base(), result.base()});
 4779|    328|        }
 4780|    328|        else {
 4781|    328|            return make_contiguous_buffer(
 4782|    328|                ranges::subrange{range.begin(), result});
 4783|    328|        }
 4784|    328|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     52|    {
 4863|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 34, False: 18]
  ------------------
 4864|     34|            return read_string_view_impl(
 4865|     34|                range,
 4866|     34|                read_until_code_unit(
 4867|     34|                    range,
 4868|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     34|                        SourceCharT ch) { return ch == until; }),
 4870|     34|                value);
 4871|     34|        }
 4872|     18|        return read_string_view_impl(
 4873|     18|            range,
 4874|     18|            read_until_code_units(
 4875|     18|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     18|            value);
 4877|     52|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4869|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     32|    {
 4959|     32|        return read_impl(
 4960|     32|            range,
 4961|     32|            [&](const auto& rng) {
 4962|     32|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     32|            },
 4964|     32|            detail::priority_tag<1>{});
 4965|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     32|    {
 4974|     32|        return read_cb(range);
 4975|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     32|            [&](const auto& rng) {
 4962|     32|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     32|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5061|    210|    {
 5062|    210|        auto it = read_source_impl(range, {specs});
 5063|    210|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    210|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 198]
  |  |  ------------------
  ------------------
 5064|     12|            return unexpected(it.error());
 5065|     12|        }
 5066|       |
 5067|    198|        return read_string_view_impl(range, *it, value);
 5068|    210|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4772|    198|{
 4773|    198|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    198|    auto src = [&]() {
 4776|    198|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    198|            return make_contiguous_buffer(
 4778|    198|                ranges::subrange{range.begin().base(), result.base()});
 4779|    198|        }
 4780|    198|        else {
 4781|    198|            return make_contiguous_buffer(
 4782|    198|                ranges::subrange{range.begin(), result});
 4783|    198|        }
 4784|    198|    }();
 4785|    198|    using src_type = decltype(src);
 4786|       |
 4787|    198|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    198|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    198|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    198|                                     "Cannot read a string_view from "
 4796|    198|                                     "this source range (would require "
 4797|    198|                                     "transcoding)");
 4798|    198|    }
 4799|    198|    else {
 4800|    198|        const auto view = src.view();
 4801|    198|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    198|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 46, False: 152]
  ------------------
 4804|     46|            return unexpected_scan_error(
 4805|     46|                scan_error::invalid_scanned_value,
 4806|     46|                "Invalid encoding in scanned string_view");
 4807|     46|        }
 4808|       |
 4809|    152|        return SCN_MOVE(result);
  ------------------
  |  |  928|    152|    static_cast<    \
  |  |  929|    152|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    198|    }
 4811|    198|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4775|    198|    auto src = [&]() {
 4776|    198|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    198|            return make_contiguous_buffer(
 4778|    198|                ranges::subrange{range.begin().base(), result.base()});
 4779|    198|        }
 4780|    198|        else {
 4781|    198|            return make_contiguous_buffer(
 4782|    198|                ranges::subrange{range.begin(), result});
 4783|    198|        }
 4784|    198|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|    126|    {
 4902|    126|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 126, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    126|    }                                                  \
  |  |  |  | 3671|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|    126|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  4.68k|    {
 5277|  4.68k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.68k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.68k|        return read_impl(range, specs, value);
 5279|  4.68k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  4.68k|    {
 5295|  4.68k|        SCN_CLANG_PUSH
 5296|  4.68k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.68k|        switch (m_type) {
 5299|    280|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 280, False: 4.40k]
  ------------------
 5300|    280|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     44|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 44, False: 4.64k]
  ------------------
 5303|     44|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     44|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.68k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    888|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 888, False: 3.79k]
  ------------------
 5310|    888|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    888|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.26k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.26k, False: 1.42k]
  ------------------
 5315|  3.26k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.26k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.26k|                    specs.regexp_flags, value);
 5318|       |
 5319|    214|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 214, False: 4.47k]
  ------------------
 5320|    214|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    214|                    range,
 5322|    214|                    get_unescaped_regex_pattern(
 5323|    214|                        specs.charset_string<SourceCharT>()),
 5324|    214|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.68k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.68k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.68k|        }
 5331|       |
 5332|  4.68k|        SCN_CLANG_POP
 5333|  4.68k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    908|    {
 4827|    908|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    908|                                     value);
 4829|    908|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|    952|{
 4773|    952|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    952|    auto src = [&]() {
 4776|    952|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    952|            return make_contiguous_buffer(
 4778|    952|                ranges::subrange{range.begin().base(), result.base()});
 4779|    952|        }
 4780|    952|        else {
 4781|    952|            return make_contiguous_buffer(
 4782|    952|                ranges::subrange{range.begin(), result});
 4783|    952|        }
 4784|    952|    }();
 4785|    952|    using src_type = decltype(src);
 4786|       |
 4787|    952|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    952|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    952|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    952|                                     "Cannot read a string_view from "
 4796|    952|                                     "this source range (would require "
 4797|    952|                                     "transcoding)");
 4798|    952|    }
 4799|    952|    else {
 4800|    952|        const auto view = src.view();
 4801|    952|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    952|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 312, False: 640]
  ------------------
 4804|    312|            return unexpected_scan_error(
 4805|    312|                scan_error::invalid_scanned_value,
 4806|    312|                "Invalid encoding in scanned string_view");
 4807|    312|        }
 4808|       |
 4809|    640|        return SCN_MOVE(result);
  ------------------
  |  |  928|    640|    static_cast<    \
  |  |  929|    640|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    952|    }
 4811|    952|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|    952|    auto src = [&]() {
 4776|    952|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    952|            return make_contiguous_buffer(
 4778|    952|                ranges::subrange{range.begin().base(), result.base()});
 4779|    952|        }
 4780|    952|        else {
 4781|    952|            return make_contiguous_buffer(
 4782|    952|                ranges::subrange{range.begin(), result});
 4783|    952|        }
 4784|    952|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     44|    {
 4863|     44|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 30, False: 14]
  ------------------
 4864|     30|            return read_string_view_impl(
 4865|     30|                range,
 4866|     30|                read_until_code_unit(
 4867|     30|                    range,
 4868|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     30|                        SourceCharT ch) { return ch == until; }),
 4870|     30|                value);
 4871|     30|        }
 4872|     14|        return read_string_view_impl(
 4873|     14|            range,
 4874|     14|            read_until_code_units(
 4875|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     14|            value);
 4877|     44|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES14_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|    442|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    442|                  obj(static_cast<decltype(args)>(args)...);
  747|    442|              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|    442|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    442|            return static_cast<T*>(s.m_cp);
  686|    442|        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    442|            return static_cast<T*>(s.m_p);
  689|    442|        }
  690|    442|        else {
  691|    442|            return reinterpret_cast<T*>(s.m_fp);
  692|    442|        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4869|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|    888|    {
 5062|    888|        auto it = read_source_impl(range, {specs});
 5063|    888|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 326, False: 562]
  |  |  ------------------
  ------------------
 5064|    326|            return unexpected(it.error());
 5065|    326|        }
 5066|       |
 5067|    562|        return read_string_view_impl(range, *it, value);
 5068|    888|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  1.14k|{
 4773|  1.14k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.14k|    auto src = [&]() {
 4776|  1.14k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.14k|            return make_contiguous_buffer(
 4778|  1.14k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.14k|        }
 4780|  1.14k|        else {
 4781|  1.14k|            return make_contiguous_buffer(
 4782|  1.14k|                ranges::subrange{range.begin(), result});
 4783|  1.14k|        }
 4784|  1.14k|    }();
 4785|  1.14k|    using src_type = decltype(src);
 4786|       |
 4787|  1.14k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.14k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.14k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.14k|                                     "Cannot read a string_view from "
 4796|  1.14k|                                     "this source range (would require "
 4797|  1.14k|                                     "transcoding)");
 4798|  1.14k|    }
 4799|  1.14k|    else {
 4800|  1.14k|        const auto view = src.view();
 4801|  1.14k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.14k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 126, False: 1.01k]
  ------------------
 4804|    126|            return unexpected_scan_error(
 4805|    126|                scan_error::invalid_scanned_value,
 4806|    126|                "Invalid encoding in scanned string_view");
 4807|    126|        }
 4808|       |
 4809|  1.01k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.01k|    static_cast<    \
  |  |  929|  1.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.14k|    }
 4811|  1.14k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  1.14k|    auto src = [&]() {
 4776|  1.14k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.14k|            return make_contiguous_buffer(
 4778|  1.14k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.14k|        }
 4780|  1.14k|        else {
 4781|  1.14k|            return make_contiguous_buffer(
 4782|  1.14k|                ranges::subrange{range.begin(), result});
 4783|  1.14k|        }
 4784|  1.14k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  3.47k|    {
 4902|  3.47k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.89k, False: 580]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.89k|    }                                                  \
  |  |  |  | 3671|  3.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    580|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    580|        return read_string_view_impl(range, it, value);
 4904|  3.47k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5623|  2.64k|    {
 5624|  2.64k|        reader_error_handler eh{};
 5625|  2.64k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  2.64k|            detail::check_code_point_type_specs(specs, eh);
 5627|  2.64k|        }
 5628|  2.64k|        else {
 5629|  2.64k|            detail::check_char_type_specs(specs, eh);
 5630|  2.64k|        }
 5631|  2.64k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.15k, False: 484]
  |  |  ------------------
  ------------------
 5632|  2.15k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  2.15k|        }
 5634|    484|        return {};
 5635|  2.64k|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  7.71k|    {
  763|  7.71k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  7.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  7.71k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.27k|    {
  754|  1.27k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  2.62k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.62k|              cvref<T> obj = *get<T>(fn);
  745|  2.62k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.62k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.62k|              }
  748|  2.62k|              else {
  749|  2.62k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.62k|              }
  751|  2.62k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  2.62k|    {
  684|  2.62k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.62k|            return static_cast<T*>(s.m_cp);
  686|  2.62k|        }
  687|  2.62k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.62k|            return static_cast<T*>(s.m_p);
  689|  2.62k|        }
  690|  2.62k|        else {
  691|  2.62k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.62k|        }
  693|  2.62k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  1.27k|        {
  662|  1.27k|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5618|  1.40k|    {
 5619|  1.40k|        return false;
 5620|  1.40k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|     70|    {
 1780|     70|        auto stdloc = loc.get<std::locale>();
 1781|     70|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     70|        grouping = numpunct.grouping();
 1783|     70|        thousands_sep =
 1784|     70|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 70]
  ------------------
 1785|     70|        decimal_point = numpunct.decimal_point();
 1786|     70|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|     88|{
 1717|     88|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 88, False: 0]
  ------------------
 1718|     88|        return std::use_facet<Facet>(stdloc);
 1719|     88|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     88|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  3.58k|{
 2349|  3.58k|    size_t count{0};
 2350|  3.58k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  3.58k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  3.58k|    });
 2353|  3.58k|    return count;
 2354|  3.58k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  3.58k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  3.58k|    auto it = input.begin();
 1448|  10.2k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 6.64k, False: 3.58k]
  ------------------
 1449|  6.64k|        auto res = get_next_code_point(
 1450|  6.64k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  6.64k|        cb(res.value);
 1452|  6.64k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  6.64k|    }
 1454|  3.58k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   596k|{
 1169|   596k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   596k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   596k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   596k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   596k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   596k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 596k]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   596k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   596k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 596k]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   596k|    return {input.begin() + len,
 1181|   596k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   596k|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  3.58k|    {
  754|  3.58k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  6.64k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.64k|              cvref<T> obj = *get<T>(fn);
  745|  6.64k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.64k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.64k|              }
  748|  6.64k|              else {
  749|  6.64k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.64k|              }
  751|  6.64k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  6.64k|    {
  684|  6.64k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.64k|            return static_cast<T*>(s.m_cp);
  686|  6.64k|        }
  687|  6.64k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.64k|            return static_cast<T*>(s.m_p);
  689|  6.64k|        }
  690|  6.64k|        else {
  691|  6.64k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.64k|        }
  693|  6.64k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  6.64k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  6.64k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  6.64k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  3.58k|        {
  662|  3.58k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  2.04k|    {
 1582|  2.04k|        return m_view;
 1583|  2.04k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  2.26k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2420|    306|    {
 2421|    306|        return m_multibyte_left;
 2422|    306|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2425|  34.9k|    {
 2426|  34.9k|        return *m_current;
 2427|  34.9k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2434|  24.9k|    {
 2435|  24.9k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  24.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  24.9k|        _increment_current();
 2437|  24.9k|        return *this;
 2438|  24.9k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2667|  24.9k|    {
 2668|  24.9k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 24.9k, False: 0]
  ------------------
 2669|  24.9k|            auto cplen = _get_cp_length_at_current();
 2670|  24.9k|            m_multibyte_left = cplen - 1;
 2671|  24.9k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  24.9k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  24.9k|        ++m_current;
 2678|  24.9k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2638|  24.9k|    {
 2639|  24.9k|        return static_cast<difference_type>(
 2640|  24.9k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  24.9k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2644|  24.9k|    {
 2645|  24.9k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.9k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  24.9k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 24.9k, False: 0]
  ------------------
 2650|  24.9k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  24.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  24.9k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  24.9k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  24.9k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  5.06k|{
 1857|  5.06k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  5.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  5.06k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  5.06k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  5.06k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 120, False: 4.94k]
  ------------------
 1862|    120|            return unexpected(eof_error::eof);
 1863|    120|        }
 1864|       |
 1865|  4.94k|        return ranges::next(range.begin(), count);
 1866|  5.06k|    }
 1867|  5.06k|    else {
 1868|  5.06k|        auto it = range.begin();
 1869|  5.06k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  5.06k|            return ranges::next(it, count);
 1871|  5.06k|        }
 1872|       |
 1873|  5.06k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  5.06k|            if (it == range.end()) {
 1875|  5.06k|                return unexpected(eof_error::eof);
 1876|  5.06k|            }
 1877|  5.06k|        }
 1878|       |
 1879|  5.06k|        return it;
 1880|  5.06k|    }
 1881|  5.06k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  8.91k|    {
 2531|  8.91k|        return !(a == b);
 2532|  8.91k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  9.47k|    {
 2523|  9.47k|        return a.m_current == b.m_current;
 2524|  9.47k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2429|  2.07k|    {
 2430|  2.07k|        return *m_current;
 2431|  2.07k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1889|  10.0k|    {
 1890|  10.0k|        return !codepoint.empty();
 1891|  10.0k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1682|    332|{
 1683|    332|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|    332|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|    332|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|    332|        return string_view_wrapper{SCN_FWD(range)};
 1687|    332|    }
 1688|    332|    else {
 1689|    332|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    332|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|    332|    }
 1691|    332|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EELPv0EEEOT_:
 1536|    332|    {
 1537|    332|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    332|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|    332|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1620|    332|    {
 1621|    332|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    332|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    332|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    332|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    332|            m_storage.reset();
 1627|    332|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    332|        }
 1629|    332|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|    332|                                          std::basic_string<CharT>>) {
 1631|    332|            m_storage.emplace(SCN_FWD(range));
 1632|    332|            m_view = string_view_type{*m_storage};
 1633|    332|        }
 1634|    332|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|    332|                                          typename detail::basic_scan_buffer<
 1636|    332|                                              value_t>::forward_iterator> &&
 1637|    332|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|    332|            auto beg_seg = range.begin().contiguous_segment();
 1639|    332|            auto end_seg = range.end().contiguous_segment();
 1640|    332|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    332|                             detail::to_address(end_seg.end()))) {
 1642|    332|                auto& str = m_storage.emplace();
 1643|    332|                str.reserve(range.end().position() - range.begin().position());
 1644|    332|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    332|                m_view = string_view_type{str};
 1646|    332|                return;
 1647|    332|            }
 1648|       |
 1649|    332|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    332|                                                            end_seg.data());
 1651|    332|            m_storage.reset();
 1652|    332|        }
 1653|    332|        else {
 1654|    332|            auto& str = m_storage.emplace();
 1655|    332|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|    332|                str.reserve(range.size());
 1657|    332|            }
 1658|    332|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|    332|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    332|                          std::back_inserter(str));
 1661|    332|            }
 1662|    332|            else {
 1663|    332|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    332|                     ++it) {
 1665|    332|                    str.push_back(*it);
 1666|    332|                }
 1667|    332|            }
 1668|    332|            m_view = string_view_type{str};
 1669|    332|        }
 1670|    332|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2381|  8.40k|    {
 2382|  8.40k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2412|  34.8k|    {
 2413|  34.8k|        return m_current;
 2414|  34.8k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  1.87k|{
 2117|  1.87k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.87k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.87k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.87k|        auto buf = make_contiguous_buffer(range);
 2121|  1.87k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.87k|        return ranges::next(range.begin(),
 2123|  1.87k|                            ranges::distance(buf.view().begin(), it));
 2124|  1.87k|    }
 2125|  1.87k|    else {
 2126|  1.87k|        auto it = range.begin();
 2127|       |
 2128|  1.87k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.87k|            auto seg = get_contiguous_beginning(range);
 2130|  1.87k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.87k|                seg_it != seg.end()) {
 2132|  1.87k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  1.87k|            }
 2134|  1.87k|            ranges::advance(it, seg.size());
 2135|  1.87k|        }
 2136|       |
 2137|  1.87k|        return read_while_code_point(
 2138|  1.87k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.87k|    }
 2140|  1.87k|}
_ZN3scn2v34impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2081|  1.87k|{
 2082|  1.87k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.87k|}
_ZN3scn2v34impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2060|  1.87k|{
 2061|  1.87k|    auto it = range.begin();
 2062|  2.92k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.99k, False: 934]
  ------------------
 2063|  1.99k|        const auto val =
 2064|  1.99k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.99k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.99k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.99k, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.99k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.99k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.99k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 944, False: 1.05k]
  ------------------
 2069|    944|                return it;
 2070|    944|            }
 2071|  1.99k|        }
 2072|  1.05k|        it = val.iterator;
 2073|  1.05k|    }
 2074|       |
 2075|    934|    return it;
 2076|  1.87k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  44.4k|{
 1899|  44.4k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  44.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  44.4k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  44.4k|    auto it = range.begin();
 1903|  44.4k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  44.4k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  44.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 44.4k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  44.4k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 44.4k, False: 0]
  ------------------
 1912|  44.4k|        ++it;
 1913|  44.4k|        return {it, string_type(1, *range.begin())};
 1914|  44.4k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  44.4k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  63.3k|{
  944|  63.3k|    return is_range_eof(r.begin(), r.end());
  945|  63.3k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   653k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   653k|    {
  937|   653k|        return begin == end;
  938|   653k|    }
  939|   653k|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    818|    {
  190|    818|        i = std::move(bound);
  191|    818|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  44.4k|    {
 1890|  44.4k|        return !codepoint.empty();
 1891|  44.4k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  1.87k|    {
  754|  1.87k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  1.99k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.99k|              cvref<T> obj = *get<T>(fn);
  745|  1.99k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.99k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.99k|              }
  748|  1.99k|              else {
  749|  1.99k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.99k|              }
  751|  1.99k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  1.99k|    {
  684|  1.99k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.99k|            return static_cast<T*>(s.m_cp);
  686|  1.99k|        }
  687|  1.99k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.99k|            return static_cast<T*>(s.m_p);
  689|  1.99k|        }
  690|  1.99k|        else {
  691|  1.99k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.99k|        }
  693|  1.99k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2138|  1.99k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  1.87k|        {
  662|  1.87k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  18.9k|{
  950|  18.9k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.9k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  18.9k|    return eof_error::good;
  954|  18.9k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  2.97k|    {
 2832|  2.97k|        return take_width_view{r, n};
 2833|  2.97k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2800|  2.97k|    {
 2801|  2.97k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2713|  2.97k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5698|    140|    {
 5699|    140|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 120, False: 20]
  ------------------
 5700|    140|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 20]
  ------------------
 5701|    120|            return read_default(range, value, loc);
 5702|    120|        }
 5703|       |
 5704|     20|        reader_impl_for_int<CharT> reader{};
 5705|     20|        using integer_type =
 5706|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     20|        integer_type tmp_value{};
 5708|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     20|        value = static_cast<integer_type>(value);
 5710|     20|        return ret;
 5711|    140|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5682|    120|    {
 5683|    120|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    120|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|    120|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|    120|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|    120|        }
 5687|    120|        else {
 5688|    120|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    120|        }
 5690|    120|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5563|    120|    {
 5564|    120|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    120|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    120|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    120|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 120]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    120|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    120|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    120|        ch = *range.begin();
 5566|    120|        return it;
 5567|    120|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  1.02k|{
 1846|  1.02k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.02k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  1.02k|    return ranges::next(range.begin());
 1851|  1.02k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|  1.02k|{
  950|  1.02k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.02k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.02k|    return eof_error::good;
  954|  1.02k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|  1.02k|{
  944|  1.02k|    return is_range_eof(r.begin(), r.end());
  945|  1.02k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  11.1k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  11.1k|    {
  937|  11.1k|        return begin == end;
  938|  11.1k|    }
  939|  11.1k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  32.8k|        {
 2770|  32.8k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 306, False: 32.5k]
  |  Branch (2770:39): [True: 306, False: 0]
  ------------------
 2771|  32.8k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 288, False: 32.2k]
  ------------------
 2772|  32.8k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2815|  10.9k|    {
 2816|  10.9k|        return sentinel<true>{m_base.get().end()};
 2817|  10.9k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2716|  27.7k|    {
 2717|  27.7k|        return view;
 2718|  27.7k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2750|  10.9k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.05k|    {
  296|  1.05k|        ++x;
  297|  1.05k|        return x;
  298|  1.05k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2809|  8.40k|    {
 2810|  8.40k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  8.40k|                                      m_count};
 2812|  8.40k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    174|    {
 3539|    174|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    174|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 174]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    174|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    174|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 174]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    174|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 174]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    174|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    174|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 160, False: 14]
  |  |  ------------------
  ------------------
 3565|    160|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    160|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    160|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    160|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 160, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    160|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    160|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    160|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    160|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    160|    }                                                  \
  |  |  |  | 3671|    160|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     14|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     14|            localized_number_formatting_options<CharT>{loc};
 3586|     14|#endif
 3587|       |
 3588|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    450|{
 3326|    450|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|    450|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    450|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    450|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 450]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    450|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    450|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    450|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    450|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    450|        parse_integer_base_prefix(
 3331|    450|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    450|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 450]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    450|    else {
 3343|    450|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 450]
  |  Branch (3343:13): [True: 450, False: 0]
  ------------------
 3344|    450|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 450, False: 0]
  ------------------
 3345|    450|            digits_begin_it = base_prefix_begin_it;
 3346|    450|        }
 3347|    450|    }
 3348|       |
 3349|    450|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 450, False: 0]
  ------------------
 3350|    450|        sign = sign_type::plus_sign;
 3351|    450|    }
 3352|    450|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    450|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    450|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|    592|{
 3141|    592|    auto r = read_one_of_code_unit(range, "+-");
 3142|    592|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 592, False: 0]
  ------------------
 3143|    592|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 592, False: 0]
  ------------------
 3144|    592|            return std::pair{range.begin(), sign_type::default_sign};
 3145|    592|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|    592|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|    592|{
 2272|    592|    auto it = read_code_unit(range);
 2273|    592|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 592]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  1.18k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.18k, False: 592]
  ------------------
 2278|  1.18k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 1.18k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  1.18k|    }
 2282|       |
 2283|    592|    return unexpected(parse_error::error);
 2284|    592|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    450|{
 3293|    450|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 444]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     12|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 12, False: 438]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     12|            bool zero_parsed = false;
 3302|     12|            auto it = apply_opt(
 3303|     12|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     12|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    128|        case 16:
  ------------------
  |  Branch (3307:9): [True: 128, False: 322]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    128|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    128|                    false};
 3311|       |
 3312|     22|        case 0:
  ------------------
  |  Branch (3312:9): [True: 22, False: 428]
  ------------------
 3313|       |            // detect base
 3314|     22|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    282|        default:
  ------------------
  |  Branch (3316:9): [True: 282, False: 168]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    282|            return {range.begin(), base, false};
 3319|    450|    }
 3320|    450|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    146|{
 2291|    146|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 146, False: 0]
  ------------------
 2292|    146|        return range.begin();
 2293|    146|    }
 2294|      0|    return *result;
 2295|    146|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     28|{
 3244|     28|    return read_matching_string_classic_nocase(range, "0b");
 3245|     28|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|    630|{
 2231|    630|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|    630|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|    630|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|    630|        if (range.size() < str.size()) {
 2236|    630|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|    630|        }
 2238|    630|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|    630|            return unexpected(parse_error::error);
 2240|    630|        }
 2241|    630|        return ranges::next(range.begin(), str.size());
 2242|    630|    }
 2243|    630|    else {
 2244|    630|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    630|            if (ch < 'A' || ch > 'Z') {
 2246|    630|                return ch;
 2247|    630|            }
 2248|    630|            return static_cast<char_type>(ch +
 2249|    630|                                          static_cast<char_type>('a' - 'A'));
 2250|    630|        };
 2251|       |
 2252|    630|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 78, False: 552]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     78|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     78|    }                                                  \
  |  |  |  | 3671|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    552|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    552|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    552|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    552|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    552|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 552, False: 0]
  |  |  ------------------
  ------------------
 2257|    552|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    552|                    return ascii_tolower(a) ==
 2259|    552|                           static_cast<detail::char_t<Range>>(b);
 2260|    552|                }))) {
 2261|    552|            return unexpected(parse_error::error);
 2262|    552|        }
 2263|       |
 2264|      0|        return it;
 2265|    552|    }
 2266|    630|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|    630|{
 1857|    630|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    630|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    630|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    630|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    630|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    630|        if (sz < count) {
 1862|    630|            return unexpected(eof_error::eof);
 1863|    630|        }
 1864|       |
 1865|    630|        return ranges::next(range.begin(), count);
 1866|    630|    }
 1867|    630|    else {
 1868|    630|        auto it = range.begin();
 1869|    630|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 630]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  2.08k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.52k, False: 552]
  ------------------
 1874|  1.52k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 78, False: 1.45k]
  ------------------
 1875|     78|                return unexpected(eof_error::eof);
 1876|     78|            }
 1877|  1.52k|        }
 1878|       |
 1879|    552|        return it;
 1880|    630|    }
 1881|    630|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|    630|{
 1095|    630|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    630|        return r.size();
 1097|    630|    }
 1098|    630|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    630|                           ranges::const_iterator_t<Range>,
 1100|    630|                           typename detail::basic_scan_buffer<
 1101|    630|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    630|        if constexpr (ranges::common_range<Range>) {
 1103|    630|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    630|        }
 1105|    630|        else {
 1106|    630|            if (r.begin().stores_parent()) {
 1107|    630|                return static_cast<size_t>(
 1108|    630|                    r.begin().parent()->chars_available() -
 1109|    630|                    r.begin().position());
 1110|    630|            }
 1111|    630|            return r.begin().contiguous_segment().size();
 1112|    630|        }
 1113|    630|    }
 1114|    630|    else {
 1115|    630|        return 0;
 1116|    630|    }
 1117|    630|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2244|    552|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    552|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 32, False: 520]
  |  Branch (2245:29): [True: 520, False: 0]
  ------------------
 2246|    552|                return ch;
 2247|    552|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    552|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     34|{
 2146|     34|    auto it = read_code_unit(range);
 2147|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2152|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     34|        return unexpected(parse_error::error);
 2154|     34|    }
 2155|       |
 2156|      0|    return *it;
 2157|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     34|{
 1846|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     34|    return ranges::next(range.begin());
 1851|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  10.1k|{
  944|  10.1k|    return is_range_eof(r.begin(), r.end());
  945|  10.1k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    150|{
 3251|    150|    return read_matching_string_classic_nocase(range, "0x");
 3252|    150|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     22|{
 3274|     22|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 22]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     22|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 22]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     22|    {
 3281|     22|        bool zero_parsed{false};
 3282|     22|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 22]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     22|    }
 3286|     22|    return {range.begin(), 10, false};
 3287|     22|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    422|{
 3360|    422|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    422|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    422|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    422|            return unexpected_scan_error(
 3365|    422|                scan_error::invalid_scanned_value,
 3366|    422|                "Failed to parse integer: No digits found");
 3367|    422|        }
 3368|    422|        return range.end();
 3369|    422|    }
 3370|    422|    else {
 3371|    422|        return read_while1_code_unit(range,
 3372|    422|                                     [&](char_type ch) noexcept {
 3373|    422|                                         return char_to_int(ch) < base;
 3374|    422|                                     })
 3375|    422|            .transform_error(map_parse_error_to_scan_error(
 3376|    422|                scan_error::invalid_scanned_value,
 3377|    422|                "Failed to parse integer: No digits found"));
 3378|    422|    }
 3379|    422|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|    564|{
 1996|    564|    auto it = read_while_code_unit(range, pred);
 1997|    564|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 564, False: 0]
  ------------------
 1998|    564|        return unexpected(parse_error::error);
 1999|    564|    }
 2000|      0|    return it;
 2001|    564|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|    564|{
 1976|    564|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    564|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|    564|{
 1957|    564|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    564|        return std::find_if(range.begin(), range.end(), pred);
 1959|    564|    }
 1960|    564|    else {
 1961|    564|        auto first = range.begin();
 1962|    564|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 564, False: 0]
  ------------------
 1963|    564|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 564, False: 0]
  ------------------
 1964|    564|                return first;
 1965|    564|            }
 1966|    564|        }
 1967|      0|        return first;
 1968|    564|    }
 1969|    564|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  15.3k|        {
 2781|  15.3k|            return !(y == x);
 2782|  15.3k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_:
  753|    422|    {
  754|    422|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|    422|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    422|              cvref<T> obj = *get<T>(fn);
  745|    422|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    422|                  obj(static_cast<decltype(args)>(args)...);
  747|    422|              }
  748|    422|              else {
  749|    422|                  return obj(static_cast<decltype(args)>(args)...);
  750|    422|              }
  751|    422|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    422|    {
  684|    422|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    422|            return static_cast<T*>(s.m_cp);
  686|    422|        }
  687|    422|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    422|            return static_cast<T*>(s.m_p);
  689|    422|        }
  690|    422|        else {
  691|    422|            return reinterpret_cast<T*>(s.m_fp);
  692|    422|        }
  693|    422|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3372|    422|                                     [&](char_type ch) noexcept {
 3373|    422|                                         return char_to_int(ch) < base;
 3374|    422|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_LPv0EEEPSP_:
  661|    422|        {
  662|    422|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     28|{
 3390|     28|    std::basic_string<CharT> output;
 3391|     28|    std::string thsep_indices;
 3392|     28|    auto it = range.begin();
 3393|     28|    bool digit_matched = false;
 3394|     28|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 28, False: 0]
  ------------------
 3395|     28|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 28]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     28|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 28, False: 0]
  ------------------
 3400|     28|            break;
 3401|     28|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     28|    }
 3407|     28|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 3408|     28|        return unexpected_scan_error(
 3409|     28|            scan_error::invalid_scanned_value,
 3410|     28|            "Failed to parse integer: No digits found");
 3411|     28|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     28|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2416|  33.3k|    {
 2417|  33.3k|        return m_count;
 2418|  33.3k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5698|    342|    {
 5699|    342|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 322, False: 20]
  ------------------
 5700|    342|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 20]
  ------------------
 5701|    322|            return read_default(range, value, loc);
 5702|    322|        }
 5703|       |
 5704|     20|        reader_impl_for_int<CharT> reader{};
 5705|     20|        using integer_type =
 5706|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     20|        integer_type tmp_value{};
 5708|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     20|        value = static_cast<integer_type>(value);
 5710|     20|        return ret;
 5711|    342|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5682|    802|    {
 5683|    802|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    802|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|    802|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|    802|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|    802|        }
 5687|    802|        else {
 5688|    802|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    802|        }
 5690|    802|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5563|    802|    {
 5564|    802|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    802|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    802|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    802|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    802|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 802]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    802|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    802|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    802|        ch = *range.begin();
 5566|    802|        return it;
 5567|    802|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  5.82k|{
 1846|  5.82k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.82k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  5.82k|    return ranges::next(range.begin());
 1851|  5.82k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   533k|    {
  296|   533k|        ++x;
  297|   533k|        return x;
  298|   533k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    376|    {
 3539|    376|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    376|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    376|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    376|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    376|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 376]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    376|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    376|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    376|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    376|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 376]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    376|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 376]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    376|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    376|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 362, False: 14]
  |  |  ------------------
  ------------------
 3565|    362|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    362|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 362]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    362|                    parse_integer_digits_without_thsep(
 3567|    362|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    362|                        prefix_result.parsed_base));
 3569|       |
 3570|    362|            auto buf = make_contiguous_buffer(
 3571|    362|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    362|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    362|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 362, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    362|    }                                                  \
  |  |  |  | 3671|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    362|        }
 3580|       |
 3581|     14|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     14|            localized_number_formatting_options<CharT>{loc};
 3586|     14|#endif
 3587|       |
 3588|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.49k|{
 3326|  2.49k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  2.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.49k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.49k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.49k|        parse_integer_base_prefix(
 3331|  2.49k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.49k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.49k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.49k|    else {
 3343|  2.49k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.49k]
  ------------------
 3344|  2.49k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.49k, False: 0]
  ------------------
 3345|  2.49k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.49k|        }
 3347|  2.49k|    }
 3348|       |
 3349|  2.49k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.49k, False: 0]
  ------------------
 3350|  2.49k|        sign = sign_type::plus_sign;
 3351|  2.49k|    }
 3352|  2.49k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.49k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.49k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.32k|{
 3141|  3.32k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.32k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.32k, False: 0]
  ------------------
 3143|  3.32k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.32k, False: 0]
  ------------------
 3144|  3.32k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.32k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.32k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.32k|{
 2272|  3.32k|    auto it = read_code_unit(range);
 2273|  3.32k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.32k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  6.64k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 6.64k, False: 3.32k]
  ------------------
 2278|  6.64k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 6.64k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  6.64k|    }
 2282|       |
 2283|  3.32k|    return unexpected(parse_error::error);
 2284|  3.32k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.49k|{
 3293|  2.49k|    switch (base) {
 3294|     12|        case 2:
  ------------------
  |  Branch (3294:9): [True: 12, False: 2.48k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     12|                    false};
 3298|       |
 3299|     10|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 10, False: 2.48k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     10|            bool zero_parsed = false;
 3302|     10|            auto it = apply_opt(
 3303|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     10|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    820|        case 16:
  ------------------
  |  Branch (3307:9): [True: 820, False: 1.67k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    820|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    820|                    false};
 3311|       |
 3312|     16|        case 0:
  ------------------
  |  Branch (3312:9): [True: 16, False: 2.48k]
  ------------------
 3313|       |            // detect base
 3314|     16|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.63k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.63k, False: 858]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.63k|            return {range.begin(), base, false};
 3319|  2.49k|    }
 3320|  2.49k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    842|{
 2291|    842|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 842, False: 0]
  ------------------
 2292|    842|        return range.begin();
 2293|    842|    }
 2294|      0|    return *result;
 2295|    842|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     28|{
 3244|     28|    return read_matching_string_classic_nocase(range, "0b");
 3245|     28|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.35k|{
 2231|  3.35k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.35k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.35k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.35k|        if (range.size() < str.size()) {
 2236|  3.35k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  3.35k|        }
 2238|  3.35k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  3.35k|            return unexpected(parse_error::error);
 2240|  3.35k|        }
 2241|  3.35k|        return ranges::next(range.begin(), str.size());
 2242|  3.35k|    }
 2243|  3.35k|    else {
 2244|  3.35k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.35k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.35k|                return ch;
 2247|  3.35k|            }
 2248|  3.35k|            return static_cast<char_type>(ch +
 2249|  3.35k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.35k|        };
 2251|       |
 2252|  3.35k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  3.35k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.35k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.35k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 3.35k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      4|    }                                                  \
  |  |  |  | 3671|  3.35k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  3.35k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.35k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.35k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.35k, False: 0]
  |  |  ------------------
  ------------------
 2257|  3.35k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.35k|                    return ascii_tolower(a) ==
 2259|  3.35k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.35k|                }))) {
 2261|  3.35k|            return unexpected(parse_error::error);
 2262|  3.35k|        }
 2263|       |
 2264|      0|        return it;
 2265|  3.35k|    }
 2266|  3.35k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  3.35k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.35k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 44, False: 3.30k]
  |  Branch (2245:29): [True: 3.30k, False: 0]
  ------------------
 2246|  3.35k|                return ch;
 2247|  3.35k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.35k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     26|{
 3258|     26|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 26]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     26|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 26]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     26|    return unexpected(parse_error::error);
 3268|     26|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.70k|{
 2146|  1.70k|    auto it = read_code_unit(range);
 2147|  1.70k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.70k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.70k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.70k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.70k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.70k|        return unexpected(parse_error::error);
 2154|  1.70k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.70k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    836|{
 3251|    836|    return read_matching_string_classic_nocase(range, "0x");
 3252|    836|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     16|{
 3274|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 16]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 16]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     16|    {
 3281|     16|        bool zero_parsed{false};
 3282|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 16]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     16|    }
 3286|     16|    return {range.begin(), 10, false};
 3287|     16|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.46k|{
 3360|  2.46k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.46k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.46k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.46k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.46k|        return range.end();
 3369|  2.46k|    }
 3370|  2.46k|    else {
 3371|  2.46k|        return read_while1_code_unit(range,
 3372|  2.46k|                                     [&](char_type ch) noexcept {
 3373|  2.46k|                                         return char_to_int(ch) < base;
 3374|  2.46k|                                     })
 3375|  2.46k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.46k|                scan_error::invalid_scanned_value,
 3377|  2.46k|                "Failed to parse integer: No digits found"));
 3378|  2.46k|    }
 3379|  2.46k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     28|{
 3390|     28|    std::basic_string<CharT> output;
 3391|     28|    std::string thsep_indices;
 3392|     28|    auto it = range.begin();
 3393|     28|    bool digit_matched = false;
 3394|     28|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 28, False: 0]
  ------------------
 3395|     28|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 28]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     28|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 28, False: 0]
  ------------------
 3400|     28|            break;
 3401|     28|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     28|    }
 3407|     28|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 3408|     28|        return unexpected_scan_error(
 3409|     28|            scan_error::invalid_scanned_value,
 3410|     28|            "Failed to parse integer: No digits found");
 3411|     28|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     28|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  10.0k|{
 1683|  10.0k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  10.0k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  10.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  10.0k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  10.0k|    }
 1688|  10.0k|    else {
 1689|  10.0k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  10.0k|    }
 1691|  10.0k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  10.0k|    {
 1490|  10.0k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  11.7k|    {
 1503|  11.7k|        return sv;
 1504|  11.7k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|    416|{
 5951|    416|    using char_type = detail::char_t<Range>;
 5952|    416|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    416|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 416, False: 0]
  ------------------
 5955|    416|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    416|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    416|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 376, False: 40]
  ------------------
 5959|    376|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|    376|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 42, False: 334]
  ------------------
 5962|     42|                auto prefix_width =
 5963|     42|                    static_cast<std::ptrdiff_t>(
 5964|     42|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|     42|                    ranges::distance(range.begin(), it);
 5966|     42|                return result_type{it, prefix_width};
 5967|     42|            }
 5968|    334|            return result_type{it, 0};
 5969|    376|        }
 5970|       |
 5971|     40|        auto max_width_view = take_width(range, max_width);
 5972|     40|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|     40|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 40, False: 0]
  ------------------
 5975|     40|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|     40|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|     40|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|    436|{
 1976|    436|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    436|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|    556|{
 1957|    556|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    556|        return std::find_if(range.begin(), range.end(), pred);
 1959|    556|    }
 1960|    556|    else {
 1961|    556|        auto first = range.begin();
 1962|    556|        for (; first != range.end(); ++first) {
 1963|    556|            if (pred(*first)) {
 1964|    556|                return first;
 1965|    556|            }
 1966|    556|        }
 1967|    556|        return first;
 1968|    556|    }
 1969|    556|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_:
  753|    416|    {
  754|    416|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|    690|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    690|              cvref<T> obj = *get<T>(fn);
  745|    690|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    690|                  obj(static_cast<decltype(args)>(args)...);
  747|    690|              }
  748|    690|              else {
  749|    690|                  return obj(static_cast<decltype(args)>(args)...);
  750|    690|              }
  751|    690|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    690|    {
  684|    690|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    690|            return static_cast<T*>(s.m_cp);
  686|    690|        }
  687|    690|        else if constexpr (std::is_object_v<T>) {
  688|    690|            return static_cast<T*>(s.m_p);
  689|    690|        }
  690|    690|        else {
  691|    690|            return reinterpret_cast<T*>(s.m_fp);
  692|    690|        }
  693|    690|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    690|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSH_:
  666|    416|        {
  667|    416|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|     40|{
 1976|     40|    return read_until_code_unit(range, std::not_fn(pred));
 1977|     40|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    100|{
 1957|    100|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    100|        return std::find_if(range.begin(), range.end(), pred);
 1959|    100|    }
 1960|    100|    else {
 1961|    100|        auto first = range.begin();
 1962|  1.17k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.11k, False: 62]
  ------------------
 1963|  1.11k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 38, False: 1.07k]
  ------------------
 1964|     38|                return first;
 1965|     38|            }
 1966|  1.11k|        }
 1967|     62|        return first;
 1968|    100|    }
 1969|    100|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    104|{
 2951|    104|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 104]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    104|    return read_while_classic_space(range);
 2962|    104|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    104|{
 2117|    104|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    104|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    104|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    104|        auto buf = make_contiguous_buffer(range);
 2121|    104|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    104|        return ranges::next(range.begin(),
 2123|    104|                            ranges::distance(buf.view().begin(), it));
 2124|    104|    }
 2125|    104|    else {
 2126|    104|        auto it = range.begin();
 2127|       |
 2128|    104|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    104|            auto seg = get_contiguous_beginning(range);
 2130|    104|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    104|                seg_it != seg.end()) {
 2132|    104|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|    104|            }
 2134|    104|            ranges::advance(it, seg.size());
 2135|    104|        }
 2136|       |
 2137|    104|        return read_while_code_point(
 2138|    104|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    104|    }
 2140|    104|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|    104|{
 2082|    104|    return read_until_code_point(range, std::not_fn(pred));
 2083|    104|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|    104|{
 2061|    104|    auto it = range.begin();
 2062|    104|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 104, False: 0]
  ------------------
 2063|    104|        const auto val =
 2064|    104|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|    104|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|    104|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 104, False: 0]
  |  |  ------------------
  ------------------
 2066|    104|            const auto cp = detail::decode_code_point_exhaustive(
 2067|    104|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|    104|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 104, False: 0]
  ------------------
 2069|    104|                return it;
 2070|    104|            }
 2071|    104|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|    104|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  10.0k|{
 1899|  10.0k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  10.0k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  10.0k|    auto it = range.begin();
 1903|  10.0k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  10.0k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10.0k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  10.0k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 10.0k, False: 0]
  ------------------
 1912|  10.0k|        ++it;
 1913|  10.0k|        return {it, string_type(1, *range.begin())};
 1914|  10.0k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  10.0k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    104|    {
  754|    104|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|    104|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    104|              cvref<T> obj = *get<T>(fn);
  745|    104|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    104|                  obj(static_cast<decltype(args)>(args)...);
  747|    104|              }
  748|    104|              else {
  749|    104|                  return obj(static_cast<decltype(args)>(args)...);
  750|    104|              }
  751|    104|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    104|    {
  684|    104|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    104|            return static_cast<T*>(s.m_cp);
  686|    104|        }
  687|    104|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    104|            return static_cast<T*>(s.m_p);
  689|    104|        }
  690|    104|        else {
  691|    104|            return reinterpret_cast<T*>(s.m_fp);
  692|    104|        }
  693|    104|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|    104|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    104|        {
  662|    104|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  6.81k|{
 2951|  6.81k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 6.34k, False: 478]
  ------------------
 2952|  6.34k|        auto it = read_while_classic_space(range);
 2953|  6.34k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  6.34k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.34k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  6.34k|        return it;
 2959|  6.34k|    }
 2960|       |
 2961|    478|    return read_while_classic_space(range);
 2962|  6.81k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  8.69k|{
 2117|  8.69k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  8.69k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  8.69k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  8.69k|        auto buf = make_contiguous_buffer(range);
 2121|  8.69k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  8.69k|        return ranges::next(range.begin(),
 2123|  8.69k|                            ranges::distance(buf.view().begin(), it));
 2124|  8.69k|    }
 2125|  8.69k|    else {
 2126|  8.69k|        auto it = range.begin();
 2127|       |
 2128|  8.69k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  8.69k|            auto seg = get_contiguous_beginning(range);
 2130|  8.69k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  8.69k|                seg_it != seg.end()) {
 2132|  8.69k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  8.69k|            }
 2134|  8.69k|            ranges::advance(it, seg.size());
 2135|  8.69k|        }
 2136|       |
 2137|  8.69k|        return read_while_code_point(
 2138|  8.69k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  8.69k|    }
 2140|  8.69k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  8.87k|{
 2082|  8.87k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  8.87k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  11.3k|{
 2061|  11.3k|    auto it = range.begin();
 2062|  45.1k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 42.4k, False: 2.78k]
  ------------------
 2063|  42.4k|        const auto val =
 2064|  42.4k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  42.4k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  42.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 42.4k, False: 0]
  |  |  ------------------
  ------------------
 2066|  42.4k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  42.4k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  42.4k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 8.60k, False: 33.8k]
  ------------------
 2069|  8.60k|                return it;
 2070|  8.60k|            }
 2071|  42.4k|        }
 2072|  33.8k|        it = val.iterator;
 2073|  33.8k|    }
 2074|       |
 2075|  2.78k|    return it;
 2076|  11.3k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  8.69k|    {
  754|  8.69k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  10.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.2k|              cvref<T> obj = *get<T>(fn);
  745|  10.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  10.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  10.2k|              }
  748|  10.2k|              else {
  749|  10.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.2k|              }
  751|  10.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  10.2k|    {
  684|  10.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  10.2k|            return static_cast<T*>(s.m_cp);
  686|  10.2k|        }
  687|  10.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  10.2k|            return static_cast<T*>(s.m_p);
  689|  10.2k|        }
  690|  10.2k|        else {
  691|  10.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  10.2k|        }
  693|  10.2k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  10.2k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  8.69k|        {
  662|  8.69k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  5.35k|    {
 3040|  5.35k|        reader_error_handler eh{};
 3041|  5.35k|        get_derived().check_specs_impl(specs, eh);
 3042|  5.35k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.33k, False: 1.02k]
  |  |  ------------------
  ------------------
 3043|  4.33k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.33k|        }
 3045|  1.02k|        return {};
 3046|  5.35k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|  5.35k|    {
 3051|  5.35k|        return static_cast<Derived&>(*this);
 3052|  5.35k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  5.35k|    {
 3485|  5.35k|        detail::check_int_type_specs(specs, eh);
 3486|  5.35k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|  1.98k|    {
 3035|  1.98k|        return true;
 3036|  1.98k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    154|    {
 3539|    154|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    154|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    154|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    154|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    154|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 154]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    154|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    154|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    154|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    154|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 154]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    154|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 154]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    154|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    154|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 140, False: 14]
  |  |  ------------------
  ------------------
 3565|    140|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    140|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    140|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    140|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 140, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    140|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    140|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    140|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    140|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    140|    }                                                  \
  |  |  |  | 3671|    140|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     14|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     14|            localized_number_formatting_options<CharT>{loc};
 3586|     14|#endif
 3587|       |
 3588|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    356|    {
 3539|    356|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    356|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 356]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    356|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    356|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 356]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    356|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 356]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    356|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    356|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 342, False: 14]
  |  |  ------------------
  ------------------
 3565|    342|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    342|                    parse_integer_digits_without_thsep(
 3567|    342|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    342|                        prefix_result.parsed_base));
 3569|       |
 3570|    342|            auto buf = make_contiguous_buffer(
 3571|    342|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    342|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 342, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    342|    }                                                  \
  |  |  |  | 3671|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    342|        }
 3580|       |
 3581|     14|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     14|            localized_number_formatting_options<CharT>{loc};
 3586|     14|#endif
 3587|       |
 3588|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    122|    {
 3539|    122|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    122|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    122|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    122|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    122|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 122]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    122|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    122|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    122|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    122|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 122]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    122|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 122]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    122|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    122|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 122, False: 0]
  |  |  ------------------
  ------------------
 3565|    122|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    122|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    122|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    122|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    122|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 122, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    122|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    122|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    122|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    122|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    122|    }                                                  \
  |  |  |  | 3671|    122|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    804|    {
 3539|    804|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    804|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    804|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    804|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 804]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    804|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    804|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    804|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    804|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 804]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    804|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 804]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    804|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    804|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 804, False: 0]
  |  |  ------------------
  ------------------
 3565|    804|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    804|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    804|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    804|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 804]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    804|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    804|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    804|                    parse_integer_digits_without_thsep(
 3567|    804|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    804|                        prefix_result.parsed_base));
 3569|       |
 3570|    804|            auto buf = make_contiguous_buffer(
 3571|    804|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    804|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    804|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    804|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    804|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 804, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    804|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    804|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    804|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    804|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    804|    }                                                  \
  |  |  |  | 3671|    804|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    804|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  2.67k|    {
 3040|  2.67k|        reader_error_handler eh{};
 3041|  2.67k|        get_derived().check_specs_impl(specs, eh);
 3042|  2.67k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.18k, False: 490]
  |  |  ------------------
  ------------------
 3043|  2.18k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  2.18k|        }
 3045|    490|        return {};
 3046|  2.67k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|  2.67k|    {
 3051|  2.67k|        return static_cast<Derived&>(*this);
 3052|  2.67k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  2.67k|    {
 4145|  2.67k|        detail::check_float_type_specs(specs, eh);
 4146|  2.67k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|    970|    {
 3035|    970|        return true;
 3036|    970|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|    486|    {
 4217|    486|        unsigned options{};
 4218|    486|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 14, False: 472]
  ------------------
 4219|     14|            options |= float_reader_base::allow_thsep;
 4220|     14|        }
 4221|       |
 4222|    486|        SCN_GCC_COMPAT_PUSH
 4223|    486|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    486|        switch (specs.type) {
 4226|     10|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 10, False: 476]
  ------------------
 4227|     10|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 4, False: 482]
  ------------------
 4230|      4|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     18|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 18, False: 468]
  ------------------
 4233|     18|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 0, False: 486]
  ------------------
 4236|      0|                return options | float_reader_base::allow_scientific |
 4237|      0|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    454|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 454, False: 32]
  ------------------
 4240|    454|                return options | float_reader_base::allow_scientific |
 4241|    454|                       float_reader_base::allow_fixed |
 4242|    454|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 486]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    486|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    486|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    486|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|    486|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|    966|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.93k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|    818|    {
 4057|    818|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 818, False: 0]
  ------------------
 4058|    818|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 818, False: 0]
  ------------------
 4059|    818|            return;
 4060|    818|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|    160|    {
 1587|    160|        return m_storage.has_value();
 1588|    160|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|     80|    {
 1592|     80|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|     80|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     80|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|     80|        return *m_storage;
 1594|     80|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    142|    {
  763|    142|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    142|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    142|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    142|    {
 3705|    142|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    142|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    142|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    142|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    142|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 142]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    142|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    142|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    142|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    142|        auto it = sign_result.first;
 3708|    142|        m_sign = sign_result.second;
 3709|       |
 3710|    142|        auto digits_begin = it;
 3711|    142|        auto r = ranges::subrange{it, range.end()};
 3712|    142|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    142|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    142|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    142|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    142|                SCN_TRY_ASSIGN(
 3717|    142|                    it,
 3718|    142|                    do_read_source_impl(
 3719|    142|                        r,
 3720|    142|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    142|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    142|            }
 3723|    142|            else {
 3724|    142|                auto cb = [&](const auto& rr)
 3725|    142|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    142|                    auto res = read_all(rr);
 3727|    142|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    142|                        return unexpected_scan_error(
 3729|    142|                            scan_error::invalid_scanned_value,
 3730|    142|                            "Invalid float value");
 3731|    142|                    }
 3732|    142|                    return res;
 3733|    142|                };
 3734|    142|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    142|            }
 3736|    142|        }
 3737|    142|        else {
 3738|    142|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    142|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    142|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    142|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 142, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    142|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    142|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    142|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    142|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    142|    }                                                  \
  |  | 3671|    142|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    142|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    142|    {
 4000|    142|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    142|        const bool allowed_nonhex =
 4002|    142|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    142|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    142|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 142, False: 0]
  |  Branch (4005:45): [True: 0, False: 142]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    142|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 142]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    142|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 142, False: 0]
  |  Branch (4014:45): [True: 0, False: 142]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    142|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 142]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    142|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 134, False: 8]
  |  Branch (4021:28): [True: 6, False: 128]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      6|            auto it = range.begin();
 4025|       |
 4026|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 6]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      6|            else {
 4031|      6|                m_kind = float_kind::hex_without_prefix;
 4032|      6|            }
 4033|       |
 4034|      6|            return read_hex(ranges::subrange{it, range.end()});
 4035|      6|        }
 4036|    136|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 8, False: 128]
  |  Branch (4036:29): [True: 8, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      8|            m_kind = float_kind::generic;
 4040|      8|            return read_regular_float(range);
 4041|      8|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    128|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 128]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    128|        m_kind = float_kind::generic;
 4052|    128|        return read_regular(range);
 4053|    128|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    142|    {
 3811|    142|        auto it = range.begin();
 3812|    142|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 142, False: 0]
  ------------------
 3813|    142|            return unexpected(r.error());
 3814|    142|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    142|    {
 3834|    142|        auto it = range.begin();
 3835|    142|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 142, False: 0]
  ------------------
 3836|    142|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    142|                scan_error::invalid_scanned_value,
 3838|    142|                "Invalid floating-point NaN value"));
 3839|    142|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    134|    {
 3804|    134|        return read_matching_string_classic_nocase(range, "0x");
 3805|    134|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      6|    {
 3904|      6|        auto it = range.begin();
 3905|       |
 3906|      6|        std::ptrdiff_t digits_count = 0;
 3907|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3909|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      6|                scan_error::invalid_scanned_value,
 3911|      6|                "Invalid hexadecimal floating-point value"));
 3912|      6|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      6|    {
 3789|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      6|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      6|        return read_while1_code_unit(
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      6|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    136|    {
 3944|    136|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    136|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 130, False: 6]
  |  Branch (3945:50): [True: 2, False: 128]
  ------------------
 3946|       |
 3947|    136|        auto it = ranges::begin(range);
 3948|    136|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    136|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    136|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 136, False: 0]
  |  |  ------------------
  ------------------
 3952|    136|            return r.transform_error(
 3953|    136|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    136|                                              "Invalid floating-point value"));
 3955|    136|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    136|    {
 3774|    136|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 136]
  |  |  |  Branch (859:45): [True: 0, False: 136]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    136|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    136|        return read_while1_code_unit(
 3783|    136|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    136|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|    136|    {
  754|    136|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|    136|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    136|              cvref<T> obj = *get<T>(fn);
  745|    136|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    136|                  obj(static_cast<decltype(args)>(args)...);
  747|    136|              }
  748|    136|              else {
  749|    136|                  return obj(static_cast<decltype(args)>(args)...);
  750|    136|              }
  751|    136|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    136|    {
  684|    136|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    136|            return static_cast<T*>(s.m_cp);
  686|    136|        }
  687|    136|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    136|            return static_cast<T*>(s.m_p);
  689|    136|        }
  690|    136|        else {
  691|    136|            return reinterpret_cast<T*>(s.m_fp);
  692|    136|        }
  693|    136|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3783|    136|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|    136|        {
  662|    136|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    134|    {
 3665|    134|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    134|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 134]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    134|        return read_source_impl(range);
 3671|    134|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    824|    {
  763|    824|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    824|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    824|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|      6|    {
 3679|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      6|        return read_source_impl(range);
 3685|      6|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    824|    {
 3705|    824|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    824|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    824|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    824|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    824|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 824]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    824|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    824|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    824|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    824|        auto it = sign_result.first;
 3708|    824|        m_sign = sign_result.second;
 3709|       |
 3710|    824|        auto digits_begin = it;
 3711|    824|        auto r = ranges::subrange{it, range.end()};
 3712|    824|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    824|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    824|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 824]
  |  |  |  Branch (859:45): [True: 0, False: 824]
  |  |  |  Branch (859:45): [True: 0, False: 824]
  |  |  ------------------
  ------------------
 3715|    824|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    824|            else {
 3724|    824|                auto cb = [&](const auto& rr)
 3725|    824|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    824|                    auto res = read_all(rr);
 3727|    824|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    824|                        return unexpected_scan_error(
 3729|    824|                            scan_error::invalid_scanned_value,
 3730|    824|                            "Invalid float value");
 3731|    824|                    }
 3732|    824|                    return res;
 3733|    824|                };
 3734|    824|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|    824|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    824|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    824|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6, False: 818]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      6|    }                                                  \
  |  | 3671|    824|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    824|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    818|            }
 3736|    824|        }
 3737|    818|        else {
 3738|    818|            SCN_TRY_ASSIGN(
 3739|    818|                it,
 3740|    818|                do_read_source_impl(
 3741|    818|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|    818|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|    818|        }
 3744|       |
 3745|    818|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    818|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    818|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    818|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 818, False: 0]
  |  Branch (3747:48): [True: 818, False: 0]
  ------------------
 3748|    818|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 818, False: 0]
  ------------------
 3749|    818|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 818, False: 0]
  ------------------
 3750|    818|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    818|        }
 3752|       |
 3753|    818|        handle_separators();
 3754|       |
 3755|    818|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 818]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    818|        return it;
 3768|    818|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    824|    {
 3811|    824|        auto it = range.begin();
 3812|    824|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 824, False: 0]
  ------------------
 3813|    824|            return unexpected(r.error());
 3814|    824|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    824|    {
 3834|    824|        auto it = range.begin();
 3835|    824|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 824, False: 0]
  ------------------
 3836|    824|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    824|                scan_error::invalid_scanned_value,
 3838|    824|                "Invalid floating-point NaN value"));
 3839|    824|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    818|    {
 3804|    818|        return read_matching_string_classic_nocase(range, "0x");
 3805|    818|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|      6|{
 1996|      6|    auto it = read_while_code_unit(range, pred);
 1997|      6|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 6, False: 0]
  ------------------
 1998|      6|        return unexpected(parse_error::error);
 1999|      6|    }
 2000|      0|    return it;
 2001|      6|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|      6|    {
 3944|      6|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|      6|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 2, False: 4]
  |  Branch (3945:50): [True: 2, False: 0]
  ------------------
 3946|       |
 3947|      6|        auto it = ranges::begin(range);
 3948|      6|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|      6|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3952|      6|            return r.transform_error(
 3953|      6|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|      6|                                              "Invalid floating-point value"));
 3955|      6|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|      6|    {
 3774|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|      6|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|      6|        return read_while1_code_unit(
 3783|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|      6|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    824|    {
 4000|    824|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    824|        const bool allowed_nonhex =
 4002|    824|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    824|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    824|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 824, False: 0]
  |  Branch (4005:45): [True: 0, False: 824]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    824|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 824]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    824|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 824, False: 0]
  |  Branch (4014:45): [True: 0, False: 824]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    824|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 824]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    824|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 818, False: 6]
  |  Branch (4021:28): [True: 12, False: 806]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     12|            auto it = range.begin();
 4025|       |
 4026|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 12]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     12|            else {
 4031|     12|                m_kind = float_kind::hex_without_prefix;
 4032|     12|            }
 4033|       |
 4034|     12|            return read_hex(ranges::subrange{it, range.end()});
 4035|     12|        }
 4036|    812|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 6, False: 806]
  |  Branch (4036:29): [True: 6, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      6|            m_kind = float_kind::generic;
 4040|      6|            return read_regular_float(range);
 4041|      6|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    806|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    806|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 806]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    806|        m_kind = float_kind::generic;
 4052|    806|        return read_regular(range);
 4053|    806|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    818|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    818|                    auto res = read_all(rr);
 3727|    818|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    818|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 818]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    818|                    return res;
 3733|    818|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    818|{
 1839|    818|    return ranges::next(range.begin(), range.end());
 1840|    818|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    818|    {
  313|    818|        ranges::advance(x, bound);
  314|    818|        return x;
  315|    818|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    818|    {
  275|    818|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    818|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|    818|    {
 1577|    818|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    818|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    818|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|    818|    {
 1621|    818|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    818|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    818|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    818|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    818|            m_storage.reset();
 1627|    818|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    818|        }
 1629|    818|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    818|                                          std::basic_string<CharT>>) {
 1631|    818|            m_storage.emplace(SCN_FWD(range));
 1632|    818|            m_view = string_view_type{*m_storage};
 1633|    818|        }
 1634|    818|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    818|                                          typename detail::basic_scan_buffer<
 1636|    818|                                              value_t>::forward_iterator> &&
 1637|    818|                           ranges::common_range<Range>) {
 1638|    818|            auto beg_seg = range.begin().contiguous_segment();
 1639|    818|            auto end_seg = range.end().contiguous_segment();
 1640|    818|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    818|                             detail::to_address(end_seg.end()))) {
 1642|    818|                auto& str = m_storage.emplace();
 1643|    818|                str.reserve(range.end().position() - range.begin().position());
 1644|    818|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    818|                m_view = string_view_type{str};
 1646|    818|                return;
 1647|    818|            }
 1648|       |
 1649|    818|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    818|                                                            end_seg.data());
 1651|    818|            m_storage.reset();
 1652|    818|        }
 1653|    818|        else {
 1654|    818|            auto& str = m_storage.emplace();
 1655|    818|            if constexpr (ranges::sized_range<Range>) {
 1656|    818|                str.reserve(range.size());
 1657|    818|            }
 1658|    818|            if constexpr (ranges::common_range<Range>) {
 1659|    818|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    818|                          std::back_inserter(str));
 1661|    818|            }
 1662|    818|            else {
 1663|    818|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    818|                     ++it) {
 1665|    818|                    str.push_back(*it);
 1666|    818|                }
 1667|    818|            }
 1668|    818|            m_view = string_view_type{str};
 1669|    818|        }
 1670|    818|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    818|    {
 3665|    818|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    818|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 818]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    818|        return read_source_impl(range);
 3671|    818|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    818|    {
 3691|    818|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    818|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    818|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    818|        const std::ptrdiff_t sign_len =
 3694|    818|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 818]
  ------------------
 3695|       |
 3696|    818|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|    818|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    818|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    818|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    818|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 818, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    818|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    818|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    818|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    818|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    818|    }                                                  \
  |  |  |  | 3671|    818|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    818|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    142|    {
 4170|    142|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    142|#if !SCN_DISABLE_LOCALE
 4173|    142|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 134]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    134|#endif
 4182|       |
 4183|    134|        return read_impl<Range>(
 4184|    134|            range, rd,
 4185|    134|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    134|                return r.read_source(SCN_FWD(args)...);
 4187|    134|            },
 4188|    134|            value);
 4189|    142|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    142|    {
 4206|    142|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    142|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    142|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 142, False: 0]
  |  |  ------------------
  ------------------
 4208|    142|            return unexpected(r.error());
 4209|    142|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSL_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    134|    {
  754|    134|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    134|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    134|              cvref<T> obj = *get<T>(fn);
  745|    134|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    134|                  obj(static_cast<decltype(args)>(args)...);
  747|    134|              }
  748|    134|              else {
  749|    134|                  return obj(static_cast<decltype(args)>(args)...);
  750|    134|              }
  751|    134|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    134|    {
  684|    134|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    134|            return static_cast<T*>(s.m_cp);
  686|    134|        }
  687|    134|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    134|            return static_cast<T*>(s.m_p);
  689|    134|        }
  690|    134|        else {
  691|    134|            return reinterpret_cast<T*>(s.m_fp);
  692|    134|        }
  693|    134|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    134|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    134|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    134|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    134|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSL_:
  661|    134|        {
  662|    134|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    344|    {
 4170|    344|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    344|#if !SCN_DISABLE_LOCALE
 4173|    344|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 6, False: 338]
  ------------------
 4174|      6|            return read_impl<Range>(
 4175|      6|                range, rd,
 4176|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      6|                },
 4179|      6|                value, loc);
 4180|      6|        }
 4181|    338|#endif
 4182|       |
 4183|    338|        return read_impl<Range>(
 4184|    338|            range, rd,
 4185|    338|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    338|                return r.read_source(SCN_FWD(args)...);
 4187|    338|            },
 4188|    338|            value);
 4189|    344|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    824|    {
 4206|    824|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    824|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    824|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 818]
  |  |  ------------------
  ------------------
 4208|      6|            return unexpected(r.error());
 4209|      6|        }
 4210|       |
 4211|    818|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|    818|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    818|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    818|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    818|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 818, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    818|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    818|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    818|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    818|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    818|    }                                                  \
  |  |  |  | 3671|    818|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    818|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      6|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    338|    {
  754|    338|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    338|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    338|              cvref<T> obj = *get<T>(fn);
  745|    338|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    338|                  obj(static_cast<decltype(args)>(args)...);
  747|    338|              }
  748|    338|              else {
  749|    338|                  return obj(static_cast<decltype(args)>(args)...);
  750|    338|              }
  751|    338|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    338|    {
  684|    338|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    338|            return static_cast<T*>(s.m_cp);
  686|    338|        }
  687|    338|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    338|            return static_cast<T*>(s.m_p);
  689|    338|        }
  690|    338|        else {
  691|    338|            return reinterpret_cast<T*>(s.m_fp);
  692|    338|        }
  693|    338|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    338|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    338|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    338|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    338|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    338|        {
  662|    338|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5808|  3.12k|{
 5809|  3.12k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  3.12k|        return reader_impl_for_bool<CharT>{};
 5811|  3.12k|    }
 5812|  3.12k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  3.12k|        return reader_impl_for_char<CharT>{};
 5814|  3.12k|    }
 5815|  3.12k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  3.12k|        return reader_impl_for_wchar<CharT>{};
 5817|  3.12k|    }
 5818|  3.12k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  3.12k|        return reader_impl_for_code_point<CharT>{};
 5820|  3.12k|    }
 5821|  3.12k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  3.12k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  3.12k|        return reader_impl_for_string<CharT>{};
 5824|  3.12k|    }
 5825|  3.12k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  3.12k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  3.12k|        return reader_impl_for_string<CharT>{};
 5828|  3.12k|    }
 5829|  3.12k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  3.12k|                       std::is_same_v<T, wregex_matches>) {
 5831|  3.12k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  3.12k|    }
 5833|  3.12k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  3.12k|        return reader_impl_for_voidptr<CharT>{};
 5835|  3.12k|    }
 5836|  3.12k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  3.12k|        return reader_impl_for_float<CharT>{};
 5838|  3.12k|    }
 5839|  3.12k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  3.12k|                       !std::is_same_v<T, wchar_t> &&
 5841|  3.12k|                       !std::is_same_v<T, char32_t> &&
 5842|  3.12k|                       !std::is_same_v<T, bool>) {
 5843|  3.12k|        return reader_impl_for_int<CharT>{};
 5844|  3.12k|    }
 5845|  3.12k|    else {
 5846|  3.12k|        return reader_impl_for_monostate<CharT>{};
 5847|  3.12k|    }
 5848|  3.12k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  9.36k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  7.92k|    {
 3040|  7.92k|        reader_error_handler eh{};
 3041|  7.92k|        get_derived().check_specs_impl(specs, eh);
 3042|  7.92k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  7.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 234, False: 7.68k]
  |  |  ------------------
  ------------------
 3043|    234|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    234|        }
 3045|  7.68k|        return {};
 3046|  7.92k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  7.92k|    {
 3051|  7.92k|        return static_cast<Derived&>(*this);
 3052|  7.92k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  7.92k|    {
 5210|  7.92k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  7.92k|        SCN_GCC_PUSH
 5213|  7.92k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  7.92k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  7.92k|        SCN_CLANG_PUSH
 5217|  7.92k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  7.92k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  7.92k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 228, False: 7.69k]
  ------------------
 5221|  1.33k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.33k, False: 6.58k]
  ------------------
 5222|  1.33k|                m_type = reader_type::word;
 5223|  1.33k|                break;
 5224|       |
 5225|    204|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 204, False: 7.71k]
  ------------------
 5226|    204|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 72, False: 132]
  ------------------
 5227|    204|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 84, False: 48]
  ------------------
 5228|    156|                    m_type = reader_type::custom_word;
 5229|    156|                }
 5230|     48|                else {
 5231|     48|                    m_type = reader_type::word;
 5232|     48|                }
 5233|    204|                break;
 5234|      0|            }
 5235|       |
 5236|     60|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 60, False: 7.86k]
  ------------------
 5237|     60|                m_type = reader_type::character;
 5238|     60|                break;
 5239|       |
 5240|    336|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 336, False: 7.58k]
  ------------------
 5241|    336|                m_type = reader_type::character_set;
 5242|    336|                break;
 5243|       |
 5244|  5.55k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 5.55k, False: 2.36k]
  ------------------
 5245|  5.55k|                m_type = reader_type::regex;
 5246|  5.55k|                break;
 5247|       |
 5248|    204|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 204, False: 7.71k]
  ------------------
 5249|    204|                m_type = reader_type::regex_escaped;
 5250|    204|                break;
 5251|  7.92k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  7.92k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  10.3k|    {
 5259|  10.3k|        return m_type == reader_type::word;
 5260|  10.3k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  5.27k|{
 1132|  5.27k|    auto it = src.begin();
 1133|  44.6k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 40.9k, False: 3.73k]
  ------------------
 1134|  40.9k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  40.9k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 40.9k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  40.9k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 40.9k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  40.9k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  40.9k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  40.9k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.54k, False: 39.3k]
  ------------------
 1144|  1.54k|            return false;
 1145|  1.54k|        }
 1146|  39.3k|        it += len;
 1147|  39.3k|    }
 1148|  3.73k|    return true;
 1149|  5.27k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|     80|{
 2993|     80|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|     80|        if (source.stores_allocated_string()) {
 2995|     80|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|     80|        }
 2997|     80|        else {
 2998|     80|            dest.assign(source.view());
 2999|     80|        }
 3000|     80|    }
 3001|     80|    else {
 3002|     80|        return transcode_impl(source.view(), dest);
 3003|     80|    }
 3004|       |
 3005|      0|    return {};
 3006|     80|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|    934|{
 2968|    934|    dst.clear();
 2969|    934|    transcode_valid_to_string(src, dst);
 2970|    934|    return {};
 2971|    934|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|    934|{
 1403|    934|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|    934|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|    934|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|    934|        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|    934|            std::u32string tmp;
 1410|    934|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|    934|            return transcode_to_string_impl_32to16<true>(
 1412|    934|                std::u32string_view{tmp}, dest);
 1413|    934|        }
 1414|    934|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|    934|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|    934|        }
 1417|    934|    }
 1418|    934|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1418:24): [Folded - Ignored]
  ------------------
 1419|    934|        if constexpr (sizeof(DestCharT) == 1) {
 1420|    934|            std::u32string tmp;
 1421|    934|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|    934|            return transcode_to_string_impl_32to8<true>(
 1423|    934|                std::u32string_view{tmp}, dest);
 1424|    934|        }
 1425|    934|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|    934|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|    934|        }
 1428|    934|    }
 1429|    934|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1429:24): [Folded - Ignored]
  ------------------
 1430|    934|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1430:23): [Folded - Ignored]
  ------------------
 1431|    934|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|    934|        }
 1433|    934|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|    934|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|    934|        }
 1436|    934|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|    934|{
 1294|    934|    static_assert(sizeof(SourceCharT) == 4);
 1295|    934|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  7.35k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 7.35k, False: 934]
  ------------------
 1298|  7.35k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  7.35k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  7.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  7.35k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 6.06k, False: 1.29k]
  ------------------
 1306|  6.06k|            dest.push_back(static_cast<char>(cp));
 1307|  6.06k|        }
 1308|  1.29k|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 132, False: 1.15k]
  ------------------
 1309|    132|            dest.push_back(
 1310|    132|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|    132|            dest.push_back(
 1312|    132|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|    132|        }
 1314|  1.15k|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 806, False: 352]
  ------------------
 1315|    806|            dest.push_back(
 1316|    806|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|    806|            dest.push_back(static_cast<char>(
 1318|    806|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|    806|            dest.push_back(
 1320|    806|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|    806|        }
 1322|    352|        else {
 1323|    352|            dest.push_back(
 1324|    352|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    352|            dest.push_back(static_cast<char>(
 1326|    352|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    352|            dest.push_back(static_cast<char>(
 1328|    352|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    352|            dest.push_back(
 1330|    352|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    352|        }
 1332|  7.35k|    }
 1333|    934|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|    336|        {
 5103|    336|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 84, False: 252]
  ------------------
 5104|     84|                return {};
 5105|     84|            }
 5106|       |
 5107|    252|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|    252|            auto it = detail::to_address(charset_string.begin());
 5109|    252|            auto set = detail::parse_presentation_set(
 5110|    252|                it, detail::to_address(charset_string.end()), nonascii);
 5111|    252|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|    252|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|    252|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    252|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|    252|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|    252|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    252|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|    252|            std::sort(nonascii.extra_ranges.begin(),
 5118|    252|                      nonascii.extra_ranges.end());
 5119|    252|            return {};
 5120|    252|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|  3.88k|        {
 5138|  3.88k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 1.14k, False: 2.74k]
  ------------------
 5139|  1.14k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  1.14k|            }
 5141|       |
 5142|  2.74k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|  3.88k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  1.14k|        {
 5086|       |            // TODO: binary search?
 5087|  1.14k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 1.14k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  1.14k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  1.14k|            return std::find_if(
 5093|  1.14k|                       nonascii.extra_ranges.begin(),
 5094|  1.14k|                       nonascii.extra_ranges.end(),
 5095|  1.14k|                       [cp_val](const auto& pair) noexcept {
 5096|  1.14k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  1.14k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  1.14k|                       }) != nonascii.extra_ranges.end();
 5099|  1.14k|        }
_ZZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  10.1k|                       [cp_val](const auto& pair) noexcept {
 5096|  10.1k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 10.0k, False: 108]
  ------------------
 5097|  10.1k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 1.09k, False: 8.94k]
  ------------------
 5098|  10.1k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  3.91k|        {
 5076|  3.91k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  3.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  3.91k|            const auto val =
 5078|  3.91k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  3.91k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  3.91k|                    (val % 8)) &
 5081|  3.91k|                   1u;
 5082|  3.91k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  1.18k|        {
 5129|  1.18k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 12, False: 1.17k]
  ------------------
 5130|     12|                return false;
 5131|     12|            }
 5132|       |
 5133|  1.17k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  1.18k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|    336|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    168|    {
 5277|    168|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    168|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    168|        return read_impl(range, specs, value);
 5279|    168|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    168|    {
 5295|    168|        SCN_CLANG_PUSH
 5296|    168|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    168|        switch (m_type) {
 5299|    124|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 124, False: 44]
  ------------------
 5300|    124|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 148]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     18|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 18, False: 150]
  ------------------
 5307|     18|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 168]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 166]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 164]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 168]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    168|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    168|        }
 5331|       |
 5332|    168|        SCN_CLANG_POP
 5333|    168|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    124|    {
 4820|    124|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    124|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    162|{
 4752|    162|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    162|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    162|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 82, False: 80]
  ------------------
 4756|     82|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     82|                                     "Invalid encoding in scanned string");
 4758|     82|    }
 4759|     80|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     80|    static_cast<    \
  |  |  929|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     80|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     80|    return SCN_MOVE(result);
  ------------------
  |  |  928|     80|    static_cast<    \
  |  |  929|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     80|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    372|{
 2088|    372|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    372|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    372|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    372|        auto buf = make_contiguous_buffer(range);
 2092|    372|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    372|        return ranges::next(range.begin(),
 2094|    372|                            ranges::distance(buf.view().begin(), it));
 2095|    372|    }
 2096|    372|    else {
 2097|    372|        auto it = range.begin();
 2098|       |
 2099|    372|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    372|            auto seg = get_contiguous_beginning(range);
 2101|    372|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    372|                seg_it != seg.end()) {
 2103|    372|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|    372|            }
 2105|    372|            ranges::advance(it, seg.size());
 2106|    372|        }
 2107|       |
 2108|    372|        return read_until_code_point(
 2109|    372|            ranges::subrange{it, range.end()},
 2110|    372|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    372|    }
 2112|    372|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    372|{
 2061|    372|    auto it = range.begin();
 2062|  10.3k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 9.96k, False: 336]
  ------------------
 2063|  9.96k|        const auto val =
 2064|  9.96k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  9.96k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  9.96k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.96k, False: 0]
  |  |  ------------------
  ------------------
 2066|  9.96k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  9.96k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  9.96k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 36, False: 9.93k]
  ------------------
 2069|     36|                return it;
 2070|     36|            }
 2071|  9.96k|        }
 2072|  9.93k|        it = val.iterator;
 2073|  9.93k|    }
 2074|       |
 2075|    336|    return it;
 2076|    372|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    372|    {
  754|    372|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  9.96k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.96k|              cvref<T> obj = *get<T>(fn);
  745|  9.96k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.96k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.96k|              }
  748|  9.96k|              else {
  749|  9.96k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.96k|              }
  751|  9.96k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  9.96k|    {
  684|  9.96k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.96k|            return static_cast<T*>(s.m_cp);
  686|  9.96k|        }
  687|  9.96k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  9.96k|            return static_cast<T*>(s.m_p);
  689|  9.96k|        }
  690|  9.96k|        else {
  691|  9.96k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.96k|        }
  693|  9.96k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  9.96k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    372|        {
  662|    372|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     20|    {
 4841|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 20, False: 0]
  ------------------
 4842|     20|            return read_string_impl(
 4843|     20|                range,
 4844|     20|                read_until_code_unit(
 4845|     20|                    range,
 4846|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     20|                        SourceCharT ch) { return ch == until; }),
 4848|     20|                value);
 4849|     20|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|    350|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    350|                  obj(static_cast<decltype(args)>(args)...);
  747|    350|              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|    350|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    350|            return static_cast<T*>(s.m_cp);
  686|    350|        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    350|            return static_cast<T*>(s.m_p);
  689|    350|        }
  690|    350|        else {
  691|    350|            return reinterpret_cast<T*>(s.m_fp);
  692|    350|        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     18|    {
 4947|     18|        return read_impl(
 4948|     18|            range,
 4949|     18|            [&](const auto& rng) {
 4950|     18|                return read_string_impl(rng, read_all(rng), value);
 4951|     18|            },
 4952|     18|            detail::priority_tag<1>{});
 4953|     18|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     18|    {
 4974|     18|        return read_cb(range);
 4975|     18|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     18|            [&](const auto& rng) {
 4950|     18|                return read_string_impl(rng, read_all(rng), value);
 4951|     18|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|     54|{
 1839|     54|    return ranges::next(range.begin(), range.end());
 1840|     54|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     54|    {
  313|     54|        ranges::advance(x, bound);
  314|     54|        return x;
  315|     54|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     54|    {
  275|     54|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     54|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     54|    {
  203|  1.07k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 1.02k, False: 54]
  ------------------
  204|  1.02k|            ++i;
  205|  1.02k|        }
  206|     54|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|      6|    {
 4891|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|      6|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|     18|    {
 4913|     18|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|     36|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|     18|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|     18|            return unexpected_scan_error(
 4916|     18|                scan_error::invalid_scanned_value,
 4917|     18|                "Regex backend doesn't support wide strings as input");
 4918|     18|        }
 4919|     18|        else {
 4920|     18|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 18, False: 0]
  ------------------
 4921|     18|                return unexpected_scan_error(
 4922|     18|                    scan_error::invalid_scanned_value,
 4923|     18|                    "Cannot use regex with a non-contiguous source "
 4924|     18|                    "range");
 4925|     18|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|     18|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  958|     18|{
  959|     18|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|     18|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|     18|        return true;
  962|     18|    }
  963|     18|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|     18|                           ranges::const_iterator_t<Range>,
  965|     18|                           typename detail::basic_scan_buffer<
  966|     18|                               detail::char_t<Range>>::forward_iterator>) {
  967|     18|        auto beg = r.begin();
  968|     18|        if (!beg.stores_parent()) {
  969|     18|            return true;
  970|     18|        }
  971|     18|        return beg.parent()->is_contiguous();
  972|     18|    }
  973|     18|    else {
  974|     18|        return false;
  975|     18|    }
  976|     18|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  2.38k|    {
 5277|  2.38k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.38k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  2.38k|        return read_impl(range, specs, value);
 5279|  2.38k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  2.38k|    {
 5295|  2.38k|        SCN_CLANG_PUSH
 5296|  2.38k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  2.38k|        switch (m_type) {
 5299|    334|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 334, False: 2.05k]
  ------------------
 5300|    334|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     30|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 30, False: 2.35k]
  ------------------
 5303|     30|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     30|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 2.38k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    112|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 112, False: 2.27k]
  ------------------
 5310|    112|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    112|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  1.84k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 1.84k, False: 540]
  ------------------
 5315|  1.84k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  1.84k|                    range, specs.charset_string<SourceCharT>(),
 5317|  1.84k|                    specs.regexp_flags, value);
 5318|       |
 5319|     64|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 64, False: 2.32k]
  ------------------
 5320|     64|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     64|                    range,
 5322|     64|                    get_unescaped_regex_pattern(
 5323|     64|                        specs.charset_string<SourceCharT>()),
 5324|     64|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 2.38k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  2.38k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  2.38k|        }
 5331|       |
 5332|  2.38k|        SCN_CLANG_POP
 5333|  2.38k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    814|    {
 4820|    814|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    814|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    844|{
 4752|    844|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    844|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    844|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 286, False: 558]
  ------------------
 4756|    286|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    286|                                     "Invalid encoding in scanned string");
 4758|    286|    }
 4759|    558|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    558|    static_cast<    \
  |  |  929|    558|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    558|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    558|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 558]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    558|    return SCN_MOVE(result);
  ------------------
  |  |  928|    558|    static_cast<    \
  |  |  929|    558|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    558|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    854|{
 3012|    854|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    854|        dest.assign(source.view());
 3014|    854|    }
 3015|    854|    else {
 3016|    854|        return transcode_impl(source.view(), dest);
 3017|    854|    }
 3018|       |
 3019|      0|    return {};
 3020|    854|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.44k|{
 2088|  2.44k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.44k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.44k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.44k|        auto buf = make_contiguous_buffer(range);
 2092|  2.44k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.44k|        return ranges::next(range.begin(),
 2094|  2.44k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.44k|    }
 2096|  2.44k|    else {
 2097|  2.44k|        auto it = range.begin();
 2098|       |
 2099|  2.44k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  2.44k|            auto seg = get_contiguous_beginning(range);
 2101|  2.44k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.44k|                seg_it != seg.end()) {
 2103|  2.44k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.44k|            }
 2105|  2.44k|            ranges::advance(it, seg.size());
 2106|  2.44k|        }
 2107|       |
 2108|  2.44k|        return read_until_code_point(
 2109|  2.44k|            ranges::subrange{it, range.end()},
 2110|  2.44k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.44k|    }
 2112|  2.44k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  2.44k|    {
  754|  2.44k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  28.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.3k|              cvref<T> obj = *get<T>(fn);
  745|  28.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  28.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.3k|              }
  748|  28.3k|              else {
  749|  28.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.3k|              }
  751|  28.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  28.3k|    {
  684|  28.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  28.3k|            return static_cast<T*>(s.m_cp);
  686|  28.3k|        }
  687|  28.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  28.3k|            return static_cast<T*>(s.m_p);
  689|  28.3k|        }
  690|  28.3k|        else {
  691|  28.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  28.3k|        }
  693|  28.3k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  28.3k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  2.44k|        {
  662|  2.44k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     30|    {
 4841|     30|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 30, False: 0]
  ------------------
 4842|     30|            return read_string_impl(
 4843|     30|                range,
 4844|     30|                read_until_code_unit(
 4845|     30|                    range,
 4846|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     30|                        SourceCharT ch) { return ch == until; }),
 4848|     30|                value);
 4849|     30|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     30|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    438|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    438|              cvref<T> obj = *get<T>(fn);
  745|    438|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    438|                  obj(static_cast<decltype(args)>(args)...);
  747|    438|              }
  748|    438|              else {
  749|    438|                  return obj(static_cast<decltype(args)>(args)...);
  750|    438|              }
  751|    438|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    438|    {
  684|    438|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    438|            return static_cast<T*>(s.m_cp);
  686|    438|        }
  687|    438|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    438|            return static_cast<T*>(s.m_p);
  689|    438|        }
  690|    438|        else {
  691|    438|            return reinterpret_cast<T*>(s.m_fp);
  692|    438|        }
  693|    438|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    438|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    112|    {
 5048|    112|        auto it = read_source_impl(range, {specs});
 5049|    112|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 94]
  |  |  ------------------
  ------------------
 5050|     18|            return unexpected(it.error());
 5051|     18|        }
 5052|       |
 5053|     94|        return read_string_impl(range, *it, value);
 5054|    112|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|    336|    {
 5153|    336|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    336|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    336|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 336]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    336|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    336|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 252, False: 84]
  ------------------
 5163|    252|            const auto cb = [&](char32_t cp) {
 5164|    252|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    252|            };
 5166|       |
 5167|    252|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 78, False: 174]
  ------------------
 5168|     78|                auto it = read_until_code_point(range, cb);
 5169|     78|                return check_nonempty(it, range);
 5170|     78|            }
 5171|    174|            auto it = read_while_code_point(range, cb);
 5172|    174|            return check_nonempty(it, range);
 5173|    252|        }
 5174|       |
 5175|     84|        const auto cb = [&](SourceCharT ch) {
 5176|     84|            return cb_wrapper.on_ascii_only(ch);
 5177|     84|        };
 5178|       |
 5179|     84|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 30, False: 54]
  ------------------
 5180|     30|            auto it = read_until_code_unit(range, cb);
 5181|     30|            return check_nonempty(it, range);
 5182|     30|        }
 5183|     54|        auto it = read_while_code_unit(range, cb);
 5184|     54|        return check_nonempty(it, range);
 5185|     84|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|    252|    {
  754|    252|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|  3.88k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.88k|              cvref<T> obj = *get<T>(fn);
  745|  3.88k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.88k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.88k|              }
  748|  3.88k|              else {
  749|  3.88k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.88k|              }
  751|  3.88k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  3.88k|    {
  684|  3.88k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.88k|            return static_cast<T*>(s.m_cp);
  686|  3.88k|        }
  687|  3.88k|        else if constexpr (std::is_object_v<T>) {
  688|  3.88k|            return static_cast<T*>(s.m_p);
  689|  3.88k|        }
  690|  3.88k|        else {
  691|  3.88k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.88k|        }
  693|  3.88k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  3.88k|            const auto cb = [&](char32_t cp) {
 5164|  3.88k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  3.88k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|    252|        {
  667|    252|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|    336|    {
 5191|    336|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 54, False: 282]
  ------------------
 5192|     54|            return unexpected_scan_error(
 5193|     54|                scan_error::invalid_scanned_value,
 5194|     54|                "No characters matched in [character set]");
 5195|     54|        }
 5196|       |
 5197|    282|        return it;
 5198|    336|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|     84|    {
  754|     84|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  1.18k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.18k|              cvref<T> obj = *get<T>(fn);
  745|  1.18k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.18k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.18k|              }
  748|  1.18k|              else {
  749|  1.18k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.18k|              }
  751|  1.18k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  1.18k|    {
  684|  1.18k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.18k|            return static_cast<T*>(s.m_cp);
  686|  1.18k|        }
  687|  1.18k|        else if constexpr (std::is_object_v<T>) {
  688|  1.18k|            return static_cast<T*>(s.m_p);
  689|  1.18k|        }
  690|  1.18k|        else {
  691|  1.18k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.18k|        }
  693|  1.18k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  1.18k|        const auto cb = [&](SourceCharT ch) {
 5176|  1.18k|            return cb_wrapper.on_ascii_only(ch);
 5177|  1.18k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|     84|        {
  667|     84|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    442|{
 4752|    442|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    442|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    442|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 146, False: 296]
  ------------------
 4756|    146|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    146|                                     "Invalid encoding in scanned string");
 4758|    146|    }
 4759|    296|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    296|    static_cast<    \
  |  |  929|    296|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    296|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 296]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    296|    return SCN_MOVE(result);
  ------------------
  |  |  928|    296|    static_cast<    \
  |  |  929|    296|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    296|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  1.91k|    {
 4891|  1.91k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  1.91k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.56k, False: 348]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.56k|    }                                                  \
  |  |  |  | 3671|  1.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    348|        return read_string_impl(range, it, value);
 4893|  1.91k|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|  5.73k|    {
 4913|  5.73k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  11.4k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  5.73k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  5.73k|            return unexpected_scan_error(
 4916|  5.73k|                scan_error::invalid_scanned_value,
 4917|  5.73k|                "Regex backend doesn't support wide strings as input");
 4918|  5.73k|        }
 4919|  5.73k|        else {
 4920|  5.73k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 5.73k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  5.73k|            auto input = get_as_contiguous(range);
 4928|  5.73k|            SCN_TRY(it,
  ------------------
  |  | 3672|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.69k, False: 1.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.69k|    }                                                  \
  |  |  |  | 3671|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  1.04k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  1.04k|            return ranges::next(range.begin(),
 4931|  1.04k|                                ranges::distance(input.begin(), it));
 4932|  5.73k|        }
 4933|  5.73k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|  5.73k|{
  959|  5.73k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  5.73k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  5.73k|        return true;
  962|  5.73k|    }
  963|  5.73k|    else if constexpr (std::is_same_v<
  964|  5.73k|                           ranges::const_iterator_t<Range>,
  965|  5.73k|                           typename detail::basic_scan_buffer<
  966|  5.73k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  5.73k|        auto beg = r.begin();
  968|  5.73k|        if (!beg.stores_parent()) {
  969|  5.73k|            return true;
  970|  5.73k|        }
  971|  5.73k|        return beg.parent()->is_contiguous();
  972|  5.73k|    }
  973|  5.73k|    else {
  974|  5.73k|        return false;
  975|  5.73k|    }
  976|  5.73k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|  5.73k|{
 1065|  5.73k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  5.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  5.73k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  5.73k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  5.73k|        return r;
 1070|  5.73k|    }
 1071|  5.73k|    else if constexpr (std::is_same_v<
 1072|  5.73k|                           ranges::const_iterator_t<Range>,
 1073|  5.73k|                           typename detail::basic_scan_buffer<
 1074|  5.73k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  5.73k|        if constexpr (ranges::common_range<Range>) {
 1076|  5.73k|            return detail::make_string_view_from_pointers(
 1077|  5.73k|                r.begin().to_contiguous_segment_iterator(),
 1078|  5.73k|                r.end().to_contiguous_segment_iterator());
 1079|  5.73k|        }
 1080|  5.73k|        else {
 1081|  5.73k|            return r.begin().contiguous_segment();
 1082|  5.73k|        }
 1083|  5.73k|    }
 1084|  5.73k|    else {
 1085|  5.73k|        SCN_EXPECT(false);
 1086|  5.73k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  5.73k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  5.73k|    }
 1090|  5.73k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|  5.73k|{
  981|  5.73k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  5.73k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  5.73k|        return true;
  984|  5.73k|    }
  985|  5.73k|    else if constexpr (std::is_same_v<
  986|  5.73k|                           ranges::const_iterator_t<Range>,
  987|  5.73k|                           typename detail::basic_scan_buffer<
  988|  5.73k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  5.73k|        auto beg = r.begin();
  990|  5.73k|        if (beg.contiguous_segment().empty()) {
  991|  5.73k|            return false;
  992|  5.73k|        }
  993|  5.73k|        if constexpr (ranges::common_range<Range>) {
  994|  5.73k|            return beg.contiguous_segment().end() ==
  995|  5.73k|                   ranges::end(r).contiguous_segment().end();
  996|  5.73k|        }
  997|  5.73k|        else {
  998|  5.73k|            if (beg.stores_parent()) {
  999|  5.73k|                return beg.contiguous_segment().end() ==
 1000|  5.73k|                       beg.parent()->current_view().end();
 1001|  5.73k|            }
 1002|  5.73k|            return true;
 1003|  5.73k|        }
 1004|  5.73k|    }
 1005|  5.73k|    else {
 1006|  5.73k|        return false;
 1007|  5.73k|    }
 1008|  5.73k|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  5.73k|{
 4346|  5.73k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  5.73k|                  ranges::borrowed_range<Input> &&
 4348|  5.73k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  5.73k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  5.73k|    std::basic_regex<CharT> re{};
 4352|  5.73k|    try {
 4353|  5.73k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 5.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  5.73k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  5.73k|                                     re_flags | std::regex_constants::nosubs};
 4356|  5.73k|    }
 4357|  5.73k|    catch (const std::regex_error& err) {
 4358|  2.30k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  2.30k|                                     "Invalid regex");
 4360|  2.30k|    }
 4361|       |
 4362|  3.43k|    std::match_results<const CharT*> matches{};
 4363|  3.43k|    try {
 4364|  3.43k|        bool found = std::regex_search(input.data(),
 4365|  3.43k|                                       input.data() + input.size(), matches, re,
 4366|  3.43k|                                       std::regex_constants::match_continuous);
 4367|  3.43k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 2.38k, False: 1.04k]
  |  Branch (4367:23): [True: 0, False: 1.04k]
  ------------------
 4368|  2.38k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  2.38k|                                         "Regular expression didn't match");
 4370|  2.38k|        }
 4371|  3.43k|    }
 4372|  3.43k|    catch (const std::regex_error& err) {
 4373|      6|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|      6|                                     "Regex matching failed with an error");
 4375|      6|    }
 4376|       |
 4377|  1.04k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  3.43k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  3.12k|{
 5809|  3.12k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  3.12k|        return reader_impl_for_bool<CharT>{};
 5811|  3.12k|    }
 5812|  3.12k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  3.12k|        return reader_impl_for_char<CharT>{};
 5814|  3.12k|    }
 5815|  3.12k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  3.12k|        return reader_impl_for_wchar<CharT>{};
 5817|  3.12k|    }
 5818|  3.12k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  3.12k|        return reader_impl_for_code_point<CharT>{};
 5820|  3.12k|    }
 5821|  3.12k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  3.12k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  3.12k|        return reader_impl_for_string<CharT>{};
 5824|  3.12k|    }
 5825|  3.12k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  3.12k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  3.12k|        return reader_impl_for_string<CharT>{};
 5828|  3.12k|    }
 5829|  3.12k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  3.12k|                       std::is_same_v<T, wregex_matches>) {
 5831|  3.12k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  3.12k|    }
 5833|  3.12k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  3.12k|        return reader_impl_for_voidptr<CharT>{};
 5835|  3.12k|    }
 5836|  3.12k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  3.12k|        return reader_impl_for_float<CharT>{};
 5838|  3.12k|    }
 5839|  3.12k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  3.12k|                       !std::is_same_v<T, wchar_t> &&
 5841|  3.12k|                       !std::is_same_v<T, char32_t> &&
 5842|  3.12k|                       !std::is_same_v<T, bool>) {
 5843|  3.12k|        return reader_impl_for_int<CharT>{};
 5844|  3.12k|    }
 5845|  3.12k|    else {
 5846|  3.12k|        return reader_impl_for_monostate<CharT>{};
 5847|  3.12k|    }
 5848|  3.12k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|     80|{
 2993|     80|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|     80|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 80, False: 0]
  ------------------
 2995|     80|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|     80|    static_cast<    \
  |  |  929|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|     80|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|     80|    }
 3001|     80|    else {
 3002|     80|        return transcode_impl(source.view(), dest);
 3003|     80|    }
 3004|       |
 3005|     80|    return {};
 3006|     80|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    168|    {
 5277|    168|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    168|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    168|        return read_impl(range, specs, value);
 5279|    168|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    168|    {
 5295|    168|        SCN_CLANG_PUSH
 5296|    168|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    168|        switch (m_type) {
 5299|    124|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 124, False: 44]
  ------------------
 5300|    124|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 148]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     18|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 18, False: 150]
  ------------------
 5307|     18|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 168]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 166]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 164]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 168]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    168|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    168|        }
 5331|       |
 5332|    168|        SCN_CLANG_POP
 5333|    168|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    124|    {
 4820|    124|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    124|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    162|{
 4752|    162|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    162|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    162|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 82, False: 80]
  ------------------
 4756|     82|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     82|                                     "Invalid encoding in scanned string");
 4758|     82|    }
 4759|     80|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     80|    static_cast<    \
  |  |  929|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     80|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     80|    return SCN_MOVE(result);
  ------------------
  |  |  928|     80|    static_cast<    \
  |  |  929|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     80|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     20|    {
 4841|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 20, False: 0]
  ------------------
 4842|     20|            return read_string_impl(
 4843|     20|                range,
 4844|     20|                read_until_code_unit(
 4845|     20|                    range,
 4846|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     20|                        SourceCharT ch) { return ch == until; }),
 4848|     20|                value);
 4849|     20|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|    350|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    350|                  obj(static_cast<decltype(args)>(args)...);
  747|    350|              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|    350|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    350|            return static_cast<T*>(s.m_cp);
  686|    350|        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    350|            return static_cast<T*>(s.m_p);
  689|    350|        }
  690|    350|        else {
  691|    350|            return reinterpret_cast<T*>(s.m_fp);
  692|    350|        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     18|    {
 4947|     18|        return read_impl(
 4948|     18|            range,
 4949|     18|            [&](const auto& rng) {
 4950|     18|                return read_string_impl(rng, read_all(rng), value);
 4951|     18|            },
 4952|     18|            detail::priority_tag<1>{});
 4953|     18|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     18|    {
 4974|     18|        return read_cb(range);
 4975|     18|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     18|            [&](const auto& rng) {
 4950|     18|                return read_string_impl(rng, read_all(rng), value);
 4951|     18|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|      6|    {
 4891|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|      6|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  2.38k|    {
 5277|  2.38k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.38k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  2.38k|        return read_impl(range, specs, value);
 5279|  2.38k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  2.38k|    {
 5295|  2.38k|        SCN_CLANG_PUSH
 5296|  2.38k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  2.38k|        switch (m_type) {
 5299|    334|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 334, False: 2.05k]
  ------------------
 5300|    334|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     30|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 30, False: 2.35k]
  ------------------
 5303|     30|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     30|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 2.38k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    112|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 112, False: 2.27k]
  ------------------
 5310|    112|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    112|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  1.84k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 1.84k, False: 540]
  ------------------
 5315|  1.84k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  1.84k|                    range, specs.charset_string<SourceCharT>(),
 5317|  1.84k|                    specs.regexp_flags, value);
 5318|       |
 5319|     64|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 64, False: 2.32k]
  ------------------
 5320|     64|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     64|                    range,
 5322|     64|                    get_unescaped_regex_pattern(
 5323|     64|                        specs.charset_string<SourceCharT>()),
 5324|     64|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 2.38k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  2.38k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  2.38k|        }
 5331|       |
 5332|  2.38k|        SCN_CLANG_POP
 5333|  2.38k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    814|    {
 4820|    814|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    814|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    844|{
 4752|    844|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    844|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    844|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 286, False: 558]
  ------------------
 4756|    286|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    286|                                     "Invalid encoding in scanned string");
 4758|    286|    }
 4759|    558|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    558|    static_cast<    \
  |  |  929|    558|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    558|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    558|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 558]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    558|    return SCN_MOVE(result);
  ------------------
  |  |  928|    558|    static_cast<    \
  |  |  929|    558|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    558|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    854|{
 3012|    854|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    854|        dest.assign(source.view());
 3014|    854|    }
 3015|    854|    else {
 3016|    854|        return transcode_impl(source.view(), dest);
 3017|    854|    }
 3018|       |
 3019|    854|    return {};
 3020|    854|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     30|    {
 4841|     30|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 30, False: 0]
  ------------------
 4842|     30|            return read_string_impl(
 4843|     30|                range,
 4844|     30|                read_until_code_unit(
 4845|     30|                    range,
 4846|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     30|                        SourceCharT ch) { return ch == until; }),
 4848|     30|                value);
 4849|     30|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     30|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    438|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    438|              cvref<T> obj = *get<T>(fn);
  745|    438|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    438|                  obj(static_cast<decltype(args)>(args)...);
  747|    438|              }
  748|    438|              else {
  749|    438|                  return obj(static_cast<decltype(args)>(args)...);
  750|    438|              }
  751|    438|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    438|    {
  684|    438|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    438|            return static_cast<T*>(s.m_cp);
  686|    438|        }
  687|    438|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    438|            return static_cast<T*>(s.m_p);
  689|    438|        }
  690|    438|        else {
  691|    438|            return reinterpret_cast<T*>(s.m_fp);
  692|    438|        }
  693|    438|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    438|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    112|    {
 5048|    112|        auto it = read_source_impl(range, {specs});
 5049|    112|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 94]
  |  |  ------------------
  ------------------
 5050|     18|            return unexpected(it.error());
 5051|     18|        }
 5052|       |
 5053|     94|        return read_string_impl(range, *it, value);
 5054|    112|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    442|{
 4752|    442|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    442|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    442|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 146, False: 296]
  ------------------
 4756|    146|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    146|                                     "Invalid encoding in scanned string");
 4758|    146|    }
 4759|    296|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    296|    static_cast<    \
  |  |  929|    296|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    296|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 296]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    296|    return SCN_MOVE(result);
  ------------------
  |  |  928|    296|    static_cast<    \
  |  |  929|    296|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    296|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  1.91k|    {
 4891|  1.91k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  1.91k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.56k, False: 348]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.56k|    }                                                  \
  |  |  |  | 3671|  1.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    348|        return read_string_impl(range, it, value);
 4893|  1.91k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  3.12k|{
 5809|  3.12k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  3.12k|        return reader_impl_for_bool<CharT>{};
 5811|  3.12k|    }
 5812|  3.12k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  3.12k|        return reader_impl_for_char<CharT>{};
 5814|  3.12k|    }
 5815|  3.12k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  3.12k|        return reader_impl_for_wchar<CharT>{};
 5817|  3.12k|    }
 5818|  3.12k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  3.12k|        return reader_impl_for_code_point<CharT>{};
 5820|  3.12k|    }
 5821|  3.12k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  3.12k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  3.12k|        return reader_impl_for_string<CharT>{};
 5824|  3.12k|    }
 5825|  3.12k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  3.12k|                       std::is_same_v<T, std::wstring>) {
 5827|  3.12k|        return reader_impl_for_string<CharT>{};
 5828|  3.12k|    }
 5829|  3.12k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  3.12k|                       std::is_same_v<T, wregex_matches>) {
 5831|  3.12k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  3.12k|    }
 5833|  3.12k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  3.12k|        return reader_impl_for_voidptr<CharT>{};
 5835|  3.12k|    }
 5836|  3.12k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  3.12k|        return reader_impl_for_float<CharT>{};
 5838|  3.12k|    }
 5839|  3.12k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  3.12k|                       !std::is_same_v<T, wchar_t> &&
 5841|  3.12k|                       !std::is_same_v<T, char32_t> &&
 5842|  3.12k|                       !std::is_same_v<T, bool>) {
 5843|  3.12k|        return reader_impl_for_int<CharT>{};
 5844|  3.12k|    }
 5845|  3.12k|    else {
 5846|  3.12k|        return reader_impl_for_monostate<CharT>{};
 5847|  3.12k|    }
 5848|  3.12k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    168|    {
 5277|    168|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    168|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    168|        return read_impl(range, specs, value);
 5279|    168|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    168|    {
 5295|    168|        SCN_CLANG_PUSH
 5296|    168|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    168|        switch (m_type) {
 5299|    124|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 124, False: 44]
  ------------------
 5300|    124|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 148]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     18|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 18, False: 150]
  ------------------
 5307|     18|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 168]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 166]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 164]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 168]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    168|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    168|        }
 5331|       |
 5332|    168|        SCN_CLANG_POP
 5333|    168|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    124|    {
 4827|    124|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    124|                                     value);
 4829|    124|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    162|{
 4773|    162|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    162|    auto src = [&]() {
 4776|    162|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    162|            return make_contiguous_buffer(
 4778|    162|                ranges::subrange{range.begin().base(), result.base()});
 4779|    162|        }
 4780|    162|        else {
 4781|    162|            return make_contiguous_buffer(
 4782|    162|                ranges::subrange{range.begin(), result});
 4783|    162|        }
 4784|    162|    }();
 4785|    162|    using src_type = decltype(src);
 4786|       |
 4787|    162|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    162|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    162|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    162|                                     "Cannot read a string_view from "
 4796|    162|                                     "this source range (would require "
 4797|    162|                                     "transcoding)");
 4798|    162|    }
 4799|    162|    else {
 4800|    162|        const auto view = src.view();
 4801|    162|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    162|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 82, False: 80]
  ------------------
 4804|     82|            return unexpected_scan_error(
 4805|     82|                scan_error::invalid_scanned_value,
 4806|     82|                "Invalid encoding in scanned string_view");
 4807|     82|        }
 4808|       |
 4809|     80|        return SCN_MOVE(result);
  ------------------
  |  |  928|     80|    static_cast<    \
  |  |  929|     80|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    162|    }
 4811|    162|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    162|    auto src = [&]() {
 4776|    162|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    162|            return make_contiguous_buffer(
 4778|    162|                ranges::subrange{range.begin().base(), result.base()});
 4779|    162|        }
 4780|    162|        else {
 4781|    162|            return make_contiguous_buffer(
 4782|    162|                ranges::subrange{range.begin(), result});
 4783|    162|        }
 4784|    162|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     20|    {
 4863|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 20, False: 0]
  ------------------
 4864|     20|            return read_string_view_impl(
 4865|     20|                range,
 4866|     20|                read_until_code_unit(
 4867|     20|                    range,
 4868|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     20|                        SourceCharT ch) { return ch == until; }),
 4870|     20|                value);
 4871|     20|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_:
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|    350|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    350|                  obj(static_cast<decltype(args)>(args)...);
  747|    350|              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|    350|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    350|            return static_cast<T*>(s.m_cp);
  686|    350|        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    350|            return static_cast<T*>(s.m_p);
  689|    350|        }
  690|    350|        else {
  691|    350|            return reinterpret_cast<T*>(s.m_fp);
  692|    350|        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4869|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     18|    {
 4959|     18|        return read_impl(
 4960|     18|            range,
 4961|     18|            [&](const auto& rng) {
 4962|     18|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     18|            },
 4964|     18|            detail::priority_tag<1>{});
 4965|     18|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     18|    {
 4974|     18|        return read_cb(range);
 4975|     18|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     18|            [&](const auto& rng) {
 4962|     18|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     18|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|      6|    {
 4902|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|      6|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  2.38k|    {
 5277|  2.38k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.38k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  2.38k|        return read_impl(range, specs, value);
 5279|  2.38k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  2.38k|    {
 5295|  2.38k|        SCN_CLANG_PUSH
 5296|  2.38k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  2.38k|        switch (m_type) {
 5299|    334|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 334, False: 2.05k]
  ------------------
 5300|    334|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     30|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 30, False: 2.35k]
  ------------------
 5303|     30|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     30|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 2.38k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    112|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 112, False: 2.27k]
  ------------------
 5310|    112|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    112|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  1.84k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 1.84k, False: 540]
  ------------------
 5315|  1.84k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  1.84k|                    range, specs.charset_string<SourceCharT>(),
 5317|  1.84k|                    specs.regexp_flags, value);
 5318|       |
 5319|     64|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 64, False: 2.32k]
  ------------------
 5320|     64|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     64|                    range,
 5322|     64|                    get_unescaped_regex_pattern(
 5323|     64|                        specs.charset_string<SourceCharT>()),
 5324|     64|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 2.38k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  2.38k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  2.38k|        }
 5331|       |
 5332|  2.38k|        SCN_CLANG_POP
 5333|  2.38k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    814|    {
 4827|    814|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    814|                                     value);
 4829|    814|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|    844|{
 4773|    844|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    844|    auto src = [&]() {
 4776|    844|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    844|            return make_contiguous_buffer(
 4778|    844|                ranges::subrange{range.begin().base(), result.base()});
 4779|    844|        }
 4780|    844|        else {
 4781|    844|            return make_contiguous_buffer(
 4782|    844|                ranges::subrange{range.begin(), result});
 4783|    844|        }
 4784|    844|    }();
 4785|    844|    using src_type = decltype(src);
 4786|       |
 4787|    844|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    844|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    844|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    844|                                     "Cannot read a string_view from "
 4796|    844|                                     "this source range (would require "
 4797|    844|                                     "transcoding)");
 4798|    844|    }
 4799|    844|    else {
 4800|    844|        const auto view = src.view();
 4801|    844|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    844|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 286, False: 558]
  ------------------
 4804|    286|            return unexpected_scan_error(
 4805|    286|                scan_error::invalid_scanned_value,
 4806|    286|                "Invalid encoding in scanned string_view");
 4807|    286|        }
 4808|       |
 4809|    558|        return SCN_MOVE(result);
  ------------------
  |  |  928|    558|    static_cast<    \
  |  |  929|    558|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    844|    }
 4811|    844|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|    844|    auto src = [&]() {
 4776|    844|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    844|            return make_contiguous_buffer(
 4778|    844|                ranges::subrange{range.begin().base(), result.base()});
 4779|    844|        }
 4780|    844|        else {
 4781|    844|            return make_contiguous_buffer(
 4782|    844|                ranges::subrange{range.begin(), result});
 4783|    844|        }
 4784|    844|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     30|    {
 4863|     30|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 30, False: 0]
  ------------------
 4864|     30|            return read_string_view_impl(
 4865|     30|                range,
 4866|     30|                read_until_code_unit(
 4867|     30|                    range,
 4868|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     30|                        SourceCharT ch) { return ch == until; }),
 4870|     30|                value);
 4871|     30|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     30|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES14_w:
  743|    438|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    438|              cvref<T> obj = *get<T>(fn);
  745|    438|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    438|                  obj(static_cast<decltype(args)>(args)...);
  747|    438|              }
  748|    438|              else {
  749|    438|                  return obj(static_cast<decltype(args)>(args)...);
  750|    438|              }
  751|    438|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    438|    {
  684|    438|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    438|            return static_cast<T*>(s.m_cp);
  686|    438|        }
  687|    438|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    438|            return static_cast<T*>(s.m_p);
  689|    438|        }
  690|    438|        else {
  691|    438|            return reinterpret_cast<T*>(s.m_fp);
  692|    438|        }
  693|    438|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4869|    438|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|    112|    {
 5062|    112|        auto it = read_source_impl(range, {specs});
 5063|    112|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 94]
  |  |  ------------------
  ------------------
 5064|     18|            return unexpected(it.error());
 5065|     18|        }
 5066|       |
 5067|     94|        return read_string_view_impl(range, *it, value);
 5068|    112|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|    442|{
 4773|    442|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    442|    auto src = [&]() {
 4776|    442|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    442|            return make_contiguous_buffer(
 4778|    442|                ranges::subrange{range.begin().base(), result.base()});
 4779|    442|        }
 4780|    442|        else {
 4781|    442|            return make_contiguous_buffer(
 4782|    442|                ranges::subrange{range.begin(), result});
 4783|    442|        }
 4784|    442|    }();
 4785|    442|    using src_type = decltype(src);
 4786|       |
 4787|    442|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    442|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    442|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    442|                                     "Cannot read a string_view from "
 4796|    442|                                     "this source range (would require "
 4797|    442|                                     "transcoding)");
 4798|    442|    }
 4799|    442|    else {
 4800|    442|        const auto view = src.view();
 4801|    442|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    442|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 146, False: 296]
  ------------------
 4804|    146|            return unexpected_scan_error(
 4805|    146|                scan_error::invalid_scanned_value,
 4806|    146|                "Invalid encoding in scanned string_view");
 4807|    146|        }
 4808|       |
 4809|    296|        return SCN_MOVE(result);
  ------------------
  |  |  928|    296|    static_cast<    \
  |  |  929|    296|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    442|    }
 4811|    442|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|    442|    auto src = [&]() {
 4776|    442|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    442|            return make_contiguous_buffer(
 4778|    442|                ranges::subrange{range.begin().base(), result.base()});
 4779|    442|        }
 4780|    442|        else {
 4781|    442|            return make_contiguous_buffer(
 4782|    442|                ranges::subrange{range.begin(), result});
 4783|    442|        }
 4784|    442|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  1.91k|    {
 4902|  1.91k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  1.91k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.56k, False: 348]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.56k|    }                                                  \
  |  |  |  | 3671|  1.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    348|        return read_string_view_impl(range, it, value);
 4904|  1.91k|    }
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  5.73k|{
 1683|  5.73k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  5.73k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  5.73k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  5.73k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  5.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  5.73k|    }
 1688|  5.73k|    else {
 1689|  5.73k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  5.73k|    }
 1691|  5.73k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  5.73k|    {
 1490|  5.73k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|    858|    {
 4100|    858|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 858]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    858|        return std::copysign(value, T{1.0});
 4104|    858|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|    818|    {
 4100|    818|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 818]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    818|        return std::copysign(value, T{1.0});
 4104|    818|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  5.65k|{
 5795|  5.65k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.65k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  5.65k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 628, False: 5.02k]
  ------------------
 5800|    628|        return range.begin();
 5801|    628|    }
 5802|       |
 5803|  5.02k|    return skip_classic_whitespace(range);
 5804|  5.65k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5870|    628|    {
 5871|    628|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    628|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    628|                          basic_contiguous_scan_context<char_type>>) {
 5875|    628|            auto rd = make_reader<T, char_type>();
 5876|    628|            return impl(rd, range, value);
 5877|    628|        }
 5878|    628|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    628|            auto rd = make_reader<T, char_type>();
 5880|    628|            if (!is_segment_contiguous(range)) {
 5881|    628|                return impl(rd, range, value);
 5882|    628|            }
 5883|    628|            auto crange = get_as_contiguous(range);
 5884|    628|            SCN_TRY(it, impl(rd, crange, value));
 5885|    628|            return ranges::next(range.begin(),
 5886|    628|                                ranges::distance(crange.begin(), it));
 5887|    628|        }
 5888|    628|        else {
 5889|    628|            SCN_EXPECT(false);
 5890|    628|            SCN_UNREACHABLE;
 5891|    628|        }
 5892|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    628|    {
 5863|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    628|                        .transform_error(make_eof_scan_error));
 5865|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    628|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    628|    {
 3528|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    628|        return read_default_with_base(range, value, 10);
 3530|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5870|    628|    {
 5871|    628|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    628|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    628|                          basic_contiguous_scan_context<char_type>>) {
 5875|    628|            auto rd = make_reader<T, char_type>();
 5876|    628|            return impl(rd, range, value);
 5877|    628|        }
 5878|    628|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    628|            auto rd = make_reader<T, char_type>();
 5880|    628|            if (!is_segment_contiguous(range)) {
 5881|    628|                return impl(rd, range, value);
 5882|    628|            }
 5883|    628|            auto crange = get_as_contiguous(range);
 5884|    628|            SCN_TRY(it, impl(rd, crange, value));
 5885|    628|            return ranges::next(range.begin(),
 5886|    628|                                ranges::distance(crange.begin(), it));
 5887|    628|        }
 5888|    628|        else {
 5889|    628|            SCN_EXPECT(false);
 5890|    628|            SCN_UNREACHABLE;
 5891|    628|        }
 5892|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    628|    {
 5863|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    628|                        .transform_error(make_eof_scan_error));
 5865|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    628|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    628|    {
 3528|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    628|        return read_default_with_base(range, value, 10);
 3530|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5870|    628|    {
 5871|    628|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    628|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    628|                          basic_contiguous_scan_context<char_type>>) {
 5875|    628|            auto rd = make_reader<T, char_type>();
 5876|    628|            return impl(rd, range, value);
 5877|    628|        }
 5878|    628|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    628|            auto rd = make_reader<T, char_type>();
 5880|    628|            if (!is_segment_contiguous(range)) {
 5881|    628|                return impl(rd, range, value);
 5882|    628|            }
 5883|    628|            auto crange = get_as_contiguous(range);
 5884|    628|            SCN_TRY(it, impl(rd, crange, value));
 5885|    628|            return ranges::next(range.begin(),
 5886|    628|                                ranges::distance(crange.begin(), it));
 5887|    628|        }
 5888|    628|        else {
 5889|    628|            SCN_EXPECT(false);
 5890|    628|            SCN_UNREACHABLE;
 5891|    628|        }
 5892|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    628|    {
 5863|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    628|                        .transform_error(make_eof_scan_error));
 5865|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    628|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5747|  1.10k|    {
 5748|  1.10k|        return true;
 5749|  1.10k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    848|    {
 5765|    848|        detail::format_specs specs{};
 5766|    848|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    848|        std::uintptr_t intvalue{};
 5769|    848|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    848|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    848|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    848|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    848|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 848, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    848|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    848|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    848|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    848|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    848|    }                                                  \
  |  |  |  | 3671|    848|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    848|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5870|    628|    {
 5871|    628|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    628|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    628|                          basic_contiguous_scan_context<char_type>>) {
 5875|    628|            auto rd = make_reader<T, char_type>();
 5876|    628|            return impl(rd, range, value);
 5877|    628|        }
 5878|    628|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    628|            auto rd = make_reader<T, char_type>();
 5880|    628|            if (!is_segment_contiguous(range)) {
 5881|    628|                return impl(rd, range, value);
 5882|    628|            }
 5883|    628|            auto crange = get_as_contiguous(range);
 5884|    628|            SCN_TRY(it, impl(rd, crange, value));
 5885|    628|            return ranges::next(range.begin(),
 5886|    628|                                ranges::distance(crange.begin(), it));
 5887|    628|        }
 5888|    628|        else {
 5889|    628|            SCN_EXPECT(false);
 5890|    628|            SCN_UNREACHABLE;
 5891|    628|        }
 5892|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    628|    {
 5863|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    628|                        .transform_error(make_eof_scan_error));
 5865|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    628|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  1.36k|    {
 3035|  1.36k|        return true;
 3036|  1.36k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    628|    {
 5504|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    628|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    628|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5348|  1.10k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|    974|    {
 5355|    974|        scan_error err{scan_error::invalid_scanned_value,
 5356|    974|                       "Failed to read boolean"};
 5357|       |
 5358|    974|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 866, False: 108]
  ------------------
 5359|    866|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 866]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    866|            else {
 5363|    866|                err = r.error();
 5364|    866|            }
 5365|    866|        }
 5366|       |
 5367|    974|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 952, False: 22]
  ------------------
 5368|    952|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 952]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    952|            else {
 5372|    952|                err = r.error();
 5373|    952|            }
 5374|    952|        }
 5375|       |
 5376|    974|        return unexpected(err);
 5377|    974|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    880|    {
 5384|    880|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 880]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    880|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 880]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    880|        return unexpected_scan_error(
 5394|    880|            scan_error::invalid_scanned_value,
 5395|    880|            "Failed to read numeric boolean value: No match");
 5396|    880|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|    952|    {
 5402|    952|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 952]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    952|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 952]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    952|        return unexpected_scan_error(
 5412|    952|            scan_error::invalid_scanned_value,
 5413|    952|            "Failed to read textual boolean value: No match");
 5414|    952|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  1.90k|{
 2194|  1.90k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.90k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.90k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.90k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 100, False: 1.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    100|    }                                                  \
  |  |  |  | 3671|  1.90k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.80k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.80k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.80k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.80k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.80k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.80k, False: 0]
  |  |  ------------------
  ------------------
 2201|  1.80k|            return unexpected(parse_error::error);
 2202|  1.80k|        }
 2203|      0|        return it;
 2204|  1.80k|    }
 2205|  1.80k|    else {
 2206|  1.80k|        auto range_it = range.begin();
 2207|  1.80k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  1.80k|            if (SCN_UNLIKELY(*range_it !=
 2209|  1.80k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.80k|                return unexpected(parse_error::error);
 2211|  1.80k|            }
 2212|  1.80k|        }
 2213|  1.80k|        return it;
 2214|  1.80k|    }
 2215|  1.80k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5870|    628|    {
 5871|    628|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    628|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    628|                          basic_contiguous_scan_context<char_type>>) {
 5875|    628|            auto rd = make_reader<T, char_type>();
 5876|    628|            return impl(rd, range, value);
 5877|    628|        }
 5878|    628|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    628|            auto rd = make_reader<T, char_type>();
 5880|    628|            if (!is_segment_contiguous(range)) {
 5881|    628|                return impl(rd, range, value);
 5882|    628|            }
 5883|    628|            auto crange = get_as_contiguous(range);
 5884|    628|            SCN_TRY(it, impl(rd, crange, value));
 5885|    628|            return ranges::next(range.begin(),
 5886|    628|                                ranges::distance(crange.begin(), it));
 5887|    628|        }
 5888|    628|        else {
 5889|    628|            SCN_EXPECT(false);
 5890|    628|            SCN_UNREACHABLE;
 5891|    628|        }
 5892|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    628|    {
 5863|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    628|                        .transform_error(make_eof_scan_error));
 5865|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    628|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|    628|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.10k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|    628|    {
 5871|    628|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    628|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    628|                          basic_contiguous_scan_context<char_type>>) {
 5875|    628|            auto rd = make_reader<T, char_type>();
 5876|    628|            return impl(rd, range, value);
 5877|    628|        }
 5878|    628|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    628|            auto rd = make_reader<T, char_type>();
 5880|    628|            if (!is_segment_contiguous(range)) {
 5881|    628|                return impl(rd, range, value);
 5882|    628|            }
 5883|    628|            auto crange = get_as_contiguous(range);
 5884|    628|            SCN_TRY(it, impl(rd, crange, value));
 5885|    628|            return ranges::next(range.begin(),
 5886|    628|                                ranges::distance(crange.begin(), it));
 5887|    628|        }
 5888|    628|        else {
 5889|    628|            SCN_EXPECT(false);
 5890|    628|            SCN_UNREACHABLE;
 5891|    628|        }
 5892|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    628|    {
 5863|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    628|                        .transform_error(make_eof_scan_error));
 5865|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    628|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    628|    {
 4152|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    628|        float_reader<CharT> rd{};
 4155|    628|        return read_impl<Range>(
 4156|    628|            range, rd,
 4157|    628|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    628|                return r.read_source(SCN_FWD(args)...);
 4159|    628|            },
 4160|    628|            value);
 4161|    628|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    628|    {
  754|    628|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    628|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    628|              cvref<T> obj = *get<T>(fn);
  745|    628|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    628|                  obj(static_cast<decltype(args)>(args)...);
  747|    628|              }
  748|    628|              else {
  749|    628|                  return obj(static_cast<decltype(args)>(args)...);
  750|    628|              }
  751|    628|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    628|    {
  684|    628|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    628|            return static_cast<T*>(s.m_cp);
  686|    628|        }
  687|    628|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    628|            return static_cast<T*>(s.m_p);
  689|    628|        }
  690|    628|        else {
  691|    628|            return reinterpret_cast<T*>(s.m_fp);
  692|    628|        }
  693|    628|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    628|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    628|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    628|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|    628|        {
  662|    628|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    628|    {
 5871|    628|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    628|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    628|                          basic_contiguous_scan_context<char_type>>) {
 5875|    628|            auto rd = make_reader<T, char_type>();
 5876|    628|            return impl(rd, range, value);
 5877|    628|        }
 5878|    628|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    628|            auto rd = make_reader<T, char_type>();
 5880|    628|            if (!is_segment_contiguous(range)) {
 5881|    628|                return impl(rd, range, value);
 5882|    628|            }
 5883|    628|            auto crange = get_as_contiguous(range);
 5884|    628|            SCN_TRY(it, impl(rd, crange, value));
 5885|    628|            return ranges::next(range.begin(),
 5886|    628|                                ranges::distance(crange.begin(), it));
 5887|    628|        }
 5888|    628|        else {
 5889|    628|            SCN_EXPECT(false);
 5890|    628|            SCN_UNREACHABLE;
 5891|    628|        }
 5892|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    628|    {
 5863|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    628|                        .transform_error(make_eof_scan_error));
 5865|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    628|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    628|    {
 5266|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    628|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    628|    {
 5871|    628|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    628|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    628|                          basic_contiguous_scan_context<char_type>>) {
 5875|    628|            auto rd = make_reader<T, char_type>();
 5876|    628|            return impl(rd, range, value);
 5877|    628|        }
 5878|    628|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    628|            auto rd = make_reader<T, char_type>();
 5880|    628|            if (!is_segment_contiguous(range)) {
 5881|    628|                return impl(rd, range, value);
 5882|    628|            }
 5883|    628|            auto crange = get_as_contiguous(range);
 5884|    628|            SCN_TRY(it, impl(rd, crange, value));
 5885|    628|            return ranges::next(range.begin(),
 5886|    628|                                ranges::distance(crange.begin(), it));
 5887|    628|        }
 5888|    628|        else {
 5889|    628|            SCN_EXPECT(false);
 5890|    628|            SCN_UNREACHABLE;
 5891|    628|        }
 5892|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    628|    {
 5863|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    628|                        .transform_error(make_eof_scan_error));
 5865|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    628|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    628|    {
 5266|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    628|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    628|    {
 5871|    628|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    628|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    628|                          basic_contiguous_scan_context<char_type>>) {
 5875|    628|            auto rd = make_reader<T, char_type>();
 5876|    628|            return impl(rd, range, value);
 5877|    628|        }
 5878|    628|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    628|            auto rd = make_reader<T, char_type>();
 5880|    628|            if (!is_segment_contiguous(range)) {
 5881|    628|                return impl(rd, range, value);
 5882|    628|            }
 5883|    628|            auto crange = get_as_contiguous(range);
 5884|    628|            SCN_TRY(it, impl(rd, crange, value));
 5885|    628|            return ranges::next(range.begin(),
 5886|    628|                                ranges::distance(crange.begin(), it));
 5887|    628|        }
 5888|    628|        else {
 5889|    628|            SCN_EXPECT(false);
 5890|    628|            SCN_UNREACHABLE;
 5891|    628|        }
 5892|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    628|    {
 5863|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    628|                        .transform_error(make_eof_scan_error));
 5865|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    628|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    628|    {
 5266|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    628|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    628|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  90.9k|    {
 2879|  90.9k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   196k|    {
 2883|   196k|        return m_current;
 2884|   196k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   144k|    {
 2888|   144k|        return m_range.end();
 2889|   144k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|  39.7k|{
 1221|       |    // TODO: optimize
 1222|  39.7k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|  39.7k|    auto res = get_next_code_point(str);
 1224|  39.7k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|  39.7k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  42.7k|    {
 2903|  42.7k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  42.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  42.7k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  42.7k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 42.7k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  42.7k|        }
 2909|  42.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  42.7k|    static_cast<    \
  |  |  929|  42.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  42.7k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  61.2k|    {
 2893|  61.2k|        return ranges::subrange{begin(), end()};
 2894|  61.2k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  5.73k|{
 2117|  5.73k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  5.73k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  5.73k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  5.73k|        auto buf = make_contiguous_buffer(range);
 2121|  5.73k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  5.73k|        return ranges::next(range.begin(),
 2123|  5.73k|                            ranges::distance(buf.view().begin(), it));
 2124|  5.73k|    }
 2125|  5.73k|    else {
 2126|  5.73k|        auto it = range.begin();
 2127|       |
 2128|  5.73k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  5.73k|            auto seg = get_contiguous_beginning(range);
 2130|  5.73k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  5.73k|                seg_it != seg.end()) {
 2132|  5.73k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  5.73k|            }
 2134|  5.73k|            ranges::advance(it, seg.size());
 2135|  5.73k|        }
 2136|       |
 2137|  5.73k|        return read_while_code_point(
 2138|  5.73k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  5.73k|    }
 2140|  5.73k|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  3.89k|    {
 6037|  3.89k|        const bool need_skipped_width =
 6038|  3.89k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 46, False: 3.84k]
  |  Branch (6038:33): [True: 3.84k, False: 0]
  ------------------
 6039|  3.89k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  3.89k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 178, False: 3.71k]
  ------------------
 6043|  3.89k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 516, False: 3.19k]
  ------------------
 6044|    694|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    694|                             need_skipped_width);
 6046|    694|        }
 6047|  3.19k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 3.07k, False: 124]
  |  Branch (6047:56): [True: 1.91k, False: 1.16k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.91k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 1.91k, False: 0]
  ------------------
 6051|  1.91k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  1.91k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  1.91k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 1.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    174|    }                                                  \
  |  |  |  | 3671|  1.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  1.73k|                                  .transform_error(make_eof_scan_error));
 6054|  1.73k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  1.91k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|  1.28k|        return result_type{rng.begin(), 0};
 6070|  3.19k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|    694|{
 5951|    694|    using char_type = detail::char_t<Range>;
 5952|    694|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    694|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 470, False: 224]
  ------------------
 5955|    470|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    470|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    470|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 470]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    470|        auto max_width_view = take_width(range, max_width);
 5972|    470|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    470|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 470, False: 0]
  ------------------
 5975|    470|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    470|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    470|    }
 5979|       |
 5980|    224|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    224|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 224]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|    224|    auto max_width_view = take_width(range, max_width);
 5994|    224|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    224|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 224, False: 0]
  ------------------
 5997|    224|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    224|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    224|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_:
  753|    470|    {
  754|    470|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|    778|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    778|              cvref<T> obj = *get<T>(fn);
  745|    778|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    778|                  obj(static_cast<decltype(args)>(args)...);
  747|    778|              }
  748|    778|              else {
  749|    778|                  return obj(static_cast<decltype(args)>(args)...);
  750|    778|              }
  751|    778|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    778|    {
  684|    778|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    778|            return static_cast<T*>(s.m_cp);
  686|    778|        }
  687|    778|        else if constexpr (std::is_object_v<T>) {
  688|    778|            return static_cast<T*>(s.m_p);
  689|    778|        }
  690|    778|        else {
  691|    778|            return reinterpret_cast<T*>(s.m_fp);
  692|    778|        }
  693|    778|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|    778|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSJ_:
  666|    470|        {
  667|    470|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    470|{
 1976|    470|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    470|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    470|{
 1957|    470|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    470|        return std::find_if(range.begin(), range.end(), pred);
 1959|    470|    }
 1960|    470|    else {
 1961|    470|        auto first = range.begin();
 1962|    832|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 778, False: 54]
  ------------------
 1963|    778|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 416, False: 362]
  ------------------
 1964|    416|                return first;
 1965|    416|            }
 1966|    778|        }
 1967|     54|        return first;
 1968|    470|    }
 1969|    470|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2809|  4.51k|    {
 2810|  4.51k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  4.51k|                                      m_count};
 2812|  4.51k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2716|  18.4k|    {
 2717|  18.4k|        return view;
 2718|  18.4k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  4.51k|    {
 2382|  4.51k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  6.35k|        {
 2781|  6.35k|            return !(y == x);
 2782|  6.35k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  12.0k|        {
 2770|  12.0k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 810, False: 11.1k]
  |  Branch (2770:39): [True: 480, False: 330]
  ------------------
 2771|  12.0k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 11.5k]
  ------------------
 2772|  12.0k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|    810|    {
 2421|    810|        return m_multibyte_left;
 2422|    810|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2815|  9.42k|    {
 2816|  9.42k|        return sentinel<true>{m_base.get().end()};
 2817|  9.42k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  9.42k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  8.34k|    {
 2426|  8.34k|        return *m_current;
 2427|  8.34k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  9.57k|    {
 2435|  9.57k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  9.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  9.57k|        _increment_current();
 2437|  9.57k|        return *this;
 2438|  9.57k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  9.57k|    {
 2668|  9.57k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 5.37k, False: 4.20k]
  ------------------
 2669|  5.37k|            auto cplen = _get_cp_length_at_current();
 2670|  5.37k|            m_multibyte_left = cplen - 1;
 2671|  5.37k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  5.37k|        }
 2673|  4.20k|        else {
 2674|  4.20k|            --m_multibyte_left;
 2675|  4.20k|        }
 2676|       |
 2677|  9.57k|        ++m_current;
 2678|  9.57k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  5.37k|    {
 2639|  5.37k|        return static_cast<difference_type>(
 2640|  5.37k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  5.37k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  5.37k|    {
 2645|  5.37k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  5.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.37k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  5.37k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 3.08k, False: 2.28k]
  ------------------
 2650|  3.08k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  3.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  3.08k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  3.08k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  3.08k|        }
 2654|       |
 2655|  2.28k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  2.28k|                                           cplen);
 2657|  2.28k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.28k]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|  2.28k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  2.28k|        return static_cast<difference_type>(
 2663|  2.28k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  2.28k|    }
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2036|    224|{
 2037|    224|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    224|    auto it = range.begin();
 2040|    224|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 224, False: 0]
  ------------------
 2041|    224|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    224|                                           needle.size());
 2043|    224|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 78, False: 146]
  ------------------
 2044|     78|            return it;
 2045|     78|        }
 2046|    146|        static_assert(
 2047|    146|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    146|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 146, False: 0]
  ------------------
 2049|    146|            return it;
 2050|    146|        }
 2051|      0|        it = *r;
 2052|      0|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1856|    224|{
 1857|    224|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    224|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    224|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    224|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    224|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    224|        if (sz < count) {
 1862|    224|            return unexpected(eof_error::eof);
 1863|    224|        }
 1864|       |
 1865|    224|        return ranges::next(range.begin(), count);
 1866|    224|    }
 1867|    224|    else {
 1868|    224|        auto it = range.begin();
 1869|    224|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 224]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|    858|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 712, False: 146]
  ------------------
 1874|    712|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 78, False: 634]
  ------------------
 1875|     78|                return unexpected(eof_error::eof);
 1876|     78|            }
 1877|    712|        }
 1878|       |
 1879|    146|        return it;
 1880|    224|    }
 1881|    224|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1094|    224|{
 1095|    224|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    224|        return r.size();
 1097|    224|    }
 1098|    224|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    224|                           ranges::const_iterator_t<Range>,
 1100|    224|                           typename detail::basic_scan_buffer<
 1101|    224|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    224|        if constexpr (ranges::common_range<Range>) {
 1103|    224|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    224|        }
 1105|    224|        else {
 1106|    224|            if (r.begin().stores_parent()) {
 1107|    224|                return static_cast<size_t>(
 1108|    224|                    r.begin().parent()->chars_available() -
 1109|    224|                    r.begin().position());
 1110|    224|            }
 1111|    224|            return r.begin().contiguous_segment().size();
 1112|    224|        }
 1113|    224|    }
 1114|    224|    else {
 1115|    224|        return 0;
 1116|    224|    }
 1117|    224|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  1.91k|    {
  268|  1.91k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.91k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.91k|    {
  161|  1.91k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.91k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.91k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.91k|        else {
  169|  1.91k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.91k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.91k|        }
  173|  1.91k|    }
_ZN3scn2v34impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2530|  5.78k|    {
 2531|  5.78k|        return !(a == b);
 2532|  5.78k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2522|  5.78k|    {
 2523|  5.78k|        return a.m_current == b.m_current;
 2524|  5.78k|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  2.60k|    {
 2832|  2.60k|        return take_width_view{r, n};
 2833|  2.60k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2800|  2.60k|    {
 2801|  2.60k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2713|  2.60k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.91k|{
 2951|  1.91k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.91k, False: 0]
  ------------------
 2952|  1.91k|        auto it = read_while_classic_space(range);
 2953|  1.91k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.91k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 1.73k]
  |  |  ------------------
  ------------------
 2955|    174|            return unexpected(e);
 2956|    174|        }
 2957|       |
 2958|  1.73k|        return it;
 2959|  1.91k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.91k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.91k|{
 2117|  1.91k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.91k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.91k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.91k|        auto buf = make_contiguous_buffer(range);
 2121|  1.91k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.91k|        return ranges::next(range.begin(),
 2123|  1.91k|                            ranges::distance(buf.view().begin(), it));
 2124|  1.91k|    }
 2125|  1.91k|    else {
 2126|  1.91k|        auto it = range.begin();
 2127|       |
 2128|  1.91k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.91k|            auto seg = get_contiguous_beginning(range);
 2130|  1.91k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.91k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 1.91k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  1.91k|            ranges::advance(it, seg.size());
 2135|  1.91k|        }
 2136|       |
 2137|  1.91k|        return read_while_code_point(
 2138|  1.91k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.91k|    }
 2140|  1.91k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1038|  1.91k|{
 1039|  1.91k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  1.91k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  1.91k|        return r;
 1042|  1.91k|    }
 1043|  1.91k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  1.91k|                           ranges::const_iterator_t<Range>,
 1045|  1.91k|                           typename detail::basic_scan_buffer<
 1046|  1.91k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  1.91k|        if constexpr (ranges::common_range<Range>) {
 1048|  1.91k|            auto seg = r.begin().contiguous_segment();
 1049|  1.91k|            auto dist =
 1050|  1.91k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  1.91k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  1.91k|        }
 1053|  1.91k|        else {
 1054|  1.91k|            return r.begin().contiguous_segment();
 1055|  1.91k|        }
 1056|  1.91k|    }
 1057|  1.91k|    else {
 1058|  1.91k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.91k|    }
 1060|  1.91k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.91k|{
 2082|  1.91k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.91k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.91k|{
 2061|  1.91k|    auto it = range.begin();
 2062|  3.20k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 3.02k, False: 174]
  ------------------
 2063|  3.02k|        const auto val =
 2064|  3.02k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  3.02k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.02k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.02k, False: 0]
  |  |  ------------------
  ------------------
 2066|  3.02k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  3.02k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  3.02k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.73k, False: 1.29k]
  ------------------
 2069|  1.73k|                return it;
 2070|  1.73k|            }
 2071|  3.02k|        }
 2072|  1.29k|        it = val.iterator;
 2073|  1.29k|    }
 2074|       |
 2075|    174|    return it;
 2076|  1.91k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  3.02k|{
 1899|  3.02k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  3.02k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  3.02k|    auto it = range.begin();
 1903|  3.02k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  3.02k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.02k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  3.02k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 2.30k, False: 726]
  ------------------
 1912|  2.30k|        ++it;
 1913|  2.30k|        return {it, string_type(1, *range.begin())};
 1914|  2.30k|    }
 1915|       |
 1916|    726|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|    726|    return {it, string_type{range.begin(), it}};
 1918|  3.02k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  4.93k|{
  944|  4.93k|    return is_range_eof(r.begin(), r.end());
  945|  4.93k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  4.93k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  4.93k|    {
  937|  4.93k|        return begin == end;
  938|  4.93k|    }
  939|  4.93k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    726|    {
  283|    726|        return n - fn::impl_i_n_s(i, n, bound);
  284|    726|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    726|    {
  227|    726|        constexpr iter_difference_t<I> zero{0};
  228|    726|        iter_difference_t<I> counter{0};
  229|       |
  230|    726|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 726]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    726|        else {
  237|  2.81k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 2.09k, False: 726]
  |  Branch (237:34): [True: 2.09k, False: 0]
  ------------------
  238|  2.09k|                ++i;
  239|  2.09k|                ++counter;
  240|  2.09k|            }
  241|    726|        }
  242|       |
  243|    726|        return counter;
  244|    726|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1889|  3.02k|    {
 1890|  3.02k|        return !codepoint.empty();
 1891|  3.02k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  1.91k|    {
  754|  1.91k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  3.02k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.02k|              cvref<T> obj = *get<T>(fn);
  745|  3.02k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.02k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.02k|              }
  748|  3.02k|              else {
  749|  3.02k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.02k|              }
  751|  3.02k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.02k|    {
  684|  3.02k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.02k|            return static_cast<T*>(s.m_cp);
  686|  3.02k|        }
  687|  3.02k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.02k|            return static_cast<T*>(s.m_p);
  689|  3.02k|        }
  690|  3.02k|        else {
  691|  3.02k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.02k|        }
  693|  3.02k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  3.02k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  1.91k|        {
  662|  1.91k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.91k|{
  950|  1.91k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 1.73k]
  |  |  ------------------
  ------------------
  951|    174|        return eof_error::eof;
  952|    174|    }
  953|  1.73k|    return eof_error::good;
  954|  1.91k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  13.9k|    {
 2413|  13.9k|        return m_current;
 2414|  13.9k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  14.4k|    {
 2417|  14.4k|        return m_count;
 2418|  14.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  15.6k|    {
 6037|  15.6k|        const bool need_skipped_width =
 6038|  15.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 1.69k, False: 13.9k]
  |  Branch (6038:33): [True: 0, False: 13.9k]
  ------------------
 6039|  15.6k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  15.6k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 140, False: 15.4k]
  ------------------
 6043|  15.6k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 1.51k, False: 13.9k]
  ------------------
 6044|  1.65k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  1.65k|                             need_skipped_width);
 6046|  1.65k|        }
 6047|  13.9k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 13.4k, False: 492]
  |  Branch (6047:56): [True: 1.58k, False: 11.9k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.58k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.58k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.17k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.58k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.17k|                            make_eof_scan_error));
 6058|       |
 6059|  3.17k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.00k, False: 584]
  ------------------
 6060|  1.00k|                return result_type{
 6061|  1.00k|                    it,
 6062|  1.00k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.00k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.00k|                                             .view())};
 6065|  1.00k|            }
 6066|    584|            return result_type{it, 0};
 6067|  3.17k|        }
 6068|       |
 6069|  12.3k|        return result_type{rng.begin(), 0};
 6070|  13.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  4.20k|    {
 6079|  4.20k|        const bool need_skipped_width =
 6080|  4.20k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 388, False: 3.82k]
  |  Branch (6080:33): [True: 1.05k, False: 2.76k]
  ------------------
 6081|  4.20k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  4.20k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 186, False: 4.02k]
  ------------------
 6084|  4.20k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 316, False: 3.70k]
  ------------------
 6085|    502|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 204, False: 298]
  ------------------
 6086|    502|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 84, False: 120]
  ------------------
 6087|     84|                return result_type{rng.begin(), 0};
 6088|     84|            }
 6089|    418|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    418|                             specs.fill, need_skipped_width);
 6091|    502|        }
 6092|  3.70k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 3.57k, False: 128]
  ------------------
 6093|  3.70k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 3.26k, False: 318]
  ------------------
 6094|  3.70k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 182, False: 3.07k]
  |  Branch (6094:35): [True: 158, False: 24]
  ------------------
 6095|  3.26k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 564, False: 2.53k]
  ------------------
 6096|  3.10k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 458, False: 106]
  ------------------
 6097|    616|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 458, False: 158]
  ------------------
 6098|    458|                const auto initial_width =
 6099|    458|                    specs.precision - prefix_width - value_width;
 6100|    458|                auto max_width_view = take_width(rng, initial_width);
 6101|    458|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    458|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    458|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    458|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    458|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 458]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    458|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    458|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    458|                                  .transform_error(make_eof_scan_error));
 6103|    458|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    458|            }
 6105|    316|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 158]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    158|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    158|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|    316|                            make_eof_scan_error));
 6107|       |
 6108|    316|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 158, False: 0]
  ------------------
 6109|    158|                return result_type{
 6110|    158|                    it,
 6111|    158|                    calculate_text_width(make_contiguous_buffer(
 6112|    158|                                             ranges::subrange{rng.begin(), it})
 6113|    158|                                             .view())};
 6114|    158|            }
 6115|      0|            return result_type{it, 0};
 6116|    316|        }
 6117|  3.09k|        return result_type{rng.begin(), 0};
 6118|  3.70k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6192|  5.53k|    {
 6193|  5.53k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.53k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.53k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.53k|            auto rd = make_reader<T, char_type>();
 6198|  5.53k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.98k, False: 552]
  |  |  ------------------
  ------------------
 6199|  4.98k|                return unexpected(e);
 6200|  4.98k|            }
 6201|       |
 6202|    552|            return impl(rd, range, value);
 6203|  5.53k|        }
 6204|  5.53k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.53k|            auto rd = make_reader<T, char_type>();
 6206|  5.53k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.53k|                return unexpected(e);
 6208|  5.53k|            }
 6209|       |
 6210|  5.53k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.53k|                specs.width != 0) {
 6212|  5.53k|                return impl(rd, range, value);
 6213|  5.53k|            }
 6214|       |
 6215|  5.53k|            auto crange = get_as_contiguous(range);
 6216|  5.53k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.53k|            return ranges::next(range.begin(),
 6218|  5.53k|                                ranges::distance(crange.begin(), it));
 6219|  5.53k|        }
 6220|  5.53k|        else {
 6221|  5.53k|            SCN_EXPECT(false);
 6222|  5.53k|            SCN_UNREACHABLE;
 6223|  5.53k|        }
 6224|  5.53k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    552|    {
 6124|    552|        const bool need_skipped_width =
 6125|    552|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 168, False: 384]
  |  Branch (6125:33): [True: 300, False: 84]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    552|        auto it = rng.begin();
 6129|    552|        std::ptrdiff_t prefix_width = 0;
 6130|    552|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 302, False: 250]
  ------------------
 6131|    302|            auto max_width_view = take_width(rng, specs.precision);
 6132|    302|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     24|    }                                                  \
  |  |  |  | 3671|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    278|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    278|            it = prefix_result.first.base();
 6135|    278|            prefix_width = prefix_result.second;
 6136|    278|        }
 6137|    250|        else {
 6138|    250|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    250|            std::tie(it, prefix_width) = prefix_result;
 6140|    250|        }
 6141|    528|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    528|        std::ptrdiff_t value_width = 0;
 6145|    528|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 278, False: 250]
  ------------------
 6146|    278|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 272]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    272|            const auto initial_width = specs.precision - prefix_width;
 6154|    272|            auto max_width_view =
 6155|    272|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    272|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 272, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    272|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    272|    }                                                  \
  |  |  |  | 3671|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    250|        else {
 6161|    250|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 250, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    250|    }                                                  \
  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6192|  5.53k|    {
 6193|  5.53k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.53k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.53k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.53k|            auto rd = make_reader<T, char_type>();
 6198|  5.53k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.98k, False: 552]
  |  |  ------------------
  ------------------
 6199|  4.98k|                return unexpected(e);
 6200|  4.98k|            }
 6201|       |
 6202|    552|            return impl(rd, range, value);
 6203|  5.53k|        }
 6204|  5.53k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.53k|            auto rd = make_reader<T, char_type>();
 6206|  5.53k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.53k|                return unexpected(e);
 6208|  5.53k|            }
 6209|       |
 6210|  5.53k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.53k|                specs.width != 0) {
 6212|  5.53k|                return impl(rd, range, value);
 6213|  5.53k|            }
 6214|       |
 6215|  5.53k|            auto crange = get_as_contiguous(range);
 6216|  5.53k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.53k|            return ranges::next(range.begin(),
 6218|  5.53k|                                ranges::distance(crange.begin(), it));
 6219|  5.53k|        }
 6220|  5.53k|        else {
 6221|  5.53k|            SCN_EXPECT(false);
 6222|  5.53k|            SCN_UNREACHABLE;
 6223|  5.53k|        }
 6224|  5.53k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    552|    {
 6124|    552|        const bool need_skipped_width =
 6125|    552|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 168, False: 384]
  |  Branch (6125:33): [True: 300, False: 84]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    552|        auto it = rng.begin();
 6129|    552|        std::ptrdiff_t prefix_width = 0;
 6130|    552|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 302, False: 250]
  ------------------
 6131|    302|            auto max_width_view = take_width(rng, specs.precision);
 6132|    302|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     24|    }                                                  \
  |  |  |  | 3671|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    278|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    278|            it = prefix_result.first.base();
 6135|    278|            prefix_width = prefix_result.second;
 6136|    278|        }
 6137|    250|        else {
 6138|    250|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    250|            std::tie(it, prefix_width) = prefix_result;
 6140|    250|        }
 6141|    528|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    528|        std::ptrdiff_t value_width = 0;
 6145|    528|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 278, False: 250]
  ------------------
 6146|    278|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 272]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    272|            const auto initial_width = specs.precision - prefix_width;
 6154|    272|            auto max_width_view =
 6155|    272|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    272|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 272, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    272|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    272|    }                                                  \
  |  |  |  | 3671|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    250|        else {
 6161|    250|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 250, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    250|    }                                                  \
  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6192|  5.50k|    {
 6193|  5.50k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.50k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.50k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.50k|            auto rd = make_reader<T, char_type>();
 6198|  5.50k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.02k, False: 480]
  |  |  ------------------
  ------------------
 6199|  5.02k|                return unexpected(e);
 6200|  5.02k|            }
 6201|       |
 6202|    480|            return impl(rd, range, value);
 6203|  5.50k|        }
 6204|  5.50k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.50k|            auto rd = make_reader<T, char_type>();
 6206|  5.50k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.50k|                return unexpected(e);
 6208|  5.50k|            }
 6209|       |
 6210|  5.50k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.50k|                specs.width != 0) {
 6212|  5.50k|                return impl(rd, range, value);
 6213|  5.50k|            }
 6214|       |
 6215|  5.50k|            auto crange = get_as_contiguous(range);
 6216|  5.50k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.50k|            return ranges::next(range.begin(),
 6218|  5.50k|                                ranges::distance(crange.begin(), it));
 6219|  5.50k|        }
 6220|  5.50k|        else {
 6221|  5.50k|            SCN_EXPECT(false);
 6222|  5.50k|            SCN_UNREACHABLE;
 6223|  5.50k|        }
 6224|  5.50k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5752|  5.50k|    {
 5753|  5.50k|        reader_error_handler eh{};
 5754|  5.50k|        detail::check_pointer_type_specs(specs, eh);
 5755|  5.50k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.02k, False: 480]
  |  |  ------------------
  ------------------
 5756|  5.02k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  5.02k|        }
 5758|    480|        return {};
 5759|  5.50k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    480|    {
 6124|    480|        const bool need_skipped_width =
 6125|    480|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 162, False: 318]
  |  Branch (6125:33): [True: 258, False: 60]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    480|        auto it = rng.begin();
 6129|    480|        std::ptrdiff_t prefix_width = 0;
 6130|    480|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 260, False: 220]
  ------------------
 6131|    260|            auto max_width_view = take_width(rng, specs.precision);
 6132|    260|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    260|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 244]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    244|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    244|            it = prefix_result.first.base();
 6135|    244|            prefix_width = prefix_result.second;
 6136|    244|        }
 6137|    220|        else {
 6138|    220|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    220|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    220|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    220|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 220]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    220|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    220|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    220|            std::tie(it, prefix_width) = prefix_result;
 6140|    220|        }
 6141|    464|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    464|        std::ptrdiff_t value_width = 0;
 6145|    464|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 244, False: 220]
  ------------------
 6146|    244|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 240]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    240|            const auto initial_width = specs.precision - prefix_width;
 6154|    240|            auto max_width_view =
 6155|    240|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    240|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 240, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    240|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    240|    }                                                  \
  |  |  |  | 3671|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    220|        else {
 6161|    220|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    220|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    220|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 220, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    220|    }                                                  \
  |  | 3671|    220|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    220|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    240|    {
 5782|    240|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    240|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    240|        return read_default(range, value, loc);
 5784|    240|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    240|    {
 5765|    240|        detail::format_specs specs{};
 5766|    240|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    240|        std::uintptr_t intvalue{};
 5769|    240|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 240, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    240|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    240|    }                                                  \
  |  |  |  | 3671|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    240|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    220|    {
 5782|    220|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    220|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    220|        return read_default(range, value, loc);
 5784|    220|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6192|  5.53k|    {
 6193|  5.53k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.53k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.53k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.53k|            auto rd = make_reader<T, char_type>();
 6198|  5.53k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.80k, False: 732]
  |  |  ------------------
  ------------------
 6199|  4.80k|                return unexpected(e);
 6200|  4.80k|            }
 6201|       |
 6202|    732|            return impl(rd, range, value);
 6203|  5.53k|        }
 6204|  5.53k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.53k|            auto rd = make_reader<T, char_type>();
 6206|  5.53k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.53k|                return unexpected(e);
 6208|  5.53k|            }
 6209|       |
 6210|  5.53k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.53k|                specs.width != 0) {
 6212|  5.53k|                return impl(rd, range, value);
 6213|  5.53k|            }
 6214|       |
 6215|  5.53k|            auto crange = get_as_contiguous(range);
 6216|  5.53k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.53k|            return ranges::next(range.begin(),
 6218|  5.53k|                                ranges::distance(crange.begin(), it));
 6219|  5.53k|        }
 6220|  5.53k|        else {
 6221|  5.53k|            SCN_EXPECT(false);
 6222|  5.53k|            SCN_UNREACHABLE;
 6223|  5.53k|        }
 6224|  5.53k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  5.53k|    {
 3040|  5.53k|        reader_error_handler eh{};
 3041|  5.53k|        get_derived().check_specs_impl(specs, eh);
 3042|  5.53k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.80k, False: 732]
  |  |  ------------------
  ------------------
 3043|  4.80k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.80k|        }
 3045|    732|        return {};
 3046|  5.53k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  5.53k|    {
 3051|  5.53k|        return static_cast<Derived&>(*this);
 3052|  5.53k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  5.53k|    {
 5497|  5.53k|        detail::check_bool_type_specs(specs, eh);
 5498|  5.53k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    732|    {
 6124|    732|        const bool need_skipped_width =
 6125|    732|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 178, False: 554]
  |  Branch (6125:33): [True: 362, False: 192]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    732|        auto it = rng.begin();
 6129|    732|        std::ptrdiff_t prefix_width = 0;
 6130|    732|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 366, False: 366]
  ------------------
 6131|    366|            auto max_width_view = take_width(rng, specs.precision);
 6132|    366|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    366|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    366|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    366|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 338]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     28|    }                                                  \
  |  |  |  | 3671|    366|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    338|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    338|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    338|            it = prefix_result.first.base();
 6135|    338|            prefix_width = prefix_result.second;
 6136|    338|        }
 6137|    366|        else {
 6138|    366|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    366|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    366|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    366|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 366]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    366|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    366|            std::tie(it, prefix_width) = prefix_result;
 6140|    366|        }
 6141|    704|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    704|        std::ptrdiff_t value_width = 0;
 6145|    704|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 338, False: 366]
  ------------------
 6146|    338|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 332]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    332|            const auto initial_width = specs.precision - prefix_width;
 6154|    332|            auto max_width_view =
 6155|    332|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    332|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    332|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    332|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    332|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    332|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 332, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    332|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    332|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    332|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    332|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    332|    }                                                  \
  |  |  |  | 3671|    332|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    366|        else {
 6161|    366|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    366|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    366|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 366, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    366|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    366|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    366|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    366|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    366|    }                                                  \
  |  | 3671|    366|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    332|    {
 5516|    332|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    332|#if !SCN_DISABLE_LOCALE
 5519|    332|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 12, False: 320]
  ------------------
 5520|     12|            return rd.read_localized(range, loc, value);
 5521|     12|        }
 5522|    320|#endif
 5523|       |
 5524|    320|        return rd.read_classic(range, value);
 5525|    332|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5528|    698|    {
 5529|    698|        SCN_GCC_COMPAT_PUSH
 5530|    698|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    698|        switch (specs.type) {
 5533|    174|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 174, False: 524]
  ------------------
 5534|    174|                return bool_reader_base::allow_text;
 5535|       |
 5536|     10|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 10, False: 688]
  ------------------
 5537|     18|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 8, False: 690]
  ------------------
 5538|     24|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 692]
  ------------------
 5539|     36|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 12, False: 686]
  ------------------
 5540|     52|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 16, False: 682]
  ------------------
 5541|     56|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 4, False: 694]
  ------------------
 5542|     56|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    468|            default:
  ------------------
  |  Branch (5544:13): [True: 468, False: 230]
  ------------------
 5545|    468|                return bool_reader_base::allow_text |
 5546|    468|                       bool_reader_base::allow_numeric;
 5547|    698|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    698|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     12|    {
 5428|     12|        scan_error err{scan_error::invalid_scanned_value,
 5429|     12|                       "Failed to read boolean"};
 5430|       |
 5431|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 10, False: 2]
  ------------------
 5432|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 10]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     10|            else {
 5436|     10|                err = r.error();
 5437|     10|            }
 5438|     10|        }
 5439|       |
 5440|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 10, False: 2]
  ------------------
 5441|     10|            auto stdloc = loc.get<std::locale>();
 5442|     10|            const auto& numpunct =
 5443|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     10|            const auto truename = numpunct.truename();
 5445|     10|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     10|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 10]
  ------------------
 5448|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     10|            else {
 5452|     10|                err = r.error();
 5453|     10|            }
 5454|     10|        }
 5455|       |
 5456|     12|        return unexpected(err);
 5457|     12|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    272|    {
 5384|    272|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 272]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    272|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 272]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    272|        return unexpected_scan_error(
 5394|    272|            scan_error::invalid_scanned_value,
 5395|    272|            "Failed to read numeric boolean value: No match");
 5396|    272|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    544|{
 2146|    544|    auto it = read_code_unit(range);
 2147|    544|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    544|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 544]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    544|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    544|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 544, False: 0]
  |  |  ------------------
  ------------------
 2152|    544|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    544|        return unexpected(parse_error::error);
 2154|    544|    }
 2155|       |
 2156|      0|    return *it;
 2157|    544|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5467|     10|    {
 5468|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     10|        const auto shorter = std::pair{
 5470|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 10, False: 0]
  ------------------
 5471|     10|        const auto longer = std::pair{
 5472|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 10]
  ------------------
 5473|       |
 5474|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 10]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 10]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     10|                                     "read_textual: No match");
 5485|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     10|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2185|     10|        return unexpected(parse_error::error);
 2186|     10|    }
 2187|      0|    return it;
 2188|     10|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    612|{
 1857|    612|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    612|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    612|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    612|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    612|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    612|        if (sz < count) {
 1862|    612|            return unexpected(eof_error::eof);
 1863|    612|        }
 1864|       |
 1865|    612|        return ranges::next(range.begin(), count);
 1866|    612|    }
 1867|    612|    else {
 1868|    612|        auto it = range.begin();
 1869|    612|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 612]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  3.01k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.54k, False: 478]
  ------------------
 1874|  2.54k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 134, False: 2.40k]
  ------------------
 1875|    134|                return unexpected(eof_error::eof);
 1876|    134|            }
 1877|  2.54k|        }
 1878|       |
 1879|    478|        return it;
 1880|    612|    }
 1881|    612|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|    612|{
 1095|    612|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    612|        return r.size();
 1097|    612|    }
 1098|    612|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    612|                           ranges::const_iterator_t<Range>,
 1100|    612|                           typename detail::basic_scan_buffer<
 1101|    612|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    612|        if constexpr (ranges::common_range<Range>) {
 1103|    612|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    612|        }
 1105|    612|        else {
 1106|    612|            if (r.begin().stores_parent()) {
 1107|    612|                return static_cast<size_t>(
 1108|    612|                    r.begin().parent()->chars_available() -
 1109|    612|                    r.begin().position());
 1110|    612|            }
 1111|    612|            return r.begin().contiguous_segment().size();
 1112|    612|        }
 1113|    612|    }
 1114|    612|    else {
 1115|    612|        return 0;
 1116|    612|    }
 1117|    612|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    320|    {
 5355|    320|        scan_error err{scan_error::invalid_scanned_value,
 5356|    320|                       "Failed to read boolean"};
 5357|       |
 5358|    320|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 262, False: 58]
  ------------------
 5359|    262|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 262]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    262|            else {
 5363|    262|                err = r.error();
 5364|    262|            }
 5365|    262|        }
 5366|       |
 5367|    320|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 296, False: 24]
  ------------------
 5368|    296|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 296]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    296|            else {
 5372|    296|                err = r.error();
 5373|    296|            }
 5374|    296|        }
 5375|       |
 5376|    320|        return unexpected(err);
 5377|    320|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    296|    {
 5402|    296|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 296]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    296|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 296]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    296|        return unexpected_scan_error(
 5412|    296|            scan_error::invalid_scanned_value,
 5413|    296|            "Failed to read textual boolean value: No match");
 5414|    296|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    592|{
 2194|    592|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 124, False: 468]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    124|    }                                                  \
  |  |  |  | 3671|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    468|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    468|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    468|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    468|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    468|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    468|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 468, False: 0]
  |  |  ------------------
  ------------------
 2201|    468|            return unexpected(parse_error::error);
 2202|    468|        }
 2203|      0|        return it;
 2204|    468|    }
 2205|    468|    else {
 2206|    468|        auto range_it = range.begin();
 2207|    468|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|    468|            if (SCN_UNLIKELY(*range_it !=
 2209|    468|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    468|                return unexpected(parse_error::error);
 2211|    468|            }
 2212|    468|        }
 2213|    468|        return it;
 2214|    468|    }
 2215|    468|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    366|    {
 5516|    366|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    366|#if !SCN_DISABLE_LOCALE
 5519|    366|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 20, False: 346]
  ------------------
 5520|     20|            return rd.read_localized(range, loc, value);
 5521|     20|        }
 5522|    346|#endif
 5523|       |
 5524|    346|        return rd.read_classic(range, value);
 5525|    366|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     20|    {
 5428|     20|        scan_error err{scan_error::invalid_scanned_value,
 5429|     20|                       "Failed to read boolean"};
 5430|       |
 5431|     20|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 14, False: 6]
  ------------------
 5432|     14|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 14]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     14|            else {
 5436|     14|                err = r.error();
 5437|     14|            }
 5438|     14|        }
 5439|       |
 5440|     20|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 12, False: 8]
  ------------------
 5441|     12|            auto stdloc = loc.get<std::locale>();
 5442|     12|            const auto& numpunct =
 5443|     12|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     12|            const auto truename = numpunct.truename();
 5445|     12|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     12|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 12]
  ------------------
 5448|     12|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     12|            else {
 5452|     12|                err = r.error();
 5453|     12|            }
 5454|     12|        }
 5455|       |
 5456|     20|        return unexpected(err);
 5457|     20|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5467|     12|    {
 5468|     12|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     12|        const auto shorter = std::pair{
 5470|     12|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 12, False: 0]
  ------------------
 5471|     12|        const auto longer = std::pair{
 5472|     12|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 12]
  ------------------
 5473|       |
 5474|     12|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 12]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     12|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 12]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     12|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     12|                                     "read_textual: No match");
 5485|     12|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     24|{
 2179|     24|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     22|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     22|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     22|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     22|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 2185|     22|        return unexpected(parse_error::error);
 2186|     22|    }
 2187|      0|    return it;
 2188|     22|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6192|  5.50k|    {
 6193|  5.50k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.50k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.50k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.50k|            auto rd = make_reader<T, char_type>();
 6198|  5.50k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.97k, False: 530]
  |  |  ------------------
  ------------------
 6199|  4.97k|                return unexpected(e);
 6200|  4.97k|            }
 6201|       |
 6202|    530|            return impl(rd, range, value);
 6203|  5.50k|        }
 6204|  5.50k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.50k|            auto rd = make_reader<T, char_type>();
 6206|  5.50k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.50k|                return unexpected(e);
 6208|  5.50k|            }
 6209|       |
 6210|  5.50k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.50k|                specs.width != 0) {
 6212|  5.50k|                return impl(rd, range, value);
 6213|  5.50k|            }
 6214|       |
 6215|  5.50k|            auto crange = get_as_contiguous(range);
 6216|  5.50k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.50k|            return ranges::next(range.begin(),
 6218|  5.50k|                                ranges::distance(crange.begin(), it));
 6219|  5.50k|        }
 6220|  5.50k|        else {
 6221|  5.50k|            SCN_EXPECT(false);
 6222|  5.50k|            SCN_UNREACHABLE;
 6223|  5.50k|        }
 6224|  5.50k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    530|    {
 6124|    530|        const bool need_skipped_width =
 6125|    530|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 164, False: 366]
  |  Branch (6125:33): [True: 290, False: 76]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    530|        auto it = rng.begin();
 6129|    530|        std::ptrdiff_t prefix_width = 0;
 6130|    530|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 292, False: 238]
  ------------------
 6131|    292|            auto max_width_view = take_width(rng, specs.precision);
 6132|    292|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    292|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 292]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    292|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    292|            it = prefix_result.first.base();
 6135|    292|            prefix_width = prefix_result.second;
 6136|    292|        }
 6137|    238|        else {
 6138|    238|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 238]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    238|            std::tie(it, prefix_width) = prefix_result;
 6140|    238|        }
 6141|    530|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    530|        std::ptrdiff_t value_width = 0;
 6145|    530|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 292, False: 238]
  ------------------
 6146|    292|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 286]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    286|            const auto initial_width = specs.precision - prefix_width;
 6154|    286|            auto max_width_view =
 6155|    286|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    286|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    254|            it = w_it.base();
 6158|    254|            value_width = initial_width - w_it.count();
 6159|    254|        }
 6160|    238|        else {
 6161|    238|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22, False: 216]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     22|    }                                                  \
  |  | 3671|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    216|                                             specs, value, loc));
 6163|       |
 6164|    216|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 158, False: 58]
  ------------------
 6165|    158|                value_width = calculate_text_width(
 6166|    158|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    158|                        .view());
 6168|    158|            }
 6169|    216|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    470|        std::ptrdiff_t postfix_width = 0;
 6173|    470|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 470, False: 0]
  ------------------
 6174|    470|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    470|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    470|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    470|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    470|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 470]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    470|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    470|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    470|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    470|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    470|                                 value_width));
 6178|    470|            std::tie(it, postfix_width) = postfix_result;
 6179|    470|        }
 6180|       |
 6181|    470|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    470|                                                 value_width, postfix_width);
 6183|    470|            !e) {
  ------------------
  |  Branch (6183:13): [True: 140, False: 330]
  ------------------
 6184|    140|            return unexpected(e);
 6185|    140|        }
 6186|       |
 6187|    330|        return it;
 6188|    470|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|  5.53k|    {
 6193|  5.53k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.53k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.53k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.53k|            auto rd = make_reader<T, char_type>();
 6198|  5.53k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.98k, False: 554]
  |  |  ------------------
  ------------------
 6199|  4.98k|                return unexpected(e);
 6200|  4.98k|            }
 6201|       |
 6202|    554|            return impl(rd, range, value);
 6203|  5.53k|        }
 6204|  5.53k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.53k|            auto rd = make_reader<T, char_type>();
 6206|  5.53k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.53k|                return unexpected(e);
 6208|  5.53k|            }
 6209|       |
 6210|  5.53k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.53k|                specs.width != 0) {
 6212|  5.53k|                return impl(rd, range, value);
 6213|  5.53k|            }
 6214|       |
 6215|  5.53k|            auto crange = get_as_contiguous(range);
 6216|  5.53k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.53k|            return ranges::next(range.begin(),
 6218|  5.53k|                                ranges::distance(crange.begin(), it));
 6219|  5.53k|        }
 6220|  5.53k|        else {
 6221|  5.53k|            SCN_EXPECT(false);
 6222|  5.53k|            SCN_UNREACHABLE;
 6223|  5.53k|        }
 6224|  5.53k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    554|    {
 6124|    554|        const bool need_skipped_width =
 6125|    554|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 172, False: 382]
  |  Branch (6125:33): [True: 296, False: 86]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    554|        auto it = rng.begin();
 6129|    554|        std::ptrdiff_t prefix_width = 0;
 6130|    554|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 300, False: 254]
  ------------------
 6131|    300|            auto max_width_view = take_width(rng, specs.precision);
 6132|    300|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    300|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    300|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    300|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    300|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|    300|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    278|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    278|            it = prefix_result.first.base();
 6135|    278|            prefix_width = prefix_result.second;
 6136|    278|        }
 6137|    254|        else {
 6138|    254|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    254|            std::tie(it, prefix_width) = prefix_result;
 6140|    254|        }
 6141|    532|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    532|        std::ptrdiff_t value_width = 0;
 6145|    532|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 278, False: 254]
  ------------------
 6146|    278|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 8, False: 270]
  ------------------
 6147|      8|                return unexpected_scan_error(
 6148|      8|                    scan_error::invalid_scanned_value,
 6149|      8|                    "Too many fill characters before value, "
 6150|      8|                    "precision exceeded before reading value");
 6151|      8|            }
 6152|       |
 6153|    270|            const auto initial_width = specs.precision - prefix_width;
 6154|    270|            auto max_width_view =
 6155|    270|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    270|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 270, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    270|    }                                                  \
  |  |  |  | 3671|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    254|        else {
 6161|    254|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 254, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    254|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    254|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    254|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    254|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    254|    }                                                  \
  |  | 3671|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  5.50k|    {
 6193|  5.50k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.50k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.50k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.50k|            auto rd = make_reader<T, char_type>();
 6198|  5.50k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 5.37k]
  |  |  ------------------
  ------------------
 6199|    128|                return unexpected(e);
 6200|    128|            }
 6201|       |
 6202|  5.37k|            return impl(rd, range, value);
 6203|  5.50k|        }
 6204|  5.50k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.50k|            auto rd = make_reader<T, char_type>();
 6206|  5.50k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.50k|                return unexpected(e);
 6208|  5.50k|            }
 6209|       |
 6210|  5.50k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.50k|                specs.width != 0) {
 6212|  5.50k|                return impl(rd, range, value);
 6213|  5.50k|            }
 6214|       |
 6215|  5.50k|            auto crange = get_as_contiguous(range);
 6216|  5.50k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.50k|            return ranges::next(range.begin(),
 6218|  5.50k|                                ranges::distance(crange.begin(), it));
 6219|  5.50k|        }
 6220|  5.50k|        else {
 6221|  5.50k|            SCN_EXPECT(false);
 6222|  5.50k|            SCN_UNREACHABLE;
 6223|  5.50k|        }
 6224|  5.50k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  5.37k|    {
 6124|  5.37k|        const bool need_skipped_width =
 6125|  5.37k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 244, False: 5.13k]
  |  Branch (6125:33): [True: 680, False: 4.45k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  5.37k|        auto it = rng.begin();
 6129|  5.37k|        std::ptrdiff_t prefix_width = 0;
 6130|  5.37k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 690, False: 4.68k]
  ------------------
 6131|    690|            auto max_width_view = take_width(rng, specs.precision);
 6132|    690|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    690|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    690|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    690|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    690|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    690|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    670|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    670|            it = prefix_result.first.base();
 6135|    670|            prefix_width = prefix_result.second;
 6136|    670|        }
 6137|  4.68k|        else {
 6138|  4.68k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  4.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  4.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  4.68k|            std::tie(it, prefix_width) = prefix_result;
 6140|  4.68k|        }
 6141|  5.35k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  5.35k|        std::ptrdiff_t value_width = 0;
 6145|  5.35k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 670, False: 4.68k]
  ------------------
 6146|    670|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 664]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    664|            const auto initial_width = specs.precision - prefix_width;
 6154|    664|            auto max_width_view =
 6155|    664|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    664|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    664|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    664|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    664|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    664|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 294, False: 370]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    294|    }                                                  \
  |  |  |  | 3671|    664|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    370|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    370|            it = w_it.base();
 6158|    370|            value_width = initial_width - w_it.count();
 6159|    370|        }
 6160|  4.68k|        else {
 6161|  4.68k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  4.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  4.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.40k, False: 1.28k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.40k|    }                                                  \
  |  | 3671|  4.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.28k|                                             specs, value, loc));
 6163|       |
 6164|  1.28k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 196, False: 1.08k]
  ------------------
 6165|    196|                value_width = calculate_text_width(
 6166|    196|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    196|                        .view());
 6168|    196|            }
 6169|  1.28k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.65k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.65k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.24k, False: 404]
  ------------------
 6174|  1.24k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.24k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.24k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.24k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.24k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.24k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.24k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.24k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.24k|                                 value_width));
 6178|  1.24k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.24k|        }
 6180|       |
 6181|  1.65k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.65k|                                                 value_width, postfix_width);
 6183|  1.65k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 104, False: 1.54k]
  ------------------
 6184|    104|            return unexpected(e);
 6185|    104|        }
 6186|       |
 6187|  1.54k|        return it;
 6188|  1.65k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  5.50k|    {
 6193|  5.50k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.50k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.50k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.50k|            auto rd = make_reader<T, char_type>();
 6198|  5.50k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 5.37k]
  |  |  ------------------
  ------------------
 6199|    128|                return unexpected(e);
 6200|    128|            }
 6201|       |
 6202|  5.37k|            return impl(rd, range, value);
 6203|  5.50k|        }
 6204|  5.50k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.50k|            auto rd = make_reader<T, char_type>();
 6206|  5.50k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.50k|                return unexpected(e);
 6208|  5.50k|            }
 6209|       |
 6210|  5.50k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.50k|                specs.width != 0) {
 6212|  5.50k|                return impl(rd, range, value);
 6213|  5.50k|            }
 6214|       |
 6215|  5.50k|            auto crange = get_as_contiguous(range);
 6216|  5.50k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.50k|            return ranges::next(range.begin(),
 6218|  5.50k|                                ranges::distance(crange.begin(), it));
 6219|  5.50k|        }
 6220|  5.50k|        else {
 6221|  5.50k|            SCN_EXPECT(false);
 6222|  5.50k|            SCN_UNREACHABLE;
 6223|  5.50k|        }
 6224|  5.50k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  5.37k|    {
 6124|  5.37k|        const bool need_skipped_width =
 6125|  5.37k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 244, False: 5.13k]
  |  Branch (6125:33): [True: 680, False: 4.45k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  5.37k|        auto it = rng.begin();
 6129|  5.37k|        std::ptrdiff_t prefix_width = 0;
 6130|  5.37k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 690, False: 4.68k]
  ------------------
 6131|    690|            auto max_width_view = take_width(rng, specs.precision);
 6132|    690|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    690|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    690|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    690|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    690|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    690|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    670|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    670|            it = prefix_result.first.base();
 6135|    670|            prefix_width = prefix_result.second;
 6136|    670|        }
 6137|  4.68k|        else {
 6138|  4.68k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  4.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  4.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  4.68k|            std::tie(it, prefix_width) = prefix_result;
 6140|  4.68k|        }
 6141|  5.35k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  5.35k|        std::ptrdiff_t value_width = 0;
 6145|  5.35k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 670, False: 4.68k]
  ------------------
 6146|    670|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 664]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    664|            const auto initial_width = specs.precision - prefix_width;
 6154|    664|            auto max_width_view =
 6155|    664|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    664|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    664|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    664|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    664|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    664|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 294, False: 370]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    294|    }                                                  \
  |  |  |  | 3671|    664|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    370|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    370|            it = w_it.base();
 6158|    370|            value_width = initial_width - w_it.count();
 6159|    370|        }
 6160|  4.68k|        else {
 6161|  4.68k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  4.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  4.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.40k, False: 1.28k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.40k|    }                                                  \
  |  | 3671|  4.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.28k|                                             specs, value, loc));
 6163|       |
 6164|  1.28k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 196, False: 1.08k]
  ------------------
 6165|    196|                value_width = calculate_text_width(
 6166|    196|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    196|                        .view());
 6168|    196|            }
 6169|  1.28k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.65k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.65k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.24k, False: 404]
  ------------------
 6174|  1.24k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.24k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.24k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.24k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.24k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.24k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.24k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.24k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.24k|                                 value_width));
 6178|  1.24k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.24k|        }
 6180|       |
 6181|  1.65k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.65k|                                                 value_width, postfix_width);
 6183|  1.65k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 104, False: 1.54k]
  ------------------
 6184|    104|            return unexpected(e);
 6185|    104|        }
 6186|       |
 6187|  1.54k|        return it;
 6188|  1.65k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  5.50k|    {
 6193|  5.50k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.50k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.50k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.50k|            auto rd = make_reader<T, char_type>();
 6198|  5.50k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 5.37k]
  |  |  ------------------
  ------------------
 6199|    128|                return unexpected(e);
 6200|    128|            }
 6201|       |
 6202|  5.37k|            return impl(rd, range, value);
 6203|  5.50k|        }
 6204|  5.50k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.50k|            auto rd = make_reader<T, char_type>();
 6206|  5.50k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.50k|                return unexpected(e);
 6208|  5.50k|            }
 6209|       |
 6210|  5.50k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.50k|                specs.width != 0) {
 6212|  5.50k|                return impl(rd, range, value);
 6213|  5.50k|            }
 6214|       |
 6215|  5.50k|            auto crange = get_as_contiguous(range);
 6216|  5.50k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.50k|            return ranges::next(range.begin(),
 6218|  5.50k|                                ranges::distance(crange.begin(), it));
 6219|  5.50k|        }
 6220|  5.50k|        else {
 6221|  5.50k|            SCN_EXPECT(false);
 6222|  5.50k|            SCN_UNREACHABLE;
 6223|  5.50k|        }
 6224|  5.50k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  5.37k|    {
 6124|  5.37k|        const bool need_skipped_width =
 6125|  5.37k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 244, False: 5.13k]
  |  Branch (6125:33): [True: 680, False: 4.45k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  5.37k|        auto it = rng.begin();
 6129|  5.37k|        std::ptrdiff_t prefix_width = 0;
 6130|  5.37k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 690, False: 4.68k]
  ------------------
 6131|    690|            auto max_width_view = take_width(rng, specs.precision);
 6132|    690|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    690|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    690|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    690|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    690|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    690|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    670|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    670|            it = prefix_result.first.base();
 6135|    670|            prefix_width = prefix_result.second;
 6136|    670|        }
 6137|  4.68k|        else {
 6138|  4.68k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  4.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  4.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  4.68k|            std::tie(it, prefix_width) = prefix_result;
 6140|  4.68k|        }
 6141|  5.35k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  5.35k|        std::ptrdiff_t value_width = 0;
 6145|  5.35k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 670, False: 4.68k]
  ------------------
 6146|    670|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 664]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    664|            const auto initial_width = specs.precision - prefix_width;
 6154|    664|            auto max_width_view =
 6155|    664|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    664|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    664|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    664|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    664|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    664|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 294, False: 370]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    294|    }                                                  \
  |  |  |  | 3671|    664|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    370|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    370|            it = w_it.base();
 6158|    370|            value_width = initial_width - w_it.count();
 6159|    370|        }
 6160|  4.68k|        else {
 6161|  4.68k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  4.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  4.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.40k, False: 1.28k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.40k|    }                                                  \
  |  | 3671|  4.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.28k|                                             specs, value, loc));
 6163|       |
 6164|  1.28k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 196, False: 1.08k]
  ------------------
 6165|    196|                value_width = calculate_text_width(
 6166|    196|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    196|                        .view());
 6168|    196|            }
 6169|  1.28k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.65k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.65k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.24k, False: 404]
  ------------------
 6174|  1.24k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.24k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.24k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.24k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.24k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.24k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.24k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.24k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.24k|                                 value_width));
 6178|  1.24k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.24k|        }
 6180|       |
 6181|  1.65k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.65k|                                                 value_width, postfix_width);
 6183|  1.65k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 104, False: 1.54k]
  ------------------
 6184|    104|            return unexpected(e);
 6185|    104|        }
 6186|       |
 6187|  1.54k|        return it;
 6188|  1.65k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  4.32k|{
 5795|  4.32k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.32k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  4.32k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 480, False: 3.84k]
  ------------------
 5800|    480|        return range.begin();
 5801|    480|    }
 5802|       |
 5803|  3.84k|    return skip_classic_whitespace(range);
 5804|  4.32k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5870|    480|    {
 5871|    480|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    480|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    480|                          basic_contiguous_scan_context<char_type>>) {
 5875|    480|            auto rd = make_reader<T, char_type>();
 5876|    480|            return impl(rd, range, value);
 5877|    480|        }
 5878|    480|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    480|            auto rd = make_reader<T, char_type>();
 5880|    480|            if (!is_segment_contiguous(range)) {
 5881|    480|                return impl(rd, range, value);
 5882|    480|            }
 5883|    480|            auto crange = get_as_contiguous(range);
 5884|    480|            SCN_TRY(it, impl(rd, crange, value));
 5885|    480|            return ranges::next(range.begin(),
 5886|    480|                                ranges::distance(crange.begin(), it));
 5887|    480|        }
 5888|    480|        else {
 5889|    480|            SCN_EXPECT(false);
 5890|    480|            SCN_UNREACHABLE;
 5891|    480|        }
 5892|    480|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    480|    {
 5863|    480|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 480]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    480|                        .transform_error(make_eof_scan_error));
 5865|    480|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    480|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    480|    {
 3528|    480|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    480|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    480|        return read_default_with_base(range, value, 10);
 3530|    480|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    480|    {
 3492|    480|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 480]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    480|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    480|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    480|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    480|                return unexpected_scan_error(
 3498|    480|                    scan_error::invalid_scanned_value,
 3499|    480|                    "Unexpected '-' sign when parsing an "
 3500|    480|                    "unsigned value");
 3501|    480|            }
 3502|    480|        }
 3503|       |
 3504|    480|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 480]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|    960|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 480]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|    960|                parse_integer_digits_without_thsep(
 3511|    960|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|    960|                    prefix_result.parsed_base));
 3513|       |
 3514|    960|        auto buf = make_contiguous_buffer(
 3515|    960|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|    960|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 480, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    480|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    480|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    480|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    480|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    480|    }                                                  \
  |  |  |  | 3671|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|    960|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5870|    480|    {
 5871|    480|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    480|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    480|                          basic_contiguous_scan_context<char_type>>) {
 5875|    480|            auto rd = make_reader<T, char_type>();
 5876|    480|            return impl(rd, range, value);
 5877|    480|        }
 5878|    480|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    480|            auto rd = make_reader<T, char_type>();
 5880|    480|            if (!is_segment_contiguous(range)) {
 5881|    480|                return impl(rd, range, value);
 5882|    480|            }
 5883|    480|            auto crange = get_as_contiguous(range);
 5884|    480|            SCN_TRY(it, impl(rd, crange, value));
 5885|    480|            return ranges::next(range.begin(),
 5886|    480|                                ranges::distance(crange.begin(), it));
 5887|    480|        }
 5888|    480|        else {
 5889|    480|            SCN_EXPECT(false);
 5890|    480|            SCN_UNREACHABLE;
 5891|    480|        }
 5892|    480|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    480|    {
 5863|    480|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 480]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    480|                        .transform_error(make_eof_scan_error));
 5865|    480|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    480|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    480|    {
 3528|    480|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    480|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    480|        return read_default_with_base(range, value, 10);
 3530|    480|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    480|    {
 3492|    480|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 480]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    480|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    480|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    480|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 480]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    480|        }
 3503|       |
 3504|    480|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 480]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|    960|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 480]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|    960|                parse_integer_digits_without_thsep(
 3511|    960|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|    960|                    prefix_result.parsed_base));
 3513|       |
 3514|    960|        auto buf = make_contiguous_buffer(
 3515|    960|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|    960|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 480, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    480|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    480|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    480|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    480|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    480|    }                                                  \
  |  |  |  | 3671|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|    960|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5870|    480|    {
 5871|    480|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    480|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    480|                          basic_contiguous_scan_context<char_type>>) {
 5875|    480|            auto rd = make_reader<T, char_type>();
 5876|    480|            return impl(rd, range, value);
 5877|    480|        }
 5878|    480|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    480|            auto rd = make_reader<T, char_type>();
 5880|    480|            if (!is_segment_contiguous(range)) {
 5881|    480|                return impl(rd, range, value);
 5882|    480|            }
 5883|    480|            auto crange = get_as_contiguous(range);
 5884|    480|            SCN_TRY(it, impl(rd, crange, value));
 5885|    480|            return ranges::next(range.begin(),
 5886|    480|                                ranges::distance(crange.begin(), it));
 5887|    480|        }
 5888|    480|        else {
 5889|    480|            SCN_EXPECT(false);
 5890|    480|            SCN_UNREACHABLE;
 5891|    480|        }
 5892|    480|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    480|    {
 5863|    480|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 480]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    480|                        .transform_error(make_eof_scan_error));
 5865|    480|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    480|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5747|    928|    {
 5748|    928|        return true;
 5749|    928|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    804|    {
 5765|    804|        detail::format_specs specs{};
 5766|    804|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    804|        std::uintptr_t intvalue{};
 5769|    804|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    804|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    804|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    804|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 804, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    804|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    804|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    804|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    804|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    804|    }                                                  \
  |  |  |  | 3671|    804|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    804|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5870|    480|    {
 5871|    480|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    480|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    480|                          basic_contiguous_scan_context<char_type>>) {
 5875|    480|            auto rd = make_reader<T, char_type>();
 5876|    480|            return impl(rd, range, value);
 5877|    480|        }
 5878|    480|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    480|            auto rd = make_reader<T, char_type>();
 5880|    480|            if (!is_segment_contiguous(range)) {
 5881|    480|                return impl(rd, range, value);
 5882|    480|            }
 5883|    480|            auto crange = get_as_contiguous(range);
 5884|    480|            SCN_TRY(it, impl(rd, crange, value));
 5885|    480|            return ranges::next(range.begin(),
 5886|    480|                                ranges::distance(crange.begin(), it));
 5887|    480|        }
 5888|    480|        else {
 5889|    480|            SCN_EXPECT(false);
 5890|    480|            SCN_UNREACHABLE;
 5891|    480|        }
 5892|    480|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    480|    {
 5863|    480|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 480]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    480|                        .transform_error(make_eof_scan_error));
 5865|    480|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    480|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|  1.06k|    {
 3035|  1.06k|        return true;
 3036|  1.06k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    480|    {
 5504|    480|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    480|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    480|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    480|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|    864|    {
 5355|    864|        scan_error err{scan_error::invalid_scanned_value,
 5356|    864|                       "Failed to read boolean"};
 5357|       |
 5358|    864|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 822, False: 42]
  ------------------
 5359|    822|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 822]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    822|            else {
 5363|    822|                err = r.error();
 5364|    822|            }
 5365|    822|        }
 5366|       |
 5367|    864|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 844, False: 20]
  ------------------
 5368|    844|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 844]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    844|            else {
 5372|    844|                err = r.error();
 5373|    844|            }
 5374|    844|        }
 5375|       |
 5376|    864|        return unexpected(err);
 5377|    864|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    838|    {
 5384|    838|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 838]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    838|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 838]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    838|        return unexpected_scan_error(
 5394|    838|            scan_error::invalid_scanned_value,
 5395|    838|            "Failed to read numeric boolean value: No match");
 5396|    838|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|    844|    {
 5402|    844|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 844]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    844|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 844]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    844|        return unexpected_scan_error(
 5412|    844|            scan_error::invalid_scanned_value,
 5413|    844|            "Failed to read textual boolean value: No match");
 5414|    844|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  1.68k|{
 2194|  1.68k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 112, False: 1.57k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    112|    }                                                  \
  |  |  |  | 3671|  1.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.57k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.57k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.57k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.57k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.57k|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|  1.57k|            return unexpected(parse_error::error);
 2202|  1.57k|        }
 2203|  1.57k|        return it;
 2204|  1.57k|    }
 2205|  1.57k|    else {
 2206|  1.57k|        auto range_it = range.begin();
 2207|  1.57k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 1.57k, False: 0]
  ------------------
 2208|  1.57k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  1.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.57k, False: 0]
  |  |  ------------------
  ------------------
 2209|  1.57k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.57k|                return unexpected(parse_error::error);
 2211|  1.57k|            }
 2212|  1.57k|        }
 2213|      0|        return it;
 2214|  1.57k|    }
 2215|  1.57k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5870|    480|    {
 5871|    480|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    480|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    480|                          basic_contiguous_scan_context<char_type>>) {
 5875|    480|            auto rd = make_reader<T, char_type>();
 5876|    480|            return impl(rd, range, value);
 5877|    480|        }
 5878|    480|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    480|            auto rd = make_reader<T, char_type>();
 5880|    480|            if (!is_segment_contiguous(range)) {
 5881|    480|                return impl(rd, range, value);
 5882|    480|            }
 5883|    480|            auto crange = get_as_contiguous(range);
 5884|    480|            SCN_TRY(it, impl(rd, crange, value));
 5885|    480|            return ranges::next(range.begin(),
 5886|    480|                                ranges::distance(crange.begin(), it));
 5887|    480|        }
 5888|    480|        else {
 5889|    480|            SCN_EXPECT(false);
 5890|    480|            SCN_UNREACHABLE;
 5891|    480|        }
 5892|    480|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    480|    {
 5863|    480|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 480]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    480|                        .transform_error(make_eof_scan_error));
 5865|    480|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    480|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|    480|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|    480|    {
 5871|    480|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    480|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    480|                          basic_contiguous_scan_context<char_type>>) {
 5875|    480|            auto rd = make_reader<T, char_type>();
 5876|    480|            return impl(rd, range, value);
 5877|    480|        }
 5878|    480|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    480|            auto rd = make_reader<T, char_type>();
 5880|    480|            if (!is_segment_contiguous(range)) {
 5881|    480|                return impl(rd, range, value);
 5882|    480|            }
 5883|    480|            auto crange = get_as_contiguous(range);
 5884|    480|            SCN_TRY(it, impl(rd, crange, value));
 5885|    480|            return ranges::next(range.begin(),
 5886|    480|                                ranges::distance(crange.begin(), it));
 5887|    480|        }
 5888|    480|        else {
 5889|    480|            SCN_EXPECT(false);
 5890|    480|            SCN_UNREACHABLE;
 5891|    480|        }
 5892|    480|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    480|    {
 5863|    480|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 480]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    480|                        .transform_error(make_eof_scan_error));
 5865|    480|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    480|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    480|    {
 4152|    480|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    480|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    480|        float_reader<CharT> rd{};
 4155|    480|        return read_impl<Range>(
 4156|    480|            range, rd,
 4157|    480|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    480|                return r.read_source(SCN_FWD(args)...);
 4159|    480|            },
 4160|    480|            value);
 4161|    480|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    480|    {
  754|    480|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    480|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    480|              cvref<T> obj = *get<T>(fn);
  745|    480|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    480|                  obj(static_cast<decltype(args)>(args)...);
  747|    480|              }
  748|    480|              else {
  749|    480|                  return obj(static_cast<decltype(args)>(args)...);
  750|    480|              }
  751|    480|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    480|    {
  684|    480|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    480|            return static_cast<T*>(s.m_cp);
  686|    480|        }
  687|    480|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    480|            return static_cast<T*>(s.m_p);
  689|    480|        }
  690|    480|        else {
  691|    480|            return reinterpret_cast<T*>(s.m_fp);
  692|    480|        }
  693|    480|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    480|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    480|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    480|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    480|        {
  662|    480|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    480|    {
 5871|    480|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    480|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    480|                          basic_contiguous_scan_context<char_type>>) {
 5875|    480|            auto rd = make_reader<T, char_type>();
 5876|    480|            return impl(rd, range, value);
 5877|    480|        }
 5878|    480|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    480|            auto rd = make_reader<T, char_type>();
 5880|    480|            if (!is_segment_contiguous(range)) {
 5881|    480|                return impl(rd, range, value);
 5882|    480|            }
 5883|    480|            auto crange = get_as_contiguous(range);
 5884|    480|            SCN_TRY(it, impl(rd, crange, value));
 5885|    480|            return ranges::next(range.begin(),
 5886|    480|                                ranges::distance(crange.begin(), it));
 5887|    480|        }
 5888|    480|        else {
 5889|    480|            SCN_EXPECT(false);
 5890|    480|            SCN_UNREACHABLE;
 5891|    480|        }
 5892|    480|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    480|    {
 5863|    480|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 480]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    480|                        .transform_error(make_eof_scan_error));
 5865|    480|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    480|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    480|    {
 5266|    480|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    480|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    480|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    480|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    480|    {
 5871|    480|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    480|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    480|                          basic_contiguous_scan_context<char_type>>) {
 5875|    480|            auto rd = make_reader<T, char_type>();
 5876|    480|            return impl(rd, range, value);
 5877|    480|        }
 5878|    480|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    480|            auto rd = make_reader<T, char_type>();
 5880|    480|            if (!is_segment_contiguous(range)) {
 5881|    480|                return impl(rd, range, value);
 5882|    480|            }
 5883|    480|            auto crange = get_as_contiguous(range);
 5884|    480|            SCN_TRY(it, impl(rd, crange, value));
 5885|    480|            return ranges::next(range.begin(),
 5886|    480|                                ranges::distance(crange.begin(), it));
 5887|    480|        }
 5888|    480|        else {
 5889|    480|            SCN_EXPECT(false);
 5890|    480|            SCN_UNREACHABLE;
 5891|    480|        }
 5892|    480|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    480|    {
 5863|    480|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 480]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    480|                        .transform_error(make_eof_scan_error));
 5865|    480|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    480|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    480|    {
 5266|    480|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    480|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    480|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    480|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    480|    {
 5871|    480|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    480|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    480|                          basic_contiguous_scan_context<char_type>>) {
 5875|    480|            auto rd = make_reader<T, char_type>();
 5876|    480|            return impl(rd, range, value);
 5877|    480|        }
 5878|    480|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    480|            auto rd = make_reader<T, char_type>();
 5880|    480|            if (!is_segment_contiguous(range)) {
 5881|    480|                return impl(rd, range, value);
 5882|    480|            }
 5883|    480|            auto crange = get_as_contiguous(range);
 5884|    480|            SCN_TRY(it, impl(rd, crange, value));
 5885|    480|            return ranges::next(range.begin(),
 5886|    480|                                ranges::distance(crange.begin(), it));
 5887|    480|        }
 5888|    480|        else {
 5889|    480|            SCN_EXPECT(false);
 5890|    480|            SCN_UNREACHABLE;
 5891|    480|        }
 5892|    480|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    480|    {
 5863|    480|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    480|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    480|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    480|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 480]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    480|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    480|                        .transform_error(make_eof_scan_error));
 5865|    480|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    480|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    480|    {
 5266|    480|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    480|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    480|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    480|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   181k|    {
 2879|   181k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   804k|    {
 2883|   804k|        return m_current;
 2884|   804k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|  1.15M|    {
 2888|  1.15M|        return m_range.end();
 2889|  1.15M|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   590k|{
 1221|       |    // TODO: optimize
 1222|   590k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   590k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   590k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   590k|    auto res = get_next_code_point(str);
 1224|   590k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   590k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   532k|    {
 2903|   532k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   532k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   532k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   532k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   532k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 532k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   532k|        }
 2909|   532k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   532k|    static_cast<    \
  |  |  929|   532k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   532k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  30.4k|    {
 2893|  30.4k|        return ranges::subrange{begin(), end()};
 2894|  30.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  1.43k|    {
 6037|  1.43k|        const bool need_skipped_width =
 6038|  1.43k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 106, False: 1.32k]
  |  Branch (6038:33): [True: 1.32k, False: 0]
  ------------------
 6039|  1.43k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.43k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 36, False: 1.39k]
  ------------------
 6043|  1.43k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 198, False: 1.19k]
  ------------------
 6044|    234|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    234|                             need_skipped_width);
 6046|    234|        }
 6047|  1.19k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.14k, False: 52]
  |  Branch (6047:56): [True: 958, False: 186]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|    958|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 958, False: 0]
  ------------------
 6051|    958|                auto max_width_view = take_width(rng, specs.precision);
 6052|    958|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|    958|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    958|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    958|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    958|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 958]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    958|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    958|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|    958|                                  .transform_error(make_eof_scan_error));
 6054|    958|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|    958|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|    238|        return result_type{rng.begin(), 0};
 6070|  1.19k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|    234|{
 5951|    234|    using char_type = detail::char_t<Range>;
 5952|    234|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    234|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 234, False: 0]
  ------------------
 5955|    234|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    234|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    234|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 234]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    234|        auto max_width_view = take_width(range, max_width);
 5972|    234|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    234|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 234, False: 0]
  ------------------
 5975|    234|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    234|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    234|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_:
  753|    234|    {
  754|    234|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|    280|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    280|              cvref<T> obj = *get<T>(fn);
  745|    280|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    280|                  obj(static_cast<decltype(args)>(args)...);
  747|    280|              }
  748|    280|              else {
  749|    280|                  return obj(static_cast<decltype(args)>(args)...);
  750|    280|              }
  751|    280|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    280|    {
  684|    280|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    280|            return static_cast<T*>(s.m_cp);
  686|    280|        }
  687|    280|        else if constexpr (std::is_object_v<T>) {
  688|    280|            return static_cast<T*>(s.m_p);
  689|    280|        }
  690|    280|        else {
  691|    280|            return reinterpret_cast<T*>(s.m_fp);
  692|    280|        }
  693|    280|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    280|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSJ_:
  666|    234|        {
  667|    234|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    234|{
 1976|    234|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    234|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    234|{
 1957|    234|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    234|        return std::find_if(range.begin(), range.end(), pred);
 1959|    234|    }
 1960|    234|    else {
 1961|    234|        auto first = range.begin();
 1962|    314|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 280, False: 34]
  ------------------
 1963|    280|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 200, False: 80]
  ------------------
 1964|    200|                return first;
 1965|    200|            }
 1966|    280|        }
 1967|     34|        return first;
 1968|    234|    }
 1969|    234|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2809|  2.15k|    {
 2810|  2.15k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  2.15k|                                      m_count};
 2812|  2.15k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2716|  7.48k|    {
 2717|  7.48k|        return view;
 2718|  7.48k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  2.15k|    {
 2382|  2.15k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  1.27k|        {
 2781|  1.27k|            return !(y == x);
 2782|  1.27k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  3.18k|        {
 2770|  3.18k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 34, False: 3.15k]
  |  Branch (2770:39): [True: 34, False: 0]
  ------------------
 2771|  3.18k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 3.15k]
  ------------------
 2772|  3.18k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|     34|    {
 2421|     34|        return m_multibyte_left;
 2422|     34|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2815|  3.18k|    {
 2816|  3.18k|        return sentinel<true>{m_base.get().end()};
 2817|  3.18k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  3.18k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  2.19k|    {
 2426|  2.19k|        return *m_current;
 2427|  2.19k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  1.03k|    {
 2435|  1.03k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  1.03k|        _increment_current();
 2437|  1.03k|        return *this;
 2438|  1.03k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  1.03k|    {
 2668|  1.03k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 1.03k, False: 0]
  ------------------
 2669|  1.03k|            auto cplen = _get_cp_length_at_current();
 2670|  1.03k|            m_multibyte_left = cplen - 1;
 2671|  1.03k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  1.03k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  1.03k|        ++m_current;
 2678|  1.03k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  1.03k|    {
 2639|  1.03k|        return static_cast<difference_type>(
 2640|  1.03k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  1.03k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  1.03k|    {
 2645|  1.03k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  1.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  1.03k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 1.03k, False: 0]
  ------------------
 2650|  1.03k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  1.03k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  1.03k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  1.03k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  1.19k|    {
 2832|  1.19k|        return take_width_view{r, n};
 2833|  1.19k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2800|  1.19k|    {
 2801|  1.19k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2713|  1.19k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|    958|{
 2951|    958|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 958, False: 0]
  ------------------
 2952|    958|        auto it = read_while_classic_space(range);
 2953|    958|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|    958|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    958|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 958]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|    958|        return it;
 2959|    958|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|    958|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|    958|{
 2117|    958|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    958|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    958|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    958|        auto buf = make_contiguous_buffer(range);
 2121|    958|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    958|        return ranges::next(range.begin(),
 2123|    958|                            ranges::distance(buf.view().begin(), it));
 2124|    958|    }
 2125|    958|    else {
 2126|    958|        auto it = range.begin();
 2127|       |
 2128|    958|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    958|            auto seg = get_contiguous_beginning(range);
 2130|    958|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    958|                seg_it != seg.end()) {
 2132|    958|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|    958|            }
 2134|    958|            ranges::advance(it, seg.size());
 2135|    958|        }
 2136|       |
 2137|    958|        return read_while_code_point(
 2138|    958|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    958|    }
 2140|    958|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|    958|{
 2082|    958|    return read_until_code_point(range, std::not_fn(pred));
 2083|    958|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|    958|{
 2061|    958|    auto it = range.begin();
 2062|    958|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 958, False: 0]
  ------------------
 2063|    958|        const auto val =
 2064|    958|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|    958|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|    958|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 958, False: 0]
  |  |  ------------------
  ------------------
 2066|    958|            const auto cp = detail::decode_code_point_exhaustive(
 2067|    958|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|    958|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 958, False: 0]
  ------------------
 2069|    958|                return it;
 2070|    958|            }
 2071|    958|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|    958|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|    958|{
 1899|    958|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|    958|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    958|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|    958|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|    958|    auto it = range.begin();
 1903|    958|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|    958|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|    958|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 958]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|    958|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 958, False: 0]
  ------------------
 1912|    958|        ++it;
 1913|    958|        return {it, string_type(1, *range.begin())};
 1914|    958|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|    958|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  1.91k|{
  944|  1.91k|    return is_range_eof(r.begin(), r.end());
  945|  1.91k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  1.91k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.91k|    {
  937|  1.91k|        return begin == end;
  938|  1.91k|    }
  939|  1.91k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1889|    958|    {
 1890|    958|        return !codepoint.empty();
 1891|    958|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|    958|    {
  754|    958|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|    958|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    958|              cvref<T> obj = *get<T>(fn);
  745|    958|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    958|                  obj(static_cast<decltype(args)>(args)...);
  747|    958|              }
  748|    958|              else {
  749|    958|                  return obj(static_cast<decltype(args)>(args)...);
  750|    958|              }
  751|    958|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|    958|    {
  684|    958|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    958|            return static_cast<T*>(s.m_cp);
  686|    958|        }
  687|    958|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    958|            return static_cast<T*>(s.m_p);
  689|    958|        }
  690|    958|        else {
  691|    958|            return reinterpret_cast<T*>(s.m_fp);
  692|    958|        }
  693|    958|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|    958|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|    958|        {
  662|    958|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|    958|{
  950|    958|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|    958|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 958]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|    958|    return eof_error::good;
  954|    958|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  4.34k|    {
 2413|  4.34k|        return m_current;
 2414|  4.34k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  4.38k|    {
 2417|  4.38k|        return m_count;
 2418|  4.38k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  9.29k|    {
 6037|  9.29k|        const bool need_skipped_width =
 6038|  9.29k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 4.71k, False: 4.57k]
  |  Branch (6038:33): [True: 0, False: 4.57k]
  ------------------
 6039|  9.29k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  9.29k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 54, False: 9.23k]
  ------------------
 6043|  9.29k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 222, False: 9.01k]
  ------------------
 6044|    276|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    276|                             need_skipped_width);
 6046|    276|        }
 6047|  9.01k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 8.61k, False: 400]
  |  Branch (6047:56): [True: 2.50k, False: 6.11k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.50k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 2.50k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  5.00k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  2.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.50k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  5.00k|                            make_eof_scan_error));
 6058|       |
 6059|  5.00k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.89k, False: 604]
  ------------------
 6060|  1.89k|                return result_type{
 6061|  1.89k|                    it,
 6062|  1.89k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.89k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.89k|                                             .view())};
 6065|  1.89k|            }
 6066|    604|            return result_type{it, 0};
 6067|  5.00k|        }
 6068|       |
 6069|  6.51k|        return result_type{rng.begin(), 0};
 6070|  9.01k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  1.67k|    {
 6079|  1.67k|        const bool need_skipped_width =
 6080|  1.67k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 658, False: 1.02k]
  |  Branch (6080:33): [True: 218, False: 802]
  ------------------
 6081|  1.67k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.67k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 72, False: 1.60k]
  ------------------
 6084|  1.67k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 112, False: 1.49k]
  ------------------
 6085|    184|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 66, False: 118]
  ------------------
 6086|    184|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 44, False: 22]
  ------------------
 6087|     44|                return result_type{rng.begin(), 0};
 6088|     44|            }
 6089|    140|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    140|                             specs.fill, need_skipped_width);
 6091|    184|        }
 6092|  1.49k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 1.47k, False: 18]
  ------------------
 6093|  1.49k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 1.24k, False: 228]
  ------------------
 6094|  1.49k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 508, False: 740]
  |  Branch (6094:35): [True: 478, False: 30]
  ------------------
 6095|  1.24k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 124, False: 646]
  ------------------
 6096|    770|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 104, False: 20]
  ------------------
 6097|    582|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 104, False: 478]
  ------------------
 6098|    104|                const auto initial_width =
 6099|    104|                    specs.precision - prefix_width - value_width;
 6100|    104|                auto max_width_view = take_width(rng, initial_width);
 6101|    104|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    104|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 104]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    104|                                  .transform_error(make_eof_scan_error));
 6103|    104|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    104|            }
 6105|    956|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|    478|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    478|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    478|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 478]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    478|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|    956|                            make_eof_scan_error));
 6107|       |
 6108|    956|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 478, False: 0]
  ------------------
 6109|    478|                return result_type{
 6110|    478|                    it,
 6111|    478|                    calculate_text_width(make_contiguous_buffer(
 6112|    478|                                             ranges::subrange{rng.begin(), it})
 6113|    478|                                             .view())};
 6114|    478|            }
 6115|      0|            return result_type{it, 0};
 6116|    956|        }
 6117|    912|        return result_type{rng.begin(), 0};
 6118|  1.49k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6192|  2.67k|    {
 6193|  2.67k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.67k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.67k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.67k|            auto rd = make_reader<T, char_type>();
 6198|  2.67k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.16k, False: 512]
  |  |  ------------------
  ------------------
 6199|  2.16k|                return unexpected(e);
 6200|  2.16k|            }
 6201|       |
 6202|    512|            return impl(rd, range, value);
 6203|  2.67k|        }
 6204|  2.67k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.67k|            auto rd = make_reader<T, char_type>();
 6206|  2.67k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.67k|                return unexpected(e);
 6208|  2.67k|            }
 6209|       |
 6210|  2.67k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.67k|                specs.width != 0) {
 6212|  2.67k|                return impl(rd, range, value);
 6213|  2.67k|            }
 6214|       |
 6215|  2.67k|            auto crange = get_as_contiguous(range);
 6216|  2.67k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.67k|            return ranges::next(range.begin(),
 6218|  2.67k|                                ranges::distance(crange.begin(), it));
 6219|  2.67k|        }
 6220|  2.67k|        else {
 6221|  2.67k|            SCN_EXPECT(false);
 6222|  2.67k|            SCN_UNREACHABLE;
 6223|  2.67k|        }
 6224|  2.67k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    512|    {
 6124|    512|        const bool need_skipped_width =
 6125|    512|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 252, False: 260]
  |  Branch (6125:33): [True: 146, False: 114]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    512|        auto it = rng.begin();
 6129|    512|        std::ptrdiff_t prefix_width = 0;
 6130|    512|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 156, False: 356]
  ------------------
 6131|    156|            auto max_width_view = take_width(rng, specs.precision);
 6132|    156|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    156|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    156|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    156|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 156]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    156|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    156|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    156|            it = prefix_result.first.base();
 6135|    156|            prefix_width = prefix_result.second;
 6136|    156|        }
 6137|    356|        else {
 6138|    356|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    356|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 356]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    356|            std::tie(it, prefix_width) = prefix_result;
 6140|    356|        }
 6141|    512|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    512|        std::ptrdiff_t value_width = 0;
 6145|    512|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 156, False: 356]
  ------------------
 6146|    156|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 154]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    154|            const auto initial_width = specs.precision - prefix_width;
 6154|    154|            auto max_width_view =
 6155|    154|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    154|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    154|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    154|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    154|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    154|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 154, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    154|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    154|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    154|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    154|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    154|    }                                                  \
  |  |  |  | 3671|    154|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    356|        else {
 6161|    356|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 356, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    356|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    356|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    356|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    356|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    356|    }                                                  \
  |  | 3671|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6192|  2.67k|    {
 6193|  2.67k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.67k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.67k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.67k|            auto rd = make_reader<T, char_type>();
 6198|  2.67k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.16k, False: 512]
  |  |  ------------------
  ------------------
 6199|  2.16k|                return unexpected(e);
 6200|  2.16k|            }
 6201|       |
 6202|    512|            return impl(rd, range, value);
 6203|  2.67k|        }
 6204|  2.67k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.67k|            auto rd = make_reader<T, char_type>();
 6206|  2.67k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.67k|                return unexpected(e);
 6208|  2.67k|            }
 6209|       |
 6210|  2.67k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.67k|                specs.width != 0) {
 6212|  2.67k|                return impl(rd, range, value);
 6213|  2.67k|            }
 6214|       |
 6215|  2.67k|            auto crange = get_as_contiguous(range);
 6216|  2.67k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.67k|            return ranges::next(range.begin(),
 6218|  2.67k|                                ranges::distance(crange.begin(), it));
 6219|  2.67k|        }
 6220|  2.67k|        else {
 6221|  2.67k|            SCN_EXPECT(false);
 6222|  2.67k|            SCN_UNREACHABLE;
 6223|  2.67k|        }
 6224|  2.67k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    512|    {
 6124|    512|        const bool need_skipped_width =
 6125|    512|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 252, False: 260]
  |  Branch (6125:33): [True: 146, False: 114]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    512|        auto it = rng.begin();
 6129|    512|        std::ptrdiff_t prefix_width = 0;
 6130|    512|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 156, False: 356]
  ------------------
 6131|    156|            auto max_width_view = take_width(rng, specs.precision);
 6132|    156|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    156|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    156|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    156|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 156]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    156|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    156|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    156|            it = prefix_result.first.base();
 6135|    156|            prefix_width = prefix_result.second;
 6136|    156|        }
 6137|    356|        else {
 6138|    356|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    356|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 356]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    356|            std::tie(it, prefix_width) = prefix_result;
 6140|    356|        }
 6141|    512|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    512|        std::ptrdiff_t value_width = 0;
 6145|    512|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 156, False: 356]
  ------------------
 6146|    156|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 154]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    154|            const auto initial_width = specs.precision - prefix_width;
 6154|    154|            auto max_width_view =
 6155|    154|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    154|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    154|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    154|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    154|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    154|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 154, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    154|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    154|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    154|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    154|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    154|    }                                                  \
  |  |  |  | 3671|    154|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    356|        else {
 6161|    356|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 356, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    356|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    356|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    356|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    356|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    356|    }                                                  \
  |  | 3671|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6192|  2.64k|    {
 6193|  2.64k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.64k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.64k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.64k|            auto rd = make_reader<T, char_type>();
 6198|  2.64k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.19k, False: 448]
  |  |  ------------------
  ------------------
 6199|  2.19k|                return unexpected(e);
 6200|  2.19k|            }
 6201|       |
 6202|    448|            return impl(rd, range, value);
 6203|  2.64k|        }
 6204|  2.64k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.64k|            auto rd = make_reader<T, char_type>();
 6206|  2.64k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.64k|                return unexpected(e);
 6208|  2.64k|            }
 6209|       |
 6210|  2.64k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.64k|                specs.width != 0) {
 6212|  2.64k|                return impl(rd, range, value);
 6213|  2.64k|            }
 6214|       |
 6215|  2.64k|            auto crange = get_as_contiguous(range);
 6216|  2.64k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.64k|            return ranges::next(range.begin(),
 6218|  2.64k|                                ranges::distance(crange.begin(), it));
 6219|  2.64k|        }
 6220|  2.64k|        else {
 6221|  2.64k|            SCN_EXPECT(false);
 6222|  2.64k|            SCN_UNREACHABLE;
 6223|  2.64k|        }
 6224|  2.64k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5752|  2.64k|    {
 5753|  2.64k|        reader_error_handler eh{};
 5754|  2.64k|        detail::check_pointer_type_specs(specs, eh);
 5755|  2.64k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.19k, False: 448]
  |  |  ------------------
  ------------------
 5756|  2.19k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  2.19k|        }
 5758|    448|        return {};
 5759|  2.64k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    448|    {
 6124|    448|        const bool need_skipped_width =
 6125|    448|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 250, False: 198]
  |  Branch (6125:33): [True: 114, False: 84]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    448|        auto it = rng.begin();
 6129|    448|        std::ptrdiff_t prefix_width = 0;
 6130|    448|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 124, False: 324]
  ------------------
 6131|    124|            auto max_width_view = take_width(rng, specs.precision);
 6132|    124|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    124|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    124|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    124|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    124|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 124]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    124|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    124|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    124|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    124|            it = prefix_result.first.base();
 6135|    124|            prefix_width = prefix_result.second;
 6136|    124|        }
 6137|    324|        else {
 6138|    324|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    324|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 324]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    324|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    324|            std::tie(it, prefix_width) = prefix_result;
 6140|    324|        }
 6141|    448|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    448|        std::ptrdiff_t value_width = 0;
 6145|    448|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 124, False: 324]
  ------------------
 6146|    124|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 122]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    122|            const auto initial_width = specs.precision - prefix_width;
 6154|    122|            auto max_width_view =
 6155|    122|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    122|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    122|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    122|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    122|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    122|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 122, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    122|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    122|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    122|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    122|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    122|    }                                                  \
  |  |  |  | 3671|    122|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    324|        else {
 6161|    324|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 324, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    324|    }                                                  \
  |  | 3671|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    324|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    122|    {
 5782|    122|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    122|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    122|        return read_default(range, value, loc);
 5784|    122|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    122|    {
 5765|    122|        detail::format_specs specs{};
 5766|    122|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    122|        std::uintptr_t intvalue{};
 5769|    122|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    122|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    122|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    122|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    122|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 122, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    122|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    122|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    122|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    122|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    122|    }                                                  \
  |  |  |  | 3671|    122|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    122|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    324|    {
 5782|    324|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    324|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    324|        return read_default(range, value, loc);
 5784|    324|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6192|  2.67k|    {
 6193|  2.67k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.67k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.67k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.67k|            auto rd = make_reader<T, char_type>();
 6198|  2.67k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 588]
  |  |  ------------------
  ------------------
 6199|  2.09k|                return unexpected(e);
 6200|  2.09k|            }
 6201|       |
 6202|    588|            return impl(rd, range, value);
 6203|  2.67k|        }
 6204|  2.67k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.67k|            auto rd = make_reader<T, char_type>();
 6206|  2.67k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.67k|                return unexpected(e);
 6208|  2.67k|            }
 6209|       |
 6210|  2.67k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.67k|                specs.width != 0) {
 6212|  2.67k|                return impl(rd, range, value);
 6213|  2.67k|            }
 6214|       |
 6215|  2.67k|            auto crange = get_as_contiguous(range);
 6216|  2.67k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.67k|            return ranges::next(range.begin(),
 6218|  2.67k|                                ranges::distance(crange.begin(), it));
 6219|  2.67k|        }
 6220|  2.67k|        else {
 6221|  2.67k|            SCN_EXPECT(false);
 6222|  2.67k|            SCN_UNREACHABLE;
 6223|  2.67k|        }
 6224|  2.67k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  2.67k|    {
 3040|  2.67k|        reader_error_handler eh{};
 3041|  2.67k|        get_derived().check_specs_impl(specs, eh);
 3042|  2.67k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 588]
  |  |  ------------------
  ------------------
 3043|  2.09k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  2.09k|        }
 3045|    588|        return {};
 3046|  2.67k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|  2.67k|    {
 3051|  2.67k|        return static_cast<Derived&>(*this);
 3052|  2.67k|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  2.67k|    {
 5497|  2.67k|        detail::check_bool_type_specs(specs, eh);
 5498|  2.67k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    588|    {
 6124|    588|        const bool need_skipped_width =
 6125|    588|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 262, False: 326]
  |  Branch (6125:33): [True: 172, False: 154]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    588|        auto it = rng.begin();
 6129|    588|        std::ptrdiff_t prefix_width = 0;
 6130|    588|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 184, False: 404]
  ------------------
 6131|    184|            auto max_width_view = take_width(rng, specs.precision);
 6132|    184|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    184|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    184|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    184|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    184|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 184]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    184|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    184|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    184|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    184|            it = prefix_result.first.base();
 6135|    184|            prefix_width = prefix_result.second;
 6136|    184|        }
 6137|    404|        else {
 6138|    404|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    404|            std::tie(it, prefix_width) = prefix_result;
 6140|    404|        }
 6141|    588|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    588|        std::ptrdiff_t value_width = 0;
 6145|    588|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 184, False: 404]
  ------------------
 6146|    184|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 180]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    180|            const auto initial_width = specs.precision - prefix_width;
 6154|    180|            auto max_width_view =
 6155|    180|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    180|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    180|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    180|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    180|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 180, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    180|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    180|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    180|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    180|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    180|    }                                                  \
  |  |  |  | 3671|    180|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    404|        else {
 6161|    404|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 404, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    404|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    404|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    404|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    404|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    404|    }                                                  \
  |  | 3671|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    180|    {
 5516|    180|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    180|#if !SCN_DISABLE_LOCALE
 5519|    180|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 16, False: 164]
  ------------------
 5520|     16|            return rd.read_localized(range, loc, value);
 5521|     16|        }
 5522|    164|#endif
 5523|       |
 5524|    164|        return rd.read_classic(range, value);
 5525|    180|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5528|    584|    {
 5529|    584|        SCN_GCC_COMPAT_PUSH
 5530|    584|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    584|        switch (specs.type) {
 5533|     72|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 72, False: 512]
  ------------------
 5534|     72|                return bool_reader_base::allow_text;
 5535|       |
 5536|     14|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 14, False: 570]
  ------------------
 5537|     22|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 8, False: 576]
  ------------------
 5538|     30|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 8, False: 576]
  ------------------
 5539|     38|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 8, False: 576]
  ------------------
 5540|     46|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 8, False: 576]
  ------------------
 5541|     58|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 12, False: 572]
  ------------------
 5542|     58|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    454|            default:
  ------------------
  |  Branch (5544:13): [True: 454, False: 130]
  ------------------
 5545|    454|                return bool_reader_base::allow_text |
 5546|    454|                       bool_reader_base::allow_numeric;
 5547|    584|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    584|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     16|    {
 5428|     16|        scan_error err{scan_error::invalid_scanned_value,
 5429|     16|                       "Failed to read boolean"};
 5430|       |
 5431|     16|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 14, False: 2]
  ------------------
 5432|     14|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 14]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     14|            else {
 5436|     14|                err = r.error();
 5437|     14|            }
 5438|     14|        }
 5439|       |
 5440|     16|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 10, False: 6]
  ------------------
 5441|     10|            auto stdloc = loc.get<std::locale>();
 5442|     10|            const auto& numpunct =
 5443|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     10|            const auto truename = numpunct.truename();
 5445|     10|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     10|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 10]
  ------------------
 5448|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     10|            else {
 5452|     10|                err = r.error();
 5453|     10|            }
 5454|     10|        }
 5455|       |
 5456|     16|        return unexpected(err);
 5457|     16|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    154|    {
 5384|    154|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 154]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    154|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 154]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    154|        return unexpected_scan_error(
 5394|    154|            scan_error::invalid_scanned_value,
 5395|    154|            "Failed to read numeric boolean value: No match");
 5396|    154|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    308|{
 2146|    308|    auto it = read_code_unit(range);
 2147|    308|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 308]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    308|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 308, False: 0]
  |  |  ------------------
  ------------------
 2152|    308|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    308|        return unexpected(parse_error::error);
 2154|    308|    }
 2155|       |
 2156|      0|    return *it;
 2157|    308|}
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5467|     10|    {
 5468|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     10|        const auto shorter = std::pair{
 5470|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 10, False: 0]
  ------------------
 5471|     10|        const auto longer = std::pair{
 5472|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 10]
  ------------------
 5473|       |
 5474|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 10]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 10]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     10|                                     "read_textual: No match");
 5485|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      8|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      8|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      8|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      8|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 2185|      8|        return unexpected(parse_error::error);
 2186|      8|    }
 2187|      0|    return it;
 2188|      8|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    308|{
 1857|    308|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    308|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    308|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    308|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    308|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    308|        if (sz < count) {
 1862|    308|            return unexpected(eof_error::eof);
 1863|    308|        }
 1864|       |
 1865|    308|        return ranges::next(range.begin(), count);
 1866|    308|    }
 1867|    308|    else {
 1868|    308|        auto it = range.begin();
 1869|    308|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 308]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  1.54k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.29k, False: 244]
  ------------------
 1874|  1.29k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 64, False: 1.23k]
  ------------------
 1875|     64|                return unexpected(eof_error::eof);
 1876|     64|            }
 1877|  1.29k|        }
 1878|       |
 1879|    244|        return it;
 1880|    308|    }
 1881|    308|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    308|{
 1095|    308|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    308|        return r.size();
 1097|    308|    }
 1098|    308|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    308|                           ranges::const_iterator_t<Range>,
 1100|    308|                           typename detail::basic_scan_buffer<
 1101|    308|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    308|        if constexpr (ranges::common_range<Range>) {
 1103|    308|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    308|        }
 1105|    308|        else {
 1106|    308|            if (r.begin().stores_parent()) {
 1107|    308|                return static_cast<size_t>(
 1108|    308|                    r.begin().parent()->chars_available() -
 1109|    308|                    r.begin().position());
 1110|    308|            }
 1111|    308|            return r.begin().contiguous_segment().size();
 1112|    308|        }
 1113|    308|    }
 1114|    308|    else {
 1115|    308|        return 0;
 1116|    308|    }
 1117|    308|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    164|    {
 5355|    164|        scan_error err{scan_error::invalid_scanned_value,
 5356|    164|                       "Failed to read boolean"};
 5357|       |
 5358|    164|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 140, False: 24]
  ------------------
 5359|    140|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 140]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    140|            else {
 5363|    140|                err = r.error();
 5364|    140|            }
 5365|    140|        }
 5366|       |
 5367|    164|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 144, False: 20]
  ------------------
 5368|    144|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 144]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    144|            else {
 5372|    144|                err = r.error();
 5373|    144|            }
 5374|    144|        }
 5375|       |
 5376|    164|        return unexpected(err);
 5377|    164|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    144|    {
 5402|    144|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 144]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    144|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 144]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    144|        return unexpected_scan_error(
 5412|    144|            scan_error::invalid_scanned_value,
 5413|    144|            "Failed to read textual boolean value: No match");
 5414|    144|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    288|{
 2194|    288|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 52, False: 236]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     52|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     52|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     52|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     52|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     52|    }                                                  \
  |  |  |  | 3671|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    236|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    236|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    236|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    236|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    236|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|    236|            return unexpected(parse_error::error);
 2202|    236|        }
 2203|    236|        return it;
 2204|    236|    }
 2205|    236|    else {
 2206|    236|        auto range_it = range.begin();
 2207|    236|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 236, False: 0]
  ------------------
 2208|    236|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 236, False: 0]
  |  |  ------------------
  ------------------
 2209|    236|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    236|                return unexpected(parse_error::error);
 2211|    236|            }
 2212|    236|        }
 2213|      0|        return it;
 2214|    236|    }
 2215|    236|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    404|    {
 5516|    404|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    404|#if !SCN_DISABLE_LOCALE
 5519|    404|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 20, False: 384]
  ------------------
 5520|     20|            return rd.read_localized(range, loc, value);
 5521|     20|        }
 5522|    384|#endif
 5523|       |
 5524|    384|        return rd.read_classic(range, value);
 5525|    404|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     20|    {
 5428|     20|        scan_error err{scan_error::invalid_scanned_value,
 5429|     20|                       "Failed to read boolean"};
 5430|       |
 5431|     20|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 16, False: 4]
  ------------------
 5432|     16|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 16]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     16|            else {
 5436|     16|                err = r.error();
 5437|     16|            }
 5438|     16|        }
 5439|       |
 5440|     20|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 8, False: 12]
  ------------------
 5441|      8|            auto stdloc = loc.get<std::locale>();
 5442|      8|            const auto& numpunct =
 5443|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|      8|            const auto truename = numpunct.truename();
 5445|      8|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|      8|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 8]
  ------------------
 5448|      8|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|      8|            else {
 5452|      8|                err = r.error();
 5453|      8|            }
 5454|      8|        }
 5455|       |
 5456|     20|        return unexpected(err);
 5457|     20|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5467|      8|    {
 5468|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|      8|        const auto shorter = std::pair{
 5470|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 8, False: 0]
  ------------------
 5471|      8|        const auto longer = std::pair{
 5472|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 8]
  ------------------
 5473|       |
 5474|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 8]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 8]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|      8|                                     "read_textual: No match");
 5485|      8|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     16|{
 2179|     16|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 12]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      4|    }                                                  \
  |  |  |  | 3671|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     12|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     12|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     12|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     12|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 2185|     12|        return unexpected(parse_error::error);
 2186|     12|    }
 2187|      0|    return it;
 2188|     12|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6192|  2.64k|    {
 6193|  2.64k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.64k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.64k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.64k|            auto rd = make_reader<T, char_type>();
 6198|  2.64k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.15k, False: 484]
  |  |  ------------------
  ------------------
 6199|  2.15k|                return unexpected(e);
 6200|  2.15k|            }
 6201|       |
 6202|    484|            return impl(rd, range, value);
 6203|  2.64k|        }
 6204|  2.64k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.64k|            auto rd = make_reader<T, char_type>();
 6206|  2.64k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.64k|                return unexpected(e);
 6208|  2.64k|            }
 6209|       |
 6210|  2.64k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.64k|                specs.width != 0) {
 6212|  2.64k|                return impl(rd, range, value);
 6213|  2.64k|            }
 6214|       |
 6215|  2.64k|            auto crange = get_as_contiguous(range);
 6216|  2.64k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.64k|            return ranges::next(range.begin(),
 6218|  2.64k|                                ranges::distance(crange.begin(), it));
 6219|  2.64k|        }
 6220|  2.64k|        else {
 6221|  2.64k|            SCN_EXPECT(false);
 6222|  2.64k|            SCN_UNREACHABLE;
 6223|  2.64k|        }
 6224|  2.64k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    484|    {
 6124|    484|        const bool need_skipped_width =
 6125|    484|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 252, False: 232]
  |  Branch (6125:33): [True: 132, False: 100]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    484|        auto it = rng.begin();
 6129|    484|        std::ptrdiff_t prefix_width = 0;
 6130|    484|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 142, False: 342]
  ------------------
 6131|    142|            auto max_width_view = take_width(rng, specs.precision);
 6132|    142|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    142|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    142|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    142|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    142|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 142]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    142|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    142|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    142|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    142|            it = prefix_result.first.base();
 6135|    142|            prefix_width = prefix_result.second;
 6136|    142|        }
 6137|    342|        else {
 6138|    342|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    342|            std::tie(it, prefix_width) = prefix_result;
 6140|    342|        }
 6141|    484|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    484|        std::ptrdiff_t value_width = 0;
 6145|    484|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 142, False: 342]
  ------------------
 6146|    142|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 140]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    140|            const auto initial_width = specs.precision - prefix_width;
 6154|    140|            auto max_width_view =
 6155|    140|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    140|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    140|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    140|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    140|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 120]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    140|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    120|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    120|            it = w_it.base();
 6158|    120|            value_width = initial_width - w_it.count();
 6159|    120|        }
 6160|    342|        else {
 6161|    342|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20, False: 322]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     20|    }                                                  \
  |  | 3671|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    322|                                             specs, value, loc));
 6163|       |
 6164|    322|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 240, False: 82]
  ------------------
 6165|    240|                value_width = calculate_text_width(
 6166|    240|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    240|                        .view());
 6168|    240|            }
 6169|    322|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    442|        std::ptrdiff_t postfix_width = 0;
 6173|    442|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 442, False: 0]
  ------------------
 6174|    442|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    442|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 442]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    442|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    442|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    442|                                 value_width));
 6178|    442|            std::tie(it, postfix_width) = postfix_result;
 6179|    442|        }
 6180|       |
 6181|    442|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    442|                                                 value_width, postfix_width);
 6183|    442|            !e) {
  ------------------
  |  Branch (6183:13): [True: 238, False: 204]
  ------------------
 6184|    238|            return unexpected(e);
 6185|    238|        }
 6186|       |
 6187|    204|        return it;
 6188|    442|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|  2.67k|    {
 6193|  2.67k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.67k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.67k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.67k|            auto rd = make_reader<T, char_type>();
 6198|  2.67k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.18k, False: 490]
  |  |  ------------------
  ------------------
 6199|  2.18k|                return unexpected(e);
 6200|  2.18k|            }
 6201|       |
 6202|    490|            return impl(rd, range, value);
 6203|  2.67k|        }
 6204|  2.67k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.67k|            auto rd = make_reader<T, char_type>();
 6206|  2.67k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.67k|                return unexpected(e);
 6208|  2.67k|            }
 6209|       |
 6210|  2.67k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.67k|                specs.width != 0) {
 6212|  2.67k|                return impl(rd, range, value);
 6213|  2.67k|            }
 6214|       |
 6215|  2.67k|            auto crange = get_as_contiguous(range);
 6216|  2.67k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.67k|            return ranges::next(range.begin(),
 6218|  2.67k|                                ranges::distance(crange.begin(), it));
 6219|  2.67k|        }
 6220|  2.67k|        else {
 6221|  2.67k|            SCN_EXPECT(false);
 6222|  2.67k|            SCN_UNREACHABLE;
 6223|  2.67k|        }
 6224|  2.67k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    490|    {
 6124|    490|        const bool need_skipped_width =
 6125|    490|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 256, False: 234]
  |  Branch (6125:33): [True: 134, False: 100]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    490|        auto it = rng.begin();
 6129|    490|        std::ptrdiff_t prefix_width = 0;
 6130|    490|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 146, False: 344]
  ------------------
 6131|    146|            auto max_width_view = take_width(rng, specs.precision);
 6132|    146|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    146|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    146|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    146|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 146]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    146|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    146|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    146|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    146|            it = prefix_result.first.base();
 6135|    146|            prefix_width = prefix_result.second;
 6136|    146|        }
 6137|    344|        else {
 6138|    344|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    344|            std::tie(it, prefix_width) = prefix_result;
 6140|    344|        }
 6141|    490|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    490|        std::ptrdiff_t value_width = 0;
 6145|    490|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 146, False: 344]
  ------------------
 6146|    146|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 142]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    142|            const auto initial_width = specs.precision - prefix_width;
 6154|    142|            auto max_width_view =
 6155|    142|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    142|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    142|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    142|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    142|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    142|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 142, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    142|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    142|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    142|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    142|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    142|    }                                                  \
  |  |  |  | 3671|    142|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    344|        else {
 6161|    344|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 344, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    344|    }                                                  \
  |  | 3671|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  2.64k|    {
 6193|  2.64k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.64k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.64k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.64k|            auto rd = make_reader<T, char_type>();
 6198|  2.64k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 2.56k]
  |  |  ------------------
  ------------------
 6199|     78|                return unexpected(e);
 6200|     78|            }
 6201|       |
 6202|  2.56k|            return impl(rd, range, value);
 6203|  2.64k|        }
 6204|  2.64k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.64k|            auto rd = make_reader<T, char_type>();
 6206|  2.64k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.64k|                return unexpected(e);
 6208|  2.64k|            }
 6209|       |
 6210|  2.64k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.64k|                specs.width != 0) {
 6212|  2.64k|                return impl(rd, range, value);
 6213|  2.64k|            }
 6214|       |
 6215|  2.64k|            auto crange = get_as_contiguous(range);
 6216|  2.64k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.64k|            return ranges::next(range.begin(),
 6218|  2.64k|                                ranges::distance(crange.begin(), it));
 6219|  2.64k|        }
 6220|  2.64k|        else {
 6221|  2.64k|            SCN_EXPECT(false);
 6222|  2.64k|            SCN_UNREACHABLE;
 6223|  2.64k|        }
 6224|  2.64k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  2.56k|    {
 6124|  2.56k|        const bool need_skipped_width =
 6125|  2.56k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 1.09k, False: 1.46k]
  |  Branch (6125:33): [True: 160, False: 1.30k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  2.56k|        auto it = rng.begin();
 6129|  2.56k|        std::ptrdiff_t prefix_width = 0;
 6130|  2.56k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 174, False: 2.38k]
  ------------------
 6131|    174|            auto max_width_view = take_width(rng, specs.precision);
 6132|    174|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    174|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 174]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    174|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    174|            it = prefix_result.first.base();
 6135|    174|            prefix_width = prefix_result.second;
 6136|    174|        }
 6137|  2.38k|        else {
 6138|  2.38k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  2.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.38k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  2.38k|            std::tie(it, prefix_width) = prefix_result;
 6140|  2.38k|        }
 6141|  2.56k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  2.56k|        std::ptrdiff_t value_width = 0;
 6145|  2.56k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 174, False: 2.38k]
  ------------------
 6146|    174|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 168]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    168|            const auto initial_width = specs.precision - prefix_width;
 6154|    168|            auto max_width_view =
 6155|    168|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    168|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 88, False: 80]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     88|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     88|    }                                                  \
  |  |  |  | 3671|    168|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     80|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|     80|            it = w_it.base();
 6158|     80|            value_width = initial_width - w_it.count();
 6159|     80|        }
 6160|  2.38k|        else {
 6161|  2.38k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  2.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.78k, False: 608]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  1.78k|    }                                                  \
  |  | 3671|  2.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    608|                                             specs, value, loc));
 6163|       |
 6164|    608|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 324, False: 284]
  ------------------
 6165|    324|                value_width = calculate_text_width(
 6166|    324|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    324|                        .view());
 6168|    324|            }
 6169|    608|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    688|        std::ptrdiff_t postfix_width = 0;
 6173|    688|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 412, False: 276]
  ------------------
 6174|    412|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    412|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    412|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    412|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    412|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 412]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    412|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    412|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    412|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    412|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    412|                                 value_width));
 6178|    412|            std::tie(it, postfix_width) = postfix_result;
 6179|    412|        }
 6180|       |
 6181|    688|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    688|                                                 value_width, postfix_width);
 6183|    688|            !e) {
  ------------------
  |  Branch (6183:13): [True: 116, False: 572]
  ------------------
 6184|    116|            return unexpected(e);
 6185|    116|        }
 6186|       |
 6187|    572|        return it;
 6188|    688|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  2.64k|    {
 6193|  2.64k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.64k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.64k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.64k|            auto rd = make_reader<T, char_type>();
 6198|  2.64k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 2.56k]
  |  |  ------------------
  ------------------
 6199|     78|                return unexpected(e);
 6200|     78|            }
 6201|       |
 6202|  2.56k|            return impl(rd, range, value);
 6203|  2.64k|        }
 6204|  2.64k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.64k|            auto rd = make_reader<T, char_type>();
 6206|  2.64k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.64k|                return unexpected(e);
 6208|  2.64k|            }
 6209|       |
 6210|  2.64k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.64k|                specs.width != 0) {
 6212|  2.64k|                return impl(rd, range, value);
 6213|  2.64k|            }
 6214|       |
 6215|  2.64k|            auto crange = get_as_contiguous(range);
 6216|  2.64k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.64k|            return ranges::next(range.begin(),
 6218|  2.64k|                                ranges::distance(crange.begin(), it));
 6219|  2.64k|        }
 6220|  2.64k|        else {
 6221|  2.64k|            SCN_EXPECT(false);
 6222|  2.64k|            SCN_UNREACHABLE;
 6223|  2.64k|        }
 6224|  2.64k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  2.56k|    {
 6124|  2.56k|        const bool need_skipped_width =
 6125|  2.56k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 1.09k, False: 1.46k]
  |  Branch (6125:33): [True: 160, False: 1.30k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  2.56k|        auto it = rng.begin();
 6129|  2.56k|        std::ptrdiff_t prefix_width = 0;
 6130|  2.56k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 174, False: 2.38k]
  ------------------
 6131|    174|            auto max_width_view = take_width(rng, specs.precision);
 6132|    174|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    174|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 174]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    174|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    174|            it = prefix_result.first.base();
 6135|    174|            prefix_width = prefix_result.second;
 6136|    174|        }
 6137|  2.38k|        else {
 6138|  2.38k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  2.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.38k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  2.38k|            std::tie(it, prefix_width) = prefix_result;
 6140|  2.38k|        }
 6141|  2.56k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  2.56k|        std::ptrdiff_t value_width = 0;
 6145|  2.56k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 174, False: 2.38k]
  ------------------
 6146|    174|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 168]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    168|            const auto initial_width = specs.precision - prefix_width;
 6154|    168|            auto max_width_view =
 6155|    168|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    168|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 88, False: 80]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     88|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     88|    }                                                  \
  |  |  |  | 3671|    168|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     80|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|     80|            it = w_it.base();
 6158|     80|            value_width = initial_width - w_it.count();
 6159|     80|        }
 6160|  2.38k|        else {
 6161|  2.38k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  2.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.78k, False: 608]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  1.78k|    }                                                  \
  |  | 3671|  2.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    608|                                             specs, value, loc));
 6163|       |
 6164|    608|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 324, False: 284]
  ------------------
 6165|    324|                value_width = calculate_text_width(
 6166|    324|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    324|                        .view());
 6168|    324|            }
 6169|    608|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    688|        std::ptrdiff_t postfix_width = 0;
 6173|    688|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 412, False: 276]
  ------------------
 6174|    412|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    412|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    412|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    412|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    412|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 412]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    412|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    412|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    412|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    412|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    412|                                 value_width));
 6178|    412|            std::tie(it, postfix_width) = postfix_result;
 6179|    412|        }
 6180|       |
 6181|    688|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    688|                                                 value_width, postfix_width);
 6183|    688|            !e) {
  ------------------
  |  Branch (6183:13): [True: 116, False: 572]
  ------------------
 6184|    116|            return unexpected(e);
 6185|    116|        }
 6186|       |
 6187|    572|        return it;
 6188|    688|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  2.64k|    {
 6193|  2.64k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.64k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.64k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.64k|            auto rd = make_reader<T, char_type>();
 6198|  2.64k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 2.56k]
  |  |  ------------------
  ------------------
 6199|     78|                return unexpected(e);
 6200|     78|            }
 6201|       |
 6202|  2.56k|            return impl(rd, range, value);
 6203|  2.64k|        }
 6204|  2.64k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.64k|            auto rd = make_reader<T, char_type>();
 6206|  2.64k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.64k|                return unexpected(e);
 6208|  2.64k|            }
 6209|       |
 6210|  2.64k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.64k|                specs.width != 0) {
 6212|  2.64k|                return impl(rd, range, value);
 6213|  2.64k|            }
 6214|       |
 6215|  2.64k|            auto crange = get_as_contiguous(range);
 6216|  2.64k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.64k|            return ranges::next(range.begin(),
 6218|  2.64k|                                ranges::distance(crange.begin(), it));
 6219|  2.64k|        }
 6220|  2.64k|        else {
 6221|  2.64k|            SCN_EXPECT(false);
 6222|  2.64k|            SCN_UNREACHABLE;
 6223|  2.64k|        }
 6224|  2.64k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  2.56k|    {
 6124|  2.56k|        const bool need_skipped_width =
 6125|  2.56k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 1.09k, False: 1.46k]
  |  Branch (6125:33): [True: 160, False: 1.30k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  2.56k|        auto it = rng.begin();
 6129|  2.56k|        std::ptrdiff_t prefix_width = 0;
 6130|  2.56k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 174, False: 2.38k]
  ------------------
 6131|    174|            auto max_width_view = take_width(rng, specs.precision);
 6132|    174|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    174|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 174]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    174|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    174|            it = prefix_result.first.base();
 6135|    174|            prefix_width = prefix_result.second;
 6136|    174|        }
 6137|  2.38k|        else {
 6138|  2.38k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  2.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.38k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  2.38k|            std::tie(it, prefix_width) = prefix_result;
 6140|  2.38k|        }
 6141|  2.56k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  2.56k|        std::ptrdiff_t value_width = 0;
 6145|  2.56k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 174, False: 2.38k]
  ------------------
 6146|    174|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 168]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    168|            const auto initial_width = specs.precision - prefix_width;
 6154|    168|            auto max_width_view =
 6155|    168|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    168|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 88, False: 80]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     88|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     88|    }                                                  \
  |  |  |  | 3671|    168|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     80|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|     80|            it = w_it.base();
 6158|     80|            value_width = initial_width - w_it.count();
 6159|     80|        }
 6160|  2.38k|        else {
 6161|  2.38k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  2.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.78k, False: 608]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  1.78k|    }                                                  \
  |  | 3671|  2.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    608|                                             specs, value, loc));
 6163|       |
 6164|    608|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 324, False: 284]
  ------------------
 6165|    324|                value_width = calculate_text_width(
 6166|    324|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    324|                        .view());
 6168|    324|            }
 6169|    608|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    688|        std::ptrdiff_t postfix_width = 0;
 6173|    688|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 412, False: 276]
  ------------------
 6174|    412|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    412|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    412|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    412|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    412|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 412]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    412|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    412|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    412|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    412|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    412|                                 value_width));
 6178|    412|            std::tie(it, postfix_width) = postfix_result;
 6179|    412|        }
 6180|       |
 6181|    688|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    688|                                                 value_width, postfix_width);
 6183|    688|            !e) {
  ------------------
  |  Branch (6183:13): [True: 116, False: 572]
  ------------------
 6184|    116|            return unexpected(e);
 6185|    116|        }
 6186|       |
 6187|    572|        return it;
 6188|    688|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    628|    {
 3492|    628|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    628|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    628|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    628|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    628|                return unexpected_scan_error(
 3498|    628|                    scan_error::invalid_scanned_value,
 3499|    628|                    "Unexpected '-' sign when parsing an "
 3500|    628|                    "unsigned value");
 3501|    628|            }
 3502|    628|        }
 3503|       |
 3504|    628|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 628]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.25k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.25k|                parse_integer_digits_without_thsep(
 3511|  1.25k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.25k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.25k|        auto buf = make_contiguous_buffer(
 3515|  1.25k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.25k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 628, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    628|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    628|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    628|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    628|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    628|    }                                                  \
  |  |  |  | 3671|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.25k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    628|    {
 3492|    628|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    628|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    628|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    628|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 628]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    628|        }
 3503|       |
 3504|    628|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 628]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.25k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.25k|                parse_integer_digits_without_thsep(
 3511|  1.25k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.25k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.25k|        auto buf = make_contiguous_buffer(
 3515|  1.25k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.25k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 628, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    628|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    628|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    628|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    628|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    628|    }                                                  \
  |  |  |  | 3671|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.25k|    }

LLVMFuzzerTestOneInput:
   68|  5.05k|{
   69|  5.05k|    scn::fuzz::run(data, size);
   70|  5.05k|    return 0;
   71|  5.05k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  5.05k|{
   52|  5.05k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 5.05k]
  |  Branch (52:35): [True: 0, False: 5.05k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  5.05k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  5.05k|    run_for_source(sv);
   59|  5.05k|    run_for_source(wsv_reinterpret);
   60|  5.05k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 5.05k, False: 0]
  ------------------
   61|  5.05k|        run_for_source(wsv_transcode);
   62|  5.05k|    }
   63|  5.05k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  5.05k|{
   37|  5.05k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  5.05k|    run_for_type<char_type>(source);
   40|  5.05k|    run_for_type<int>(source);
   41|  5.05k|    run_for_type<unsigned>(source);
   42|  5.05k|    run_for_type<double>(source);
   43|  5.05k|    run_for_type<bool>(source);
   44|  5.05k|    run_for_type<void*>(source);
   45|  5.05k|    run_for_type<std::string>(source);
   46|  5.05k|    run_for_type<std::wstring>(source);
   47|  5.05k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  5.05k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  5.05k|{
   25|  5.05k|    {
   26|  5.05k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.05k|    }
   28|  5.05k|    {
   29|  5.05k|        auto _ =
   30|  5.05k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.05k|    }
   32|  5.05k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  5.05k|{
   25|  5.05k|    {
   26|  5.05k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.05k|    }
   28|  5.05k|    {
   29|  5.05k|        auto _ =
   30|  5.05k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.05k|    }
   32|  5.05k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  5.05k|{
   25|  5.05k|    {
   26|  5.05k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.05k|    }
   28|  5.05k|    {
   29|  5.05k|        auto _ =
   30|  5.05k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.05k|    }
   32|  5.05k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  5.05k|{
   25|  5.05k|    {
   26|  5.05k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.05k|    }
   28|  5.05k|    {
   29|  5.05k|        auto _ =
   30|  5.05k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.05k|    }
   32|  5.05k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  5.05k|{
   25|  5.05k|    {
   26|  5.05k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.05k|    }
   28|  5.05k|    {
   29|  5.05k|        auto _ =
   30|  5.05k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.05k|    }
   32|  5.05k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  5.05k|{
   25|  5.05k|    {
   26|  5.05k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.05k|    }
   28|  5.05k|    {
   29|  5.05k|        auto _ =
   30|  5.05k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.05k|    }
   32|  5.05k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  5.05k|{
   25|  5.05k|    {
   26|  5.05k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.05k|    }
   28|  5.05k|    {
   29|  5.05k|        auto _ =
   30|  5.05k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.05k|    }
   32|  5.05k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  5.05k|{
   25|  5.05k|    {
   26|  5.05k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.05k|    }
   28|  5.05k|    {
   29|  5.05k|        auto _ =
   30|  5.05k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.05k|    }
   32|  5.05k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  5.05k|{
   25|  5.05k|    {
   26|  5.05k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.05k|    }
   28|  5.05k|    {
   29|  5.05k|        auto _ =
   30|  5.05k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.05k|    }
   32|  5.05k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  10.1k|{
   37|  10.1k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  10.1k|    run_for_type<char_type>(source);
   40|  10.1k|    run_for_type<int>(source);
   41|  10.1k|    run_for_type<unsigned>(source);
   42|  10.1k|    run_for_type<double>(source);
   43|  10.1k|    run_for_type<bool>(source);
   44|  10.1k|    run_for_type<void*>(source);
   45|  10.1k|    run_for_type<std::string>(source);
   46|  10.1k|    run_for_type<std::wstring>(source);
   47|  10.1k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  10.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  10.1k|{
   25|  10.1k|    {
   26|  10.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.1k|    }
   28|  10.1k|    {
   29|  10.1k|        auto _ =
   30|  10.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.1k|    }
   32|  10.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  10.1k|{
   25|  10.1k|    {
   26|  10.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.1k|    }
   28|  10.1k|    {
   29|  10.1k|        auto _ =
   30|  10.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.1k|    }
   32|  10.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  10.1k|{
   25|  10.1k|    {
   26|  10.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.1k|    }
   28|  10.1k|    {
   29|  10.1k|        auto _ =
   30|  10.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.1k|    }
   32|  10.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  10.1k|{
   25|  10.1k|    {
   26|  10.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.1k|    }
   28|  10.1k|    {
   29|  10.1k|        auto _ =
   30|  10.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.1k|    }
   32|  10.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  10.1k|{
   25|  10.1k|    {
   26|  10.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.1k|    }
   28|  10.1k|    {
   29|  10.1k|        auto _ =
   30|  10.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.1k|    }
   32|  10.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  10.1k|{
   25|  10.1k|    {
   26|  10.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.1k|    }
   28|  10.1k|    {
   29|  10.1k|        auto _ =
   30|  10.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.1k|    }
   32|  10.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  10.1k|{
   25|  10.1k|    {
   26|  10.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.1k|    }
   28|  10.1k|    {
   29|  10.1k|        auto _ =
   30|  10.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.1k|    }
   32|  10.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  10.1k|{
   25|  10.1k|    {
   26|  10.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.1k|    }
   28|  10.1k|    {
   29|  10.1k|        auto _ =
   30|  10.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.1k|    }
   32|  10.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  10.1k|{
   25|  10.1k|    {
   26|  10.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  10.1k|    }
   28|  10.1k|    {
   29|  10.1k|        auto _ =
   30|  10.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  10.1k|    }
   32|  10.1k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  5.05k|{
   52|  5.05k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  5.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  5.05k|    string_buffer.resize(size);
   56|  5.05k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  5.05k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  5.05k|    const auto wsv_reinterpret_size =
   61|  5.05k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 91, False: 4.96k]
  ------------------
   62|  5.05k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  5.05k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  5.05k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  5.05k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  5.05k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  5.05k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  5.05k|}

