_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|    948|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|    434|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  3.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  3.33M|{
 3807|  3.33M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  3.33M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  3.33M|    }
 3810|  3.33M|    else if constexpr (sizeof(U) == 2) {
 3811|  3.33M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  3.33M|    }
 3813|  3.33M|    else {
 3814|       |        // utf-32
 3815|  3.33M|        static_assert(sizeof(U) == 4);
 3816|  3.33M|        SCN_UNUSED(ch);
 3817|  3.33M|        return 1;
 3818|  3.33M|    }
 3819|  3.33M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  3.33M|{
 3771|  3.33M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  3.33M|    SCN_GCC_COMPAT_PUSH
 3774|  3.33M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  3.33M|    constexpr char lengths[] =
 3776|  3.33M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  3.33M|        "\1\1\1\1\1\1\1\1"
 3778|  3.33M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  3.33M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  3.33M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  3.33M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  3.33M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  3.33M|    SCN_GCC_COMPAT_POP
 3785|  3.33M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  3.07M|{
 4013|  3.07M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  3.07M|        return decode_utf8_code_point_exhaustive(input);
 4015|  3.07M|    }
 4016|  3.07M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  3.07M|        return decode_utf16_code_point_exhaustive(input);
 4018|  3.07M|    }
 4019|  3.07M|    else {
 4020|  3.07M|        SCN_EXPECT(input.size() == 1);
 4021|  3.07M|        auto cp = static_cast<char32_t>(input.front());
 4022|  3.07M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  3.07M|            return invalid_code_point;
 4024|  3.07M|        }
 4025|  3.07M|        return cp;
 4026|  3.07M|    }
 4027|  3.07M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  3.07M|{
 3826|  3.07M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  3.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  3.07M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  3.07M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  3.07M|    };
 3831|       |
 3832|  3.07M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 2.72M, False: 345k]
  ------------------
 3833|  2.72M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 84, False: 2.72M]
  ------------------
 3834|     84|            SCN_UNLIKELY_ATTR
 3835|     84|            return invalid_code_point;
 3836|     84|        }
 3837|  2.72M|        return static_cast<char32_t>(input[0]);
 3838|  2.72M|    }
 3839|       |
 3840|   345k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 312k, False: 32.6k]
  ------------------
 3841|   312k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 18, False: 312k]
  ------------------
 3842|     18|            SCN_UNLIKELY_ATTR
 3843|     18|            return invalid_code_point;
 3844|     18|        }
 3845|   312k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 4.02k, False: 308k]
  ------------------
 3846|  4.02k|            SCN_UNLIKELY_ATTR
 3847|  4.02k|            return invalid_code_point;
 3848|  4.02k|        }
 3849|       |
 3850|   308k|        char32_t cp{};
 3851|   308k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   308k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   308k|        return cp;
 3854|   312k|    }
 3855|       |
 3856|  32.6k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 27.3k, False: 5.26k]
  ------------------
 3857|  27.3k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 18, False: 27.3k]
  ------------------
 3858|     18|            SCN_UNLIKELY_ATTR
 3859|     18|            return invalid_code_point;
 3860|     18|        }
 3861|  27.3k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 4.24k, False: 23.1k]
  ------------------
 3862|  27.3k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 388, False: 22.7k]
  ------------------
 3863|  4.62k|            SCN_UNLIKELY_ATTR
 3864|  4.62k|            return invalid_code_point;
 3865|  4.62k|        }
 3866|       |
 3867|  22.7k|        char32_t cp{};
 3868|  22.7k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  22.7k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  22.7k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  22.7k|        return cp;
 3872|  27.3k|    }
 3873|       |
 3874|  5.26k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 5.26k, False: 0]
  ------------------
 3875|  5.26k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 5.26k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  5.26k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 655, False: 4.61k]
  ------------------
 3880|    655|            SCN_UNLIKELY_ATTR
 3881|    655|            return invalid_code_point;
 3882|    655|        }
 3883|  4.61k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 710, False: 3.90k]
  ------------------
 3884|  4.61k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 395, False: 3.50k]
  ------------------
 3885|  4.61k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 318, False: 3.19k]
  ------------------
 3886|  1.42k|            SCN_UNLIKELY_ATTR
 3887|  1.42k|            return invalid_code_point;
 3888|  1.42k|        }
 3889|       |
 3890|  3.19k|        char32_t cp{};
 3891|  3.19k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  3.19k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  3.19k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  3.19k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  3.19k|        return cp;
 3896|  4.61k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|   375k|    const auto is_trailing_code_unit = [](char ch) {
 3829|   375k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|   375k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  1.36M|{
 3699|  1.36M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  1.36M|                                          decltype(first), decltype(last)> &&
 3701|  1.36M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  1.36M|        return {first, last};
 3703|  1.36M|    }
 3704|  1.36M|    else {
 3705|  1.36M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  1.36M|                                       to_address(first), to_address(last)))};
 3707|  1.36M|    }
 3708|  1.36M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  4.13M|{
  326|  4.13M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  4.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  4.13M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  4.13M|{
  304|  4.13M|    return p;
  305|  4.13M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|   907k|{
 3730|   907k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|   907k|                      typename std::basic_string_view<CharT>::iterator,
 3732|   907k|                      decltype(it)> &&
 3733|   907k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|   907k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|   907k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|   907k|        return it;
 3736|   907k|    }
 3737|   907k|    else {
 3738|   907k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|   907k|    }
 3740|   907k|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  4.96k|{
 8867|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.96k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5395|  9.93k|{
 5396|  9.93k|    detail::check_scan_arg_types<Args...>();
 5397|  9.93k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.93k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5134|  9.93k|{
 5135|  9.93k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  9.93k|                  "Scan argument types must be default constructible");
 5137|  9.93k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  9.93k|                  "Scan argument types must be Destructible");
 5139|  9.93k|    static_assert(
 5140|  9.93k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  9.93k|        "Scan argument types must not be references");
 5142|  9.93k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5348|  9.93k|    {
 5349|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  9.93k|    {
 5360|  9.93k|        return {detail::make_arg<
 5361|  9.93k|            kind, Context,
 5362|  9.93k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.93k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.93k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5169|  9.93k|{
 5170|  9.93k|    return make_value<Context>(value).ref_value;
 5171|  9.93k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5119|  9.93k|{
 5120|  9.93k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.93k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.93k|                                  needs_context_tag>) {
 5124|  9.93k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.93k|    }
 5126|  9.93k|    else {
 5127|  9.93k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.93k|            value, context_tag<Context>{}));
 5129|  9.93k|    }
 5130|  9.93k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4987|  9.93k|    {
 4988|  9.93k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (4988:23): [Folded - Ignored]
  |  Branch (4988:23): [Folded - Ignored]
  ------------------
 4989|  9.93k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (4989:23): [Folded - Ignored]
  ------------------
 4990|  9.93k|            return val;
 4991|  9.93k|        }
 4992|  9.93k|        else if constexpr (is_type_disabled<char_type>) {
 4993|  9.93k|            return unscannable_disabled{val};
 4994|  9.93k|        }
 4995|  9.93k|        else {
 4996|  9.93k|            SCN_UNUSED(val);
 4997|  9.93k|            return unscannable_char{};
 4998|  9.93k|        }
 4999|  9.93k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5088|  9.93k|{
 5089|  9.93k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  9.93k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  9.93k|    constexpr bool scannable_char =
 5093|  9.93k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  9.93k|    static_assert(scannable_char,
 5095|  9.93k|                  "Cannot scan an argument of an unsupported character "
 5096|  9.93k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  9.93k|    constexpr bool scannable_const =
 5099|  9.93k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  9.93k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  9.93k|    constexpr bool scannable_disabled =
 5103|  9.93k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  9.93k|    static_assert(scannable_disabled,
 5105|  9.93k|                  "Cannot scan an argument that has been disabled by "
 5106|  9.93k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  9.93k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  9.93k|    static_assert(
 5110|  9.93k|        scannable,
 5111|  9.93k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  9.93k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  9.93k|    return arg_value{arg};
 5115|  9.93k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4901|  9.93k|    {
 4902|  9.93k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  44.7k|{
 8654|  44.7k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  44.7k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|  44.7k|{
 8591|  44.7k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  44.7k|    auto result = vscan_impl(buffer, format, args);
 8594|  44.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  44.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.2k, False: 1.48k]
  |  |  ------------------
  ------------------
 8595|  43.2k|        return unexpected(result.error());
 8596|  43.2k|    }
 8597|  1.48k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  44.7k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4719|  89.4k|{
 4720|  89.4k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  89.4k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  89.4k|                  "\n"
 4724|  89.4k|                  "Unsupported range type given as input to a scanning "
 4725|  89.4k|                  "function.\n"
 4726|  89.4k|                  "A range needs to have a character type (value type) "
 4727|  89.4k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  89.4k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  89.4k|                  "to be included.\n"
 4730|  89.4k|                  "See the scnlib documentation for more details.");
 4731|  89.4k|    static_assert(
 4732|  89.4k|        !std::is_same_v<T, custom_char_traits>,
 4733|  89.4k|        "\n"
 4734|  89.4k|        "Unsupported range type given as input to a scanning "
 4735|  89.4k|        "function.\n"
 4736|  89.4k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  89.4k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  89.4k|        "not supported.");
 4739|  89.4k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  89.4k|                  "\n"
 4741|  89.4k|                  "Unsupported range type given as input to a scanning "
 4742|  89.4k|                  "function.\n"
 4743|  89.4k|                  "file_marker_found cannot be used as an "
 4744|  89.4k|                  "source range type to scn::scan.\n"
 4745|  89.4k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  89.4k|                  "and do not provide an explicit source range, "
 4747|  89.4k|                  "or use scn::scan with a FILE* directly.");
 4748|  89.4k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  89.4k|                  "\n"
 4750|  89.4k|                  "Unsupported range type given as input to a scanning "
 4751|  89.4k|                  "function.\n"
 4752|  89.4k|                  "In order to be scannable, a range needs to satisfy "
 4753|  89.4k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  89.4k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  89.4k|                  "\n"
 4756|  89.4k|                  "Unsupported range type given as input to a scanning "
 4757|  89.4k|                  "function.\n"
 4758|  89.4k|                  "A range needs to model forward_range and have a valid "
 4759|  89.4k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  89.4k|                  "Examples of scannable ranges are std::string, "
 4761|  89.4k|                  "std::string_view, "
 4762|  89.4k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  89.4k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  89.4k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  89.4k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|  89.4k|{
 4612|  89.4k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|  89.4k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|  89.4k|    }
 4616|  89.4k|    else {
 4617|  89.4k|        return invalid_char_type{};
 4618|  89.4k|    }
 4619|  89.4k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|   271k|    {
 1598|   271k|        return has_value();
 1599|   271k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|   543k|    {
  485|   543k|        return m_has_value;
  486|   543k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   267k|    {
 1604|   267k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   267k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   267k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   267k|        return this->get_unexpected().error();
 1606|   267k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   267k|    {
  468|   267k|        return m_unexpected;
  469|   267k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  1.59M|    {
  361|  1.59M|        return m_unexpected;
  362|  1.59M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|   899k|    {
  347|   899k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   899k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   899k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  86.4k|    {
 1476|  86.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  86.4k|    {
  447|  86.4k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|   932k|    {
  356|   932k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   932k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   932k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  89.4k|    {
 1177|  89.4k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  2.97k|{
 5923|  2.97k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  2.97k|                      ranges::iterator_t<SourceRange>>) {
 5925|  2.97k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  2.97k|    }
 5927|  2.97k|    else {
 5928|  2.97k|        auto it = ranges::begin(source);
 5929|  2.97k|        while (n > 0) {
 5930|  2.97k|            --n;
 5931|  2.97k|            ++it;
 5932|  2.97k|        }
 5933|  2.97k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  2.97k|    }
 5935|  2.97k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.97k|    {
 2724|  2.97k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.97k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.97k|    {
 2705|  2.97k|        return decay_copy(t.begin());
 2706|  2.97k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  48.4k|{
 1949|  48.4k|    return SCN_FWD(t);
  ------------------
  |  |  930|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  48.4k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5909|  2.97k|{
 5910|  2.97k|    return ranges::end(source);
 5911|  2.97k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.97k|    {
 2781|  2.97k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.97k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.97k|    {
 2763|  2.97k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.97k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|   508k|    {
 3316|   508k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  4.07k|    {
 1653|  4.07k|        return value();
 1654|  4.07k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  4.07k|    {
 1627|  4.07k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.07k|        return this->get_value();
 1629|  4.07k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  4.07k|    {
  451|  4.07k|        return m_value;
  452|  4.07k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  2.97k|    {
 1430|  2.97k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  2.97k|    {
  437|  2.97k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7974|  9.93k|    {
 7975|  9.93k|        return m_str;
 7976|  9.93k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.93k|    {
 5426|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5378|  9.93k|    {
 5379|  9.93k|        return m_argptrs;
 5380|  9.93k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|  89.4k|    {
 5478|  89.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  9.93k|{
 8820|  9.93k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.73k, False: 200]
  |  |  ------------------
  ------------------
 8821|  9.73k|        return unexpected(result.error());
 8822|  9.73k|    }
 8823|    200|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    200|    static_cast<    \
  |  |  929|    200|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    200|    static_cast<    \
  |  |  929|    200|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.93k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  89.4k|    {
 1598|  89.4k|        return has_value();
 1599|  89.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   178k|    {
  485|   178k|        return m_has_value;
  486|   178k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  86.4k|    {
 1604|  86.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  86.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  86.4k|        return this->get_unexpected().error();
 1606|  86.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  86.4k|    {
  468|  86.4k|        return m_unexpected;
  469|  86.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  9.73k|    {
 1476|  9.73k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  9.73k|    {
  447|  9.73k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.93k|    {
 1177|  9.93k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  2.97k|    {
 1653|  2.97k|        return value();
 1654|  2.97k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  2.97k|    {
 1627|  2.97k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.97k|        return this->get_value();
 1629|  2.97k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.97k|    {
  451|  2.97k|        return m_value;
  452|  2.97k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5829|    200|    {
 5830|    200|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|  2.97k|    {
 5681|  2.97k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5615|    200|    {
 5616|    200|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|    200|    {
 1430|    200|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|    200|    {
  437|    200|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5373|  9.93k|    {
 5374|  9.93k|        return m_args;
 5375|  9.93k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  89.4k|{
 7691|  89.4k|    return s;
 7692|  89.4k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  89.4k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.93k|    {
 7971|  9.93k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  4.96k|{
 8934|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.96k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  44.7k|{
 8672|  44.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  44.7k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|  44.7k|{
 8607|  44.7k|#if !SCN_DISABLE_LOCALE
 8608|  44.7k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  44.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  44.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  44.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  44.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  44.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.2k, False: 1.48k]
  |  |  ------------------
  ------------------
 8615|  43.2k|        return unexpected(result.error());
 8616|  43.2k|    }
 8617|  1.48k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  44.7k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  4.96k|{
 8867|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.96k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5395|  9.93k|{
 5396|  9.93k|    detail::check_scan_arg_types<Args...>();
 5397|  9.93k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.93k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5134|  29.8k|{
 5135|  29.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  29.8k|                  "Scan argument types must be default constructible");
 5137|  29.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  29.8k|                  "Scan argument types must be Destructible");
 5139|  29.8k|    static_assert(
 5140|  29.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  29.8k|        "Scan argument types must not be references");
 5142|  29.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5348|  9.93k|    {
 5349|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  9.93k|    {
 5360|  9.93k|        return {detail::make_arg<
 5361|  9.93k|            kind, Context,
 5362|  9.93k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.93k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.93k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  9.93k|{
 5170|  9.93k|    return make_value<Context>(value).ref_value;
 5171|  9.93k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5119|  9.93k|{
 5120|  9.93k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.93k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.93k|                                  needs_context_tag>) {
 5124|  9.93k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.93k|    }
 5126|  9.93k|    else {
 5127|  9.93k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.93k|            value, context_tag<Context>{}));
 5129|  9.93k|    }
 5130|  9.93k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4958|  9.93k|    {                                                                        \
 4959|  9.93k|        return val;                                                          \
 4960|  9.93k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5088|  29.8k|{
 5089|  29.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  29.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  29.8k|    constexpr bool scannable_char =
 5093|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  29.8k|    static_assert(scannable_char,
 5095|  29.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  29.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  29.8k|    constexpr bool scannable_const =
 5099|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  29.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  29.8k|    constexpr bool scannable_disabled =
 5103|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  29.8k|    static_assert(scannable_disabled,
 5105|  29.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  29.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  29.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  29.8k|    static_assert(
 5110|  29.8k|        scannable,
 5111|  29.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  29.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  29.8k|    return arg_value{arg};
 5115|  29.8k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4901|  29.8k|    {
 4902|  29.8k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7974|  9.93k|    {
 7975|  9.93k|        return m_str;
 7976|  9.93k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.93k|    {
 5426|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5378|  9.93k|    {
 5379|  9.93k|        return m_argptrs;
 5380|  9.93k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  9.93k|{
 8820|  9.93k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.93k, False: 0]
  |  |  ------------------
  ------------------
 8821|  9.93k|        return unexpected(result.error());
 8822|  9.93k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.93k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  9.93k|    {
 1476|  9.93k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  9.93k|    {
  447|  9.93k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.93k|    {
 1177|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5373|  9.93k|    {
 5374|  9.93k|        return m_args;
 5375|  9.93k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.93k|    {
 7971|  9.93k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  4.96k|{
 8934|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.96k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  4.96k|{
 8867|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.96k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5395|  9.93k|{
 5396|  9.93k|    detail::check_scan_arg_types<Args...>();
 5397|  9.93k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.93k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5134|  29.8k|{
 5135|  29.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  29.8k|                  "Scan argument types must be default constructible");
 5137|  29.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  29.8k|                  "Scan argument types must be Destructible");
 5139|  29.8k|    static_assert(
 5140|  29.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  29.8k|        "Scan argument types must not be references");
 5142|  29.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5348|  9.93k|    {
 5349|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  9.93k|    {
 5360|  9.93k|        return {detail::make_arg<
 5361|  9.93k|            kind, Context,
 5362|  9.93k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.93k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.93k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  9.93k|{
 5170|  9.93k|    return make_value<Context>(value).ref_value;
 5171|  9.93k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5119|  9.93k|{
 5120|  9.93k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.93k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.93k|                                  needs_context_tag>) {
 5124|  9.93k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.93k|    }
 5126|  9.93k|    else {
 5127|  9.93k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.93k|            value, context_tag<Context>{}));
 5129|  9.93k|    }
 5130|  9.93k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4958|  9.93k|    {                                                                        \
 4959|  9.93k|        return val;                                                          \
 4960|  9.93k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5088|  29.8k|{
 5089|  29.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  29.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  29.8k|    constexpr bool scannable_char =
 5093|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  29.8k|    static_assert(scannable_char,
 5095|  29.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  29.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  29.8k|    constexpr bool scannable_const =
 5099|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  29.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  29.8k|    constexpr bool scannable_disabled =
 5103|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  29.8k|    static_assert(scannable_disabled,
 5105|  29.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  29.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  29.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  29.8k|    static_assert(
 5110|  29.8k|        scannable,
 5111|  29.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  29.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  29.8k|    return arg_value{arg};
 5115|  29.8k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4901|  29.8k|    {
 4902|  29.8k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7974|  9.93k|    {
 7975|  9.93k|        return m_str;
 7976|  9.93k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.93k|    {
 5426|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5378|  9.93k|    {
 5379|  9.93k|        return m_argptrs;
 5380|  9.93k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  9.93k|{
 8820|  9.93k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.93k, False: 0]
  |  |  ------------------
  ------------------
 8821|  9.93k|        return unexpected(result.error());
 8822|  9.93k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.93k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  9.93k|    {
 1476|  9.93k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  9.93k|    {
  447|  9.93k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.93k|    {
 1177|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5373|  9.93k|    {
 5374|  9.93k|        return m_args;
 5375|  9.93k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.93k|    {
 7971|  9.93k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  4.96k|{
 8934|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.96k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  4.96k|{
 8867|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.96k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|  9.93k|{
 5396|  9.93k|    detail::check_scan_arg_types<Args...>();
 5397|  9.93k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.93k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  29.8k|{
 5135|  29.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  29.8k|                  "Scan argument types must be default constructible");
 5137|  29.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  29.8k|                  "Scan argument types must be Destructible");
 5139|  29.8k|    static_assert(
 5140|  29.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  29.8k|        "Scan argument types must not be references");
 5142|  29.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|  9.93k|    {
 5349|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  9.93k|    {
 5360|  9.93k|        return {detail::make_arg<
 5361|  9.93k|            kind, Context,
 5362|  9.93k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.93k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.93k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  9.93k|{
 5170|  9.93k|    return make_value<Context>(value).ref_value;
 5171|  9.93k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  9.93k|{
 5120|  9.93k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.93k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.93k|                                  needs_context_tag>) {
 5124|  9.93k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.93k|    }
 5126|  9.93k|    else {
 5127|  9.93k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.93k|            value, context_tag<Context>{}));
 5129|  9.93k|    }
 5130|  9.93k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  9.93k|    {                                                                        \
 4959|  9.93k|        return val;                                                          \
 4960|  9.93k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  29.8k|{
 5089|  29.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  29.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  29.8k|    constexpr bool scannable_char =
 5093|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  29.8k|    static_assert(scannable_char,
 5095|  29.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  29.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  29.8k|    constexpr bool scannable_const =
 5099|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  29.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  29.8k|    constexpr bool scannable_disabled =
 5103|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  29.8k|    static_assert(scannable_disabled,
 5105|  29.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  29.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  29.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  29.8k|    static_assert(
 5110|  29.8k|        scannable,
 5111|  29.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  29.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  29.8k|    return arg_value{arg};
 5115|  29.8k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  29.8k|    {
 4902|  29.8k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7974|  9.93k|    {
 7975|  9.93k|        return m_str;
 7976|  9.93k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.93k|    {
 5426|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|  9.93k|    {
 5379|  9.93k|        return m_argptrs;
 5380|  9.93k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  9.93k|{
 8820|  9.93k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.93k, False: 0]
  |  |  ------------------
  ------------------
 8821|  9.93k|        return unexpected(result.error());
 8822|  9.93k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.93k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  9.93k|    {
 1476|  9.93k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  9.93k|    {
  447|  9.93k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.93k|    {
 1177|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|  9.93k|    {
 5374|  9.93k|        return m_args;
 5375|  9.93k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.93k|    {
 7971|  9.93k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  4.96k|{
 8934|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.96k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  4.96k|{
 8867|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.96k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5395|  9.93k|{
 5396|  9.93k|    detail::check_scan_arg_types<Args...>();
 5397|  9.93k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.93k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5134|  29.8k|{
 5135|  29.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  29.8k|                  "Scan argument types must be default constructible");
 5137|  29.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  29.8k|                  "Scan argument types must be Destructible");
 5139|  29.8k|    static_assert(
 5140|  29.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  29.8k|        "Scan argument types must not be references");
 5142|  29.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5348|  9.93k|    {
 5349|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  9.93k|    {
 5360|  9.93k|        return {detail::make_arg<
 5361|  9.93k|            kind, Context,
 5362|  9.93k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.93k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.93k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  9.93k|{
 5170|  9.93k|    return make_value<Context>(value).ref_value;
 5171|  9.93k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5119|  9.93k|{
 5120|  9.93k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.93k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.93k|                                  needs_context_tag>) {
 5124|  9.93k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.93k|    }
 5126|  9.93k|    else {
 5127|  9.93k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.93k|            value, context_tag<Context>{}));
 5129|  9.93k|    }
 5130|  9.93k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4958|  9.93k|    {                                                                        \
 4959|  9.93k|        return val;                                                          \
 4960|  9.93k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5088|  29.8k|{
 5089|  29.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  29.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  29.8k|    constexpr bool scannable_char =
 5093|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  29.8k|    static_assert(scannable_char,
 5095|  29.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  29.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  29.8k|    constexpr bool scannable_const =
 5099|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  29.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  29.8k|    constexpr bool scannable_disabled =
 5103|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  29.8k|    static_assert(scannable_disabled,
 5105|  29.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  29.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  29.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  29.8k|    static_assert(
 5110|  29.8k|        scannable,
 5111|  29.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  29.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  29.8k|    return arg_value{arg};
 5115|  29.8k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4901|  29.8k|    {
 4902|  29.8k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7974|  9.93k|    {
 7975|  9.93k|        return m_str;
 7976|  9.93k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.93k|    {
 5426|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5378|  9.93k|    {
 5379|  9.93k|        return m_argptrs;
 5380|  9.93k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  9.93k|{
 8820|  9.93k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.93k, False: 0]
  |  |  ------------------
  ------------------
 8821|  9.93k|        return unexpected(result.error());
 8822|  9.93k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.93k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  9.93k|    {
 1476|  9.93k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  9.93k|    {
  447|  9.93k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.93k|    {
 1177|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5373|  9.93k|    {
 5374|  9.93k|        return m_args;
 5375|  9.93k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.93k|    {
 7971|  9.93k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  4.96k|{
 8934|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.96k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8866|  4.96k|{
 8867|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.96k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5395|  9.93k|{
 5396|  9.93k|    detail::check_scan_arg_types<Args...>();
 5397|  9.93k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.93k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5134|  29.8k|{
 5135|  29.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  29.8k|                  "Scan argument types must be default constructible");
 5137|  29.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  29.8k|                  "Scan argument types must be Destructible");
 5139|  29.8k|    static_assert(
 5140|  29.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  29.8k|        "Scan argument types must not be references");
 5142|  29.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5348|  9.93k|    {
 5349|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  9.93k|    {
 5360|  9.93k|        return {detail::make_arg<
 5361|  9.93k|            kind, Context,
 5362|  9.93k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.93k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.93k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  9.93k|{
 5170|  9.93k|    return make_value<Context>(value).ref_value;
 5171|  9.93k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5119|  9.93k|{
 5120|  9.93k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.93k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.93k|                                  needs_context_tag>) {
 5124|  9.93k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.93k|    }
 5126|  9.93k|    else {
 5127|  9.93k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.93k|            value, context_tag<Context>{}));
 5129|  9.93k|    }
 5130|  9.93k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4958|  9.93k|    {                                                                        \
 4959|  9.93k|        return val;                                                          \
 4960|  9.93k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5088|  29.8k|{
 5089|  29.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  29.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  29.8k|    constexpr bool scannable_char =
 5093|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  29.8k|    static_assert(scannable_char,
 5095|  29.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  29.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  29.8k|    constexpr bool scannable_const =
 5099|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  29.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  29.8k|    constexpr bool scannable_disabled =
 5103|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  29.8k|    static_assert(scannable_disabled,
 5105|  29.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  29.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  29.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  29.8k|    static_assert(
 5110|  29.8k|        scannable,
 5111|  29.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  29.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  29.8k|    return arg_value{arg};
 5115|  29.8k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4901|  29.8k|    {
 4902|  29.8k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7974|  9.93k|    {
 7975|  9.93k|        return m_str;
 7976|  9.93k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.93k|    {
 5426|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5378|  9.93k|    {
 5379|  9.93k|        return m_argptrs;
 5380|  9.93k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  9.93k|{
 8820|  9.93k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.93k, False: 0]
  |  |  ------------------
  ------------------
 8821|  9.93k|        return unexpected(result.error());
 8822|  9.93k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.93k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  9.93k|    {
 1476|  9.93k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  9.93k|    {
  447|  9.93k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.93k|    {
 1177|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5373|  9.93k|    {
 5374|  9.93k|        return m_args;
 5375|  9.93k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.93k|    {
 7971|  9.93k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8933|  4.96k|{
 8934|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.96k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8866|  4.96k|{
 8867|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.96k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  9.93k|{
 5396|  9.93k|    detail::check_scan_arg_types<Args...>();
 5397|  9.93k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.93k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|  29.8k|{
 5135|  29.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  29.8k|                  "Scan argument types must be default constructible");
 5137|  29.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  29.8k|                  "Scan argument types must be Destructible");
 5139|  29.8k|    static_assert(
 5140|  29.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  29.8k|        "Scan argument types must not be references");
 5142|  29.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  9.93k|    {
 5349|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  9.93k|    {
 5360|  9.93k|        return {detail::make_arg<
 5361|  9.93k|            kind, Context,
 5362|  9.93k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.93k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.93k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  9.93k|{
 5170|  9.93k|    return make_value<Context>(value).ref_value;
 5171|  9.93k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  9.93k|{
 5120|  9.93k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.93k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.93k|                                  needs_context_tag>) {
 5124|  9.93k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.93k|    }
 5126|  9.93k|    else {
 5127|  9.93k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.93k|            value, context_tag<Context>{}));
 5129|  9.93k|    }
 5130|  9.93k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  9.93k|    {                                                                        \
 4959|  9.93k|        return val;                                                          \
 4960|  9.93k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|  29.8k|{
 5089|  29.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  29.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  29.8k|    constexpr bool scannable_char =
 5093|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  29.8k|    static_assert(scannable_char,
 5095|  29.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  29.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  29.8k|    constexpr bool scannable_const =
 5099|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  29.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  29.8k|    constexpr bool scannable_disabled =
 5103|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  29.8k|    static_assert(scannable_disabled,
 5105|  29.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  29.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  29.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  29.8k|    static_assert(
 5110|  29.8k|        scannable,
 5111|  29.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  29.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  29.8k|    return arg_value{arg};
 5115|  29.8k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4901|  29.8k|    {
 4902|  29.8k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  9.93k|    {
 7975|  9.93k|        return m_str;
 7976|  9.93k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.93k|    {
 5426|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  9.93k|    {
 5379|  9.93k|        return m_argptrs;
 5380|  9.93k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  9.93k|{
 8820|  9.93k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.01k, False: 924]
  |  |  ------------------
  ------------------
 8821|  9.01k|        return unexpected(result.error());
 8822|  9.01k|    }
 8823|    924|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    924|    static_cast<    \
  |  |  929|    924|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    924|    static_cast<    \
  |  |  929|    924|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.93k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  9.01k|    {
 1476|  9.01k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  9.01k|    {
  626|  9.01k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  9.01k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  9.01k|    {
  689|  9.01k|        scn::detail::construct_at(unexpected_ptr(),
  690|  9.01k|                                  std::forward<Args>(args)...);
  691|  9.01k|        m_has_value = false;
  692|  9.01k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  57.1k|{
  392|  57.1k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  57.1k|        T(std::forward<Args>(args)...);
  394|  57.1k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  18.0k|    {
  718|  18.0k|        return reinterpret_cast<unexpected<E>*>(
  719|  18.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  18.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  18.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.93k|    {
 1177|  9.93k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    924|    {
 5830|    924|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.26k|    {
 5616|  1.26k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    924|    {
 1430|    924|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    924|    {
  616|    924|        construct(std::forward<Args>(args)...);
  617|    924|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    924|    {
  682|    924|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    924|        m_has_value = true;
  684|    924|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    924|{
  392|    924|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    924|        T(std::forward<Args>(args)...);
  394|    924|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|    924|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.84k|    {
  706|  1.84k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.84k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.84k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|  1.84k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  9.93k|    {
 5374|  9.93k|        return m_args;
 5375|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  9.93k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.93k|    {
 7971|  9.93k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  9.93k|    {
  631|  9.93k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 924, False: 9.01k]
  ------------------
  632|    924|            destroy_value();
  633|    924|        }
  634|  9.01k|        else {
  635|  9.01k|            destroy_unexpected();
  636|  9.01k|        }
  637|  9.93k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  9.93k|    {
  675|  9.93k|        return m_has_value;
  676|  9.93k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    924|    {
  696|    924|        scn::detail::destroy_at(value_ptr());
  697|    924|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    924|{
  398|    924|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    924|        for (auto& elem : *p) {
  400|    924|            scn::detail::destroy_at(&elem);
  401|    924|        }
  402|    924|    }
  403|    924|    else {
  404|    924|        p->~T();
  405|    924|    }
  406|    924|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  9.01k|    {
  700|  9.01k|        scn::detail::destroy_at(unexpected_ptr());
  701|  9.01k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  57.1k|{
  398|  57.1k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  57.1k|        for (auto& elem : *p) {
  400|  57.1k|            scn::detail::destroy_at(&elem);
  401|  57.1k|        }
  402|  57.1k|    }
  403|  57.1k|    else {
  404|  57.1k|        p->~T();
  405|  57.1k|    }
  406|  57.1k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8933|  4.96k|{
 8934|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.96k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8866|  4.96k|{
 8867|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.96k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  9.93k|{
 5396|  9.93k|    detail::check_scan_arg_types<Args...>();
 5397|  9.93k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.93k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|  29.8k|{
 5135|  29.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  29.8k|                  "Scan argument types must be default constructible");
 5137|  29.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  29.8k|                  "Scan argument types must be Destructible");
 5139|  29.8k|    static_assert(
 5140|  29.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  29.8k|        "Scan argument types must not be references");
 5142|  29.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  9.93k|    {
 5349|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  9.93k|    {
 5360|  9.93k|        return {detail::make_arg<
 5361|  9.93k|            kind, Context,
 5362|  9.93k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.93k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.93k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  9.93k|{
 5170|  9.93k|    return make_value<Context>(value).ref_value;
 5171|  9.93k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  9.93k|{
 5120|  9.93k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.93k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.93k|                                  needs_context_tag>) {
 5124|  9.93k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.93k|    }
 5126|  9.93k|    else {
 5127|  9.93k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.93k|            value, context_tag<Context>{}));
 5129|  9.93k|    }
 5130|  9.93k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  9.93k|    {                                                                        \
 4959|  9.93k|        return val;                                                          \
 4960|  9.93k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|  29.8k|{
 5089|  29.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  29.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  29.8k|    constexpr bool scannable_char =
 5093|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  29.8k|    static_assert(scannable_char,
 5095|  29.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  29.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  29.8k|    constexpr bool scannable_const =
 5099|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  29.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  29.8k|    constexpr bool scannable_disabled =
 5103|  29.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  29.8k|    static_assert(scannable_disabled,
 5105|  29.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  29.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  29.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  29.8k|    static_assert(
 5110|  29.8k|        scannable,
 5111|  29.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  29.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  29.8k|    return arg_value{arg};
 5115|  29.8k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4901|  29.8k|    {
 4902|  29.8k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  9.93k|    {
 7975|  9.93k|        return m_str;
 7976|  9.93k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.93k|    {
 5426|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  9.93k|    {
 5379|  9.93k|        return m_argptrs;
 5380|  9.93k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  9.93k|{
 8820|  9.93k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.01k, False: 924]
  |  |  ------------------
  ------------------
 8821|  9.01k|        return unexpected(result.error());
 8822|  9.01k|    }
 8823|    924|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    924|    static_cast<    \
  |  |  929|    924|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    924|    static_cast<    \
  |  |  929|    924|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.93k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  9.01k|    {
 1476|  9.01k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  9.01k|    {
  626|  9.01k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  9.01k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  9.01k|    {
  689|  9.01k|        scn::detail::construct_at(unexpected_ptr(),
  690|  9.01k|                                  std::forward<Args>(args)...);
  691|  9.01k|        m_has_value = false;
  692|  9.01k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  18.0k|    {
  718|  18.0k|        return reinterpret_cast<unexpected<E>*>(
  719|  18.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  18.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  18.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.93k|    {
 1177|  9.93k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    924|    {
 5830|    924|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.26k|    {
 5616|  1.26k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    924|    {
 1430|    924|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    924|    {
  616|    924|        construct(std::forward<Args>(args)...);
  617|    924|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    924|    {
  682|    924|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    924|        m_has_value = true;
  684|    924|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    924|{
  392|    924|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    924|        T(std::forward<Args>(args)...);
  394|    924|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|    924|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.84k|    {
  706|  1.84k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.84k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.84k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  1.84k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  9.93k|    {
 5374|  9.93k|        return m_args;
 5375|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  9.93k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.93k|    {
 7971|  9.93k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  9.93k|    {
  631|  9.93k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 924, False: 9.01k]
  ------------------
  632|    924|            destroy_value();
  633|    924|        }
  634|  9.01k|        else {
  635|  9.01k|            destroy_unexpected();
  636|  9.01k|        }
  637|  9.93k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  9.93k|    {
  675|  9.93k|        return m_has_value;
  676|  9.93k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    924|    {
  696|    924|        scn::detail::destroy_at(value_ptr());
  697|    924|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    924|{
  398|    924|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    924|        for (auto& elem : *p) {
  400|    924|            scn::detail::destroy_at(&elem);
  401|    924|        }
  402|    924|    }
  403|    924|    else {
  404|    924|        p->~T();
  405|    924|    }
  406|    924|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  9.01k|    {
  700|  9.01k|        scn::detail::destroy_at(unexpected_ptr());
  701|  9.01k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8933|  4.96k|{
 8934|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.96k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  4.96k|{
 8867|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.96k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|  9.93k|{
 5396|  9.93k|    detail::check_scan_arg_types<Args...>();
 5397|  9.93k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.93k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|  9.93k|{
 5135|  9.93k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  9.93k|                  "Scan argument types must be default constructible");
 5137|  9.93k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  9.93k|                  "Scan argument types must be Destructible");
 5139|  9.93k|    static_assert(
 5140|  9.93k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  9.93k|        "Scan argument types must not be references");
 5142|  9.93k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5348|  9.93k|    {
 5349|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  9.93k|    {
 5360|  9.93k|        return {detail::make_arg<
 5361|  9.93k|            kind, Context,
 5362|  9.93k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.93k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.93k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|  9.93k|{
 5170|  9.93k|    return make_value<Context>(value).ref_value;
 5171|  9.93k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|  9.93k|{
 5120|  9.93k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.93k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.93k|                                  needs_context_tag>) {
 5124|  9.93k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.93k|    }
 5126|  9.93k|    else {
 5127|  9.93k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.93k|            value, context_tag<Context>{}));
 5129|  9.93k|    }
 5130|  9.93k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|  9.93k|    {                                                                        \
 4959|  9.93k|        return val;                                                          \
 4960|  9.93k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|  9.93k|{
 5089|  9.93k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  9.93k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  9.93k|    constexpr bool scannable_char =
 5093|  9.93k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  9.93k|    static_assert(scannable_char,
 5095|  9.93k|                  "Cannot scan an argument of an unsupported character "
 5096|  9.93k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  9.93k|    constexpr bool scannable_const =
 5099|  9.93k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  9.93k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  9.93k|    constexpr bool scannable_disabled =
 5103|  9.93k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  9.93k|    static_assert(scannable_disabled,
 5105|  9.93k|                  "Cannot scan an argument that has been disabled by "
 5106|  9.93k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  9.93k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  9.93k|    static_assert(
 5110|  9.93k|        scannable,
 5111|  9.93k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  9.93k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  9.93k|    return arg_value{arg};
 5115|  9.93k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4901|  9.93k|    {
 4902|  9.93k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7974|  9.93k|    {
 7975|  9.93k|        return m_str;
 7976|  9.93k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.93k|    {
 5426|  9.93k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|  9.93k|    {
 5379|  9.93k|        return m_argptrs;
 5380|  9.93k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  9.93k|{
 8820|  9.93k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.01k, False: 924]
  |  |  ------------------
  ------------------
 8821|  9.01k|        return unexpected(result.error());
 8822|  9.01k|    }
 8823|    924|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    924|    static_cast<    \
  |  |  929|    924|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    924|    static_cast<    \
  |  |  929|    924|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.93k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  9.01k|    {
 1476|  9.01k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  9.01k|    {
  447|  9.01k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.93k|    {
 1177|  9.93k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|    924|    {
 5830|    924|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|    924|    {
 5616|    924|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|    924|    {
 1430|    924|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|    924|    {
  437|    924|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|  9.93k|    {
 5374|  9.93k|        return m_args;
 5375|  9.93k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.93k|    {
 7971|  9.93k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  4.96k|{
 8934|  4.96k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.96k|    static_cast<    \
  |  |  929|  4.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.96k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5395|  19.8k|{
 5396|  19.8k|    detail::check_scan_arg_types<Args...>();
 5397|  19.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  19.8k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5134|  19.8k|{
 5135|  19.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  19.8k|                  "Scan argument types must be default constructible");
 5137|  19.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  19.8k|                  "Scan argument types must be Destructible");
 5139|  19.8k|    static_assert(
 5140|  19.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  19.8k|        "Scan argument types must not be references");
 5142|  19.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5348|  19.8k|    {
 5349|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  19.8k|    {
 5360|  19.8k|        return {detail::make_arg<
 5361|  19.8k|            kind, Context,
 5362|  19.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  19.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  19.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5169|  19.8k|{
 5170|  19.8k|    return make_value<Context>(value).ref_value;
 5171|  19.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5119|  19.8k|{
 5120|  19.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  19.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  19.8k|                                  needs_context_tag>) {
 5124|  19.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  19.8k|    }
 5126|  19.8k|    else {
 5127|  19.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  19.8k|            value, context_tag<Context>{}));
 5129|  19.8k|    }
 5130|  19.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4958|  19.8k|    {                                                                        \
 4959|  19.8k|        return val;                                                          \
 4960|  19.8k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5088|  19.8k|{
 5089|  19.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  19.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  19.8k|    constexpr bool scannable_char =
 5093|  19.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  19.8k|    static_assert(scannable_char,
 5095|  19.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  19.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  19.8k|    constexpr bool scannable_const =
 5099|  19.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  19.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  19.8k|    constexpr bool scannable_disabled =
 5103|  19.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  19.8k|    static_assert(scannable_disabled,
 5105|  19.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  19.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  19.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  19.8k|    static_assert(
 5110|  19.8k|        scannable,
 5111|  19.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  19.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  19.8k|    return arg_value{arg};
 5115|  19.8k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4901|  19.8k|    {
 4902|  19.8k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|  89.4k|{
 8591|  89.4k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  89.4k|    auto result = vscan_impl(buffer, format, args);
 8594|  89.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  89.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 88.8k, False: 553]
  |  |  ------------------
  ------------------
 8595|  88.8k|        return unexpected(result.error());
 8596|  88.8k|    }
 8597|    553|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    553|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  89.4k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4719|   178k|{
 4720|   178k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   178k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   178k|                  "\n"
 4724|   178k|                  "Unsupported range type given as input to a scanning "
 4725|   178k|                  "function.\n"
 4726|   178k|                  "A range needs to have a character type (value type) "
 4727|   178k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   178k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   178k|                  "to be included.\n"
 4730|   178k|                  "See the scnlib documentation for more details.");
 4731|   178k|    static_assert(
 4732|   178k|        !std::is_same_v<T, custom_char_traits>,
 4733|   178k|        "\n"
 4734|   178k|        "Unsupported range type given as input to a scanning "
 4735|   178k|        "function.\n"
 4736|   178k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   178k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   178k|        "not supported.");
 4739|   178k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   178k|                  "\n"
 4741|   178k|                  "Unsupported range type given as input to a scanning "
 4742|   178k|                  "function.\n"
 4743|   178k|                  "file_marker_found cannot be used as an "
 4744|   178k|                  "source range type to scn::scan.\n"
 4745|   178k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   178k|                  "and do not provide an explicit source range, "
 4747|   178k|                  "or use scn::scan with a FILE* directly.");
 4748|   178k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   178k|                  "\n"
 4750|   178k|                  "Unsupported range type given as input to a scanning "
 4751|   178k|                  "function.\n"
 4752|   178k|                  "In order to be scannable, a range needs to satisfy "
 4753|   178k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   178k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   178k|                  "\n"
 4756|   178k|                  "Unsupported range type given as input to a scanning "
 4757|   178k|                  "function.\n"
 4758|   178k|                  "A range needs to model forward_range and have a valid "
 4759|   178k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   178k|                  "Examples of scannable ranges are std::string, "
 4761|   178k|                  "std::string_view, "
 4762|   178k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   178k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   178k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   178k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   178k|{
 4612|   178k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|   178k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|   178k|    }
 4616|   178k|    else {
 4617|   178k|        return invalid_char_type{};
 4618|   178k|    }
 4619|   178k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   177k|    {
 1476|   177k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   177k|    {
  447|   177k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   178k|    {
 1177|   178k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  1.10k|{
 5923|  1.10k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  1.10k|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.10k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  1.10k|    }
 5927|  1.10k|    else {
 5928|  1.10k|        auto it = ranges::begin(source);
 5929|  1.10k|        while (n > 0) {
 5930|  1.10k|            --n;
 5931|  1.10k|            ++it;
 5932|  1.10k|        }
 5933|  1.10k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  1.10k|    }
 5935|  1.10k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.10k|    {
 2724|  1.10k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.10k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.10k|    {
 2705|  1.10k|        return decay_copy(t.begin());
 2706|  1.10k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  17.9k|{
 1949|  17.9k|    return SCN_FWD(t);
  ------------------
  |  |  930|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  17.9k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5909|  1.10k|{
 5910|  1.10k|    return ranges::end(source);
 5911|  1.10k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.10k|    {
 2781|  1.10k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.10k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.10k|    {
 2763|  1.10k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.10k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|   297k|    {
 3316|   297k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.10k|    {
 1430|  1.10k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  1.10k|    {
  437|  1.10k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7974|  19.8k|    {
 7975|  19.8k|        return m_str;
 7976|  19.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  19.8k|    {
 5426|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5378|  19.8k|    {
 5379|  19.8k|        return m_argptrs;
 5380|  19.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   178k|    {
 5478|   178k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  19.8k|{
 8820|  19.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.7k, False: 92]
  |  |  ------------------
  ------------------
 8821|  19.7k|        return unexpected(result.error());
 8822|  19.7k|    }
 8823|     92|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     92|    static_cast<    \
  |  |  929|     92|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     92|    static_cast<    \
  |  |  929|     92|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  19.8k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   178k|    {
 1598|   178k|        return has_value();
 1599|   178k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   357k|    {
  485|   357k|        return m_has_value;
  486|   357k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   177k|    {
 1604|   177k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   177k|        return this->get_unexpected().error();
 1606|   177k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   177k|    {
  468|   177k|        return m_unexpected;
  469|   177k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  19.7k|    {
 1476|  19.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  19.7k|    {
  447|  19.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.8k|    {
 1177|  19.8k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  1.10k|    {
 1653|  1.10k|        return value();
 1654|  1.10k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.10k|    {
 1627|  1.10k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.10k|        return this->get_value();
 1629|  1.10k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.10k|    {
  451|  1.10k|        return m_value;
  452|  1.10k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5829|     92|    {
 5830|     92|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|  1.10k|    {
 5681|  1.10k|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5615|     92|    {
 5616|     92|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|     92|    {
 1430|     92|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|     92|    {
  437|     92|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5373|  19.8k|    {
 5374|  19.8k|        return m_args;
 5375|  19.8k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   178k|{
 7696|   178k|    return s;
 7697|   178k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   178k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  19.8k|    {
 7971|  19.8k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|  89.4k|{
 8607|  89.4k|#if !SCN_DISABLE_LOCALE
 8608|  89.4k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  89.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  89.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  89.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  89.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  89.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 88.8k, False: 553]
  |  |  ------------------
  ------------------
 8615|  88.8k|        return unexpected(result.error());
 8616|  88.8k|    }
 8617|    553|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    553|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  89.4k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5395|  19.8k|{
 5396|  19.8k|    detail::check_scan_arg_types<Args...>();
 5397|  19.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  19.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5348|  19.8k|    {
 5349|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  19.8k|    {
 5360|  19.8k|        return {detail::make_arg<
 5361|  19.8k|            kind, Context,
 5362|  19.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  19.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  19.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  19.8k|{
 5170|  19.8k|    return make_value<Context>(value).ref_value;
 5171|  19.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5119|  19.8k|{
 5120|  19.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  19.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  19.8k|                                  needs_context_tag>) {
 5124|  19.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  19.8k|    }
 5126|  19.8k|    else {
 5127|  19.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  19.8k|            value, context_tag<Context>{}));
 5129|  19.8k|    }
 5130|  19.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4958|  19.8k|    {                                                                        \
 4959|  19.8k|        return val;                                                          \
 4960|  19.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7974|  19.8k|    {
 7975|  19.8k|        return m_str;
 7976|  19.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  19.8k|    {
 5426|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5378|  19.8k|    {
 5379|  19.8k|        return m_argptrs;
 5380|  19.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  19.8k|{
 8820|  19.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.8k, False: 0]
  |  |  ------------------
  ------------------
 8821|  19.8k|        return unexpected(result.error());
 8822|  19.8k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  19.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  19.8k|    {
 1476|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  19.8k|    {
  447|  19.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.8k|    {
 1177|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5373|  19.8k|    {
 5374|  19.8k|        return m_args;
 5375|  19.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  19.8k|    {
 7971|  19.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5395|  19.8k|{
 5396|  19.8k|    detail::check_scan_arg_types<Args...>();
 5397|  19.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  19.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5348|  19.8k|    {
 5349|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  19.8k|    {
 5360|  19.8k|        return {detail::make_arg<
 5361|  19.8k|            kind, Context,
 5362|  19.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  19.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  19.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  19.8k|{
 5170|  19.8k|    return make_value<Context>(value).ref_value;
 5171|  19.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5119|  19.8k|{
 5120|  19.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  19.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  19.8k|                                  needs_context_tag>) {
 5124|  19.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  19.8k|    }
 5126|  19.8k|    else {
 5127|  19.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  19.8k|            value, context_tag<Context>{}));
 5129|  19.8k|    }
 5130|  19.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4958|  19.8k|    {                                                                        \
 4959|  19.8k|        return val;                                                          \
 4960|  19.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7974|  19.8k|    {
 7975|  19.8k|        return m_str;
 7976|  19.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  19.8k|    {
 5426|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5378|  19.8k|    {
 5379|  19.8k|        return m_argptrs;
 5380|  19.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  19.8k|{
 8820|  19.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.8k, False: 0]
  |  |  ------------------
  ------------------
 8821|  19.8k|        return unexpected(result.error());
 8822|  19.8k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  19.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  19.8k|    {
 1476|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  19.8k|    {
  447|  19.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.8k|    {
 1177|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5373|  19.8k|    {
 5374|  19.8k|        return m_args;
 5375|  19.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  19.8k|    {
 7971|  19.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|  19.8k|{
 5396|  19.8k|    detail::check_scan_arg_types<Args...>();
 5397|  19.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  19.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|  19.8k|    {
 5349|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  19.8k|    {
 5360|  19.8k|        return {detail::make_arg<
 5361|  19.8k|            kind, Context,
 5362|  19.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  19.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  19.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  19.8k|{
 5170|  19.8k|    return make_value<Context>(value).ref_value;
 5171|  19.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|  19.8k|{
 5120|  19.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  19.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  19.8k|                                  needs_context_tag>) {
 5124|  19.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  19.8k|    }
 5126|  19.8k|    else {
 5127|  19.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  19.8k|            value, context_tag<Context>{}));
 5129|  19.8k|    }
 5130|  19.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|  19.8k|    {                                                                        \
 4959|  19.8k|        return val;                                                          \
 4960|  19.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7974|  19.8k|    {
 7975|  19.8k|        return m_str;
 7976|  19.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  19.8k|    {
 5426|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|  19.8k|    {
 5379|  19.8k|        return m_argptrs;
 5380|  19.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  19.8k|{
 8820|  19.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.8k, False: 0]
  |  |  ------------------
  ------------------
 8821|  19.8k|        return unexpected(result.error());
 8822|  19.8k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  19.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  19.8k|    {
 1476|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  19.8k|    {
  447|  19.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.8k|    {
 1177|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|  19.8k|    {
 5374|  19.8k|        return m_args;
 5375|  19.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  19.8k|    {
 7971|  19.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5395|  19.8k|{
 5396|  19.8k|    detail::check_scan_arg_types<Args...>();
 5397|  19.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  19.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5348|  19.8k|    {
 5349|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  19.8k|    {
 5360|  19.8k|        return {detail::make_arg<
 5361|  19.8k|            kind, Context,
 5362|  19.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  19.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  19.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  19.8k|{
 5170|  19.8k|    return make_value<Context>(value).ref_value;
 5171|  19.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5119|  19.8k|{
 5120|  19.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  19.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  19.8k|                                  needs_context_tag>) {
 5124|  19.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  19.8k|    }
 5126|  19.8k|    else {
 5127|  19.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  19.8k|            value, context_tag<Context>{}));
 5129|  19.8k|    }
 5130|  19.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4958|  19.8k|    {                                                                        \
 4959|  19.8k|        return val;                                                          \
 4960|  19.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7974|  19.8k|    {
 7975|  19.8k|        return m_str;
 7976|  19.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  19.8k|    {
 5426|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5378|  19.8k|    {
 5379|  19.8k|        return m_argptrs;
 5380|  19.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  19.8k|{
 8820|  19.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.8k, False: 0]
  |  |  ------------------
  ------------------
 8821|  19.8k|        return unexpected(result.error());
 8822|  19.8k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  19.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  19.8k|    {
 1476|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  19.8k|    {
  447|  19.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.8k|    {
 1177|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5373|  19.8k|    {
 5374|  19.8k|        return m_args;
 5375|  19.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  19.8k|    {
 7971|  19.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5395|  19.8k|{
 5396|  19.8k|    detail::check_scan_arg_types<Args...>();
 5397|  19.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  19.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5348|  19.8k|    {
 5349|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  19.8k|    {
 5360|  19.8k|        return {detail::make_arg<
 5361|  19.8k|            kind, Context,
 5362|  19.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  19.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  19.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  19.8k|{
 5170|  19.8k|    return make_value<Context>(value).ref_value;
 5171|  19.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5119|  19.8k|{
 5120|  19.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  19.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  19.8k|                                  needs_context_tag>) {
 5124|  19.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  19.8k|    }
 5126|  19.8k|    else {
 5127|  19.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  19.8k|            value, context_tag<Context>{}));
 5129|  19.8k|    }
 5130|  19.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4958|  19.8k|    {                                                                        \
 4959|  19.8k|        return val;                                                          \
 4960|  19.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7974|  19.8k|    {
 7975|  19.8k|        return m_str;
 7976|  19.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  19.8k|    {
 5426|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5378|  19.8k|    {
 5379|  19.8k|        return m_argptrs;
 5380|  19.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  19.8k|{
 8820|  19.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.8k, False: 0]
  |  |  ------------------
  ------------------
 8821|  19.8k|        return unexpected(result.error());
 8822|  19.8k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  19.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  19.8k|    {
 1476|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  19.8k|    {
  447|  19.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.8k|    {
 1177|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5373|  19.8k|    {
 5374|  19.8k|        return m_args;
 5375|  19.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  19.8k|    {
 7971|  19.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  19.8k|{
 5396|  19.8k|    detail::check_scan_arg_types<Args...>();
 5397|  19.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  19.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  19.8k|    {
 5349|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  19.8k|    {
 5360|  19.8k|        return {detail::make_arg<
 5361|  19.8k|            kind, Context,
 5362|  19.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  19.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  19.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  19.8k|{
 5170|  19.8k|    return make_value<Context>(value).ref_value;
 5171|  19.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  19.8k|{
 5120|  19.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  19.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  19.8k|                                  needs_context_tag>) {
 5124|  19.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  19.8k|    }
 5126|  19.8k|    else {
 5127|  19.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  19.8k|            value, context_tag<Context>{}));
 5129|  19.8k|    }
 5130|  19.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  19.8k|    {                                                                        \
 4959|  19.8k|        return val;                                                          \
 4960|  19.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  19.8k|    {
 7975|  19.8k|        return m_str;
 7976|  19.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  19.8k|    {
 5426|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  19.8k|    {
 5379|  19.8k|        return m_argptrs;
 5380|  19.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  19.8k|{
 8820|  19.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.5k, False: 338]
  |  |  ------------------
  ------------------
 8821|  19.5k|        return unexpected(result.error());
 8822|  19.5k|    }
 8823|    338|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    338|    static_cast<    \
  |  |  929|    338|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    338|    static_cast<    \
  |  |  929|    338|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  19.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  19.5k|    {
 1476|  19.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  19.5k|    {
  626|  19.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  19.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  19.5k|    {
  689|  19.5k|        scn::detail::construct_at(unexpected_ptr(),
  690|  19.5k|                                  std::forward<Args>(args)...);
  691|  19.5k|        m_has_value = false;
  692|  19.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  39.0k|    {
  718|  39.0k|        return reinterpret_cast<unexpected<E>*>(
  719|  39.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  39.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  39.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.8k|    {
 1177|  19.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    338|    {
 5830|    338|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    338|    {
 1430|    338|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    338|    {
  616|    338|        construct(std::forward<Args>(args)...);
  617|    338|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    338|    {
  682|    338|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    338|        m_has_value = true;
  684|    338|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    338|{
  392|    338|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    338|        T(std::forward<Args>(args)...);
  394|    338|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|    338|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    676|    {
  706|    676|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    676|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    676|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|    676|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  19.8k|    {
 5374|  19.8k|        return m_args;
 5375|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  19.8k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  19.8k|    {
 7971|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  19.8k|    {
  631|  19.8k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 338, False: 19.5k]
  ------------------
  632|    338|            destroy_value();
  633|    338|        }
  634|  19.5k|        else {
  635|  19.5k|            destroy_unexpected();
  636|  19.5k|        }
  637|  19.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  19.8k|    {
  675|  19.8k|        return m_has_value;
  676|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    338|    {
  696|    338|        scn::detail::destroy_at(value_ptr());
  697|    338|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    338|{
  398|    338|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    338|        for (auto& elem : *p) {
  400|    338|            scn::detail::destroy_at(&elem);
  401|    338|        }
  402|    338|    }
  403|    338|    else {
  404|    338|        p->~T();
  405|    338|    }
  406|    338|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  19.5k|    {
  700|  19.5k|        scn::detail::destroy_at(unexpected_ptr());
  701|  19.5k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  19.8k|{
 5396|  19.8k|    detail::check_scan_arg_types<Args...>();
 5397|  19.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  19.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  19.8k|    {
 5349|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  19.8k|    {
 5360|  19.8k|        return {detail::make_arg<
 5361|  19.8k|            kind, Context,
 5362|  19.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  19.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  19.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  19.8k|{
 5170|  19.8k|    return make_value<Context>(value).ref_value;
 5171|  19.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  19.8k|{
 5120|  19.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  19.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  19.8k|                                  needs_context_tag>) {
 5124|  19.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  19.8k|    }
 5126|  19.8k|    else {
 5127|  19.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  19.8k|            value, context_tag<Context>{}));
 5129|  19.8k|    }
 5130|  19.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  19.8k|    {                                                                        \
 4959|  19.8k|        return val;                                                          \
 4960|  19.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  19.8k|    {
 7975|  19.8k|        return m_str;
 7976|  19.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  19.8k|    {
 5426|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  19.8k|    {
 5379|  19.8k|        return m_argptrs;
 5380|  19.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  19.8k|{
 8820|  19.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.5k, False: 338]
  |  |  ------------------
  ------------------
 8821|  19.5k|        return unexpected(result.error());
 8822|  19.5k|    }
 8823|    338|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    338|    static_cast<    \
  |  |  929|    338|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    338|    static_cast<    \
  |  |  929|    338|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  19.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  19.5k|    {
 1476|  19.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  19.5k|    {
  626|  19.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  19.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  19.5k|    {
  689|  19.5k|        scn::detail::construct_at(unexpected_ptr(),
  690|  19.5k|                                  std::forward<Args>(args)...);
  691|  19.5k|        m_has_value = false;
  692|  19.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  39.0k|    {
  718|  39.0k|        return reinterpret_cast<unexpected<E>*>(
  719|  39.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  39.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  39.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.8k|    {
 1177|  19.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    338|    {
 5830|    338|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    338|    {
 1430|    338|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    338|    {
  616|    338|        construct(std::forward<Args>(args)...);
  617|    338|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    338|    {
  682|    338|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    338|        m_has_value = true;
  684|    338|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    338|{
  392|    338|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    338|        T(std::forward<Args>(args)...);
  394|    338|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|    338|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    676|    {
  706|    676|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    676|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    676|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|    676|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  19.8k|    {
 5374|  19.8k|        return m_args;
 5375|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  19.8k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  19.8k|    {
 7971|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  19.8k|    {
  631|  19.8k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 338, False: 19.5k]
  ------------------
  632|    338|            destroy_value();
  633|    338|        }
  634|  19.5k|        else {
  635|  19.5k|            destroy_unexpected();
  636|  19.5k|        }
  637|  19.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  19.8k|    {
  675|  19.8k|        return m_has_value;
  676|  19.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    338|    {
  696|    338|        scn::detail::destroy_at(value_ptr());
  697|    338|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    338|{
  398|    338|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    338|        for (auto& elem : *p) {
  400|    338|            scn::detail::destroy_at(&elem);
  401|    338|        }
  402|    338|    }
  403|    338|    else {
  404|    338|        p->~T();
  405|    338|    }
  406|    338|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  19.5k|    {
  700|  19.5k|        scn::detail::destroy_at(unexpected_ptr());
  701|  19.5k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|  19.8k|{
 5396|  19.8k|    detail::check_scan_arg_types<Args...>();
 5397|  19.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  19.8k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|  19.8k|{
 5135|  19.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  19.8k|                  "Scan argument types must be default constructible");
 5137|  19.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  19.8k|                  "Scan argument types must be Destructible");
 5139|  19.8k|    static_assert(
 5140|  19.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  19.8k|        "Scan argument types must not be references");
 5142|  19.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5348|  19.8k|    {
 5349|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  19.8k|    {
 5360|  19.8k|        return {detail::make_arg<
 5361|  19.8k|            kind, Context,
 5362|  19.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  19.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  19.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|  19.8k|{
 5170|  19.8k|    return make_value<Context>(value).ref_value;
 5171|  19.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|  19.8k|{
 5120|  19.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  19.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  19.8k|                                  needs_context_tag>) {
 5124|  19.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  19.8k|    }
 5126|  19.8k|    else {
 5127|  19.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  19.8k|            value, context_tag<Context>{}));
 5129|  19.8k|    }
 5130|  19.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|  19.8k|    {                                                                        \
 4959|  19.8k|        return val;                                                          \
 4960|  19.8k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|  19.8k|{
 5089|  19.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  19.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  19.8k|    constexpr bool scannable_char =
 5093|  19.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  19.8k|    static_assert(scannable_char,
 5095|  19.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  19.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  19.8k|    constexpr bool scannable_const =
 5099|  19.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  19.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  19.8k|    constexpr bool scannable_disabled =
 5103|  19.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  19.8k|    static_assert(scannable_disabled,
 5105|  19.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  19.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  19.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  19.8k|    static_assert(
 5110|  19.8k|        scannable,
 5111|  19.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  19.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  19.8k|    return arg_value{arg};
 5115|  19.8k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4901|  19.8k|    {
 4902|  19.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7974|  19.8k|    {
 7975|  19.8k|        return m_str;
 7976|  19.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  19.8k|    {
 5426|  19.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|  19.8k|    {
 5379|  19.8k|        return m_argptrs;
 5380|  19.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  19.8k|{
 8820|  19.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.5k, False: 338]
  |  |  ------------------
  ------------------
 8821|  19.5k|        return unexpected(result.error());
 8822|  19.5k|    }
 8823|    338|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    338|    static_cast<    \
  |  |  929|    338|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    338|    static_cast<    \
  |  |  929|    338|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  19.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  19.5k|    {
 1476|  19.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  19.5k|    {
  447|  19.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.8k|    {
 1177|  19.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|    338|    {
 5830|    338|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|    338|    {
 5616|    338|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|    338|    {
 1430|    338|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|    338|    {
  437|    338|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|  19.8k|    {
 5374|  19.8k|        return m_args;
 5375|  19.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  19.8k|    {
 7971|  19.8k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|   505k|    {
 3568|   505k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   505k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|   505k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  2.17M|    {
 3574|  2.17M|        return m_code == good;
 3575|  2.17M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|  72.0k|    {
 3585|  72.0k|        return m_code;
 3586|  72.0k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6180|  4.11k|    {
 6181|  4.11k|        return m_size;
 6182|  4.11k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6221|  4.05k|    {
 6222|  4.05k|        SCN_GCC_COMPAT_PUSH
 6223|  4.05k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6224|  4.05k|        switch (type) {
 6225|  1.76k|            case presentation_type::none:
  ------------------
  |  Branch (6225:13): [True: 1.76k, False: 2.29k]
  ------------------
 6226|  1.76k|                return 10;
 6227|     70|            case presentation_type::int_generic:
  ------------------
  |  Branch (6227:13): [True: 70, False: 3.98k]
  ------------------
 6228|     70|                return 0;
 6229|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6229:13): [True: 0, False: 4.05k]
  ------------------
 6230|      0|                return arbitrary_base;
 6231|       |
 6232|     38|            case presentation_type::int_binary:
  ------------------
  |  Branch (6232:13): [True: 38, False: 4.01k]
  ------------------
 6233|     38|                return 2;
 6234|     66|            case presentation_type::int_octal:
  ------------------
  |  Branch (6234:13): [True: 66, False: 3.98k]
  ------------------
 6235|     66|                return 8;
 6236|     40|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6236:13): [True: 40, False: 4.01k]
  ------------------
 6237|     84|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6237:13): [True: 44, False: 4.01k]
  ------------------
 6238|     84|                return 10;
 6239|  2.03k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6239:13): [True: 2.03k, False: 2.02k]
  ------------------
 6240|  2.03k|                return 16;
 6241|       |
 6242|      0|            default:
  ------------------
  |  Branch (6242:13): [True: 0, False: 4.05k]
  ------------------
 6243|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6244|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6245|  4.05k|        }
 6246|  4.05k|        SCN_GCC_COMPAT_POP
 6247|  4.05k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  78.0k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6262|  9.31k|    {
 6263|  9.31k|        m_specs.align = align;
 6264|  9.31k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|    336|    {
 6272|    336|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|    336|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|    336|            m_specs.localized = true;
 6274|    336|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|    336|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|  13.6k|    {
 6282|  13.6k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 13.6k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|  13.6k|        m_specs.width = width;
 6289|  13.6k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6291|  9.10k|    {
 6292|  9.10k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6292:13): [True: 68, False: 9.03k]
  ------------------
 6293|       |            // clang-format off
 6294|     68|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6295|       |            // clang-format on
 6296|     68|        }
 6297|       |
 6298|  9.03k|        m_specs.precision = prec;
 6299|  9.03k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  93.6k|    {
 6303|  93.6k|        m_specs.type = type;
 6304|  93.6k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6307|  1.13M|    {
 6308|  1.13M|        const auto cp_value = static_cast<unsigned>(cp);
 6309|  1.13M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  1.13M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 976k, False: 156k]
  |  |  ------------------
  ------------------
 6310|   976k|            m_specs.charset_literals[cp_value / 8] |=
 6311|   976k|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6312|   976k|        }
 6313|   156k|        else {
 6314|   156k|            m_specs.charset_has_nonascii = true;
 6315|   156k|        }
 6316|  1.13M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  9.64k|    {
 6320|  9.64k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  9.64k|        const auto end_value = static_cast<unsigned>(end);
 6322|  9.64k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  9.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  9.64k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  9.64k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.97k, False: 4.67k]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  4.97k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  4.97k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|   322k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 317k, False: 4.97k]
  ------------------
 6329|   317k|                m_specs.charset_literals[v / 8] |=
 6330|   317k|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|   317k|            }
 6332|  4.97k|        }
 6333|  4.67k|        else {
 6334|  4.67k|            m_specs.charset_has_nonascii = true;
 6335|  4.67k|        }
 6336|  9.64k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6339|  2.34k|    {
 6340|  2.34k|        m_specs.charset_is_inverted = true;
 6341|  2.34k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6358|  48.5k|    {
 6359|  48.5k|        m_specs.regexp_flags = flags;
 6360|  48.5k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  10.2k|    {
 6365|  10.2k|        SCN_UNLIKELY_ATTR
 6366|  10.2k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  10.2k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  1.22M|    {
 6376|  1.22M|        return static_cast<bool>(m_error);
 6377|  1.22M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|  72.0k|{
 3609|  72.0k|    return a.code() == b;
 3610|  72.0k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|  72.0k|{
 3613|  72.0k|    return !(a == b);
 3614|  72.0k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3907|   108k|{
 3908|   108k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3909|       |
 3910|   108k|    const auto is_trailing_code_unit = [](char ch) {
 3911|   108k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|   108k|    };
 3913|       |
 3914|   108k|    if (input.size() == 1) {
  ------------------
  |  Branch (3914:9): [True: 95.9k, False: 13.0k]
  ------------------
 3915|  95.9k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|  95.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  95.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3916|  95.9k|        return static_cast<char32_t>(input[0]);
 3917|  95.9k|    }
 3918|       |
 3919|  13.0k|    if (input.size() == 2) {
  ------------------
  |  Branch (3919:9): [True: 12.3k, False: 642]
  ------------------
 3920|  12.3k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  12.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3921|  12.3k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  12.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3922|       |
 3923|  12.3k|        char32_t cp{};
 3924|  12.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3925|  12.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3926|  12.3k|        return cp;
 3927|  12.3k|    }
 3928|       |
 3929|    642|    if (input.size() == 3) {
  ------------------
  |  Branch (3929:9): [True: 518, False: 124]
  ------------------
 3930|    518|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|    518|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    518|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3931|    518|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    518|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    518|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3932|    518|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    518|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    518|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3933|       |
 3934|    518|        char32_t cp{};
 3935|    518|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3936|    518|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3937|    518|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3938|    518|        return cp;
 3939|    518|    }
 3940|       |
 3941|    124|    if (input.size() == 4) {
  ------------------
  |  Branch (3941:9): [True: 124, False: 0]
  ------------------
 3942|    124|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|    124|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3944|    124|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3945|    124|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3946|    124|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3947|       |
 3948|    124|        char32_t cp{};
 3949|    124|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3950|    124|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3951|    124|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3952|    124|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3953|    124|        return cp;
 3954|    124|    }
 3955|       |
 3956|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3957|       |    // gcc 7 thinks we'll get here, even when we won't
 3958|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3959|      0|#endif
 3960|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3961|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6110|  69.8k|{
 6111|  69.8k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6112|  69.8k|                                    static_cast<unsigned>(b));
 6113|  69.8k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6115|  6.71k|{
 6116|  6.71k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6117|  6.71k|                                    static_cast<unsigned>(b));
 6118|  6.71k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6130|  6.71k|{
 6131|  6.71k|    return a = a | b;
 6132|  6.71k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|    856|{
 7063|    856|    switch (type) {
 7064|    100|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 100, False: 756]
  ------------------
 7065|    100|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 856]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 856]
  ------------------
 7069|     84|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 84, False: 772]
  ------------------
 7070|     84|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 856]
  ------------------
 7071|     84|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 856]
  ------------------
 7072|     84|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 856]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 856]
  ------------------
 7076|     84|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 84, False: 772]
  ------------------
 7077|     84|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 856]
  ------------------
 7078|     84|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 856]
  ------------------
 7079|     84|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|     84|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 84, False: 772]
  ------------------
 7082|     84|            return arg_type_category::pointer;
 7083|     84|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 84, False: 772]
  ------------------
 7084|     84|            return arg_type_category::boolean;
 7085|     44|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 44, False: 812]
  ------------------
 7086|     84|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 40, False: 816]
  ------------------
 7087|     84|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 856]
  ------------------
 7088|     84|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 856]
  ------------------
 7091|     84|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 84, False: 772]
  ------------------
 7092|     84|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 856]
  ------------------
 7093|     84|            return arg_type_category::floating;
 7094|       |
 7095|     44|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 44, False: 812]
  ------------------
 7096|    128|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 84, False: 772]
  ------------------
 7097|    168|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 40, False: 816]
  ------------------
 7098|    252|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 84, False: 772]
  ------------------
 7099|    252|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 856]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 856]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|    856|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|    856|            SCN_CLANG_POP
 7110|    856|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|    856|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  1.17k|{
 3654|  1.17k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.17k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7148|  16.0k|{
 7149|  16.0k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.0k, False: 2.06k]
  |  |  ------------------
  ------------------
 7150|  14.0k|        return handler.on_error("Invalid type specifier for integer type");
 7151|  14.0k|    }
 7152|  2.06k|    if (specs.localized) {
  ------------------
  |  Branch (7152:9): [True: 112, False: 1.95k]
  ------------------
 7153|    112|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 104]
  |  |  ------------------
  ------------------
 7154|       |            // clang-format off
 7155|      8|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7156|       |            // clang-format on
 7157|      8|            return;
 7158|      8|        }
 7159|    104|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 104]
  |  |  ------------------
  ------------------
 7160|       |            // clang-format off
 7161|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7162|       |            // clang-format on
 7163|      0|        }
 7164|    104|    }
 7165|  2.06k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|     52|{
 1949|     52|    return SCN_FWD(t);
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|     52|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.11k|{
 3654|  2.11k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.11k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  8.03k|{
 7193|  8.03k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 7.12k, False: 904]
  ------------------
 7194|  8.03k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 128, False: 7.00k]
  ------------------
 7195|  7.12k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 6.89k, False: 102]
  ------------------
 7196|  7.02k|        SCN_UNLIKELY_ATTR
 7197|  7.02k|        return handler.on_error("Invalid type specifier for float type");
 7198|  7.02k|    }
 7199|  8.03k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.5k|    {
  485|  31.5k|        return m_has_value;
  486|  31.5k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1597|  15.7k|    {
 1598|  15.7k|        return has_value();
 1599|  15.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  450|  15.7k|    {
  451|  15.7k|        return m_value;
  452|  15.7k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1626|  15.7k|    {
 1627|  15.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  15.7k|        return this->get_value();
 1629|  15.7k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1662|  15.7k|    {
 1663|  15.7k|        return std::move(value());
 1664|  15.7k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3653|  7.49k|{
 3654|  7.49k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  7.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  7.49k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3653|  5.37k|{
 3654|  5.37k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  5.37k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3653|    174|{
 3654|    174|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    174|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3653|    360|{
 3654|    360|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    360|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    360|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  1.05k|{
 3654|  1.05k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.05k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|  23.8k|{
 7205|  23.8k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 2.64k, False: 21.2k]
  ------------------
 7206|  23.8k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 774, False: 20.4k]
  ------------------
 7207|  23.8k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 3.57k, False: 16.8k]
  ------------------
 7208|  23.8k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 14.9k, False: 1.98k]
  ------------------
 7209|  23.8k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 1.21k, False: 768]
  ------------------
 7210|  23.1k|        return;
 7211|  23.1k|    }
 7212|    768|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 162, False: 606]
  ------------------
 7213|    162|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 150]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|     12|        }
 7218|    150|        return;
 7219|    162|    }
 7220|    606|    SCN_UNLIKELY_ATTR
 7221|    606|    handler.on_error("Invalid type specifier for string");
 7222|    606|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3653|  4.31k|{
 3654|  4.31k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  4.31k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3653|     34|{
 3654|     34|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     34|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|     34|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7238|  8.03k|{
 7239|  8.03k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7239:9): [True: 7.12k, False: 904]
  ------------------
 7240|  8.03k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7240:9): [True: 6.86k, False: 268]
  ------------------
 7241|  8.03k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7241:9): [True: 6.83k, False: 28]
  ------------------
 7242|  8.03k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7242:9): [True: 6.80k, False: 24]
  ------------------
 7243|  8.03k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7243:9): [True: 6.79k, False: 18]
  ------------------
 7244|  8.03k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7244:9): [True: 6.77k, False: 16]
  ------------------
 7245|  8.03k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7245:9): [True: 6.74k, False: 26]
  ------------------
 7246|  8.03k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7246:9): [True: 6.73k, False: 16]
  ------------------
 7247|  6.73k|        SCN_UNLIKELY_ATTR
 7248|  6.73k|        return handler.on_error("Invalid type specifier for boolean");
 7249|  6.73k|    }
 7250|  8.03k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7170|  7.96k|{
 7171|  7.96k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7171:9): [True: 6.98k, False: 976]
  ------------------
 7172|  7.96k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7172:9): [True: 0, False: 976]
  ------------------
 7173|  6.98k|        SCN_UNLIKELY_ATTR
 7174|  6.98k|        return handler.on_error("Invalid type specifier for character type");
 7175|  6.98k|    }
 7176|  7.96k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7227|  7.96k|{
 7228|  7.96k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7228:9): [True: 7.08k, False: 880]
  ------------------
 7229|  7.96k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7229:9): [True: 7.07k, False: 10]
  ------------------
 7230|  7.07k|        SCN_UNLIKELY_ATTR
 7231|  7.07k|        return handler.on_error("Invalid type specifier for pointer");
 7232|  7.07k|    }
 7233|  7.96k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA79_KcEEEDaDpOT_:
 3653|     88|{
 3654|     88|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|     88|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  82.2k|{
 3715|  82.2k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|  82.2k|                                          const CharT*, const CharT*>) {
 3717|  82.2k|        return {first, last};
 3718|  82.2k|    }
 3719|  82.2k|    else {
 3720|  82.2k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  82.2k|    }
 3722|  82.2k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   242k|{
 3715|   242k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   242k|                                          const CharT*, const CharT*>) {
 3717|   242k|        return {first, last};
 3718|   242k|    }
 3719|   242k|    else {
 3720|   242k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   242k|    }
 3722|   242k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  1.13M|    {
 3330|  1.13M|        return m_iterator;
 3331|  1.13M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  1.19M|    {
 3334|  1.19M|        return m_sentinel;
 3335|  1.19M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|   443k|    {
 3330|   443k|        return m_iterator;
 3331|   443k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|   625k|    {
 3334|   625k|        return m_sentinel;
 3335|   625k|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|   139k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    174|{
 1211|    174|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    174|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  2.09k|    {
  361|  2.09k|        return m_unexpected;
  362|  2.09k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3653|  5.03k|{
 3654|  5.03k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  5.03k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|  28.8k|    {
  347|  28.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  28.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  28.8k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  82.7k|    {
 1476|  82.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  83.6k|    {
  447|  83.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   111k|    {
 1177|   111k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  26.4k|    {
 1430|  26.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  26.4k|    {
  437|  26.4k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   112k|    {
 1598|   112k|        return has_value();
 1599|   112k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   222k|    {
  485|   222k|        return m_has_value;
  486|   222k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  82.7k|    {
 1604|  82.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  82.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  82.7k|        return this->get_unexpected().error();
 1606|  82.7k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  82.7k|    {
  468|  82.7k|        return m_unexpected;
  469|  82.7k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  19.0k|    {
 1663|  19.0k|        return std::move(value());
 1664|  19.0k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  27.2k|    {
 1627|  27.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  27.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  27.2k|        return this->get_value();
 1629|  27.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  27.2k|    {
  451|  27.2k|        return m_value;
  452|  27.2k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  45.0k|    {
 1476|  45.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  45.8k|    {
  447|  45.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  65.5k|    {
 1177|  65.5k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  19.4k|    {
 1430|  19.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  19.4k|    {
  437|  19.4k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  66.3k|    {
 1598|  66.3k|        return has_value();
 1599|  66.3k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|   130k|    {
  485|   130k|        return m_has_value;
  486|   130k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  45.0k|    {
 1604|  45.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  45.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  45.0k|        return this->get_unexpected().error();
 1606|  45.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  45.0k|    {
  468|  45.0k|        return m_unexpected;
  469|  45.0k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  15.4k|    {
 1663|  15.4k|        return std::move(value());
 1664|  15.4k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  18.8k|    {
 1627|  18.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  18.8k|        return this->get_value();
 1629|  18.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  18.8k|    {
  451|  18.8k|        return m_value;
  452|  18.8k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  8.22k|    {
 1837|  8.22k|        return detail::transform_error_impl(std::move(*this),
 1838|  8.22k|                                            std::forward<F>(f));
 1839|  8.22k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  8.22k|{
 1323|  8.22k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  8.22k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  8.22k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  8.22k|            return result(*std::forward<Exp>(exp));
 1327|  8.22k|        }
 1328|       |
 1329|  8.22k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  8.22k|        return result(unexpect, monostate{});
 1331|  8.22k|    }
 1332|  8.22k|    else {
 1333|  8.22k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  8.22k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.22k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.22k, False: 0]
  |  |  ------------------
  ------------------
 1335|  8.22k|                   ? result(*std::forward<Exp>(exp))
 1336|  8.22k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  8.22k|    }
 1340|  8.22k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  64.2k|    {
  485|  64.2k|        return m_has_value;
  486|  64.2k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  10.0k|    {
 1663|  10.0k|        return std::move(value());
 1664|  10.0k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  29.1k|    {
 1627|  29.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  29.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  29.1k|        return this->get_value();
 1629|  29.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  29.1k|    {
  451|  29.1k|        return m_value;
  452|  29.1k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|    102|    {
 1614|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    102|        return std::move(this->get_unexpected().error());
 1616|    102|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    102|    {
  468|    102|        return m_unexpected;
  469|    102|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|    908|    {
 1486|    908|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|   395k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6186|  2.58k|    {
 6187|  2.58k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  2.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|  2.58k|        CharT r{};
 6189|  2.58k|        std::memcpy(&r, m_data, m_size);
 6190|  2.58k|        return r;
 6191|  2.58k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|  1.08k|    {
  347|  1.08k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.08k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.08k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  1.25k|    {
  356|  1.25k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.25k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.25k|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6195|    566|    {
 6196|    566|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6197|    566|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2961|     52|    {
 2962|     52|        return fn::impl(std::forward<T>(t));
 2963|     52|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2952|     52|    {
 2953|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|     52|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|     52|    {
 2930|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|     52|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2895|     52|    {
 2896|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|     52|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|    174|    {
  347|    174|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    174|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|    174|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|      8|    {
  347|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  17.4k|    {
  361|  17.4k|        return m_unexpected;
  362|  17.4k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  3.40k|    {
  356|  3.40k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.40k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.40k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  26.6k|    {
  347|  26.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  26.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  26.6k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  26.6k|    {
  361|  26.6k|        return m_unexpected;
  362|  26.6k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  26.6k|    {
  356|  26.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  26.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  26.6k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    664|{
 1211|    664|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    664|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  2.73k|    {
  347|  2.73k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.73k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.73k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|  1.11k|{
 1211|  1.11k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  1.11k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  7.95k|{
  326|  7.95k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  7.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  7.95k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  58.9k|    {
 3346|  58.9k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  58.9k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    440|    {
 1476|    440|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    440|    {
  447|    440|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  34.9k|    {
 1177|  34.9k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  34.4k|    {
 1430|  34.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  34.4k|    {
  437|  34.4k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  24.7k|    {
 1598|  24.7k|        return has_value();
 1599|  24.7k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  19.1k|    {
 1653|  19.1k|        return value();
 1654|  19.1k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  6.17k|    {
 1430|  6.17k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  6.17k|    {
  437|  6.17k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.49k|    {
 1177|  6.49k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    326|    {
 1476|    326|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    326|    {
  447|    326|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1597|  4.06k|    {
 1598|  4.06k|        return has_value();
 1599|  4.06k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  11.3k|    {
  485|  11.3k|        return m_has_value;
  486|  11.3k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEERT_v:
 1652|  2.45k|    {
 1653|  2.45k|        return value();
 1654|  2.45k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  4.58k|    {
 1627|  4.58k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.58k|        return this->get_value();
 1629|  4.58k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  4.58k|    {
  451|  4.58k|        return m_value;
  452|  4.58k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    174|    {
 1476|    174|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|    174|    {
  447|    174|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.83k|    {
 1177|  3.83k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  3.66k|    {
 1430|  3.66k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  3.66k|    {
  437|  3.66k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    702|    {
 1837|    702|        return detail::transform_error_impl(std::move(*this),
 1838|    702|                                            std::forward<F>(f));
 1839|    702|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    702|{
 1323|    702|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    702|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    702|        if (SCN_LIKELY(exp.has_value())) {
 1326|    702|            return result(*std::forward<Exp>(exp));
 1327|    702|        }
 1328|       |
 1329|    702|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    702|        return result(unexpect, monostate{});
 1331|    702|    }
 1332|    702|    else {
 1333|    702|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    702|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    702|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 702, False: 0]
  |  |  ------------------
  ------------------
 1335|    702|                   ? result(*std::forward<Exp>(exp))
 1336|    702|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    702|    }
 1340|    702|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  2.12k|    {
 1663|  2.12k|        return std::move(value());
 1664|  2.12k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|  2.06k|    {
 1430|  2.06k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  2.06k|    {
  437|  2.06k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.67k|    {
 1177|  7.67k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1613|    304|    {
 1614|    304|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    304|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    304|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    304|        return std::move(this->get_unexpected().error());
 1616|    304|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    304|    {
  468|    304|        return m_unexpected;
  469|    304|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.30k|    {
 1486|  1.30k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  4.99k|    {
  447|  4.99k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.53k|    {
 2724|  1.53k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.53k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.53k|    {
 2705|  1.53k|        return decay_copy(t.begin());
 2706|  1.53k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1948|  3.32k|{
 1949|  3.32k|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.32k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3329|  1.53k|    {
 3330|  1.53k|        return m_iterator;
 3331|  1.53k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.53k|    {
 2781|  1.53k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.53k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.53k|    {
 2763|  1.53k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.53k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3333|  1.53k|    {
 3334|  1.53k|        return m_sentinel;
 3335|  1.53k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|  1.53k|    {
 3316|  1.53k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  3.83k|    {
 1598|  3.83k|        return has_value();
 1599|  3.83k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  7.67k|    {
  485|  7.67k|        return m_has_value;
  486|  7.67k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1603|    174|    {
 1604|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    174|        return this->get_unexpected().error();
 1606|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  3.66k|    {
 1663|  3.66k|        return std::move(value());
 1664|  3.66k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  3.66k|    {
 1627|  3.66k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.66k|        return this->get_value();
 1629|  3.66k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.66k|    {
  451|  3.66k|        return m_value;
  452|  3.66k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.4k|    {
 1177|  19.4k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  19.4k|    {
 1430|  19.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  19.4k|    {
  437|  19.4k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  19.4k|    {
 1598|  19.4k|        return has_value();
 1599|  19.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  38.9k|    {
  485|  38.9k|        return m_has_value;
  486|  38.9k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  19.4k|    {
 1663|  19.4k|        return std::move(value());
 1664|  19.4k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  19.4k|    {
 1627|  19.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  19.4k|        return this->get_value();
 1629|  19.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  19.4k|    {
  451|  19.4k|        return m_value;
  452|  19.4k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  3.69k|    {
 1476|  3.69k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    568|    {
 1476|    568|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    872|    {
  447|    872|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.43k|    {
 1177|  6.43k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  4.13k|    {
 1476|  4.13k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  4.13k|    {
  447|  4.13k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1597|  5.92k|    {
 1598|  5.92k|        return has_value();
 1599|  5.92k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  11.5k|    {
  485|  11.5k|        return m_has_value;
  486|  11.5k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1603|  2.16k|    {
 1604|  2.16k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.16k|        return this->get_unexpected().error();
 1606|  2.16k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  2.94k|    {
  468|  2.94k|        return m_unexpected;
  469|  2.94k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|  1.06k|    {
 1430|  1.06k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|  1.06k|    {
  437|  1.06k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.06k|    {
 1177|  1.06k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.42k|    {
 1627|  1.42k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.42k|        return this->get_value();
 1629|  1.42k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.42k|    {
  451|  1.42k|        return m_value;
  452|  1.42k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    802|    {
 1598|    802|        return has_value();
 1599|    802|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  2.13k|    {
  485|  2.13k|        return m_has_value;
  486|  2.13k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    802|    {
 1177|    802|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|  1.06k|    {
 1663|  1.06k|        return std::move(value());
 1664|  1.06k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|  1.06k|    {
 1627|  1.06k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.06k|        return this->get_value();
 1629|  1.06k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|  1.06k|    {
  451|  1.06k|        return m_value;
  452|  1.06k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|  62.1k|    {
 3334|  62.1k|        return m_sentinel;
 3335|  62.1k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.73k|    {
 1837|  1.73k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.73k|                                            std::forward<F>(f));
 1839|  1.73k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  1.73k|{
 1323|  1.73k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.73k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.73k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.73k|            return result(*std::forward<Exp>(exp));
 1327|  1.73k|        }
 1328|       |
 1329|  1.73k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.73k|        return result(unexpect, monostate{});
 1331|  1.73k|    }
 1332|  1.73k|    else {
 1333|  1.73k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.73k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.73k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.42k, False: 304]
  |  |  ------------------
  ------------------
 1335|  1.73k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.73k|                   : result(unexpect,
 1337|    304|                            trivial_invoke(std::forward<F>(f),
 1338|    304|                                           std::forward<Exp>(exp).error()));
 1339|  1.73k|    }
 1340|  1.73k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|  1.42k|    {
 1430|  1.42k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.42k|    {
  437|  1.42k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    304|    {
 1486|    304|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.42k|    {
 1663|  1.42k|        return std::move(value());
 1664|  1.42k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|  81.2k|    {
 3330|  81.2k|        return m_iterator;
 3331|  81.2k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|    802|    {
 1430|    802|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    802|    {
  437|    802|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    802|    {
 1837|    802|        return detail::transform_error_impl(std::move(*this),
 1838|    802|                                            std::forward<F>(f));
 1839|    802|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|    802|{
 1323|    802|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    802|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    802|        if (SCN_LIKELY(exp.has_value())) {
 1326|    802|            return result(*std::forward<Exp>(exp));
 1327|    802|        }
 1328|       |
 1329|    802|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    802|        return result(unexpect, monostate{});
 1331|    802|    }
 1332|    802|    else {
 1333|    802|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    802|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    802|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 802, False: 0]
  |  |  ------------------
  ------------------
 1335|    802|                   ? result(*std::forward<Exp>(exp))
 1336|    802|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    802|    }
 1340|    802|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.60k|    {
  485|  1.60k|        return m_has_value;
  486|  1.60k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|    802|    {
 1663|    802|        return std::move(value());
 1664|    802|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|    802|    {
 1627|    802|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    802|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    802|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    802|        return this->get_value();
 1629|    802|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    802|    {
  451|    802|        return m_value;
  452|    802|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|    802|    {
 1430|    802|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    802|    {
  437|    802|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    802|    {
 1177|    802|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    802|    {
 1598|    802|        return has_value();
 1599|    802|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.60k|    {
  485|  1.60k|        return m_has_value;
  486|  1.60k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|    802|    {
 1663|    802|        return std::move(value());
 1664|    802|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|    802|    {
 1627|    802|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    802|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    802|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    802|        return this->get_value();
 1629|    802|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    802|    {
  451|    802|        return m_value;
  452|    802|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    778|    {
 1837|    778|        return detail::transform_error_impl(std::move(*this),
 1838|    778|                                            std::forward<F>(f));
 1839|    778|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|    778|{
 1323|    778|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    778|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    778|        if (SCN_LIKELY(exp.has_value())) {
 1326|    778|            return result(*std::forward<Exp>(exp));
 1327|    778|        }
 1328|       |
 1329|    778|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    778|        return result(unexpect, monostate{});
 1331|    778|    }
 1332|    778|    else {
 1333|    778|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    778|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    778|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 778]
  |  |  ------------------
  ------------------
 1335|    778|                   ? result(*std::forward<Exp>(exp))
 1336|    778|                   : result(unexpect,
 1337|    778|                            trivial_invoke(std::forward<F>(f),
 1338|    778|                                           std::forward<Exp>(exp).error()));
 1339|    778|    }
 1340|    778|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1613|    778|    {
 1614|    778|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    778|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    778|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    778|        return std::move(this->get_unexpected().error());
 1616|    778|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|  1.30k|    {
 3648|  1.30k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|  31.4k|    {
 3316|  31.4k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|     24|    {
 1476|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  625|     24|    {
  626|     24|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|     24|    {
  689|     24|        scn::detail::construct_at(unexpected_ptr(),
  690|     24|                                  std::forward<Args>(args)...);
  691|     24|        m_has_value = false;
  692|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     72|    {
  718|     72|        return reinterpret_cast<unexpected<E>*>(
  719|     72|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     72|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     72|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     24|    {
 1177|     24|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1597|     24|    {
 1598|     24|        return has_value();
 1599|     24|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     72|    {
  675|     72|        return m_has_value;
  676|     72|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1603|     24|    {
 1604|     24|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     24|        return this->get_unexpected().error();
 1606|     24|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     24|    {
  658|     24|        return *unexpected_ptr();
  659|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  630|     24|    {
  631|     24|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 24]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     24|        else {
  635|     24|            destroy_unexpected();
  636|     24|        }
  637|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     24|    {
  700|     24|        scn::detail::destroy_at(unexpected_ptr());
  701|     24|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1597|  7.93k|    {
 1598|  7.93k|        return has_value();
 1599|  7.93k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  15.3k|    {
  485|  15.3k|        return m_has_value;
  486|  15.3k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1603|  4.73k|    {
 1604|  4.73k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.73k|        return this->get_unexpected().error();
 1606|  4.73k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  4.73k|    {
  468|  4.73k|        return m_unexpected;
  469|  4.73k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|  2.06k|    {
 1663|  2.06k|        return std::move(value());
 1664|  2.06k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|  2.67k|    {
 1627|  2.67k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.67k|        return this->get_value();
 1629|  2.67k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.67k|    {
  451|  2.67k|        return m_value;
  452|  2.67k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    994|    {
 1476|    994|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.09k|    {
  447|  1.09k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.6k|    {
 1177|  13.6k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  10.7k|    {
 1476|  10.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  10.7k|    {
  447|  10.7k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  14.5k|    {
 1598|  14.5k|        return has_value();
 1599|  14.5k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  22.7k|    {
  485|  22.7k|        return m_has_value;
  486|  22.7k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  5.41k|    {
 1604|  5.41k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.41k|        return this->get_unexpected().error();
 1606|  5.41k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.41k|    {
  468|  5.41k|        return m_unexpected;
  469|  5.41k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  3.51k|    {
 1430|  3.51k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  3.51k|    {
  437|  3.51k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.51k|    {
 1177|  3.51k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.82k|    {
 1627|  1.82k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.82k|        return this->get_value();
 1629|  1.82k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.82k|    {
  451|  1.82k|        return m_value;
  452|  1.82k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.63k|    {
 1598|  2.63k|        return has_value();
 1599|  2.63k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  7.03k|    {
  485|  7.03k|        return m_has_value;
  486|  7.03k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.63k|    {
 1177|  2.63k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.51k|    {
 1663|  3.51k|        return std::move(value());
 1664|  3.51k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.51k|    {
 1627|  3.51k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.51k|        return this->get_value();
 1629|  3.51k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.51k|    {
  451|  3.51k|        return m_value;
  452|  3.51k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  44.1k|    {
 3221|  44.1k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 1.65k, False: 42.5k]
  ------------------
 3222|  44.1k|                   ? nullptr
 3223|  44.1k|                   : std::addressof(*ranges::begin(derived()));
 3224|  44.1k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  44.1k|    {
 3005|  44.1k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  44.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  44.1k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  44.1k|    {
 2978|  44.1k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  44.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  44.1k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  44.1k|    {
 3339|  44.1k|        return m_iterator == m_sentinel;
 3340|  44.1k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  86.6k|    {
 3180|  86.6k|        return static_cast<D&>(*this);
 3181|  86.6k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  42.5k|    {
 2724|  42.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  42.5k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  42.5k|    {
 2705|  42.5k|        return decay_copy(t.begin());
 2706|  42.5k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.82k|    {
 1430|  1.82k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.82k|    {
  437|  1.82k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  2.63k|    {
 1430|  2.63k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.63k|    {
  437|  2.63k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.63k|    {
 1837|  2.63k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.63k|                                            std::forward<F>(f));
 1839|  2.63k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  2.63k|{
 1323|  2.63k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.63k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.63k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.63k|            return result(*std::forward<Exp>(exp));
 1327|  2.63k|        }
 1328|       |
 1329|  2.63k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.63k|        return result(unexpect, monostate{});
 1331|  2.63k|    }
 1332|  2.63k|    else {
 1333|  2.63k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.63k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.63k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.63k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.63k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.63k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.63k|    }
 1340|  2.63k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.26k|    {
  485|  5.26k|        return m_has_value;
  486|  5.26k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.63k|    {
 1663|  2.63k|        return std::move(value());
 1664|  2.63k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.63k|    {
 1627|  2.63k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.63k|        return this->get_value();
 1629|  2.63k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.63k|    {
  451|  2.63k|        return m_value;
  452|  2.63k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  2.63k|    {
 1430|  2.63k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.63k|    {
  437|  2.63k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.63k|    {
 1177|  2.63k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|  2.63k|    {
 1598|  2.63k|        return has_value();
 1599|  2.63k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.26k|    {
  485|  5.26k|        return m_has_value;
  486|  5.26k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.63k|    {
 1663|  2.63k|        return std::move(value());
 1664|  2.63k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.63k|    {
 1627|  2.63k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.63k|        return this->get_value();
 1629|  2.63k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.63k|    {
  451|  2.63k|        return m_value;
  452|  2.63k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1475|     24|    {
 1476|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  625|     24|    {
  626|     24|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|     24|    {
  689|     24|        scn::detail::construct_at(unexpected_ptr(),
  690|     24|                                  std::forward<Args>(args)...);
  691|     24|        m_has_value = false;
  692|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     72|    {
  718|     72|        return reinterpret_cast<unexpected<E>*>(
  719|     72|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     72|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     72|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     24|    {
 1177|     24|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|     24|    {
 1598|     24|        return has_value();
 1599|     24|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     72|    {
  675|     72|        return m_has_value;
  676|     72|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|     24|    {
 1604|     24|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     24|        return this->get_unexpected().error();
 1606|     24|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     24|    {
  658|     24|        return *unexpected_ptr();
  659|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|     24|    {
  631|     24|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 24]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     24|        else {
  635|     24|            destroy_unexpected();
  636|     24|        }
  637|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     24|    {
  700|     24|        scn::detail::destroy_at(unexpected_ptr());
  701|     24|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  29.1k|    {
 2855|  29.1k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  29.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  29.1k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  29.1k|    {
 2836|  29.1k|        return t.data();
 2837|  29.1k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   267k|    {
 1476|   267k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   267k|    {
  447|   267k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   271k|    {
 1177|   271k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  4.07k|    {
 1430|  4.07k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  4.07k|    {
  437|  4.07k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  2.48k|{
 1211|  2.48k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  2.48k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    264|    {
 1837|    264|        return detail::transform_error_impl(std::move(*this),
 1838|    264|                                            std::forward<F>(f));
 1839|    264|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    264|{
 1323|    264|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    264|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    264|        if (SCN_LIKELY(exp.has_value())) {
 1326|    264|            return result(*std::forward<Exp>(exp));
 1327|    264|        }
 1328|       |
 1329|    264|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    264|        return result(unexpect, monostate{});
 1331|    264|    }
 1332|    264|    else {
 1333|    264|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    264|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    264|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 264, False: 0]
  |  |  ------------------
  ------------------
 1335|    264|                   ? result(*std::forward<Exp>(exp))
 1336|    264|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    264|    }
 1340|    264|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    264|    {
 1430|    264|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    264|    {
  437|    264|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    264|    {
 1177|    264|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    264|    {
 1598|    264|        return has_value();
 1599|    264|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    528|    {
  485|    528|        return m_has_value;
  486|    528|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    264|    {
 1663|    264|        return std::move(value());
 1664|    264|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    264|    {
 1627|    264|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    264|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    264|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    264|        return this->get_value();
 1629|    264|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    264|    {
  451|    264|        return m_value;
  452|    264|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1822|    528|    {
 1823|    528|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    528|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    528|{
 1323|    528|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    528|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    528|        if (SCN_LIKELY(exp.has_value())) {
 1326|    528|            return result(*std::forward<Exp>(exp));
 1327|    528|        }
 1328|       |
 1329|    528|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    528|        return result(unexpect, monostate{});
 1331|    528|    }
 1332|    528|    else {
 1333|    528|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    528|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    528|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 528]
  |  |  ------------------
  ------------------
 1335|    528|                   ? result(*std::forward<Exp>(exp))
 1336|    528|                   : result(unexpect,
 1337|    528|                            trivial_invoke(std::forward<F>(f),
 1338|    528|                                           std::forward<Exp>(exp).error()));
 1339|    528|    }
 1340|    528|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1652|    606|    {
 1653|    606|        return value();
 1654|    606|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    258|    {
 2724|    258|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    258|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    258|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    258|    {
 2705|    258|        return decay_copy(t.begin());
 2706|    258|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    240|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    884|    {
 1837|    884|        return detail::transform_error_impl(std::move(*this),
 1838|    884|                                            std::forward<F>(f));
 1839|    884|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|    884|{
 1323|    884|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    884|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    884|        if (SCN_LIKELY(exp.has_value())) {
 1326|    884|            return result(*std::forward<Exp>(exp));
 1327|    884|        }
 1328|       |
 1329|    884|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    884|        return result(unexpect, monostate{});
 1331|    884|    }
 1332|    884|    else {
 1333|    884|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    884|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    884|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 884, False: 0]
  |  |  ------------------
  ------------------
 1335|    884|                   ? result(*std::forward<Exp>(exp))
 1336|    884|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    884|    }
 1340|    884|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|    884|    {
 1430|    884|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|    884|    {
  437|    884|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    884|    {
 1177|    884|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    884|    {
 1598|    884|        return has_value();
 1599|    884|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.76k|    {
  485|  1.76k|        return m_has_value;
  486|  1.76k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|    884|    {
 1663|    884|        return std::move(value());
 1664|    884|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|    884|    {
 1627|    884|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    884|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    884|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    884|        return this->get_value();
 1629|    884|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    884|    {
  451|    884|        return m_value;
  452|    884|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|    908|    {
 1823|    908|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    908|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|    908|{
 1323|    908|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    908|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    908|        if (SCN_LIKELY(exp.has_value())) {
 1326|    908|            return result(*std::forward<Exp>(exp));
 1327|    908|        }
 1328|       |
 1329|    908|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    908|        return result(unexpect, monostate{});
 1331|    908|    }
 1332|    908|    else {
 1333|    908|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    908|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    908|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 908]
  |  |  ------------------
  ------------------
 1335|    908|                   ? result(*std::forward<Exp>(exp))
 1336|    908|                   : result(unexpect,
 1337|    908|                            trivial_invoke(std::forward<F>(f),
 1338|    908|                                           std::forward<Exp>(exp).error()));
 1339|    908|    }
 1340|    908|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|    908|    {
 3648|    908|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  8.18k|    {
 1653|  8.18k|        return value();
 1654|  8.18k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|  2.65k|{
 6697|  2.65k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  2.65k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  2.65k|    auto start = begin;
 6701|  2.65k|    ++begin;
 6702|       |
 6703|  2.65k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.65k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  2.65k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 348, False: 2.30k]
  ------------------
 6710|    348|        handler.on_charset_inverted();
 6711|    348|        ++begin;
 6712|    348|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 348]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    348|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 6, False: 342]
  ------------------
 6719|      6|            handler.on_charset_single(char32_t{']'});
 6720|      6|            ++begin;
 6721|      6|        }
 6722|    348|    }
 6723|  2.30k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 2.30k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|   377k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 377k, False: 0]
  ------------------
 6728|   377k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   377k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 377k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|   377k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 2.65k, False: 374k]
  ------------------
 6733|  2.65k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  2.65k|        }
 6735|       |
 6736|   374k|        parse_presentation_set_literal(begin, end, handler);
 6737|   374k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  2.65k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|   374k|{
 6661|   374k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   374k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   374k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|   374k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|   374k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|   374k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 374k, False: 0]
  |  Branch (6668:25): [True: 2.59k, False: 372k]
  |  Branch (6668:49): [True: 2.59k, False: 0]
  ------------------
 6669|   374k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 2.51k, False: 84]
  ------------------
 6670|  2.51k|        ++begin;
 6671|       |
 6672|  2.51k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  2.51k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.51k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  2.51k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.51k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  2.51k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  2.51k|        return;
 6686|  2.51k|    }
 6687|       |
 6688|   372k|    handler.on_charset_single(cp_first);
 6689|   372k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|   377k|{
 6637|   377k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|   377k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|   377k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|   754k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 377k]
  |  |  |  Branch (859:45): [True: 0, False: 377k]
  |  |  |  Branch (859:45): [True: 0, False: 377k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|   377k|    const auto cp =
 6646|   377k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|   377k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   377k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 377k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|   377k|    begin += len;
 6653|   377k|    return cp;
 6654|   377k|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  15.7k|    {
 1177|  15.7k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1429|  15.7k|    {
 1430|  15.7k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  436|  15.7k|    {
  437|  15.7k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  13.2k|    {
 6252|  13.2k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  13.2k|                charset_string_size};
 6254|  13.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1429|    606|    {
 1430|    606|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  436|    606|    {
  437|    606|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  1.60k|    {
 1430|  1.60k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.60k|    {
  437|  1.60k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4032|   108k|{
 4033|   108k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4033:19): [Folded - Ignored]
  ------------------
 4034|   108k|        return decode_utf8_code_point_exhaustive_valid(input);
 4035|   108k|    }
 4036|   108k|    else if constexpr (sizeof(CharT) == 2) {
 4037|   108k|        return decode_utf16_code_point_exhaustive_valid(input);
 4038|   108k|    }
 4039|   108k|    else {
 4040|   108k|        SCN_EXPECT(input.size() == 1);
 4041|   108k|        return static_cast<char32_t>(input.front());
 4042|   108k|    }
 4043|   108k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3910|  13.7k|    const auto is_trailing_code_unit = [](char ch) {
 3911|  13.7k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|  13.7k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6186|    968|    {
 6187|    968|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|    968|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    968|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|    968|        CharT r{};
 6189|    968|        std::memcpy(&r, m_data, m_size);
 6190|    968|        return r;
 6191|    968|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|   363k|{
 3807|   363k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|   363k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|   363k|    }
 3810|   363k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|   363k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|   363k|    }
 3813|   363k|    else {
 3814|       |        // utf-32
 3815|   363k|        static_assert(sizeof(U) == 4);
 3816|   363k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   363k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|   363k|        return 1;
 3818|   363k|    }
 3819|   363k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|   343k|{
 4013|   343k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|   343k|        return decode_utf8_code_point_exhaustive(input);
 4015|   343k|    }
 4016|   343k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|   343k|        return decode_utf16_code_point_exhaustive(input);
 4018|   343k|    }
 4019|   343k|    else {
 4020|   343k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|   343k|        auto cp = static_cast<char32_t>(input.front());
 4022|   343k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72.6k, False: 271k]
  |  |  ------------------
  ------------------
 4023|  72.6k|            return invalid_code_point;
 4024|  72.6k|        }
 4025|   271k|        return cp;
 4026|   343k|    }
 4027|   343k|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  50.1k|{
 3699|  50.1k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  50.1k|                                          decltype(first), decltype(last)> &&
 3701|  50.1k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  50.1k|        return {first, last};
 3703|  50.1k|    }
 3704|  50.1k|    else {
 3705|  50.1k|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  50.1k|                                       to_address(first), to_address(last)))};
 3707|  50.1k|    }
 3708|  50.1k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   159k|{
  326|   159k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   159k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   160k|{
  304|   160k|    return p;
  305|   160k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  8.21k|{
 3730|  8.21k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  8.21k|                      typename std::basic_string_view<CharT>::iterator,
 3732|  8.21k|                      decltype(it)> &&
 3733|  8.21k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  8.21k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  8.21k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  8.21k|        return it;
 3736|  8.21k|    }
 3737|  8.21k|    else {
 3738|  8.21k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  8.21k|    }
 3740|  8.21k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|    738|{
  326|    738|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|    738|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  19.2k|    {
 3346|  19.2k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  19.2k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    118|    {
 1476|    118|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    118|    {
  447|    118|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.8k|    {
 1177|  17.8k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  17.7k|    {
 1430|  17.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  17.7k|    {
  437|  17.7k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  4.94k|    {
 1598|  4.94k|        return has_value();
 1599|  4.94k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  30.8k|    {
  485|  30.8k|        return m_has_value;
  486|  30.8k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  12.8k|    {
 1627|  12.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  12.8k|        return this->get_value();
 1629|  12.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  12.8k|    {
  451|  12.8k|        return m_value;
  452|  12.8k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  1.55k|    {
 1430|  1.55k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.55k|    {
  437|  1.55k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.69k|    {
 1177|  1.69k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    140|    {
 1476|    140|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    140|    {
  447|    140|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1597|    764|    {
 1598|    764|        return has_value();
 1599|    764|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  2.62k|    {
  485|  2.62k|        return m_has_value;
  486|  2.62k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|    792|    {
 1627|    792|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    792|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    792|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    792|        return this->get_value();
 1629|    792|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|    792|    {
  451|    792|        return m_value;
  452|    792|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.17k|    {
 1177|  1.17k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  1.17k|    {
 1430|  1.17k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  1.17k|    {
  437|  1.17k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    168|    {
 1837|    168|        return detail::transform_error_impl(std::move(*this),
 1838|    168|                                            std::forward<F>(f));
 1839|    168|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    168|{
 1323|    168|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    168|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    168|        if (SCN_LIKELY(exp.has_value())) {
 1326|    168|            return result(*std::forward<Exp>(exp));
 1327|    168|        }
 1328|       |
 1329|    168|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    168|        return result(unexpect, monostate{});
 1331|    168|    }
 1332|    168|    else {
 1333|    168|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    168|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    168|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 168, False: 0]
  |  |  ------------------
  ------------------
 1335|    168|                   ? result(*std::forward<Exp>(exp))
 1336|    168|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    168|    }
 1340|    168|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|    792|    {
 1663|    792|        return std::move(value());
 1664|    792|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|    482|    {
 1430|    482|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|    482|    {
  437|    482|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.34k|    {
 1177|  2.34k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1613|    140|    {
 1614|    140|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    140|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    140|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    140|        return std::move(this->get_unexpected().error());
 1616|    140|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    140|    {
  468|    140|        return m_unexpected;
  469|    140|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    562|    {
 1486|    562|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  1.86k|    {
  447|  1.86k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    274|    {
 2724|    274|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    274|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    274|    {
 2705|    274|        return decay_copy(t.begin());
 2706|    274|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1948|    654|{
 1949|    654|    return SCN_FWD(t);
  ------------------
  |  |  930|    654|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|    654|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3329|    274|    {
 3330|    274|        return m_iterator;
 3331|    274|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    274|    {
 2781|    274|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    274|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    274|    {
 2763|    274|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    274|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3333|    274|    {
 3334|    274|        return m_sentinel;
 3335|    274|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|    274|    {
 3316|    274|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  1.17k|    {
 1598|  1.17k|        return has_value();
 1599|  1.17k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.35k|    {
  485|  2.35k|        return m_has_value;
  486|  2.35k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.17k|    {
 1663|  1.17k|        return std::move(value());
 1664|  1.17k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.17k|    {
 1627|  1.17k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.17k|        return this->get_value();
 1629|  1.17k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.17k|    {
  451|  1.17k|        return m_value;
  452|  1.17k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.7k|    {
 1177|  10.7k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  10.7k|    {
 1430|  10.7k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  10.7k|    {
  437|  10.7k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  7.92k|    {
 1837|  7.92k|        return detail::transform_error_impl(std::move(*this),
 1838|  7.92k|                                            std::forward<F>(f));
 1839|  7.92k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  7.92k|{
 1323|  7.92k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  7.92k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  7.92k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  7.92k|            return result(*std::forward<Exp>(exp));
 1327|  7.92k|        }
 1328|       |
 1329|  7.92k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  7.92k|        return result(unexpect, monostate{});
 1331|  7.92k|    }
 1332|  7.92k|    else {
 1333|  7.92k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  7.92k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  7.92k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.92k, False: 0]
  |  |  ------------------
  ------------------
 1335|  7.92k|                   ? result(*std::forward<Exp>(exp))
 1336|  7.92k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  7.92k|    }
 1340|  7.92k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  12.8k|    {
 1663|  12.8k|        return std::move(value());
 1664|  12.8k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|    118|    {
 1614|    118|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    118|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    118|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    118|        return std::move(this->get_unexpected().error());
 1616|    118|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    118|    {
  468|    118|        return m_unexpected;
  469|    118|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|    820|    {
 1486|    820|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  10.7k|    {
 1598|  10.7k|        return has_value();
 1599|  10.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  21.4k|    {
  485|  21.4k|        return m_has_value;
  486|  21.4k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  10.7k|    {
 1663|  10.7k|        return std::move(value());
 1664|  10.7k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  10.7k|    {
 1627|  10.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  10.7k|        return this->get_value();
 1629|  10.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  10.7k|    {
  451|  10.7k|        return m_value;
  452|  10.7k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  1.30k|    {
 1476|  1.30k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    252|    {
 1476|    252|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    392|    {
  447|    392|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.88k|    {
 1177|  2.88k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  1.87k|    {
 1476|  1.87k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  1.87k|    {
  447|  1.87k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1597|  2.66k|    {
 1598|  2.66k|        return has_value();
 1599|  2.66k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  5.14k|    {
  485|  5.14k|        return m_has_value;
  486|  5.14k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1603|    954|    {
 1604|    954|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    954|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    954|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    954|        return this->get_unexpected().error();
 1606|    954|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  1.29k|    {
  468|  1.29k|        return m_unexpected;
  469|  1.29k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|    478|    {
 1430|    478|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    478|    {
  437|    478|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    478|    {
 1177|    478|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|    624|    {
 1627|    624|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    624|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    624|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    624|        return this->get_value();
 1629|    624|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|    624|    {
  451|    624|        return m_value;
  452|    624|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    366|    {
 1598|    366|        return has_value();
 1599|    366|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|    956|    {
  485|    956|        return m_has_value;
  486|    956|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    366|    {
 1177|    366|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|    478|    {
 1663|    478|        return std::move(value());
 1664|    478|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|    478|    {
 1627|    478|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    478|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    478|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    478|        return this->get_value();
 1629|    478|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|    478|    {
  451|    478|        return m_value;
  452|    478|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|  21.6k|    {
 3334|  21.6k|        return m_sentinel;
 3335|  21.6k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    764|    {
 1837|    764|        return detail::transform_error_impl(std::move(*this),
 1838|    764|                                            std::forward<F>(f));
 1839|    764|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    764|{
 1323|    764|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    764|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    764|        if (SCN_LIKELY(exp.has_value())) {
 1326|    764|            return result(*std::forward<Exp>(exp));
 1327|    764|        }
 1328|       |
 1329|    764|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    764|        return result(unexpect, monostate{});
 1331|    764|    }
 1332|    764|    else {
 1333|    764|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    764|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    764|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 624, False: 140]
  |  |  ------------------
  ------------------
 1335|    764|                   ? result(*std::forward<Exp>(exp))
 1336|    764|                   : result(unexpect,
 1337|    140|                            trivial_invoke(std::forward<F>(f),
 1338|    140|                                           std::forward<Exp>(exp).error()));
 1339|    764|    }
 1340|    764|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|    624|    {
 1430|    624|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|    624|    {
  437|    624|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    140|    {
 1486|    140|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|    624|    {
 1663|    624|        return std::move(value());
 1664|    624|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|  22.6k|    {
 3330|  22.6k|        return m_iterator;
 3331|  22.6k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|    366|    {
 1430|    366|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    366|    {
  437|    366|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    366|    {
 1837|    366|        return detail::transform_error_impl(std::move(*this),
 1838|    366|                                            std::forward<F>(f));
 1839|    366|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|    366|{
 1323|    366|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    366|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    366|        if (SCN_LIKELY(exp.has_value())) {
 1326|    366|            return result(*std::forward<Exp>(exp));
 1327|    366|        }
 1328|       |
 1329|    366|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    366|        return result(unexpect, monostate{});
 1331|    366|    }
 1332|    366|    else {
 1333|    366|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    366|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    366|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 366, False: 0]
  |  |  ------------------
  ------------------
 1335|    366|                   ? result(*std::forward<Exp>(exp))
 1336|    366|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    366|    }
 1340|    366|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|    732|    {
  485|    732|        return m_has_value;
  486|    732|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|    366|    {
 1663|    366|        return std::move(value());
 1664|    366|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|    366|    {
 1627|    366|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    366|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    366|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    366|        return this->get_value();
 1629|    366|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    366|    {
  451|    366|        return m_value;
  452|    366|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|    366|    {
 1430|    366|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    366|    {
  437|    366|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    366|    {
 1177|    366|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    366|    {
 1598|    366|        return has_value();
 1599|    366|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    732|    {
  485|    732|        return m_has_value;
  486|    732|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|    366|    {
 1663|    366|        return std::move(value());
 1664|    366|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|    366|    {
 1627|    366|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    366|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    366|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    366|        return this->get_value();
 1629|    366|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    366|    {
  451|    366|        return m_value;
  452|    366|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    338|    {
 1837|    338|        return detail::transform_error_impl(std::move(*this),
 1838|    338|                                            std::forward<F>(f));
 1839|    338|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|    338|{
 1323|    338|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    338|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    338|        if (SCN_LIKELY(exp.has_value())) {
 1326|    338|            return result(*std::forward<Exp>(exp));
 1327|    338|        }
 1328|       |
 1329|    338|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    338|        return result(unexpect, monostate{});
 1331|    338|    }
 1332|    338|    else {
 1333|    338|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    338|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    338|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 338]
  |  |  ------------------
  ------------------
 1335|    338|                   ? result(*std::forward<Exp>(exp))
 1336|    338|                   : result(unexpect,
 1337|    338|                            trivial_invoke(std::forward<F>(f),
 1338|    338|                                           std::forward<Exp>(exp).error()));
 1339|    338|    }
 1340|    338|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1613|    338|    {
 1614|    338|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    338|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    338|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    338|        return std::move(this->get_unexpected().error());
 1616|    338|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|    562|    {
 3648|    562|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|  7.82k|    {
 3316|  7.82k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_LPv0ELSN_0EEEONS0_10unexpectedIT_EE:
 1475|     28|    {
 1476|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  625|     28|    {
  626|     28|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  688|     28|    {
  689|     28|        scn::detail::construct_at(unexpected_ptr(),
  690|     28|                                  std::forward<Args>(args)...);
  691|     28|        m_has_value = false;
  692|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     84|    {
  718|     84|        return reinterpret_cast<unexpected<E>*>(
  719|     84|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     84|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     84|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     28|    {
 1177|     28|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     28|    {
 1598|     28|        return has_value();
 1599|     28|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|     84|    {
  675|     84|        return m_has_value;
  676|     84|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     28|    {
 1604|     28|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     28|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     28|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     28|        return this->get_unexpected().error();
 1606|     28|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     28|    {
  658|     28|        return *unexpected_ptr();
  659|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     28|    {
  631|     28|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 28]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     28|        else {
  635|     28|            destroy_unexpected();
  636|     28|        }
  637|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     28|    {
  700|     28|        scn::detail::destroy_at(unexpected_ptr());
  701|     28|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1597|  2.45k|    {
 1598|  2.45k|        return has_value();
 1599|  2.45k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.69k|    {
  485|  4.69k|        return m_has_value;
  486|  4.69k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1603|  1.75k|    {
 1604|  1.75k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.75k|        return this->get_unexpected().error();
 1606|  1.75k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.75k|    {
  468|  1.75k|        return m_unexpected;
  469|  1.75k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|    482|    {
 1663|    482|        return std::move(value());
 1664|    482|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|    482|    {
 1627|    482|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    482|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    482|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    482|        return this->get_value();
 1629|    482|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|    482|    {
  451|    482|        return m_value;
  452|    482|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    930|    {
 1476|    930|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.04k|    {
  447|  1.04k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  15.8k|    {
 1177|  15.8k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  9.86k|    {
 1476|  9.86k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  9.86k|    {
  447|  9.86k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  16.6k|    {
 1598|  16.6k|        return has_value();
 1599|  16.6k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  27.3k|    {
  485|  27.3k|        return m_has_value;
  486|  27.3k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  5.01k|    {
 1604|  5.01k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.01k|        return this->get_unexpected().error();
 1606|  5.01k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.01k|    {
  468|  5.01k|        return m_unexpected;
  469|  5.01k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  3.26k|    {
 1430|  3.26k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  3.26k|    {
  437|  3.26k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.26k|    {
 1177|  3.26k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  4.89k|    {
 1627|  4.89k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.89k|        return this->get_value();
 1629|  4.89k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  4.89k|    {
  451|  4.89k|        return m_value;
  452|  4.89k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.45k|    {
 1598|  2.45k|        return has_value();
 1599|  2.45k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  6.53k|    {
  485|  6.53k|        return m_has_value;
  486|  6.53k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.45k|    {
 1177|  2.45k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.26k|    {
 1663|  3.26k|        return std::move(value());
 1664|  3.26k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.26k|    {
 1627|  3.26k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.26k|        return this->get_value();
 1629|  3.26k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.26k|    {
  451|  3.26k|        return m_value;
  452|  3.26k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  5.00k|    {
 1837|  5.00k|        return detail::transform_error_impl(std::move(*this),
 1838|  5.00k|                                            std::forward<F>(f));
 1839|  5.00k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  5.00k|{
 1323|  5.00k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  5.00k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  5.00k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  5.00k|            return result(*std::forward<Exp>(exp));
 1327|  5.00k|        }
 1328|       |
 1329|  5.00k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  5.00k|        return result(unexpect, monostate{});
 1331|  5.00k|    }
 1332|  5.00k|    else {
 1333|  5.00k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  5.00k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  5.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.89k, False: 118]
  |  |  ------------------
  ------------------
 1335|  5.00k|                   ? result(*std::forward<Exp>(exp))
 1336|  5.00k|                   : result(unexpect,
 1337|    118|                            trivial_invoke(std::forward<F>(f),
 1338|    118|                                           std::forward<Exp>(exp).error()));
 1339|  5.00k|    }
 1340|  5.00k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  4.89k|    {
 1430|  4.89k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  4.89k|    {
  437|  4.89k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    118|    {
 1486|    118|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  4.89k|    {
 1663|  4.89k|        return std::move(value());
 1664|  4.89k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  2.45k|    {
 1430|  2.45k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.45k|    {
  437|  2.45k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.45k|    {
 1837|  2.45k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.45k|                                            std::forward<F>(f));
 1839|  2.45k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  2.45k|{
 1323|  2.45k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.45k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.45k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.45k|            return result(*std::forward<Exp>(exp));
 1327|  2.45k|        }
 1328|       |
 1329|  2.45k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.45k|        return result(unexpect, monostate{});
 1331|  2.45k|    }
 1332|  2.45k|    else {
 1333|  2.45k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.45k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.45k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.45k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.45k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.45k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.45k|    }
 1340|  2.45k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.90k|    {
  485|  4.90k|        return m_has_value;
  486|  4.90k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.45k|    {
 1663|  2.45k|        return std::move(value());
 1664|  2.45k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.45k|    {
 1627|  2.45k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.45k|        return this->get_value();
 1629|  2.45k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.45k|    {
  451|  2.45k|        return m_value;
  452|  2.45k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  2.45k|    {
 1430|  2.45k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.45k|    {
  437|  2.45k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.45k|    {
 1177|  2.45k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|  2.45k|    {
 1598|  2.45k|        return has_value();
 1599|  2.45k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.90k|    {
  485|  4.90k|        return m_has_value;
  486|  4.90k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.45k|    {
 1663|  2.45k|        return std::move(value());
 1664|  2.45k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.45k|    {
 1627|  2.45k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.45k|        return this->get_value();
 1629|  2.45k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.45k|    {
  451|  2.45k|        return m_value;
  452|  2.45k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|     28|    {
 1476|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  625|     28|    {
  626|     28|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|     28|    {
  689|     28|        scn::detail::construct_at(unexpected_ptr(),
  690|     28|                                  std::forward<Args>(args)...);
  691|     28|        m_has_value = false;
  692|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     84|    {
  718|     84|        return reinterpret_cast<unexpected<E>*>(
  719|     84|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     84|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     84|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     28|    {
 1177|     28|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     28|    {
 1598|     28|        return has_value();
 1599|     28|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|     84|    {
  675|     84|        return m_has_value;
  676|     84|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     28|    {
 1604|     28|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     28|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     28|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     28|        return this->get_unexpected().error();
 1606|     28|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     28|    {
  658|     28|        return *unexpected_ptr();
  659|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     28|    {
  631|     28|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 28]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     28|        else {
  635|     28|            destroy_unexpected();
  636|     28|        }
  637|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     28|    {
  700|     28|        scn::detail::destroy_at(unexpected_ptr());
  701|     28|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  10.8k|    {
 2855|  10.8k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  10.8k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  10.8k|    {
 2836|  10.8k|        return t.data();
 2837|  10.8k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  18.6k|    {
 3221|  18.6k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 2.91k, False: 15.7k]
  ------------------
 3222|  18.6k|                   ? nullptr
 3223|  18.6k|                   : std::addressof(*ranges::begin(derived()));
 3224|  18.6k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  18.6k|    {
 3005|  18.6k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  18.6k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  18.6k|    {
 2978|  18.6k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  18.6k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  18.6k|    {
 3339|  18.6k|        return m_iterator == m_sentinel;
 3340|  18.6k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  34.4k|    {
 3180|  34.4k|        return static_cast<D&>(*this);
 3181|  34.4k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  15.7k|    {
 2724|  15.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  15.7k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  15.7k|    {
 2705|  15.7k|        return decay_copy(t.begin());
 2706|  15.7k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    112|    {
 1837|    112|        return detail::transform_error_impl(std::move(*this),
 1838|    112|                                            std::forward<F>(f));
 1839|    112|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    112|{
 1323|    112|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    112|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    112|        if (SCN_LIKELY(exp.has_value())) {
 1326|    112|            return result(*std::forward<Exp>(exp));
 1327|    112|        }
 1328|       |
 1329|    112|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    112|        return result(unexpect, monostate{});
 1331|    112|    }
 1332|    112|    else {
 1333|    112|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    112|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    112|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 112, False: 0]
  |  |  ------------------
  ------------------
 1335|    112|                   ? result(*std::forward<Exp>(exp))
 1336|    112|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    112|    }
 1340|    112|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    112|    {
 1430|    112|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    112|    {
  437|    112|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    112|    {
 1177|    112|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    112|    {
 1598|    112|        return has_value();
 1599|    112|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    224|    {
  485|    224|        return m_has_value;
  486|    224|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    112|    {
 1663|    112|        return std::move(value());
 1664|    112|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    112|    {
 1627|    112|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    112|        return this->get_value();
 1629|    112|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    112|    {
  451|    112|        return m_value;
  452|    112|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1822|    224|    {
 1823|    224|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    224|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    224|{
 1323|    224|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    224|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    224|        if (SCN_LIKELY(exp.has_value())) {
 1326|    224|            return result(*std::forward<Exp>(exp));
 1327|    224|        }
 1328|       |
 1329|    224|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    224|        return result(unexpect, monostate{});
 1331|    224|    }
 1332|    224|    else {
 1333|    224|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    224|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    224|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 224]
  |  |  ------------------
  ------------------
 1335|    224|                   ? result(*std::forward<Exp>(exp))
 1336|    224|                   : result(unexpect,
 1337|    224|                            trivial_invoke(std::forward<F>(f),
 1338|    224|                                           std::forward<Exp>(exp).error()));
 1339|    224|    }
 1340|    224|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    106|    {
 2724|    106|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    106|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    106|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    106|    {
 2705|    106|        return decay_copy(t.begin());
 2706|    106|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|     98|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    812|    {
 1837|    812|        return detail::transform_error_impl(std::move(*this),
 1838|    812|                                            std::forward<F>(f));
 1839|    812|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|    812|{
 1323|    812|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    812|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    812|        if (SCN_LIKELY(exp.has_value())) {
 1326|    812|            return result(*std::forward<Exp>(exp));
 1327|    812|        }
 1328|       |
 1329|    812|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    812|        return result(unexpect, monostate{});
 1331|    812|    }
 1332|    812|    else {
 1333|    812|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    812|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    812|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 812, False: 0]
  |  |  ------------------
  ------------------
 1335|    812|                   ? result(*std::forward<Exp>(exp))
 1336|    812|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    812|    }
 1340|    812|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|    812|    {
 1430|    812|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|    812|    {
  437|    812|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    812|    {
 1177|    812|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    812|    {
 1598|    812|        return has_value();
 1599|    812|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.62k|    {
  485|  1.62k|        return m_has_value;
  486|  1.62k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|    812|    {
 1663|    812|        return std::move(value());
 1664|    812|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|    812|    {
 1627|    812|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    812|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    812|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    812|        return this->get_value();
 1629|    812|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    812|    {
  451|    812|        return m_value;
  452|    812|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|    820|    {
 1823|    820|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    820|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|    820|{
 1323|    820|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    820|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    820|        if (SCN_LIKELY(exp.has_value())) {
 1326|    820|            return result(*std::forward<Exp>(exp));
 1327|    820|        }
 1328|       |
 1329|    820|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    820|        return result(unexpect, monostate{});
 1331|    820|    }
 1332|    820|    else {
 1333|    820|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    820|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    820|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 820]
  |  |  ------------------
  ------------------
 1335|    820|                   ? result(*std::forward<Exp>(exp))
 1336|    820|                   : result(unexpect,
 1337|    820|                            trivial_invoke(std::forward<F>(f),
 1338|    820|                                           std::forward<Exp>(exp).error()));
 1339|    820|    }
 1340|    820|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|    820|    {
 3648|    820|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  3.45k|    {
 1653|  3.45k|        return value();
 1654|  3.45k|    }
_ZN3scn2v36detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|    246|{
 6697|    246|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    246|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    246|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|    246|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    246|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    246|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|    246|    auto start = begin;
 6701|    246|    ++begin;
 6702|       |
 6703|    246|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|    246|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 78, False: 168]
  ------------------
 6710|     78|        handler.on_charset_inverted();
 6711|     78|        ++begin;
 6712|     78|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 78]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|     78|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 6, False: 72]
  ------------------
 6719|      6|            handler.on_charset_single(char32_t{']'});
 6720|      6|            ++begin;
 6721|      6|        }
 6722|     78|    }
 6723|    168|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 168]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  3.36k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 3.36k, False: 0]
  ------------------
 6728|  3.36k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  3.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.36k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  3.36k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 246, False: 3.11k]
  ------------------
 6733|    246|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|    246|        }
 6735|       |
 6736|  3.11k|        parse_presentation_set_literal(begin, end, handler);
 6737|  3.11k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|    246|}
_ZN3scn2v36detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|  3.11k|{
 6661|  3.11k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  3.11k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  3.11k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  3.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.11k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  3.11k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 3.11k, False: 0]
  |  Branch (6668:25): [True: 240, False: 2.87k]
  |  Branch (6668:49): [True: 240, False: 0]
  ------------------
 6669|  3.11k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 234, False: 6]
  ------------------
 6670|    234|        ++begin;
 6671|       |
 6672|    234|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|    234|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 234]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|    234|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 234]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|    234|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|    234|        return;
 6686|    234|    }
 6687|       |
 6688|  2.88k|    handler.on_charset_single(cp_first);
 6689|  2.88k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|  3.34k|{
 6637|  3.34k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  3.34k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  3.34k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  6.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.34k]
  |  |  |  Branch (859:45): [True: 0, False: 3.34k]
  |  |  |  Branch (859:45): [True: 0, False: 3.34k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  3.34k|    const auto cp =
 6646|  3.34k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  3.34k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  3.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.34k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  3.34k|    begin += len;
 6653|  3.34k|    return cp;
 6654|  3.34k|}
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  5.80k|    {
 6252|  5.80k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  5.80k|                charset_string_size};
 6254|  5.80k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|    276|    {
 1430|    276|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|    276|    {
  437|    276|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|  1.66k|{
 3654|  1.66k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.66k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  5.79k|    {
 2855|  5.79k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  5.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  5.79k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  5.79k|    {
 2836|  5.79k|        return t.data();
 2837|  5.79k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  89.4k|    {
 5466|  89.4k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  89.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 89.4k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  89.4k|        return static_cast<std::size_t>(m_desc &
 5471|  89.4k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  89.4k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|   147k|    {
 5491|   147k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   147k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  57.9k|    {
 5434|  57.9k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 57.9k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  57.9k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 57.8k]
  |  |  ------------------
  ------------------
 5442|     68|            return {};
 5443|     68|        }
 5444|       |
 5445|  57.8k|        const auto t = type(id);
 5446|  57.8k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  57.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.34k, False: 56.4k]
  |  |  ------------------
  ------------------
 5447|  1.34k|            return {};
 5448|  1.34k|        }
 5449|       |
 5450|  56.4k|        basic_scan_arg<Context> arg;
 5451|  56.4k|        arg.m_type = t;
 5452|  56.4k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 56.4k, False: 0]
  ------------------
 5453|  56.4k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  56.4k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  56.4k|        return arg;
 5459|  57.8k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  57.9k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  88.1k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  57.8k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  57.8k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  57.8k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  57.8k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  57.8k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  56.4k|    {
 5495|  56.4k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  56.4k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|   112k|    {
 5247|   112k|        return m_type != detail::arg_type::none_type;
 5248|   112k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  5.63k|{
 8417|  5.63k|#define SCN_VISIT(Type)                                         \
 8418|  5.63k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  5.63k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  5.63k|    }                                                           \
 8421|  5.63k|    else {                                                      \
 8422|  5.63k|        return vis(monostate_val);                              \
 8423|  5.63k|    }
 8424|       |
 8425|  5.63k|    monostate monostate_val{};
 8426|       |
 8427|  5.63k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 5.63k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 5.63k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    626|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 626, False: 5.00k]
  ------------------
 8433|    626|            SCN_VISIT(int);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 5.63k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 5.63k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 5.63k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 5.63k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    626|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 626, False: 5.00k]
  ------------------
 8443|    626|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 5.63k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 5.63k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    626|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 626, False: 5.00k]
  ------------------
 8449|    626|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8450|    626|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 626, False: 5.00k]
  ------------------
 8451|    626|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8452|    626|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 626, False: 5.00k]
  ------------------
 8453|    626|            SCN_VISIT(char);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 5.63k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 5.63k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 5.63k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    626|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 626, False: 5.00k]
  ------------------
 8461|    626|            SCN_VISIT(double);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 5.63k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|    626|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 626, False: 5.00k]
  ------------------
 8465|    626|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8466|    626|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 626, False: 5.00k]
  ------------------
 8467|    626|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 5.63k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|    626|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 626, False: 5.00k]
  ------------------
 8471|    626|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 5.63k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 5.63k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 5.63k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 5.63k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 5.63k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  5.63k|            SCN_CLANG_POP
 8495|  5.63k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.92k|    {
 1837|  1.92k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.92k|                                            std::forward<F>(f));
 1839|  1.92k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.92k|{
 1323|  1.92k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.92k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.92k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.92k|            return result(*std::forward<Exp>(exp));
 1327|  1.92k|        }
 1328|       |
 1329|  1.92k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.92k|        return result(unexpect, monostate{});
 1331|  1.92k|    }
 1332|  1.92k|    else {
 1333|  1.92k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.92k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.92k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.82k, False: 102]
  |  |  ------------------
  ------------------
 1335|  1.92k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.92k|                   : result(unexpect,
 1337|    102|                            trivial_invoke(std::forward<F>(f),
 1338|    102|                                           std::forward<Exp>(exp).error()));
 1339|  1.92k|    }
 1340|  1.92k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    102|    {
 1486|    102|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.82k|    {
 1663|  1.82k|        return std::move(value());
 1664|  1.82k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|  89.3k|    {
 5545|  89.3k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|  89.3k|    {
 8056|  89.3k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  89.3k|{
 7044|  89.3k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  89.3k|    handler.check_args_exhausted();
 7046|  89.3k|    return handler.get_error();
 7047|  89.3k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  89.3k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  89.3k|    auto begin = format.data();
 7013|  89.3k|    auto it = begin;
 7014|  89.3k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   203k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 196k, False: 6.83k]
  ------------------
 7017|   196k|        const auto ch = *it++;
 7018|   196k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 93.2k, False: 103k]
  ------------------
 7019|  93.2k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  93.2k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  93.2k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 81.6k, False: 11.5k]
  ------------------
 7023|  81.6k|                return;
 7024|  81.6k|            }
 7025|  93.2k|        }
 7026|   103k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 2.11k, False: 101k]
  ------------------
 7027|  2.11k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  3.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 914, False: 1.20k]
  |  |  |  Branch (859:45): [True: 258, False: 1.85k]
  |  |  |  Branch (859:45): [True: 656, False: 1.20k]
  |  |  ------------------
  ------------------
 7028|    914|                handler.on_error("Unmatched '}' in format string");
 7029|    914|                return;
 7030|    914|            }
 7031|       |
 7032|  1.20k|            handler.on_literal_text(begin, it);
 7033|  1.20k|            begin = ++it;
 7034|  1.20k|        }
 7035|   196k|    }
 7036|       |
 7037|  6.83k|    handler.on_literal_text(begin, end);
 7038|  6.83k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|  93.2k|{
 6942|  93.2k|    struct id_adapter {
 6943|  93.2k|        constexpr void operator()()
 6944|  93.2k|        {
 6945|  93.2k|            arg_id = handler.on_arg_id();
 6946|  93.2k|        }
 6947|  93.2k|        constexpr void operator()(std::size_t id)
 6948|  93.2k|        {
 6949|  93.2k|            arg_id = handler.on_arg_id(id);
 6950|  93.2k|        }
 6951|       |
 6952|  93.2k|        constexpr void on_error(const char* msg)
 6953|  93.2k|        {
 6954|  93.2k|            SCN_UNLIKELY_ATTR
 6955|  93.2k|            handler.on_error(msg);
 6956|  93.2k|        }
 6957|       |
 6958|  93.2k|        Handler& handler;
 6959|  93.2k|        std::size_t arg_id;
 6960|  93.2k|    };
 6961|       |
 6962|  93.2k|    ++begin;
 6963|  93.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  93.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116, False: 93.1k]
  |  |  ------------------
  ------------------
 6964|    116|        handler.on_error("Unexpected end of replacement field");
 6965|    116|        return begin;
 6966|    116|    }
 6967|       |
 6968|  93.1k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 5.61k, False: 87.4k]
  ------------------
 6969|  5.61k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  5.61k|    }
 6971|  87.4k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 5.15k, False: 82.3k]
  ------------------
 6972|  5.15k|        handler.on_literal_text(begin, begin + 1);
 6973|  5.15k|    }
 6974|  82.3k|    else {
 6975|  82.3k|        auto adapter = id_adapter{handler, 0};
 6976|  82.3k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  82.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  82.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 82.2k]
  |  |  ------------------
  ------------------
 6979|    110|            handler.on_error("Missing '}' in format string");
 6980|    110|            return begin;
 6981|    110|        }
 6982|       |
 6983|  82.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 140, False: 82.0k]
  ------------------
 6984|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    140|        }
 6986|  82.0k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 52.2k, False: 29.8k]
  ------------------
 6987|  52.2k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 52.1k]
  |  |  ------------------
  ------------------
 6988|     74|                handler.on_error("Unexpected end of replacement field");
 6989|     74|                return begin;
 6990|     74|            }
 6991|  52.1k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  52.1k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.95k, False: 49.1k]
  |  |  |  Branch (859:45): [True: 0, False: 52.1k]
  |  |  |  Branch (859:45): [True: 2.95k, False: 49.1k]
  |  |  ------------------
  ------------------
 6993|  2.95k|                handler.on_error("Unknown format specifier");
 6994|  2.95k|                return begin;
 6995|  2.95k|            }
 6996|  52.1k|        }
 6997|  29.8k|        else {
 6998|  29.8k|            SCN_UNLIKELY_ATTR
 6999|  29.8k|            handler.on_error("Missing '}' in format string");
 7000|  29.8k|            return begin;
 7001|  29.8k|        }
 7002|  82.2k|    }
 7003|  60.0k|    return begin + 1;
 7004|  93.1k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  57.8k|    {
 8039|  57.8k|        return m_args.get(id);
 8040|  57.8k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8043|  5.75k|    {
 8044|  5.75k|        return m_args;
 8045|  5.75k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  54.6k|    {
 8049|  54.6k|        return m_locale;
 8050|  54.6k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  55.2k|    {
 5566|  55.2k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  55.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 55.1k]
  |  |  ------------------
  ------------------
 5567|     42|            on_error(
 5568|     42|                "Cannot switch from manual to automatic argument indexing");
 5569|     42|            return 0;
 5570|     42|        }
 5571|       |
 5572|  55.1k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  55.1k|        do_check_arg_id(id);
 5574|  55.1k|        return id;
 5575|  55.2k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5589|    112|    {
 5590|    112|        return detail::handle_error(
 5591|    112|            scan_error{scan_error::invalid_format_string, msg});
 5592|    112|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  57.8k|{
 6054|  57.8k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  57.8k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  57.8k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  82.3k|{
 6443|  82.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  82.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  82.3k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 82.3k, False: 0]
  |  Branch (6444:26): [True: 32.7k, False: 49.6k]
  ------------------
 6445|  32.7k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|  32.7k|    }
 6447|       |
 6448|  49.6k|    handler();
 6449|  49.6k|    return begin;
 6450|  82.3k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|  32.7k|{
 6413|  32.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|  32.7k|    CharT c = *begin;
 6416|  32.7k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 29.6k, False: 3.10k]
  |  Branch (6416:27): [True: 174, False: 2.92k]
  ------------------
 6417|  29.7k|        handler.on_error("Invalid argument ID");
 6418|  29.7k|        return begin;
 6419|  29.7k|    }
 6420|       |
 6421|  2.92k|    int idx = 0;
 6422|  2.92k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 324, False: 2.60k]
  ------------------
 6423|    324|        idx = parse_simple_int(begin, end);
 6424|    324|    }
 6425|  2.60k|    else {
 6426|  2.60k|        ++begin;
 6427|  2.60k|    }
 6428|       |
 6429|  2.92k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 110, False: 2.81k]
  |  Branch (6429:26): [True: 2.67k, False: 140]
  |  Branch (6429:50): [True: 84, False: 2.59k]
  ------------------
 6430|    194|        handler.on_error("Invalid argument ID");
 6431|    194|        return begin;
 6432|    194|    }
 6433|  2.73k|    handler(idx);
 6434|       |
 6435|  2.73k|    return begin;
 6436|  2.92k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|  29.9k|        {
 6954|  29.9k|            SCN_UNLIKELY_ATTR
 6955|  29.9k|            handler.on_error(msg);
 6956|  29.9k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  10.8k|{
 6392|  10.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  10.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  10.8k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  10.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  10.8k|    unsigned long long value = 0;
 6396|  28.3k|    do {
 6397|  28.3k|        value *= 10;
 6398|  28.3k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  28.3k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 116, False: 28.2k]
  ------------------
 6400|  28.3k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|    116|            return -1;
 6402|    116|        }
 6403|  28.2k|        ++begin;
 6404|  28.2k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 27.9k, False: 312]
  |  Branch (6404:30): [True: 25.7k, False: 2.16k]
  |  Branch (6404:47): [True: 17.5k, False: 8.27k]
  ------------------
 6405|  10.7k|    return static_cast<int>(value);
 6406|  10.8k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|  2.73k|        {
 6949|  2.73k|            arg_id = handler.on_arg_id(id);
 6950|  2.73k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5578|  2.73k|    {
 5579|  2.73k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  2.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 2.66k]
  |  |  ------------------
  ------------------
 5580|     70|            on_error(
 5581|     70|                "Cannot switch from manual to automatic argument indexing");
 5582|     70|            return;
 5583|     70|        }
 5584|  2.66k|        m_next_arg_id = -1;
 5585|  2.66k|        do_check_arg_id(id);
 5586|  2.66k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  49.6k|        {
 6945|  49.6k|            arg_id = handler.on_arg_id();
 6946|  49.6k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|   104k|    {
 5252|   104k|        return m_type;
 5253|   104k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  48.9k|    {
 5561|  48.9k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  48.9k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|   101k|    {
 5550|   101k|        return m_format.data();
 5551|   101k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  52.1k|    {
 7122|  52.1k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  52.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  52.1k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|  52.1k|{
 6858|  52.1k|    auto do_presentation = [&]() -> const CharT* {
 6859|  52.1k|        if (*begin == CharT{'['}) {
 6860|  52.1k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  52.1k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  52.1k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  52.1k|                return begin;
 6866|  52.1k|            }
 6867|  52.1k|            handler.on_character_set_string(set);
 6868|  52.1k|            return begin;
 6869|  52.1k|        }
 6870|  52.1k|        if (*begin == CharT{'/'}) {
 6871|  52.1k|            return parse_presentation_regex(begin, end, handler);
 6872|  52.1k|        }
 6873|  52.1k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  52.1k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  52.1k|            handler.on_error("Invalid type specifier in format string");
 6876|  52.1k|            return begin;
 6877|  52.1k|        }
 6878|  52.1k|        handler.on_type(type);
 6879|  52.1k|        return begin;
 6880|  52.1k|    };
 6881|       |
 6882|  52.1k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 51.0k, False: 1.09k]
  |  Branch (6882:28): [True: 2.23k, False: 48.8k]
  ------------------
 6883|  52.1k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 878, False: 1.35k]
  |  Branch (6883:36): [True: 826, False: 52]
  ------------------
 6884|    826|        return do_presentation();
 6885|    826|    }
 6886|       |
 6887|  51.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  51.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 51.3k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  51.3k|    begin = parse_align(begin, end, handler);
 6893|  51.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  51.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 51.1k]
  |  |  ------------------
  ------------------
 6894|    126|        handler.on_error("Unexpected end of format string");
 6895|    126|        return begin;
 6896|    126|    }
 6897|       |
 6898|  51.1k|    begin = parse_width(begin, end, handler);
 6899|  51.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 51.0k]
  |  |  ------------------
  ------------------
 6900|    120|        handler.on_error("Unexpected end of format string");
 6901|    120|        return begin;
 6902|    120|    }
 6903|       |
 6904|  51.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 7.27k, False: 43.7k]
  ------------------
 6905|  7.27k|        ++begin;
 6906|  7.27k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 7.24k]
  |  |  ------------------
  ------------------
 6907|     34|            handler.on_error("Unexpected end of format string");
 6908|     34|            return begin;
 6909|     34|        }
 6910|  7.24k|        begin = parse_precision(begin, end, handler);
 6911|  7.24k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 7.12k]
  |  |  ------------------
  ------------------
 6912|    114|            handler.on_error("Unexpected end of format string");
 6913|    114|            return begin;
 6914|    114|        }
 6915|  7.24k|    }
 6916|       |
 6917|  50.9k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 446, False: 50.4k]
  ------------------
 6918|    446|        handler.on_localized();
 6919|    446|        ++begin;
 6920|    446|    }
 6921|  50.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 50.8k]
  |  |  ------------------
  ------------------
 6922|     52|        handler.on_error("Unexpected end of format string");
 6923|     52|        return begin;
 6924|     52|    }
 6925|       |
 6926|  50.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 50.8k, False: 0]
  |  Branch (6926:25): [True: 46.4k, False: 4.44k]
  ------------------
 6927|  46.4k|        do_presentation();
 6928|  46.4k|    }
 6929|  50.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.01k, False: 48.8k]
  |  |  ------------------
  ------------------
 6930|  2.01k|        handler.on_error("Unexpected end of format string");
 6931|  2.01k|        return begin;
 6932|  2.01k|    }
 6933|       |
 6934|  48.8k|    return begin;
 6935|  50.8k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  2.23k|{
 6507|  2.23k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 824, False: 1.41k]
  |  Branch (6507:33): [True: 772, False: 52]
  ------------------
 6508|  2.23k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 250, False: 1.21k]
  |  Branch (6508:33): [True: 106, False: 144]
  ------------------
 6509|  2.23k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  47.2k|    auto do_presentation = [&]() -> const CharT* {
 6859|  47.2k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 10.5k, False: 36.6k]
  ------------------
 6860|  10.5k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  10.5k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 806, False: 9.76k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    806|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    806|                return begin;
 6866|    806|            }
 6867|  9.76k|            handler.on_character_set_string(set);
 6868|  9.76k|            return begin;
 6869|  10.5k|        }
 6870|  36.6k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 32.2k, False: 4.46k]
  ------------------
 6871|  32.2k|            return parse_presentation_regex(begin, end, handler);
 6872|  32.2k|        }
 6873|  4.46k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  4.46k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 536, False: 3.93k]
  |  |  ------------------
  ------------------
 6875|    536|            handler.on_error("Invalid type specifier in format string");
 6876|    536|            return begin;
 6877|    536|        }
 6878|  3.93k|        handler.on_type(type);
 6879|  3.93k|        return begin;
 6880|  4.46k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  10.5k|{
 6697|  10.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  10.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  10.5k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  10.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  10.5k|    auto start = begin;
 6701|  10.5k|    ++begin;
 6702|       |
 6703|  10.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 10.5k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     42|        return {};
 6708|     42|    }
 6709|  10.5k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 1.92k, False: 8.60k]
  ------------------
 6710|  1.92k|        handler.on_charset_inverted();
 6711|  1.92k|        ++begin;
 6712|  1.92k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.88k]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     34|            return {};
 6717|     34|        }
 6718|  1.88k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 52, False: 1.83k]
  ------------------
 6719|     52|            handler.on_charset_single(char32_t{']'});
 6720|     52|            ++begin;
 6721|     52|        }
 6722|  1.88k|    }
 6723|  8.60k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 8.57k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  1.14M|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 1.13M, False: 484]
  ------------------
 6728|  1.13M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 212, False: 1.13M]
  |  |  ------------------
  ------------------
 6729|    212|            break;
 6730|    212|        }
 6731|       |
 6732|  1.13M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 9.76k, False: 1.12M]
  ------------------
 6733|  9.76k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  9.76k|        }
 6735|       |
 6736|  1.12M|        parse_presentation_set_literal(begin, end, handler);
 6737|  1.12M|    }
 6738|       |
 6739|    696|    SCN_UNLIKELY_ATTR
 6740|    696|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    696|    return {};
 6742|  10.4k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  1.12M|{
 6661|  1.12M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  1.12M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  1.12M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100, False: 1.12M]
  |  |  ------------------
  ------------------
 6665|    100|        return;
 6666|    100|    }
 6667|       |
 6668|  1.12M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 1.12M, False: 188]
  |  Branch (6668:25): [True: 8.99k, False: 1.12M]
  |  Branch (6668:49): [True: 8.96k, False: 34]
  ------------------
 6669|  1.12M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 8.67k, False: 286]
  ------------------
 6670|  8.67k|        ++begin;
 6671|       |
 6672|  8.67k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  8.67k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  8.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 8.60k]
  |  |  ------------------
  ------------------
 6674|     70|            return;
 6675|     70|        }
 6676|       |
 6677|  8.60k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  8.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 8.57k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     34|            return;
 6682|     34|        }
 6683|       |
 6684|  8.57k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  8.57k|        return;
 6686|  8.60k|    }
 6687|       |
 6688|  1.12M|    handler.on_charset_single(cp_first);
 6689|  1.12M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  1.13M|{
 6637|  1.13M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  1.13M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  1.13M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  2.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 1.13M]
  |  |  |  Branch (859:45): [True: 70, False: 1.13M]
  |  |  |  Branch (859:45): [True: 26, False: 1.13M]
  |  |  ------------------
  ------------------
 6641|     96|        handler.on_error("Invalid encoding in format string");
 6642|     96|        return invalid_code_point;
 6643|     96|    }
 6644|       |
 6645|  1.13M|    const auto cp =
 6646|  1.13M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  1.13M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 1.13M]
  |  |  ------------------
  ------------------
 6648|     74|        handler.on_error("Invalid encoding in format string");
 6649|     74|        return invalid_code_point;
 6650|     74|    }
 6651|       |
 6652|  1.13M|    begin += len;
 6653|  1.13M|    return cp;
 6654|  1.13M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  9.76k|    {
 6346|  9.76k|        m_specs.charset_string_data = fmt.data();
 6347|  9.76k|        m_specs.charset_string_size = fmt.size();
 6348|  9.76k|        on_type(presentation_type::string_set);
 6349|  9.76k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  32.2k|{
 6749|  32.2k|#if !SCN_DISABLE_REGEX
 6750|  32.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  32.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  32.2k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  32.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|  32.2k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  64.4k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|  32.2k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|  32.2k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|  32.2k|        return begin;
 6757|  32.2k|    }
 6758|       |
 6759|  32.2k|    auto start = begin;
 6760|  32.2k|    ++begin;
 6761|       |
 6762|  32.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 32.1k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  32.1k|    handler.on_type(presentation_type::regex);
 6768|  5.37M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 5.37M, False: 232]
  ------------------
 6769|  5.37M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 55.9k, False: 5.31M]
  ------------------
 6770|  55.9k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 31.9k, False: 23.9k]
  ------------------
 6771|  31.9k|                break;
 6772|  31.9k|            }
 6773|  23.9k|            else {
 6774|  23.9k|                handler.on_type(presentation_type::regex_escaped);
 6775|  23.9k|            }
 6776|  55.9k|        }
 6777|  5.37M|    }
 6778|  32.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 232, False: 31.9k]
  |  |  ------------------
  ------------------
 6779|    232|        handler.on_error("Unexpected end of regex in format string");
 6780|    232|        return begin;
 6781|    232|    }
 6782|       |
 6783|  31.9k|    auto regex_end = begin;
 6784|  31.9k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  31.9k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 31.9k]
  |  |  ------------------
  ------------------
 6786|     34|        handler.on_error("Invalid (empty) regex in format string");
 6787|     34|        return begin;
 6788|     34|    }
 6789|  31.9k|    handler.on_regex_pattern(regex_pattern);
 6790|  31.9k|    ++begin;
 6791|       |
 6792|  31.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 31.8k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  31.8k|    regex_flags flags{regex_flags::none};
 6798|  31.8k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  31.8k|        {{'m', regex_flags::multiline},
 6800|  31.8k|         {'s', regex_flags::singleline},
 6801|  31.8k|         {'i', regex_flags::nocase},
 6802|  31.8k|         {'n', regex_flags::nocapture}}};
 6803|  36.3k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 36.3k, False: 58]
  ------------------
 6804|  36.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 31.7k, False: 4.60k]
  ------------------
 6805|  31.7k|            break;
 6806|  31.7k|        }
 6807|  4.60k|        bool found_flag = false;
 6808|  12.3k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 12.3k, False: 62]
  ------------------
 6809|  12.3k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 7.76k, False: 4.53k]
  ------------------
 6810|  7.76k|                continue;
 6811|  7.76k|            }
 6812|  4.53k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 34, False: 4.50k]
  ------------------
 6813|     34|                handler.on_error("Flag set multiple times in regex");
 6814|     34|                return begin;
 6815|     34|            }
 6816|  4.50k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  4.50k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 48, False: 4.45k]
  ------------------
 6818|       |                // clang-format off
 6819|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     48|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  4.50k|#endif
 6830|  4.50k|            flags |= flag.second;
 6831|  4.50k|            found_flag = true;
 6832|  4.50k|            break;
 6833|  4.53k|        }
 6834|  4.56k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 62, False: 4.50k]
  ------------------
 6835|     62|            handler.on_error("Invalid flag in regex");
 6836|     62|            return begin;
 6837|     62|        }
 6838|  4.56k|    }
 6839|  31.7k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  31.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  31.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 31.7k]
  |  |  ------------------
  ------------------
 6842|     58|        handler.on_error("Unexpected end of regex in format string");
 6843|     58|        return begin;
 6844|     58|    }
 6845|       |
 6846|  31.7k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  31.7k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  31.9k|    {
 6354|  31.9k|        m_specs.charset_string_data = pattern.data();
 6355|  31.9k|        m_specs.charset_string_size = pattern.size();
 6356|  31.9k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  4.46k|{
 6455|  4.46k|    switch (type) {
 6456|    106|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 106, False: 4.36k]
  ------------------
 6457|    158|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 52, False: 4.41k]
  ------------------
 6458|    158|            return presentation_type::int_binary;
 6459|    108|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 108, False: 4.35k]
  ------------------
 6460|    108|            return presentation_type::int_decimal;
 6461|    160|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 160, False: 4.30k]
  ------------------
 6462|    160|            return presentation_type::int_generic;
 6463|     70|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 70, False: 4.39k]
  ------------------
 6464|     70|            return presentation_type::int_unsigned_decimal;
 6465|    196|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 196, False: 4.27k]
  ------------------
 6466|    196|            return presentation_type::int_octal;
 6467|    132|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 132, False: 4.33k]
  ------------------
 6468|    184|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 52, False: 4.41k]
  ------------------
 6469|    184|            return presentation_type::int_hex;
 6470|     34|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 34, False: 4.43k]
  ------------------
 6471|     68|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 34, False: 4.43k]
  ------------------
 6472|     68|            return presentation_type::int_arbitrary_base;
 6473|    106|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 106, False: 4.36k]
  ------------------
 6474|    212|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 106, False: 4.36k]
  ------------------
 6475|    212|            return presentation_type::float_hex;
 6476|     70|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 70, False: 4.39k]
  ------------------
 6477|    140|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 70, False: 4.39k]
  ------------------
 6478|    140|            return presentation_type::float_scientific;
 6479|    232|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 232, False: 4.23k]
  ------------------
 6480|    338|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 106, False: 4.36k]
  ------------------
 6481|    338|            return presentation_type::float_fixed;
 6482|    132|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 132, False: 4.33k]
  ------------------
 6483|    190|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 58, False: 4.40k]
  ------------------
 6484|    190|            return presentation_type::float_general;
 6485|  1.65k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 1.65k, False: 2.81k]
  ------------------
 6486|  1.65k|            return presentation_type::string;
 6487|    340|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 340, False: 4.12k]
  ------------------
 6488|    340|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 4.43k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     78|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 78, False: 4.38k]
  ------------------
 6492|     78|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 4.46k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 4.46k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    536|        default:
  ------------------
  |  Branch (6499:9): [True: 536, False: 3.93k]
  ------------------
 6500|    536|            return presentation_type::none;
 6501|  4.46k|    }
 6502|  4.46k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|  51.3k|{
 6532|  51.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  51.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  51.3k|    auto check_align = [](wchar_t ch) {
 6535|  51.3k|        switch (ch) {
 6536|  51.3k|            case L'<':
 6537|  51.3k|                return align_type::left;
 6538|  51.3k|            case L'>':
 6539|  51.3k|                return align_type::right;
 6540|  51.3k|            case L'^':
 6541|  51.3k|                return align_type::center;
 6542|  51.3k|            default:
 6543|  51.3k|                return align_type::none;
 6544|  51.3k|        }
 6545|  51.3k|    };
 6546|       |
 6547|  51.3k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  51.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 51.2k]
  |  |  |  Branch (859:45): [True: 38, False: 51.2k]
  |  |  |  Branch (859:45): [True: 4, False: 51.2k]
  |  |  ------------------
  ------------------
 6549|  51.3k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|     42|        handler.on_error("Invalid encoding in fill character");
 6551|     42|        return begin;
 6552|     42|    }
 6553|       |
 6554|  51.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  51.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  51.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  51.2k|    const auto begin_before_fill = begin;
 6559|  51.2k|    begin += potential_fill_len;
 6560|       |
 6561|  51.2k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 1.06k, False: 50.2k]
  ------------------
 6562|  1.06k|        return begin_before_fill;
 6563|  1.06k|    }
 6564|       |
 6565|  50.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  50.2k|    const auto begin_after_fill = begin;
 6567|  50.2k|    ++begin;
 6568|       |
 6569|  50.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 49.2k, False: 946]
  ------------------
 6570|  49.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60, False: 49.2k]
  |  |  ------------------
  ------------------
 6571|     60|            handler.on_error("Invalid fill character '{' in format string");
 6572|     60|            return begin;
 6573|     60|        }
 6574|  49.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 7.93k, False: 41.2k]
  ------------------
 6575|  7.93k|            return begin_before_fill;
 6576|  7.93k|        }
 6577|  49.2k|    }
 6578|       |
 6579|  42.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 38.7k, False: 3.43k]
  ------------------
 6580|  38.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 3.72k, False: 35.0k]
  ------------------
 6581|  3.72k|            handler.on_align(potential_align_on_fill);
 6582|  3.72k|            return begin_after_fill;
 6583|  3.72k|        }
 6584|  35.0k|        return begin_before_fill;
 6585|  38.7k|    }
 6586|       |
 6587|  3.43k|    handler.on_fill(potential_fill);
 6588|  3.43k|    handler.on_align(potential_align_after_fill);
 6589|  3.43k|    return begin;
 6590|  42.2k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  51.3k|{
 6514|  51.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  51.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  51.3k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  51.3k|        return 1;
 6517|  51.3k|    }
 6518|  51.3k|    else {
 6519|  51.3k|        const auto lengths =
 6520|  51.3k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  51.3k|            "\3\4";
 6522|  51.3k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  51.3k|        return len;
 6524|  51.3k|    }
 6525|  51.3k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   101k|    auto check_align = [](wchar_t ch) {
 6535|   101k|        switch (ch) {
 6536|  1.07k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 1.07k, False: 100k]
  ------------------
 6537|  1.07k|                return align_type::left;
 6538|    994|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 994, False: 100k]
  ------------------
 6539|    994|                return align_type::right;
 6540|  6.11k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 6.11k, False: 95.3k]
  ------------------
 6541|  6.11k|                return align_type::center;
 6542|  93.3k|            default:
  ------------------
  |  Branch (6542:13): [True: 93.3k, False: 8.18k]
  ------------------
 6543|  93.3k|                return align_type::none;
 6544|   101k|        }
 6545|   101k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|  3.43k|    {
 6268|  3.43k|        m_specs.fill = fill;
 6269|  3.43k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|  3.43k|    {
 6149|  3.43k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  3.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|  3.43k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  3.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|  3.43k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|  8.40k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6152:32): [True: 4.97k, False: 3.43k]
  ------------------
 6153|  4.97k|                SCN_GCC_PUSH
 6154|  4.97k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|  4.97k|                m_data[i] = s[i];
 6156|  4.97k|                SCN_GCC_POP
 6157|  4.97k|            }
 6158|  3.43k|            m_size = static_cast<unsigned char>(s.size());
 6159|  3.43k|        }
 6160|  3.43k|        else if constexpr (sizeof(CharT) == 2) {
 6161|  3.43k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|  3.43k|            m_data[1] =
 6163|  3.43k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|  3.43k|            if (s.size() == 1) {
 6165|  3.43k|                return;
 6166|  3.43k|            }
 6167|  3.43k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|  3.43k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|  3.43k|        }
 6170|  3.43k|        else {
 6171|  3.43k|            const auto front = static_cast<unsigned>(s.front());
 6172|  3.43k|            m_data[0] = static_cast<char>(front);
 6173|  3.43k|            m_data[1] = static_cast<char>(front >> 8);
 6174|  3.43k|            m_data[2] = static_cast<char>(front >> 16);
 6175|  3.43k|            m_data[3] = static_cast<char>(front >> 24);
 6176|  3.43k|        }
 6177|  3.43k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|  51.1k|{
 6597|  51.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  51.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  51.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 13.5k, False: 37.6k]
  |  Branch (6599:33): [True: 3.37k, False: 10.1k]
  ------------------
 6600|  3.37k|        int width = parse_simple_int(begin, end);
 6601|  3.37k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  3.37k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.33k, False: 34]
  |  |  ------------------
  ------------------
 6602|  3.33k|            handler.on_width(width);
 6603|  3.33k|        }
 6604|     34|        else {
 6605|     34|            handler.on_error("Invalid field width");
 6606|     34|            return begin;
 6607|     34|        }
 6608|  3.37k|    }
 6609|  51.1k|    return begin;
 6610|  51.1k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6616|  7.24k|{
 6617|  7.24k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  7.24k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 7.20k, False: 34]
  |  Branch (6619:33): [True: 7.17k, False: 34]
  ------------------
 6620|  7.17k|        int prec = parse_simple_int(begin, end);
 6621|  7.17k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  7.17k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.12k, False: 48]
  |  |  ------------------
  ------------------
 6622|  7.12k|            handler.on_precision(prec);
 6623|  7.12k|        }
 6624|     48|        else {
 6625|     48|            handler.on_error("Invalid field precision");
 6626|     48|            return begin;
 6627|     48|        }
 6628|  7.17k|    }
 6629|  7.19k|    return begin;
 6630|  7.24k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|    446|    {
 7127|    446|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    446|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 402, False: 44]
  ------------------
 7129|    446|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 358, False: 44]
  ------------------
 7130|    446|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 314, False: 44]
  ------------------
 7131|    446|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 270, False: 44]
  ------------------
 7132|    270|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    270|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    270|        }
 7137|       |
 7138|    176|        Handler::on_localized();
 7139|    176|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  48.8k|{
 8417|  48.8k|#define SCN_VISIT(Type)                                         \
 8418|  48.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  48.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  48.8k|    }                                                           \
 8421|  48.8k|    else {                                                      \
 8422|  48.8k|        return vis(monostate_val);                              \
 8423|  48.8k|    }
 8424|       |
 8425|  48.8k|    monostate monostate_val{};
 8426|       |
 8427|  48.8k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 48.8k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 48.8k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  5.44k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 5.44k, False: 43.3k]
  ------------------
 8433|  5.44k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  5.44k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.44k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.44k|    }                                                           \
  |  | 8421|  5.44k|    else {                                                      \
  |  | 8422|  5.44k|        return vis(monostate_val);                              \
  |  | 8423|  5.44k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 48.8k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 48.8k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 48.8k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 48.8k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  5.44k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 5.44k, False: 43.3k]
  ------------------
 8443|  5.44k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  5.44k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.44k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.44k|    }                                                           \
  |  | 8421|  5.44k|    else {                                                      \
  |  | 8422|  5.44k|        return vis(monostate_val);                              \
  |  | 8423|  5.44k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 48.8k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 48.8k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  5.40k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 5.40k, False: 43.4k]
  ------------------
 8449|  5.40k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  5.40k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.40k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.40k|    }                                                           \
  |  | 8421|  5.40k|    else {                                                      \
  |  | 8422|  5.40k|        return vis(monostate_val);                              \
  |  | 8423|  5.40k|    }
  ------------------
 8450|  5.44k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 5.44k, False: 43.3k]
  ------------------
 8451|  5.44k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  5.44k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.44k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.44k|    }                                                           \
  |  | 8421|  5.44k|    else {                                                      \
  |  | 8422|  5.44k|        return vis(monostate_val);                              \
  |  | 8423|  5.44k|    }
  ------------------
 8452|  5.40k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 5.40k, False: 43.4k]
  ------------------
 8453|  5.40k|            SCN_VISIT(char);
  ------------------
  |  | 8418|  5.40k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.40k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.40k|    }                                                           \
  |  | 8421|  5.40k|    else {                                                      \
  |  | 8422|  5.40k|        return vis(monostate_val);                              \
  |  | 8423|  5.40k|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 48.8k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 48.8k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 48.8k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  5.44k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 5.44k, False: 43.3k]
  ------------------
 8461|  5.44k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  5.44k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.44k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.44k|    }                                                           \
  |  | 8421|  5.44k|    else {                                                      \
  |  | 8422|  5.44k|        return vis(monostate_val);                              \
  |  | 8423|  5.44k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 48.8k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  5.40k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 5.40k, False: 43.4k]
  ------------------
 8465|  5.40k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  5.40k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.40k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.40k|    }                                                           \
  |  | 8421|  5.40k|    else {                                                      \
  |  | 8422|  5.40k|        return vis(monostate_val);                              \
  |  | 8423|  5.40k|    }
  ------------------
 8466|  5.40k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 5.40k, False: 43.4k]
  ------------------
 8467|  5.40k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  5.40k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.40k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.40k|    }                                                           \
  |  | 8421|  5.40k|    else {                                                      \
  |  | 8422|  5.40k|        return vis(monostate_val);                              \
  |  | 8423|  5.40k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 48.8k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  5.40k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 5.40k, False: 43.4k]
  ------------------
 8471|  5.40k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  5.40k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.40k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.40k|    }                                                           \
  |  | 8421|  5.40k|    else {                                                      \
  |  | 8422|  5.40k|        return vis(monostate_val);                              \
  |  | 8423|  5.40k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 48.8k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 48.8k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 48.8k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 48.8k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 48.8k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  48.8k|            SCN_CLANG_POP
 8495|  48.8k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  11.0k|    {
 3330|  11.0k|        return m_iterator;
 3331|  11.0k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|  1.86k|    {
 1430|  1.86k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.86k|    {
  437|  1.86k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.09k|    {
 1177|  2.09k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  6.27k|    {
 3334|  6.27k|        return m_sentinel;
 3335|  6.27k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|    234|    {
 1476|    234|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    234|    {
  447|    234|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  5.06k|    {
 3316|  5.06k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1597|    214|    {
 1598|    214|        return has_value();
 1599|    214|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.13k|    {
  485|  4.13k|        return m_has_value;
  486|  4.13k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEERT_v:
 1652|    154|    {
 1653|    154|        return value();
 1654|    154|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.86k|    {
 1627|  1.86k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.86k|        return this->get_value();
 1629|  1.86k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.86k|    {
  451|  1.86k|        return m_value;
  452|  1.86k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  1.88k|    {
 1837|  1.88k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.88k|                                            std::forward<F>(f));
 1839|  1.88k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|  1.88k|{
 1323|  1.88k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.88k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.88k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.88k|            return result(*std::forward<Exp>(exp));
 1327|  1.88k|        }
 1328|       |
 1329|  1.88k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.88k|        return result(unexpect, monostate{});
 1331|  1.88k|    }
 1332|  1.88k|    else {
 1333|  1.88k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.88k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.88k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.71k, False: 174]
  |  |  ------------------
  ------------------
 1335|  1.88k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.88k|                   : result(unexpect,
 1337|    174|                            trivial_invoke(std::forward<F>(f),
 1338|    174|                                           std::forward<Exp>(exp).error()));
 1339|  1.88k|    }
 1340|  1.88k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.71k|    {
 1663|  1.71k|        return std::move(value());
 1664|  1.71k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.71k|    {
 1430|  1.71k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.71k|    {
  437|  1.71k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.88k|    {
 1177|  1.88k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1613|    174|    {
 1614|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    174|        return std::move(this->get_unexpected().error());
 1616|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1485|    174|    {
 1486|    174|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    174|    {
  447|    174|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  1.88k|    {
 1598|  1.88k|        return has_value();
 1599|  1.88k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.76k|    {
  485|  3.76k|        return m_has_value;
  486|  3.76k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1603|    174|    {
 1604|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    174|        return this->get_unexpected().error();
 1606|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.71k|    {
 1663|  1.71k|        return std::move(value());
 1664|  1.71k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.71k|    {
 1627|  1.71k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.71k|        return this->get_value();
 1629|  1.71k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.71k|    {
  451|  1.71k|        return m_value;
  452|  1.71k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   178k|    {
 5466|   178k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 178k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   178k|        return static_cast<std::size_t>(m_desc &
 5471|   178k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   178k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|   209k|    {
 5491|   209k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   209k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  30.2k|    {
 5434|  30.2k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 30.2k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  30.2k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76, False: 30.2k]
  |  |  ------------------
  ------------------
 5442|     76|            return {};
 5443|     76|        }
 5444|       |
 5445|  30.2k|        const auto t = type(id);
 5446|  30.2k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.13k, False: 29.0k]
  |  |  ------------------
  ------------------
 5447|  1.13k|            return {};
 5448|  1.13k|        }
 5449|       |
 5450|  29.0k|        basic_scan_arg<Context> arg;
 5451|  29.0k|        arg.m_type = t;
 5452|  29.0k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 29.0k, False: 0]
  ------------------
 5453|  29.0k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  29.0k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  29.0k|        return arg;
 5459|  30.2k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  30.2k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  30.2k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  30.2k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  30.2k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  30.2k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  30.2k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  29.0k|    {
 5495|  29.0k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  29.0k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  57.6k|    {
 5247|  57.6k|        return m_type != detail::arg_type::none_type;
 5248|  57.6k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  4.26k|{
 8417|  4.26k|#define SCN_VISIT(Type)                                         \
 8418|  4.26k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  4.26k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  4.26k|    }                                                           \
 8421|  4.26k|    else {                                                      \
 8422|  4.26k|        return vis(monostate_val);                              \
 8423|  4.26k|    }
 8424|       |
 8425|  4.26k|    monostate monostate_val{};
 8426|       |
 8427|  4.26k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 4.26k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 4.26k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    474|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 474, False: 3.79k]
  ------------------
 8433|    474|            SCN_VISIT(int);
  ------------------
  |  | 8418|    474|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    474|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    474|    }                                                           \
  |  | 8421|    474|    else {                                                      \
  |  | 8422|    474|        return vis(monostate_val);                              \
  |  | 8423|    474|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 4.26k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 4.26k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 4.26k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 4.26k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    474|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 474, False: 3.79k]
  ------------------
 8443|    474|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    474|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    474|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    474|    }                                                           \
  |  | 8421|    474|    else {                                                      \
  |  | 8422|    474|        return vis(monostate_val);                              \
  |  | 8423|    474|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 4.26k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 4.26k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    474|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 474, False: 3.79k]
  ------------------
 8449|    474|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    474|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    474|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    474|    }                                                           \
  |  | 8421|    474|    else {                                                      \
  |  | 8422|    474|        return vis(monostate_val);                              \
  |  | 8423|    474|    }
  ------------------
 8450|    474|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 474, False: 3.79k]
  ------------------
 8451|    474|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    474|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    474|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    474|    }                                                           \
  |  | 8421|    474|    else {                                                      \
  |  | 8422|    474|        return vis(monostate_val);                              \
  |  | 8423|    474|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 4.26k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|    474|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 474, False: 3.79k]
  ------------------
 8455|    474|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|    474|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    474|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    474|    }                                                           \
  |  | 8421|    474|    else {                                                      \
  |  | 8422|    474|        return vis(monostate_val);                              \
  |  | 8423|    474|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 4.26k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 4.26k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    474|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 474, False: 3.79k]
  ------------------
 8461|    474|            SCN_VISIT(double);
  ------------------
  |  | 8418|    474|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    474|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    474|    }                                                           \
  |  | 8421|    474|    else {                                                      \
  |  | 8422|    474|        return vis(monostate_val);                              \
  |  | 8423|    474|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 4.26k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 4.26k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|    474|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 474, False: 3.79k]
  ------------------
 8467|    474|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    474|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    474|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    474|    }                                                           \
  |  | 8421|    474|    else {                                                      \
  |  | 8422|    474|        return vis(monostate_val);                              \
  |  | 8423|    474|    }
  ------------------
 8468|    474|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 474, False: 3.79k]
  ------------------
 8469|    474|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|    474|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    474|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    474|    }                                                           \
  |  | 8421|    474|    else {                                                      \
  |  | 8422|    474|        return vis(monostate_val);                              \
  |  | 8423|    474|    }
  ------------------
 8470|    474|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 474, False: 3.79k]
  ------------------
 8471|    474|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    474|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    474|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    474|    }                                                           \
  |  | 8421|    474|    else {                                                      \
  |  | 8422|    474|        return vis(monostate_val);                              \
  |  | 8423|    474|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 4.26k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 4.26k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 4.26k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 4.26k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 4.26k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  4.26k|            SCN_CLANG_POP
 8495|  4.26k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   178k|    {
 5545|   178k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   178k|    {
 8056|   178k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   178k|{
 7044|   178k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   178k|    handler.check_args_exhausted();
 7046|   178k|    return handler.get_error();
 7047|   178k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   178k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   178k|    auto begin = format.data();
 7013|   178k|    auto it = begin;
 7014|   178k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   368M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 368M, False: 61.3k]
  ------------------
 7017|   368M|        const auto ch = *it++;
 7018|   368M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 30.8k, False: 368M]
  ------------------
 7019|  30.8k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  30.8k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  30.8k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 27.6k, False: 3.22k]
  ------------------
 7023|  27.6k|                return;
 7024|  27.6k|            }
 7025|  30.8k|        }
 7026|   368M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 91.9k, False: 368M]
  ------------------
 7027|  91.9k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 89.7k, False: 2.15k]
  |  |  |  Branch (859:45): [True: 238, False: 91.6k]
  |  |  |  Branch (859:45): [True: 89.5k, False: 2.15k]
  |  |  ------------------
  ------------------
 7028|  89.7k|                handler.on_error("Unmatched '}' in format string");
 7029|  89.7k|                return;
 7030|  89.7k|            }
 7031|       |
 7032|  2.15k|            handler.on_literal_text(begin, it);
 7033|  2.15k|            begin = ++it;
 7034|  2.15k|        }
 7035|   368M|    }
 7036|       |
 7037|  61.3k|    handler.on_literal_text(begin, end);
 7038|  61.3k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|  30.8k|{
 6942|  30.8k|    struct id_adapter {
 6943|  30.8k|        constexpr void operator()()
 6944|  30.8k|        {
 6945|  30.8k|            arg_id = handler.on_arg_id();
 6946|  30.8k|        }
 6947|  30.8k|        constexpr void operator()(std::size_t id)
 6948|  30.8k|        {
 6949|  30.8k|            arg_id = handler.on_arg_id(id);
 6950|  30.8k|        }
 6951|       |
 6952|  30.8k|        constexpr void on_error(const char* msg)
 6953|  30.8k|        {
 6954|  30.8k|            SCN_UNLIKELY_ATTR
 6955|  30.8k|            handler.on_error(msg);
 6956|  30.8k|        }
 6957|       |
 6958|  30.8k|        Handler& handler;
 6959|  30.8k|        std::size_t arg_id;
 6960|  30.8k|    };
 6961|       |
 6962|  30.8k|    ++begin;
 6963|  30.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 30.8k]
  |  |  ------------------
  ------------------
 6964|     52|        handler.on_error("Unexpected end of replacement field");
 6965|     52|        return begin;
 6966|     52|    }
 6967|       |
 6968|  30.8k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 4.21k, False: 26.6k]
  ------------------
 6969|  4.21k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  4.21k|    }
 6971|  26.6k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 122, False: 26.5k]
  ------------------
 6972|    122|        handler.on_literal_text(begin, begin + 1);
 6973|    122|    }
 6974|  26.5k|    else {
 6975|  26.5k|        auto adapter = id_adapter{handler, 0};
 6976|  26.5k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  26.5k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 26.3k]
  |  |  ------------------
  ------------------
 6979|    120|            handler.on_error("Missing '}' in format string");
 6980|    120|            return begin;
 6981|    120|        }
 6982|       |
 6983|  26.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 144, False: 26.2k]
  ------------------
 6984|    144|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    144|        }
 6986|  26.2k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 25.9k, False: 288]
  ------------------
 6987|  25.9k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  25.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 25.8k]
  |  |  ------------------
  ------------------
 6988|     50|                handler.on_error("Unexpected end of replacement field");
 6989|     50|                return begin;
 6990|     50|            }
 6991|  25.8k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  25.8k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  51.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.26k, False: 23.6k]
  |  |  |  Branch (859:45): [True: 0, False: 25.8k]
  |  |  |  Branch (859:45): [True: 2.26k, False: 23.6k]
  |  |  ------------------
  ------------------
 6993|  2.26k|                handler.on_error("Unknown format specifier");
 6994|  2.26k|                return begin;
 6995|  2.26k|            }
 6996|  25.8k|        }
 6997|    288|        else {
 6998|    288|            SCN_UNLIKELY_ATTR
 6999|    288|            handler.on_error("Missing '}' in format string");
 7000|    288|            return begin;
 7001|    288|        }
 7002|  26.3k|    }
 7003|  28.1k|    return begin + 1;
 7004|  30.8k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|  30.2k|    {
 8039|  30.2k|        return m_args.get(id);
 8040|  30.2k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8043|  4.36k|    {
 8044|  4.36k|        return m_args;
 8045|  4.36k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|  27.6k|    {
 8049|  27.6k|        return m_locale;
 8050|  27.6k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|  30.0k|    {
 5566|  30.0k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  30.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32, False: 30.0k]
  |  |  ------------------
  ------------------
 5567|     32|            on_error(
 5568|     32|                "Cannot switch from manual to automatic argument indexing");
 5569|     32|            return 0;
 5570|     32|        }
 5571|       |
 5572|  30.0k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  30.0k|        do_check_arg_id(id);
 5574|  30.0k|        return id;
 5575|  30.0k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5589|    122|    {
 5590|    122|        return detail::handle_error(
 5591|    122|            scan_error{scan_error::invalid_format_string, msg});
 5592|    122|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|  30.1k|{
 6054|  30.1k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  30.1k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  30.1k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  26.5k|{
 6443|  26.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  26.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  26.5k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 26.5k, False: 0]
  |  Branch (6444:26): [True: 678, False: 25.8k]
  ------------------
 6445|    678|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|    678|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|    678|    }
 6447|       |
 6448|  25.8k|    handler();
 6449|  25.8k|    return begin;
 6450|  26.5k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|    678|{
 6413|    678|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    678|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    678|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|    678|    CharT c = *begin;
 6416|    678|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 44, False: 634]
  |  Branch (6416:27): [True: 160, False: 474]
  ------------------
 6417|    204|        handler.on_error("Invalid argument ID");
 6418|    204|        return begin;
 6419|    204|    }
 6420|       |
 6421|    474|    int idx = 0;
 6422|    474|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 286, False: 188]
  ------------------
 6423|    286|        idx = parse_simple_int(begin, end);
 6424|    286|    }
 6425|    188|    else {
 6426|    188|        ++begin;
 6427|    188|    }
 6428|       |
 6429|    474|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 120, False: 354]
  |  Branch (6429:26): [True: 210, False: 144]
  |  Branch (6429:50): [True: 84, False: 126]
  ------------------
 6430|    204|        handler.on_error("Invalid argument ID");
 6431|    204|        return begin;
 6432|    204|    }
 6433|    270|    handler(idx);
 6434|       |
 6435|    270|    return begin;
 6436|    474|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|    408|        {
 6954|    408|            SCN_UNLIKELY_ATTR
 6955|    408|            handler.on_error(msg);
 6956|    408|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  12.5k|{
 6392|  12.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  12.5k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  12.5k|    unsigned long long value = 0;
 6396|  14.2k|    do {
 6397|  14.2k|        value *= 10;
 6398|  14.2k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  14.2k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 56, False: 14.1k]
  ------------------
 6400|  14.2k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|     56|            return -1;
 6402|     56|        }
 6403|  14.1k|        ++begin;
 6404|  14.1k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 13.8k, False: 316]
  |  Branch (6404:30): [True: 6.03k, False: 7.84k]
  |  Branch (6404:47): [True: 1.65k, False: 4.38k]
  ------------------
 6405|  12.5k|    return static_cast<int>(value);
 6406|  12.5k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|    270|        {
 6949|    270|            arg_id = handler.on_arg_id(id);
 6950|    270|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5578|    270|    {
 5579|    270|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90, False: 180]
  |  |  ------------------
  ------------------
 5580|     90|            on_error(
 5581|     90|                "Cannot switch from manual to automatic argument indexing");
 5582|     90|            return;
 5583|     90|        }
 5584|    180|        m_next_arg_id = -1;
 5585|    180|        do_check_arg_id(id);
 5586|    180|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  25.8k|        {
 6945|  25.8k|            arg_id = handler.on_arg_id();
 6946|  25.8k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  51.7k|    {
 5252|  51.7k|        return m_type;
 5253|  51.7k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|  23.2k|    {
 5561|  23.2k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  23.2k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  49.1k|    {
 5550|  49.1k|        return m_format.data();
 5551|  49.1k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  25.8k|    {
 7122|  25.8k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  25.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  25.8k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|  25.8k|{
 6858|  25.8k|    auto do_presentation = [&]() -> const CharT* {
 6859|  25.8k|        if (*begin == CharT{'['}) {
 6860|  25.8k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  25.8k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  25.8k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  25.8k|                return begin;
 6866|  25.8k|            }
 6867|  25.8k|            handler.on_character_set_string(set);
 6868|  25.8k|            return begin;
 6869|  25.8k|        }
 6870|  25.8k|        if (*begin == CharT{'/'}) {
 6871|  25.8k|            return parse_presentation_regex(begin, end, handler);
 6872|  25.8k|        }
 6873|  25.8k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  25.8k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  25.8k|            handler.on_error("Invalid type specifier in format string");
 6876|  25.8k|            return begin;
 6877|  25.8k|        }
 6878|  25.8k|        handler.on_type(type);
 6879|  25.8k|        return begin;
 6880|  25.8k|    };
 6881|       |
 6882|  25.8k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 24.9k, False: 940]
  |  Branch (6882:28): [True: 2.59k, False: 22.3k]
  ------------------
 6883|  25.8k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 266, False: 2.32k]
  |  Branch (6883:36): [True: 214, False: 52]
  ------------------
 6884|    214|        return do_presentation();
 6885|    214|    }
 6886|       |
 6887|  25.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  25.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.6k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  25.6k|    begin = parse_align(begin, end, handler);
 6893|  25.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  25.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 25.5k]
  |  |  ------------------
  ------------------
 6894|    102|        handler.on_error("Unexpected end of format string");
 6895|    102|        return begin;
 6896|    102|    }
 6897|       |
 6898|  25.5k|    begin = parse_width(begin, end, handler);
 6899|  25.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 25.4k]
  |  |  ------------------
  ------------------
 6900|    106|        handler.on_error("Unexpected end of format string");
 6901|    106|        return begin;
 6902|    106|    }
 6903|       |
 6904|  25.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 2.07k, False: 23.3k]
  ------------------
 6905|  2.07k|        ++begin;
 6906|  2.07k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.04k]
  |  |  ------------------
  ------------------
 6907|     34|            handler.on_error("Unexpected end of format string");
 6908|     34|            return begin;
 6909|     34|        }
 6910|  2.04k|        begin = parse_precision(begin, end, handler);
 6911|  2.04k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116, False: 1.92k]
  |  |  ------------------
  ------------------
 6912|    116|            handler.on_error("Unexpected end of format string");
 6913|    116|            return begin;
 6914|    116|        }
 6915|  2.04k|    }
 6916|       |
 6917|  25.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 410, False: 24.9k]
  ------------------
 6918|    410|        handler.on_localized();
 6919|    410|        ++begin;
 6920|    410|    }
 6921|  25.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 25.2k]
  |  |  ------------------
  ------------------
 6922|     52|        handler.on_error("Unexpected end of format string");
 6923|     52|        return begin;
 6924|     52|    }
 6925|       |
 6926|  25.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 25.2k, False: 0]
  |  Branch (6926:25): [True: 21.4k, False: 3.87k]
  ------------------
 6927|  21.4k|        do_presentation();
 6928|  21.4k|    }
 6929|  25.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.64k, False: 23.6k]
  |  |  ------------------
  ------------------
 6930|  1.64k|        handler.on_error("Unexpected end of format string");
 6931|  1.64k|        return begin;
 6932|  1.64k|    }
 6933|       |
 6934|  23.6k|    return begin;
 6935|  25.2k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  2.59k|{
 6507|  2.59k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 212, False: 2.37k]
  |  Branch (6507:33): [True: 178, False: 34]
  ------------------
 6508|  2.59k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 158, False: 2.25k]
  |  Branch (6508:33): [True: 88, False: 70]
  ------------------
 6509|  2.59k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  21.6k|    auto do_presentation = [&]() -> const CharT* {
 6859|  21.6k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 1.63k, False: 19.9k]
  ------------------
 6860|  1.63k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  1.63k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 580, False: 1.05k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    580|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    580|                return begin;
 6866|    580|            }
 6867|  1.05k|            handler.on_character_set_string(set);
 6868|  1.05k|            return begin;
 6869|  1.63k|        }
 6870|  19.9k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 17.1k, False: 2.88k]
  ------------------
 6871|  17.1k|            return parse_presentation_regex(begin, end, handler);
 6872|  17.1k|        }
 6873|  2.88k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  2.88k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 336, False: 2.54k]
  |  |  ------------------
  ------------------
 6875|    336|            handler.on_error("Invalid type specifier in format string");
 6876|    336|            return begin;
 6877|    336|        }
 6878|  2.54k|        handler.on_type(type);
 6879|  2.54k|        return begin;
 6880|  2.88k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  1.63k|{
 6697|  1.63k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  1.63k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  1.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  1.63k|    auto start = begin;
 6701|  1.63k|    ++begin;
 6702|       |
 6703|  1.63k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.59k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     34|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     34|        return {};
 6708|     34|    }
 6709|  1.59k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 426, False: 1.17k]
  ------------------
 6710|    426|        handler.on_charset_inverted();
 6711|    426|        ++begin;
 6712|    426|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    426|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 392]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     34|            return {};
 6717|     34|        }
 6718|    392|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 52, False: 340]
  ------------------
 6719|     52|            handler.on_charset_single(char32_t{']'});
 6720|     52|            ++begin;
 6721|     52|        }
 6722|    392|    }
 6723|  1.17k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 1.13k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  14.7k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 14.3k, False: 314]
  ------------------
 6728|  14.3k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 164, False: 14.2k]
  |  |  ------------------
  ------------------
 6729|    164|            break;
 6730|    164|        }
 6731|       |
 6732|  14.2k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 1.05k, False: 13.1k]
  ------------------
 6733|  1.05k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  1.05k|        }
 6735|       |
 6736|  13.1k|        parse_presentation_set_literal(begin, end, handler);
 6737|  13.1k|    }
 6738|       |
 6739|    478|    SCN_UNLIKELY_ATTR
 6740|    478|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    478|    return {};
 6742|  1.52k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  13.1k|{
 6661|  13.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  13.1k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  13.1k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 13.0k]
  |  |  ------------------
  ------------------
 6665|    128|        return;
 6666|    128|    }
 6667|       |
 6668|  13.0k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 12.9k, False: 88]
  |  Branch (6668:25): [True: 1.22k, False: 11.7k]
  |  Branch (6668:49): [True: 1.19k, False: 34]
  ------------------
 6669|  13.0k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 1.14k, False: 52]
  ------------------
 6670|  1.14k|        ++begin;
 6671|       |
 6672|  1.14k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  1.14k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.10k]
  |  |  ------------------
  ------------------
 6674|     34|            return;
 6675|     34|        }
 6676|       |
 6677|  1.10k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.07k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     34|            return;
 6682|     34|        }
 6683|       |
 6684|  1.07k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  1.07k|        return;
 6686|  1.10k|    }
 6687|       |
 6688|  11.9k|    handler.on_charset_single(cp_first);
 6689|  11.9k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  14.3k|{
 6637|  14.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  14.3k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  14.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  28.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.3k]
  |  |  |  Branch (859:45): [True: 0, False: 14.3k]
  |  |  |  Branch (859:45): [True: 0, False: 14.3k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  14.3k|    const auto cp =
 6646|  14.3k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  14.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 162, False: 14.1k]
  |  |  ------------------
  ------------------
 6648|    162|        handler.on_error("Invalid encoding in format string");
 6649|    162|        return invalid_code_point;
 6650|    162|    }
 6651|       |
 6652|  14.1k|    begin += len;
 6653|  14.1k|    return cp;
 6654|  14.3k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  1.05k|    {
 6346|  1.05k|        m_specs.charset_string_data = fmt.data();
 6347|  1.05k|        m_specs.charset_string_size = fmt.size();
 6348|  1.05k|        on_type(presentation_type::string_set);
 6349|  1.05k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  17.1k|{
 6749|  17.1k|#if !SCN_DISABLE_REGEX
 6750|  17.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  17.1k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  17.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|  17.1k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  34.2k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|  17.1k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|  17.1k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|  17.1k|        return begin;
 6757|  17.1k|    }
 6758|       |
 6759|  17.1k|    auto start = begin;
 6760|  17.1k|    ++begin;
 6761|       |
 6762|  17.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 17.0k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  17.0k|    handler.on_type(presentation_type::regex);
 6768|  1.25M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 1.25M, False: 154]
  ------------------
 6769|  1.25M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 20.0k, False: 1.22M]
  ------------------
 6770|  20.0k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 16.9k, False: 3.16k]
  ------------------
 6771|  16.9k|                break;
 6772|  16.9k|            }
 6773|  3.16k|            else {
 6774|  3.16k|                handler.on_type(presentation_type::regex_escaped);
 6775|  3.16k|            }
 6776|  20.0k|        }
 6777|  1.25M|    }
 6778|  17.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 154, False: 16.9k]
  |  |  ------------------
  ------------------
 6779|    154|        handler.on_error("Unexpected end of regex in format string");
 6780|    154|        return begin;
 6781|    154|    }
 6782|       |
 6783|  16.9k|    auto regex_end = begin;
 6784|  16.9k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  16.9k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 16.8k]
  |  |  ------------------
  ------------------
 6786|     34|        handler.on_error("Invalid (empty) regex in format string");
 6787|     34|        return begin;
 6788|     34|    }
 6789|  16.8k|    handler.on_regex_pattern(regex_pattern);
 6790|  16.8k|    ++begin;
 6791|       |
 6792|  16.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 16.8k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  16.8k|    regex_flags flags{regex_flags::none};
 6798|  16.8k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  16.8k|        {{'m', regex_flags::multiline},
 6800|  16.8k|         {'s', regex_flags::singleline},
 6801|  16.8k|         {'i', regex_flags::nocase},
 6802|  16.8k|         {'n', regex_flags::nocapture}}};
 6803|  19.0k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 19.0k, False: 44]
  ------------------
 6804|  19.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 16.7k, False: 2.29k]
  ------------------
 6805|  16.7k|            break;
 6806|  16.7k|        }
 6807|  2.29k|        bool found_flag = false;
 6808|  6.19k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 6.19k, False: 54]
  ------------------
 6809|  6.19k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 3.95k, False: 2.24k]
  ------------------
 6810|  3.95k|                continue;
 6811|  3.95k|            }
 6812|  2.24k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 34, False: 2.21k]
  ------------------
 6813|     34|                handler.on_error("Flag set multiple times in regex");
 6814|     34|                return begin;
 6815|     34|            }
 6816|  2.21k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  2.21k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 40, False: 2.17k]
  ------------------
 6818|       |                // clang-format off
 6819|     40|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     40|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  2.21k|#endif
 6830|  2.21k|            flags |= flag.second;
 6831|  2.21k|            found_flag = true;
 6832|  2.21k|            break;
 6833|  2.24k|        }
 6834|  2.26k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 54, False: 2.21k]
  ------------------
 6835|     54|            handler.on_error("Invalid flag in regex");
 6836|     54|            return begin;
 6837|     54|        }
 6838|  2.26k|    }
 6839|  16.7k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  16.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 16.7k]
  |  |  ------------------
  ------------------
 6842|     44|        handler.on_error("Unexpected end of regex in format string");
 6843|     44|        return begin;
 6844|     44|    }
 6845|       |
 6846|  16.7k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  16.7k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  16.8k|    {
 6354|  16.8k|        m_specs.charset_string_data = pattern.data();
 6355|  16.8k|        m_specs.charset_string_size = pattern.size();
 6356|  16.8k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|  2.88k|{
 6455|  2.88k|    switch (type) {
 6456|     88|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 88, False: 2.79k]
  ------------------
 6457|    122|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 34, False: 2.84k]
  ------------------
 6458|    122|            return presentation_type::int_binary;
 6459|    106|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 106, False: 2.77k]
  ------------------
 6460|    106|            return presentation_type::int_decimal;
 6461|    160|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 160, False: 2.72k]
  ------------------
 6462|    160|            return presentation_type::int_generic;
 6463|    124|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 124, False: 2.75k]
  ------------------
 6464|    124|            return presentation_type::int_unsigned_decimal;
 6465|    106|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 106, False: 2.77k]
  ------------------
 6466|    106|            return presentation_type::int_octal;
 6467|     88|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 88, False: 2.79k]
  ------------------
 6468|    140|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 52, False: 2.82k]
  ------------------
 6469|    140|            return presentation_type::int_hex;
 6470|     34|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 34, False: 2.84k]
  ------------------
 6471|     74|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 40, False: 2.84k]
  ------------------
 6472|     74|            return presentation_type::int_arbitrary_base;
 6473|    150|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 150, False: 2.73k]
  ------------------
 6474|    238|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 88, False: 2.79k]
  ------------------
 6475|    238|            return presentation_type::float_hex;
 6476|     70|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 70, False: 2.81k]
  ------------------
 6477|    104|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 34, False: 2.84k]
  ------------------
 6478|    104|            return presentation_type::float_scientific;
 6479|     70|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 70, False: 2.81k]
  ------------------
 6480|    158|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 88, False: 2.79k]
  ------------------
 6481|    158|            return presentation_type::float_fixed;
 6482|     34|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 34, False: 2.84k]
  ------------------
 6483|     86|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 52, False: 2.82k]
  ------------------
 6484|     86|            return presentation_type::float_general;
 6485|    808|        case 's':
  ------------------
  |  Branch (6485:9): [True: 808, False: 2.07k]
  ------------------
 6486|    808|            return presentation_type::string;
 6487|    214|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 214, False: 2.66k]
  ------------------
 6488|    214|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 2.84k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     70|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 70, False: 2.81k]
  ------------------
 6492|     70|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 2.88k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 2.88k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    336|        default:
  ------------------
  |  Branch (6499:9): [True: 336, False: 2.54k]
  ------------------
 6500|    336|            return presentation_type::none;
 6501|  2.88k|    }
 6502|  2.88k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  25.6k|{
 6532|  25.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  25.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  25.6k|    auto check_align = [](wchar_t ch) {
 6535|  25.6k|        switch (ch) {
 6536|  25.6k|            case L'<':
 6537|  25.6k|                return align_type::left;
 6538|  25.6k|            case L'>':
 6539|  25.6k|                return align_type::right;
 6540|  25.6k|            case L'^':
 6541|  25.6k|                return align_type::center;
 6542|  25.6k|            default:
 6543|  25.6k|                return align_type::none;
 6544|  25.6k|        }
 6545|  25.6k|    };
 6546|       |
 6547|  25.6k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  25.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  51.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.6k]
  |  |  |  Branch (859:45): [True: 0, False: 25.6k]
  |  |  |  Branch (859:45): [True: 0, False: 25.6k]
  |  |  ------------------
  ------------------
 6549|  25.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  25.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  25.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  25.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  25.6k|    const auto begin_before_fill = begin;
 6559|  25.6k|    begin += potential_fill_len;
 6560|       |
 6561|  25.6k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 940, False: 24.7k]
  ------------------
 6562|    940|        return begin_before_fill;
 6563|    940|    }
 6564|       |
 6565|  24.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  24.7k|    const auto begin_after_fill = begin;
 6567|  24.7k|    ++begin;
 6568|       |
 6569|  24.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 24.7k, False: 0]
  ------------------
 6570|  24.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  24.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 24.7k]
  |  |  ------------------
  ------------------
 6571|     42|            handler.on_error("Invalid fill character '{' in format string");
 6572|     42|            return begin;
 6573|     42|        }
 6574|  24.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 1.50k, False: 23.1k]
  ------------------
 6575|  1.50k|            return begin_before_fill;
 6576|  1.50k|        }
 6577|  24.7k|    }
 6578|       |
 6579|  23.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 22.2k, False: 942]
  ------------------
 6580|  22.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 1.21k, False: 21.0k]
  ------------------
 6581|  1.21k|            handler.on_align(potential_align_on_fill);
 6582|  1.21k|            return begin_after_fill;
 6583|  1.21k|        }
 6584|  21.0k|        return begin_before_fill;
 6585|  22.2k|    }
 6586|       |
 6587|    942|    handler.on_fill(potential_fill);
 6588|    942|    handler.on_align(potential_align_after_fill);
 6589|    942|    return begin;
 6590|  23.1k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|  25.6k|{
 6514|  25.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  25.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  25.6k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  25.6k|        return 1;
 6517|  25.6k|    }
 6518|  25.6k|    else {
 6519|  25.6k|        const auto lengths =
 6520|  25.6k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  25.6k|            "\3\4";
 6522|  25.6k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  25.6k|        return len;
 6524|  25.6k|    }
 6525|  25.6k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  50.4k|    auto check_align = [](wchar_t ch) {
 6535|  50.4k|        switch (ch) {
 6536|  1.02k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 1.02k, False: 49.4k]
  ------------------
 6537|  1.02k|                return align_type::left;
 6538|    230|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 230, False: 50.1k]
  ------------------
 6539|    230|                return align_type::right;
 6540|  1.33k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 1.33k, False: 49.0k]
  ------------------
 6541|  1.33k|                return align_type::center;
 6542|  47.8k|            default:
  ------------------
  |  Branch (6542:13): [True: 47.8k, False: 2.58k]
  ------------------
 6543|  47.8k|                return align_type::none;
 6544|  50.4k|        }
 6545|  50.4k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|    942|    {
 6268|    942|        m_specs.fill = fill;
 6269|    942|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|    942|    {
 6149|    942|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|    942|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    942|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|    942|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|    942|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    942|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|    942|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|    942|            for (size_t i = 0; i < s.size(); ++i) {
 6153|    942|                SCN_GCC_PUSH
 6154|    942|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|    942|                m_data[i] = s[i];
 6156|    942|                SCN_GCC_POP
 6157|    942|            }
 6158|    942|            m_size = static_cast<unsigned char>(s.size());
 6159|    942|        }
 6160|    942|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (6160:28): [Folded - Ignored]
  ------------------
 6161|    942|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|    942|            m_data[1] =
 6163|    942|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|    942|            if (s.size() == 1) {
 6165|    942|                return;
 6166|    942|            }
 6167|    942|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|    942|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|    942|        }
 6170|    942|        else {
 6171|    942|            const auto front = static_cast<unsigned>(s.front());
 6172|    942|            m_data[0] = static_cast<char>(front);
 6173|    942|            m_data[1] = static_cast<char>(front >> 8);
 6174|    942|            m_data[2] = static_cast<char>(front >> 16);
 6175|    942|            m_data[3] = static_cast<char>(front >> 24);
 6176|    942|        }
 6177|    942|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  25.5k|{
 6597|  25.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  25.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  25.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 14.1k, False: 11.4k]
  |  Branch (6599:33): [True: 10.3k, False: 3.77k]
  ------------------
 6600|  10.3k|        int width = parse_simple_int(begin, end);
 6601|  10.3k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  10.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 10.3k, False: 28]
  |  |  ------------------
  ------------------
 6602|  10.3k|            handler.on_width(width);
 6603|  10.3k|        }
 6604|     28|        else {
 6605|     28|            handler.on_error("Invalid field width");
 6606|     28|            return begin;
 6607|     28|        }
 6608|  10.3k|    }
 6609|  25.5k|    return begin;
 6610|  25.5k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6616|  2.04k|{
 6617|  2.04k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  2.04k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 2.01k, False: 34]
  |  Branch (6619:33): [True: 1.97k, False: 34]
  ------------------
 6620|  1.97k|        int prec = parse_simple_int(begin, end);
 6621|  1.97k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  1.97k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.97k, False: 0]
  |  |  ------------------
  ------------------
 6622|  1.97k|            handler.on_precision(prec);
 6623|  1.97k|        }
 6624|      0|        else {
 6625|      0|            handler.on_error("Invalid field precision");
 6626|      0|            return begin;
 6627|      0|        }
 6628|  1.97k|    }
 6629|  2.04k|    return begin;
 6630|  2.04k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|    410|    {
 7127|    410|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    410|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 370, False: 40]
  ------------------
 7129|    410|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 330, False: 40]
  ------------------
 7130|    410|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 290, False: 40]
  ------------------
 7131|    410|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 250, False: 40]
  ------------------
 7132|    250|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    250|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    250|        }
 7137|       |
 7138|    160|        Handler::on_localized();
 7139|    160|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  23.1k|{
 8417|  23.1k|#define SCN_VISIT(Type)                                         \
 8418|  23.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  23.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  23.1k|    }                                                           \
 8421|  23.1k|    else {                                                      \
 8422|  23.1k|        return vis(monostate_val);                              \
 8423|  23.1k|    }
 8424|       |
 8425|  23.1k|    monostate monostate_val{};
 8426|       |
 8427|  23.1k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 23.1k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 23.1k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  2.59k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 2.59k, False: 20.5k]
  ------------------
 8433|  2.59k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  2.59k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.59k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.59k|    }                                                           \
  |  | 8421|  2.59k|    else {                                                      \
  |  | 8422|  2.59k|        return vis(monostate_val);                              \
  |  | 8423|  2.59k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 23.1k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 23.1k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 23.1k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 23.1k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  2.59k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 2.59k, False: 20.5k]
  ------------------
 8443|  2.59k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  2.59k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.59k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.59k|    }                                                           \
  |  | 8421|  2.59k|    else {                                                      \
  |  | 8422|  2.59k|        return vis(monostate_val);                              \
  |  | 8423|  2.59k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 23.1k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 23.1k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  2.55k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 2.55k, False: 20.5k]
  ------------------
 8449|  2.55k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  2.55k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.55k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.55k|    }                                                           \
  |  | 8421|  2.55k|    else {                                                      \
  |  | 8422|  2.55k|        return vis(monostate_val);                              \
  |  | 8423|  2.55k|    }
  ------------------
 8450|  2.59k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 2.59k, False: 20.5k]
  ------------------
 8451|  2.59k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  2.59k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.59k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.59k|    }                                                           \
  |  | 8421|  2.59k|    else {                                                      \
  |  | 8422|  2.59k|        return vis(monostate_val);                              \
  |  | 8423|  2.59k|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 23.1k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|  2.55k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 2.55k, False: 20.5k]
  ------------------
 8455|  2.55k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  2.55k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.55k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.55k|    }                                                           \
  |  | 8421|  2.55k|    else {                                                      \
  |  | 8422|  2.55k|        return vis(monostate_val);                              \
  |  | 8423|  2.55k|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 23.1k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 23.1k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  2.59k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 2.59k, False: 20.5k]
  ------------------
 8461|  2.59k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  2.59k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.59k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.59k|    }                                                           \
  |  | 8421|  2.59k|    else {                                                      \
  |  | 8422|  2.59k|        return vis(monostate_val);                              \
  |  | 8423|  2.59k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 23.1k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 23.1k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  2.55k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 2.55k, False: 20.5k]
  ------------------
 8467|  2.55k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  2.55k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.55k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.55k|    }                                                           \
  |  | 8421|  2.55k|    else {                                                      \
  |  | 8422|  2.55k|        return vis(monostate_val);                              \
  |  | 8423|  2.55k|    }
  ------------------
 8468|  2.55k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 2.55k, False: 20.5k]
  ------------------
 8469|  2.55k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  2.55k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.55k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.55k|    }                                                           \
  |  | 8421|  2.55k|    else {                                                      \
  |  | 8422|  2.55k|        return vis(monostate_val);                              \
  |  | 8423|  2.55k|    }
  ------------------
 8470|  2.55k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 2.55k, False: 20.5k]
  ------------------
 8471|  2.55k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  2.55k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.55k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.55k|    }                                                           \
  |  | 8421|  2.55k|    else {                                                      \
  |  | 8422|  2.55k|        return vis(monostate_val);                              \
  |  | 8423|  2.55k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 23.1k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 23.1k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 23.1k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 23.1k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 23.1k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  23.1k|            SCN_CLANG_POP
 8495|  23.1k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  2.92k|    {
 3330|  2.92k|        return m_iterator;
 3331|  2.92k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|    732|    {
 1430|    732|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|    732|    {
  437|    732|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    732|    {
 1177|    732|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  1.46k|    {
 3334|  1.46k|        return m_sentinel;
 3335|  1.46k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  1.46k|    {
 3316|  1.46k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.46k|    {
  485|  1.46k|        return m_has_value;
  486|  1.46k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|    732|    {
 1627|    732|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    732|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    732|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    732|        return this->get_value();
 1629|    732|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    732|    {
  451|    732|        return m_value;
  452|    732|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|    732|    {
 1837|    732|        return detail::transform_error_impl(std::move(*this),
 1838|    732|                                            std::forward<F>(f));
 1839|    732|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|    732|{
 1323|    732|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    732|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    732|        if (SCN_LIKELY(exp.has_value())) {
 1326|    732|            return result(*std::forward<Exp>(exp));
 1327|    732|        }
 1328|       |
 1329|    732|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    732|        return result(unexpect, monostate{});
 1331|    732|    }
 1332|    732|    else {
 1333|    732|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    732|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    732|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 732, False: 0]
  |  |  ------------------
  ------------------
 1335|    732|                   ? result(*std::forward<Exp>(exp))
 1336|    732|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    732|    }
 1340|    732|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|    732|    {
 1663|    732|        return std::move(value());
 1664|    732|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    732|    {
 1430|    732|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|    732|    {
  437|    732|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    732|    {
 1177|    732|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|    732|    {
 1598|    732|        return has_value();
 1599|    732|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.46k|    {
  485|  1.46k|        return m_has_value;
  486|  1.46k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|    732|    {
 1663|    732|        return std::move(value());
 1664|    732|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|    732|    {
 1627|    732|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    732|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    732|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    732|        return this->get_value();
 1629|    732|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    732|    {
  451|    732|        return m_value;
  452|    732|    }

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.93k|{
   89|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.93k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.93k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  89.4k|{
   44|  89.4k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  89.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  89.4k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.93k|{
  127|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.93k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.93k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  89.4k|{
   60|  89.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  89.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  89.4k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.93k|{
   89|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.93k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.93k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.93k|{
  127|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.93k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.93k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.93k|{
   89|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.93k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.93k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.93k|{
  127|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.93k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.93k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.93k|{
   89|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.93k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.93k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.93k|{
  127|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.93k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.93k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.93k|{
   89|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.93k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.93k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.93k|{
  127|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.93k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.93k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.93k|{
   89|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.93k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.93k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.93k|{
  127|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.93k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.93k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
   88|  9.93k|{
   89|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.93k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.93k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  9.93k|{
  127|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.93k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.93k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  9.93k|{
   89|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.93k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.93k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
  126|  9.93k|{
  127|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.93k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.93k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.93k|{
   89|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.93k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.93k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.93k|{
  127|  9.93k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.93k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.93k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.93k|    static_cast<    \
  |  |  929|  9.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.93k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   134k|{
  653|   134k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   134k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    168|{
  659|    168|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    168|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 84, False: 84]
  ------------------
  661|    168|                    : std::locale{};
  662|    168|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    860|{
 1221|    860|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    860|                                  m_nan_payload_buffer, value);
 1223|    860|    value = this->setsign(value);
 1224|    860|    return n;
 1225|    860|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    804|{
 1221|    804|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    804|                                  m_nan_payload_buffer, value);
 1223|    804|    value = this->setsign(value);
 1224|    804|    return n;
 1225|    804|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     22|{
 1461|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 22, False: 0]
  ------------------
 1467|     22|        SCN_UNLIKELY_ATTR
 1468|     22|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     22|                                     "Invalid integer value");
 1470|     22|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    868|{
 1461|    868|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    868|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    868|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    868|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    868|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    868|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    868|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    868|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    868|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    868|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    868|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    868|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    868|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 868, False: 0]
  ------------------
 1467|    868|        SCN_UNLIKELY_ATTR
 1468|    868|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    868|                                     "Invalid integer value");
 1470|    868|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    828|{
 1461|    828|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    828|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    828|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    828|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    828|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    828|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    828|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    828|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    828|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    828|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    828|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    828|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    828|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 828, False: 0]
  ------------------
 1467|    828|        SCN_UNLIKELY_ATTR
 1468|    828|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    828|                                     "Invalid integer value");
 1470|    828|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    868|{
 1461|    868|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    868|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    868|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    868|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    868|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    868|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    868|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    868|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    868|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    868|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    868|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    868|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    868|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 868, False: 0]
  ------------------
 1467|    868|        SCN_UNLIKELY_ATTR
 1468|    868|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    868|                                     "Invalid integer value");
 1470|    868|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    808|{
 1461|    808|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    808|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    808|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    808|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    808|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    808|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    808|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    808|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    808|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    808|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    808|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    808|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    808|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 808, False: 0]
  ------------------
 1467|    808|        SCN_UNLIKELY_ATTR
 1468|    808|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    808|                                     "Invalid integer value");
 1470|    808|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    850|{
 1461|    850|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    850|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    850|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    850|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    850|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    850|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    850|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    850|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    850|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    850|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    850|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    850|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    850|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 850, False: 0]
  ------------------
 1467|    850|        SCN_UNLIKELY_ATTR
 1468|    850|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    850|                                     "Invalid integer value");
 1470|    850|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    790|{
 1461|    790|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    790|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    790|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    790|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    790|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    790|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    790|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    790|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    790|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    790|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    790|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    790|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    790|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 790, False: 0]
  ------------------
 1467|    790|        SCN_UNLIKELY_ATTR
 1468|    790|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    790|                                     "Invalid integer value");
 1470|    790|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  44.7k|{
 2184|  44.7k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  44.7k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|  89.4k|{
 2208|  89.4k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|  89.4k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  3.44k|{
  194|  3.44k|    return find_classic_impl(
  195|  3.44k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  3.44k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  3.44k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  20.6k|{
  202|  20.6k|    return find_classic_impl(
  203|  20.6k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  20.6k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  20.6k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    234|{
  673|    234|    return e;
  674|    234|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  44.7k|{
 2141|  44.7k|    return vscan_internal(source, format, args);
 2142|  44.7k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|  89.4k|{
 2161|  89.4k|    return vscan_internal(source, format, args);
 2162|  89.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.44k|{
  118|  3.44k|    auto it = source.begin();
  119|       |
  120|  10.8k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 8.09k, False: 2.74k]
  ------------------
  121|  8.09k|        auto sv =
  122|  8.09k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  8.09k|                .substr(0, 8);
  124|       |
  125|  8.09k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.80k, False: 5.28k]
  ------------------
  126|  2.80k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.80k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.80k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 444, False: 2.36k]
  ------------------
  129|    444|                break;
  130|    444|            }
  131|  2.36k|            continue;
  132|  2.80k|        }
  133|       |
  134|  20.7k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 15.6k, False: 5.02k]
  ------------------
  135|  15.6k|            auto tmp =
  136|  15.6k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  15.6k|            auto res = get_next_code_point(tmp);
  138|  15.6k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 258, False: 15.4k]
  ------------------
  139|    258|                return it;
  140|    258|            }
  141|  15.4k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  15.4k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  15.4k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  15.4k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  15.4k|        }
  145|  5.28k|    }
  146|       |
  147|  3.18k|    return detail::make_string_view_iterator(source, it);
  148|  3.44k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  27.9k|{
  105|  27.9k|    static_assert(sizeof(*source.data()) == 1);
  106|  27.9k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  27.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  27.9k|    uint64_t word{};
  108|  27.9k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  27.9k|    return has_byte_greater(word, 127) != 0;
  111|  27.9k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  16.1k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  15.6k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  20.6k|{
  118|  20.6k|    auto it = source.begin();
  119|       |
  120|  26.0k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 19.8k, False: 6.21k]
  ------------------
  121|  19.8k|        auto sv =
  122|  19.8k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  19.8k|                .substr(0, 8);
  124|       |
  125|  19.8k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 9.65k, False: 10.1k]
  ------------------
  126|  9.65k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  9.65k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  9.65k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 7.81k, False: 1.84k]
  ------------------
  129|  7.81k|                break;
  130|  7.81k|            }
  131|  1.84k|            continue;
  132|  9.65k|        }
  133|       |
  134|  19.8k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 16.3k, False: 3.51k]
  ------------------
  135|  16.3k|            auto tmp =
  136|  16.3k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  16.3k|            auto res = get_next_code_point(tmp);
  138|  16.3k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 6.66k, False: 9.64k]
  ------------------
  139|  6.66k|                return it;
  140|  6.66k|            }
  141|  9.64k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  9.64k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  9.64k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  9.64k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  9.64k|        }
  145|  10.1k|    }
  146|       |
  147|  14.0k|    return detail::make_string_view_iterator(source, it);
  148|  20.6k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  19.3k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  16.3k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    860|{
 1138|    860|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 860]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    860|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 860]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    860|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 860]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    860|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 860]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    860|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    860|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    860|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    860|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 8, False: 852]
  ------------------
 1185|      8|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 1186|      8|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|      8|                                         "Invalid floating-point digit");
 1188|      8|        }
 1189|      8|    }
 1190|    852|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    852|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 852, False: 0]
  |  |  ------------------
  ------------------
 1191|    852|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    852|                                     "Invalid floating-point digit");
 1193|    852|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    804|{
 1138|    804|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 804]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    804|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 804]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    804|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 804]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    804|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 804]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    804|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    804|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    804|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    804|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 12, False: 792]
  ------------------
 1185|     12|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 1186|     12|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     12|                                         "Invalid floating-point digit");
 1188|     12|        }
 1189|     12|    }
 1190|    792|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    792|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 792, False: 0]
  |  |  ------------------
  ------------------
 1191|    792|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    792|                                     "Invalid floating-point digit");
 1193|    792|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  89.4k|{
 1625|  89.4k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 89.0k, False: 378]
  ------------------
 1626|  89.0k|        return false;
 1627|  89.0k|    }
 1628|    378|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 252]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|  89.4k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  89.3k|    {
 1903|  89.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   268k|    {
 1722|   268k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 268k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   268k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  89.3k|    {
 1853|  89.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  89.3k|{
 2038|  89.3k|    const auto beg = handler.get_ctx().begin();
 2039|  89.3k|    detail::parse_format_string<false>(format, handler);
 2040|  89.3k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  89.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86.4k, False: 2.96k]
  |  |  ------------------
  ------------------
 2041|  86.4k|        return unexpected(handler.error);
 2042|  86.4k|    }
 2043|  2.96k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  89.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|   461k|    {
 2022|   461k|        return ctx.get();
 2023|   461k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   461k|    {
 1857|   461k|        return contiguous_ctx;
 1858|   461k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   106k|    {
 1907|   147k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 45.5k, False: 101k]
  ------------------
 1908|  45.5k|            auto it = get_ctx().begin();
 1909|  45.5k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.05k, False: 44.5k]
  ------------------
 1910|  1.05k|                SCN_UNLIKELY_ATTR
 1911|  1.05k|                return on_error("Unexpected end of source");
 1912|  1.05k|            }
 1913|       |
 1914|  44.5k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|  44.5k|                    detail::make_string_view_from_pointers(begin, end));
 1916|  44.5k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 2.56k, False: 41.9k]
  ------------------
 1917|  2.56k|                SCN_UNLIKELY_ATTR
 1918|  2.56k|                return on_error("Invalid encoding in format string");
 1919|  2.56k|            }
 1920|  41.9k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 5.79k, False: 36.1k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  5.79k|                get_ctx().advance_to(
 1923|  5.79k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  5.79k|                auto begin_it = impl::read_while_classic_space(
 1926|  5.79k|                    detail::make_string_view_from_pointers(
 1927|  5.79k|                        detail::to_address(after_space_it),
 1928|  5.79k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  5.79k|                begin = detail::to_address(begin_it) - 1;
 1931|  5.79k|                continue;
 1932|  5.79k|            }
 1933|       |
 1934|  36.1k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 1.00k, False: 35.1k]
  ------------------
 1935|  1.00k|                SCN_UNLIKELY_ATTR
 1936|  1.00k|                return on_error("Unexpected literal character in source");
 1937|  1.00k|            }
 1938|  35.1k|            get_ctx().advance_to(ranges::next(it));
 1939|  35.1k|        }
 1940|   106k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1971|  5.75k|    {
 1972|  5.75k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  5.75k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  5.75k|        on_visit_scan_arg(
 1976|  5.75k|            impl::default_arg_reader<context_type>{
 1977|  5.75k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  5.75k|            arg);
 1979|  5.75k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  57.8k|{
 1681|  57.8k|    auto arg = ctx.arg(id);
 1682|  57.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  57.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.41k, False: 56.4k]
  |  |  ------------------
  ------------------
 1683|  1.41k|        handler.on_error("Failed to find argument with ID");
 1684|  1.41k|    }
 1685|  57.8k|    return arg;
 1686|  57.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  88.1k|    {
 1797|  88.1k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.62k, False: 85.5k]
  |  |  ------------------
  ------------------
 1798|  2.62k|            on_error("Invalid out-of-range argument ID");
 1799|  2.62k|            return;
 1800|  2.62k|        }
 1801|       |
 1802|  85.5k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  85.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100, False: 85.4k]
  |  |  ------------------
  ------------------
 1803|    100|            return on_error("Argument with this ID has already been scanned");
 1804|    100|        }
 1805|       |
 1806|  85.4k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  85.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 85.4k, False: 0]
  |  |  ------------------
  ------------------
 1807|  85.4k|            visited_args_lower64 |= (1ull << id);
 1808|  85.4k|            return;
 1809|  85.4k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  85.5k|    {
 1782|  85.5k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  85.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 85.5k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  85.5k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  85.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 85.5k, False: 0]
  |  |  ------------------
  ------------------
 1788|  85.5k|            return (visited_args_lower64 >> id) & 1ull;
 1789|  85.5k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  85.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  5.75k|    {
 1956|  5.75k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 134, False: 5.61k]
  |  Branch (1956:23): [True: 0, False: 5.61k]
  ------------------
 1957|    134|            SCN_UNLIKELY_ATTR
 1958|    134|            return;
 1959|    134|        }
 1960|       |
 1961|  5.61k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  5.61k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.87k, False: 1.74k]
  |  |  ------------------
  ------------------
 1963|  3.87k|            on_error(r.error());
 1964|  3.87k|        }
 1965|  1.74k|        else {
 1966|  1.74k|            get_ctx().advance_to(*r);
 1967|  1.74k|        }
 1968|  5.61k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  72.0k|    {
 1766|  72.0k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  72.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72.0k, False: 0]
  |  |  ------------------
  ------------------
 1767|  72.0k|            error = err;
 1768|  72.0k|        }
 1769|  72.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  55.2k|    {
 1944|  55.2k|        return parse_ctx.next_arg_id();
 1945|  55.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1947|  2.73k|    {
 1948|  2.73k|        parse_ctx.check_arg_id(id);
 1949|  2.73k|        return id;
 1950|  2.73k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  52.1k|    {
 1985|  52.1k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  52.1k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  52.1k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 52.1k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  52.1k|        auto specs = detail::format_specs{};
 1998|  52.1k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  52.1k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  52.1k|            arg.type()};
 2001|       |
 2002|  52.1k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  52.1k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.45k, False: 49.6k]
  |  Branch (2003:29): [True: 550, False: 49.1k]
  ------------------
 2004|  3.00k|            SCN_UNLIKELY_ATTR
 2005|  3.00k|            on_error("Missing '}' in format string");
 2006|  3.00k|            return parse_ctx.begin();
 2007|  3.00k|        }
 2008|  49.1k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  49.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 230, False: 48.9k]
  |  |  ------------------
  ------------------
 2009|    230|            return parse_ctx.begin();
 2010|    230|        }
 2011|  48.9k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  48.9k|        on_visit_scan_arg(
 2014|  48.9k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  48.9k|                                           get_ctx().locale()},
 2016|  48.9k|            arg);
 2017|  48.9k|        return parse_ctx.begin();
 2018|  49.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  52.1k|    {
 1701|  52.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  48.9k|    {
 1956|  48.9k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 96, False: 48.8k]
  |  Branch (1956:23): [True: 0, False: 48.8k]
  ------------------
 1957|     96|            SCN_UNLIKELY_ATTR
 1958|     96|            return;
 1959|     96|        }
 1960|       |
 1961|  48.8k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  48.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  48.8k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  48.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.9k, False: 4.83k]
  |  |  ------------------
  ------------------
 1963|  43.9k|            on_error(r.error());
 1964|  43.9k|        }
 1965|  4.83k|        else {
 1966|  4.83k|            get_ctx().advance_to(*r);
 1967|  4.83k|        }
 1968|  48.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   416k|    {
 1761|   416k|        SCN_UNLIKELY_ATTR
 1762|   416k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   416k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   268k|    {
 1729|   268k|        {
 1730|   268k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 268k]
  ------------------
 1731|   268k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 268k]
  ------------------
 1732|   268k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   268k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   268k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 182k, False: 85.4k]
  ------------------
 1736|   182k|                return on_error("Argument list not exhausted");
 1737|   182k|            }
 1738|   268k|        }
 1739|       |
 1740|  85.4k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 85.4k, False: 0]
  ------------------
 1741|  85.4k|            return;
 1742|  85.4k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   268k|    {
 1777|   268k|        return error;
 1778|   268k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|   474k|    {
 1773|   474k|        return static_cast<bool>(error);
 1774|   474k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  89.4k|{
 2053|  89.4k|    const auto argcount = args.size();
 2054|  89.4k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 89.3k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|  89.3k|    auto handler = format_handler<true, CharT>{
 2060|  89.3k|        ranges::subrange<const CharT*>{source.data(),
 2061|  89.3k|                                       source.data() + source.size()},
 2062|  89.3k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  89.3k|    static_cast<    \
  |  |  929|  89.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  89.3k|    static_cast<    \
  |  |  929|  89.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  89.3k|    return vscan_parse_format_string(format, handler);
 2064|  89.4k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   178k|{
 2053|   178k|    const auto argcount = args.size();
 2054|   178k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 178k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   178k|    auto handler = format_handler<true, CharT>{
 2060|   178k|        ranges::subrange<const CharT*>{source.data(),
 2061|   178k|                                       source.data() + source.size()},
 2062|   178k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   178k|    static_cast<    \
  |  |  929|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   178k|    static_cast<    \
  |  |  929|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   178k|    return vscan_parse_format_string(format, handler);
 2064|   178k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   178k|{
 1625|   178k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 167k, False: 11.2k]
  ------------------
 1626|   167k|        return false;
 1627|   167k|    }
 1628|  11.2k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 11.0k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   178k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   178k|    {
 1903|   178k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   178k|    {
 1853|   178k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   178k|{
 2038|   178k|    const auto beg = handler.get_ctx().begin();
 2039|   178k|    detail::parse_format_string<false>(format, handler);
 2040|   178k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 177k, False: 1.09k]
  |  |  ------------------
  ------------------
 2041|   177k|        return unexpected(handler.error);
 2042|   177k|    }
 2043|  1.09k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   178k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|   910k|    {
 2022|   910k|        return ctx.get();
 2023|   910k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|   910k|    {
 1857|   910k|        return contiguous_ctx;
 1858|   910k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  94.5k|    {
 1907|   256k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 223k, False: 32.9k]
  ------------------
 1908|   223k|            auto it = get_ctx().begin();
 1909|   223k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 432, False: 222k]
  ------------------
 1910|    432|                SCN_UNLIKELY_ATTR
 1911|    432|                return on_error("Unexpected end of source");
 1912|    432|            }
 1913|       |
 1914|   222k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   222k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   222k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 60.6k, False: 162k]
  ------------------
 1917|  60.6k|                SCN_UNLIKELY_ATTR
 1918|  60.6k|                return on_error("Invalid encoding in format string");
 1919|  60.6k|            }
 1920|   162k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 2.97k, False: 159k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  2.97k|                get_ctx().advance_to(
 1923|  2.97k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  2.97k|                auto begin_it = impl::read_while_classic_space(
 1926|  2.97k|                    detail::make_string_view_from_pointers(
 1927|  2.97k|                        detail::to_address(after_space_it),
 1928|  2.97k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  2.97k|                begin = detail::to_address(begin_it) - 1;
 1931|  2.97k|                continue;
 1932|  2.97k|            }
 1933|       |
 1934|   159k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 540, False: 158k]
  ------------------
 1935|    540|                SCN_UNLIKELY_ATTR
 1936|    540|                return on_error("Unexpected literal character in source");
 1937|    540|            }
 1938|   158k|            get_ctx().advance_to(ranges::next(it));
 1939|   158k|        }
 1940|  94.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1971|  4.36k|    {
 1972|  4.36k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  4.36k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  4.36k|        on_visit_scan_arg(
 1976|  4.36k|            impl::default_arg_reader<context_type>{
 1977|  4.36k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  4.36k|            arg);
 1979|  4.36k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  30.2k|{
 1681|  30.2k|    auto arg = ctx.arg(id);
 1682|  30.2k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.20k, False: 29.0k]
  |  |  ------------------
  ------------------
 1683|  1.20k|        handler.on_error("Failed to find argument with ID");
 1684|  1.20k|    }
 1685|  30.2k|    return arg;
 1686|  30.2k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  4.36k|    {
 1956|  4.36k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 112, False: 4.24k]
  |  Branch (1956:23): [True: 0, False: 4.24k]
  ------------------
 1957|    112|            SCN_UNLIKELY_ATTR
 1958|    112|            return;
 1959|    112|        }
 1960|       |
 1961|  4.24k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  4.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  4.24k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  4.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.03k, False: 1.21k]
  |  |  ------------------
  ------------------
 1963|  3.03k|            on_error(r.error());
 1964|  3.03k|        }
 1965|  1.21k|        else {
 1966|  1.21k|            get_ctx().advance_to(*r);
 1967|  1.21k|        }
 1968|  4.24k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|  30.0k|    {
 1944|  30.0k|        return parse_ctx.next_arg_id();
 1945|  30.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1947|    270|    {
 1948|    270|        parse_ctx.check_arg_id(id);
 1949|    270|        return id;
 1950|    270|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  25.8k|    {
 1985|  25.8k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  25.8k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  25.8k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 25.8k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  25.8k|        auto specs = detail::format_specs{};
 1998|  25.8k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  25.8k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  25.8k|            arg.type()};
 2001|       |
 2002|  25.8k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  25.8k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.05k, False: 23.8k]
  |  Branch (2003:29): [True: 352, False: 23.4k]
  ------------------
 2004|  2.40k|            SCN_UNLIKELY_ATTR
 2005|  2.40k|            on_error("Missing '}' in format string");
 2006|  2.40k|            return parse_ctx.begin();
 2007|  2.40k|        }
 2008|  23.4k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 234, False: 23.2k]
  |  |  ------------------
  ------------------
 2009|    234|            return parse_ctx.begin();
 2010|    234|        }
 2011|  23.2k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  23.2k|        on_visit_scan_arg(
 2014|  23.2k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  23.2k|                                           get_ctx().locale()},
 2016|  23.2k|            arg);
 2017|  23.2k|        return parse_ctx.begin();
 2018|  23.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  25.8k|    {
 1701|  25.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  23.2k|    {
 1956|  23.2k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 142, False: 23.1k]
  |  Branch (1956:23): [True: 0, False: 23.1k]
  ------------------
 1957|    142|            SCN_UNLIKELY_ATTR
 1958|    142|            return;
 1959|    142|        }
 1960|       |
 1961|  23.1k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  23.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  23.1k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.1k, False: 1.96k]
  |  |  ------------------
  ------------------
 1963|  21.1k|            on_error(r.error());
 1964|  21.1k|        }
 1965|  1.96k|        else {
 1966|  1.96k|            get_ctx().advance_to(*r);
 1967|  1.96k|        }
 1968|  23.1k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  4.96k|{
 1363|  4.96k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  4.96k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  4.96k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  4.96k|            std::u32string tmp;
 1368|  4.96k|            transcode_to_string_impl_to32(src, tmp);
 1369|  4.96k|            return transcode_to_string_impl_32to16<false>(
 1370|  4.96k|                std::u32string_view{tmp}, dest);
 1371|  4.96k|        }
 1372|  4.96k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  4.96k|            return transcode_to_string_impl_to32(src, dest);
 1374|  4.96k|        }
 1375|  4.96k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  4.96k|{
 1256|  4.96k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  4.96k|    auto it = src.begin();
 1259|   708k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 703k, False: 4.96k]
  ------------------
 1260|   703k|        auto res = get_next_code_point(
 1261|   703k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   703k|                                                                 src.end()));
 1263|   703k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   703k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.6k, False: 685k]
  |  |  ------------------
  ------------------
 1264|  17.6k|            dest.push_back(DestCharT{0xfffd});
 1265|  17.6k|        }
 1266|   685k|        else {
 1267|   685k|            dest.push_back(res.value);
 1268|   685k|        }
 1269|   703k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   703k|    }
 1271|  4.96k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   820k|{
 1169|   820k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   820k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   820k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   820k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   820k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   820k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 804k]
  |  |  ------------------
  ------------------
 1173|  15.7k|        return {get_start_for_next_code_point(input),
 1174|  15.7k|                detail::invalid_code_point};
 1175|  15.7k|    }
 1176|   804k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   804k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 968, False: 803k]
  |  |  ------------------
  ------------------
 1177|    968|        return {input.end(), detail::invalid_code_point};
 1178|    968|    }
 1179|       |
 1180|   803k|    return {input.begin() + len,
 1181|   803k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   804k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  15.7k|{
 1155|  15.7k|    auto it = input.begin();
 1156|  57.5k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 56.2k, False: 1.32k]
  ------------------
 1157|  56.2k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 14.4k, False: 41.8k]
  ------------------
 1158|  14.4k|            break;
 1159|  14.4k|        }
 1160|  56.2k|    }
 1161|  15.7k|    return it;
 1162|  15.7k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  42.8k|    {
  809|  42.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  42.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  42.8k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  15.5k|    {
  823|  15.5k|        return a.m_code == b.m_code;
  824|  15.5k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  42.4k|    {
 2931|  42.4k|        SCN_UNLIKELY_ATTR
 2932|  42.4k|        m_msg = msg;
 2933|  42.4k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  71.9k|    {
 2936|  71.9k|        return m_msg == nullptr;
 2937|  71.9k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|    972|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4989|   375k|    {
 4990|   375k|        on_charset_range(cp, cp + 1);
 4991|   375k|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4994|   378k|    {
 4995|   378k|        if (end <= 127) {
  ------------------
  |  Branch (4995:13): [True: 200k, False: 177k]
  ------------------
 4996|   200k|            return;
 4997|   200k|        }
 4998|       |
 4999|  32.9M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4999:25): [True: 32.9M, False: 176k]
  ------------------
 5000|       |            // TODO: check for overlap
 5001|  32.9M|            if (elem.first == end) {
  ------------------
  |  Branch (5001:17): [True: 678, False: 32.9M]
  ------------------
 5002|    678|                elem.first = begin;
 5003|    678|                return;
 5004|    678|            }
 5005|       |
 5006|  32.9M|            if (elem.second == begin) {
  ------------------
  |  Branch (5006:17): [True: 1.13k, False: 32.9M]
  ------------------
 5007|  1.13k|                elem.second = end;
 5008|  1.13k|                return;
 5009|  1.13k|            }
 5010|  32.9M|        }
 5011|       |
 5012|   176k|        extra_ranges.push_back(std::make_pair(begin, end));
 5013|   176k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5016|    426|    {
 5017|       |        // no-op
 5018|    426|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5031|   383k|    {
 5032|   383k|        return static_cast<bool>(err);
 5033|   383k|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5349|  1.26k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  35.4k|{
  458|  35.4k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  35.4k|        static_cast<unsigned char>(ch))];
  460|  35.4k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   273k|{
  469|   273k|    return static_cast<unsigned char>(ch) <= 127;
  470|   273k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  1.18k|{
  474|  1.18k|#if WCHAR_MIN < 0
  475|  1.18k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 1.17k, False: 12]
  |  Branch (475:23): [True: 1.17k, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  1.18k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|   295k|{
  483|   295k|    return cp <= 127;
  484|   295k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  27.9k|{
  539|  27.9k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  27.9k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  44.9k|{
  784|  44.9k|    return e != eof_error::good;
  785|  44.9k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    174|{
  798|    174|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    174|    return scan_error{scan_error::end_of_range, "EOF"};
  800|    174|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    672|{
  845|    672|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    672|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    672|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    672|    return parse_error::eof;
  847|    672|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.59k|{
  854|  3.59k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.59k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.59k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 72, False: 3.52k]
  ------------------
  859|     72|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     72|    }
  861|       |
  862|  3.52k|    return scan_error{code, msg};
  863|  3.59k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.59k|{
  868|  3.59k|    return [code, msg](parse_error err) {
  869|  3.59k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.59k|    };
  871|  3.59k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   360k|{
 1200|       |    // Pattern_White_Space property
 1201|   360k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 168k, False: 191k]
  |  Branch (1201:27): [True: 9.53k, False: 159k]
  ------------------
 1202|   360k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 4.25k, False: 346k]
  ------------------
 1203|   360k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 5.53k, False: 341k]
  ------------------
 1204|   360k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 1.63k, False: 339k]
  ------------------
 1205|   360k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 3.78k, False: 335k]
  ------------------
 1206|   360k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 1.30k, False: 334k]
  ------------------
 1207|   360k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 90, False: 334k]
  ------------------
 1208|   360k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  3.55k|{
 2220|  3.55k|    unsigned char running_diff{0};
 2221|  12.4k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 8.86k, False: 3.55k]
  ------------------
 2222|  8.86k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  8.86k|    }
 2224|  3.55k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 3.55k]
  |  Branch (2224:33): [True: 0, False: 3.55k]
  ------------------
 2225|  3.55k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|   117k|{
 2303|   117k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 22.1k, False: 94.9k]
  ------------------
 2304|   117k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 222, False: 21.9k]
  ------------------
 2305|  22.1k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 72, False: 21.8k]
  ------------------
 2306|  22.1k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 72, False: 21.8k]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|  22.1k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 11.0k, False: 10.7k]
  |  Branch (2308:27): [True: 2.39k, False: 8.66k]
  |  Branch (2308:43): [True: 804, False: 1.59k]
  ------------------
 2309|  22.1k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 8.66k, False: 12.3k]
  |  Branch (2309:27): [True: 296, False: 8.37k]
  ------------------
 2310|  22.1k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 8.35k, False: 12.3k]
  |  Branch (2310:27): [True: 108, False: 8.24k]
  ------------------
 2311|  22.1k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 8.24k, False: 12.3k]
  |  Branch (2311:27): [True: 204, False: 8.04k]
  ------------------
 2312|  22.1k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 8.04k, False: 12.3k]
  |  Branch (2312:27): [True: 212, False: 7.83k]
  ------------------
 2313|  22.1k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 7.83k, False: 12.3k]
  |  Branch (2313:27): [True: 74, False: 7.75k]
  ------------------
 2314|  22.1k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 7.75k, False: 12.3k]
  |  Branch (2314:27): [True: 78, False: 7.67k]
  ------------------
 2315|  22.1k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 7.47k, False: 12.5k]
  |  Branch (2315:28): [True: 234, False: 7.23k]
  ------------------
 2316|  22.1k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 7.23k, False: 12.5k]
  |  Branch (2316:28): [True: 446, False: 6.79k]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|  22.1k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 6.94k, False: 12.3k]
  |  Branch (2318:28): [True: 84, False: 6.86k]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|  22.1k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 6.86k, False: 12.3k]
  |  Branch (2320:28): [True: 72, False: 6.79k]
  ------------------
 2321|  2.97k|        return 2;
 2322|  2.97k|    }
 2323|   114k|    return 1;
 2324|   117k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|  68.0k|{
 2328|  68.0k|    return calculate_text_width_for_fmt_v10(cp);
 2329|  68.0k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|    248|{
 2343|    248|    return calculate_text_width_for_fmt_v10(cp);
 2344|    248|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  14.5k|{
 3123|  14.5k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  14.5k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  6.56k|{
 3127|  6.56k|#if WCHAR_MIN < 0
 3128|  6.56k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 6.56k, False: 0]
  |  Branch (3128:20): [True: 6.56k, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  6.56k|        return char_to_int(static_cast<char>(ch));
 3133|  6.56k|    }
 3134|      0|    return 255;
 3135|  6.56k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4270|  15.7k|{
 4271|  15.7k|    std::regex_constants::syntax_option_type result{};
 4272|  15.7k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4272:9): [True: 348, False: 15.4k]
  ------------------
 4273|    348|#if SCN_HAS_STD_REGEX_MULTILINE
 4274|    348|        result |= std::regex_constants::multiline;
 4275|       |#else
 4276|       |        return unexpected_scan_error(
 4277|       |            scan_error::invalid_format_string,
 4278|       |            "/m flag for regex isn't supported by regex backend");
 4279|       |#endif
 4280|    348|    }
 4281|  15.7k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4281:9): [True: 0, False: 15.7k]
  ------------------
 4282|  15.7k|        detail::regex_flags::none) {
 4283|      0|        return unexpected_scan_error(
 4284|      0|            scan_error::invalid_format_string,
 4285|      0|            "/s flag for regex isn't supported by regex backend");
 4286|      0|    }
 4287|  15.7k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4287:9): [True: 1.78k, False: 13.9k]
  ------------------
 4288|  1.78k|        result |= std::regex_constants::icase;
 4289|  1.78k|    }
 4290|  15.7k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4290:9): [True: 12, False: 15.7k]
  ------------------
 4291|     12|        result |= std::regex_constants::nosubs;
 4292|     12|    }
 4293|  15.7k|    return result;
 4294|  15.7k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4637|  1.03k|{
 4638|  1.03k|    std::string result{pattern};
 4639|  8.96k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4639:24): [True: 7.93k, False: 1.03k]
  ------------------
 4640|  7.93k|        result.replace(n, 2, "/");
 4641|  7.93k|        ++n;
 4642|  7.93k|    }
 4643|  1.03k|    return result;
 4644|  1.03k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4646|    186|{
 4647|    186|    std::wstring result{pattern};
 4648|  1.07k|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4648:24): [True: 888, False: 186]
  ------------------
 4649|    888|        result.replace(n, 2, L"/");
 4650|    888|        ++n;
 4651|    888|    }
 4652|    186|    return result;
 4653|    186|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  7.82k|{
 6008|  7.82k|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 2.05k, False: 5.76k]
  ------------------
 6009|  2.05k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 932, False: 1.12k]
  ------------------
 6010|    932|            return {scan_error::invalid_scanned_value,
 6011|    932|                    "Scanned value too narrow, width did not exceed what "
 6012|    932|                    "was specified in the format string"};
 6013|    932|        }
 6014|  2.05k|    }
 6015|  6.89k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 1.67k, False: 5.21k]
  ------------------
 6016|  1.67k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 96, False: 1.58k]
  ------------------
 6017|     96|            return {scan_error::invalid_scanned_value,
 6018|     96|                    "Scanned value too wide, width exceeded the specified "
 6019|     96|                    "precision"};
 6020|     96|        }
 6021|  1.67k|    }
 6022|  6.79k|    return {};
 6023|  6.89k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  43.7k|    {
  304|  43.7k|        ranges::advance(x, n);
  305|  43.7k|        return x;
  306|  43.7k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  43.7k|    {
  268|  43.7k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  43.7k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  79.9k|    {
  151|  79.9k|        i += n;
  152|  79.9k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  52.7k|    {
  108|  52.7k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  52.7k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  52.7k|    {
   87|  52.7k|        return s - i;
   88|  52.7k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  5.91k|    {
  304|  5.91k|        ranges::advance(x, n);
  305|  5.91k|        return x;
  306|  5.91k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  5.91k|    {
  268|  5.91k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  5.91k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  5.91k|    {
  151|  5.91k|        i += n;
  152|  5.91k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.26k|    {
  108|  3.26k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.26k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.26k|    {
   87|  3.26k|        return s - i;
   88|  3.26k|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5623|  5.40k|    {
 5624|  5.40k|        reader_error_handler eh{};
 5625|  5.40k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  5.40k|            detail::check_code_point_type_specs(specs, eh);
 5627|  5.40k|        }
 5628|  5.40k|        else {
 5629|  5.40k|            detail::check_char_type_specs(specs, eh);
 5630|  5.40k|        }
 5631|  5.40k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.88k, False: 528]
  |  |  ------------------
  ------------------
 5632|  4.88k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  4.88k|        }
 5634|    528|        return {};
 5635|  5.40k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  24.9k|    {
  763|  24.9k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  24.9k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  3.76k|    {
  754|  3.76k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  7.82k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.82k|              cvref<T> obj = *get<T>(fn);
  745|  7.82k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.82k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.82k|              }
  748|  7.82k|              else {
  749|  7.82k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.82k|              }
  751|  7.82k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  7.82k|    {
  684|  7.82k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.82k|            return static_cast<T*>(s.m_cp);
  686|  7.82k|        }
  687|  7.82k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.82k|            return static_cast<T*>(s.m_p);
  689|  7.82k|        }
  690|  7.82k|        else {
  691|  7.82k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.82k|        }
  693|  7.82k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  3.76k|        {
  662|  3.76k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|   665k|    {
  763|   665k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   665k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   665k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  18.2k|    {
  754|  18.2k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|   309k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   309k|              cvref<T> obj = *get<T>(fn);
  745|   309k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   309k|                  obj(static_cast<decltype(args)>(args)...);
  747|   309k|              }
  748|   309k|              else {
  749|   309k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   309k|              }
  751|   309k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   309k|    {
  684|   309k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   309k|            return static_cast<T*>(s.m_cp);
  686|   309k|        }
  687|   309k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   309k|            return static_cast<T*>(s.m_p);
  689|   309k|        }
  690|   309k|        else {
  691|   309k|            return reinterpret_cast<T*>(s.m_fp);
  692|   309k|        }
  693|   309k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  18.2k|        {
  662|  18.2k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5618|  1.62k|    {
 5619|  1.62k|        return false;
 5620|  1.62k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.59k|    return [code, msg](parse_error err) {
  869|  3.59k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.59k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|     64|    {
 1780|     64|        auto stdloc = loc.get<std::locale>();
 1781|     64|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     64|        grouping = numpunct.grouping();
 1783|     64|        thousands_sep =
 1784|     64|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 64]
  ------------------
 1785|     64|        decimal_point = numpunct.decimal_point();
 1786|     64|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|     84|{
 1717|     84|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 84, False: 0]
  ------------------
 1718|     84|        return std::use_facet<Facet>(stdloc);
 1719|     84|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     84|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  23.2k|{
 2349|  23.2k|    size_t count{0};
 2350|  23.2k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  23.2k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  23.2k|    });
 2353|  23.2k|    return count;
 2354|  23.2k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  23.2k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  23.2k|    auto it = input.begin();
 1448|  63.8k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 40.6k, False: 23.2k]
  ------------------
 1449|  40.6k|        auto res = get_next_code_point(
 1450|  40.6k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  40.6k|        cb(res.value);
 1452|  40.6k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  40.6k|    }
 1454|  23.2k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  48.8k|    {
  763|  48.8k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  48.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  48.8k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  23.2k|    {
  754|  23.2k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  40.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.6k|              cvref<T> obj = *get<T>(fn);
  745|  40.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  40.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.6k|              }
  748|  40.6k|              else {
  749|  40.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.6k|              }
  751|  40.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  40.6k|    {
  684|  40.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  40.6k|            return static_cast<T*>(s.m_cp);
  686|  40.6k|        }
  687|  40.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  40.6k|            return static_cast<T*>(s.m_p);
  689|  40.6k|        }
  690|  40.6k|        else {
  691|  40.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  40.6k|        }
  693|  40.6k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  40.6k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  40.6k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  40.6k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  23.2k|        {
  662|  23.2k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  3.62k|    {
 1582|  3.62k|        return m_view;
 1583|  3.62k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  3.83k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2420|  3.51k|    {
 2421|  3.51k|        return m_multibyte_left;
 2422|  3.51k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|   110k|    {
 2426|   110k|        return *m_current;
 2427|   110k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|   117k|    {
 2435|   117k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|   117k|        _increment_current();
 2437|   117k|        return *this;
 2438|   117k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|   117k|    {
 2668|   117k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 65.1k, False: 52.5k]
  ------------------
 2669|  65.1k|            auto cplen = _get_cp_length_at_current();
 2670|  65.1k|            m_multibyte_left = cplen - 1;
 2671|  65.1k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  65.1k|        }
 2673|  52.5k|        else {
 2674|  52.5k|            --m_multibyte_left;
 2675|  52.5k|        }
 2676|       |
 2677|   117k|        ++m_current;
 2678|   117k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|  65.1k|    {
 2639|  65.1k|        return static_cast<difference_type>(
 2640|  65.1k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  65.1k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|  65.1k|    {
 2645|  65.1k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  65.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 544, False: 64.5k]
  |  |  ------------------
  ------------------
 2646|    544|            return 0;
 2647|    544|        }
 2648|       |
 2649|  64.5k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 45.3k, False: 19.2k]
  ------------------
 2650|  45.3k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  45.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  45.3k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  45.3k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  45.3k|        }
 2654|       |
 2655|  19.2k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  19.2k|                                           cplen);
 2657|  19.2k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  19.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 18.9k]
  |  |  ------------------
  ------------------
 2658|    332|            return 0;
 2659|    332|        }
 2660|       |
 2661|  18.9k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  18.9k|        return static_cast<difference_type>(
 2663|  18.9k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  19.2k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  21.3k|{
 1857|  21.3k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  21.3k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  21.3k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  21.3k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 440, False: 20.9k]
  ------------------
 1862|    440|            return unexpected(eof_error::eof);
 1863|    440|        }
 1864|       |
 1865|  20.9k|        return ranges::next(range.begin(), count);
 1866|  21.3k|    }
 1867|  21.3k|    else {
 1868|  21.3k|        auto it = range.begin();
 1869|  21.3k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  21.3k|            return ranges::next(it, count);
 1871|  21.3k|        }
 1872|       |
 1873|  21.3k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  21.3k|            if (it == range.end()) {
 1875|  21.3k|                return unexpected(eof_error::eof);
 1876|  21.3k|            }
 1877|  21.3k|        }
 1878|       |
 1879|  21.3k|        return it;
 1880|  21.3k|    }
 1881|  21.3k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  67.5k|    {
 2531|  67.5k|        return !(a == b);
 2532|  67.5k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  75.0k|    {
 2523|  75.0k|        return a.m_current == b.m_current;
 2524|  75.0k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2429|  8.29k|    {
 2430|  8.29k|        return *m_current;
 2431|  8.29k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.16k|    {
  268|  1.16k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.16k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.16k|    {
  161|  1.16k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.16k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.16k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.16k|        else {
  169|  1.16k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.16k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.16k|        }
  173|  1.16k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1889|  24.0k|    {
 1890|  24.0k|        return !codepoint.empty();
 1891|  24.0k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1682|  1.53k|{
 1683|  1.53k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.53k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.53k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.53k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  1.53k|    }
 1688|  1.53k|    else {
 1689|  1.53k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  1.53k|    }
 1691|  1.53k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EELPv0EEEOT_:
 1536|  1.53k|    {
 1537|  1.53k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  1.53k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1620|  1.53k|    {
 1621|  1.53k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.53k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.53k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.53k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.53k|            m_storage.reset();
 1627|  1.53k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.53k|        }
 1629|  1.53k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.53k|                                          std::basic_string<CharT>>) {
 1631|  1.53k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.53k|            m_view = string_view_type{*m_storage};
 1633|  1.53k|        }
 1634|  1.53k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  1.53k|                                          typename detail::basic_scan_buffer<
 1636|  1.53k|                                              value_t>::forward_iterator> &&
 1637|  1.53k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  1.53k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.53k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.53k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.53k|                             detail::to_address(end_seg.end()))) {
 1642|  1.53k|                auto& str = m_storage.emplace();
 1643|  1.53k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.53k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.53k|                m_view = string_view_type{str};
 1646|  1.53k|                return;
 1647|  1.53k|            }
 1648|       |
 1649|  1.53k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.53k|                                                            end_seg.data());
 1651|  1.53k|            m_storage.reset();
 1652|  1.53k|        }
 1653|  1.53k|        else {
 1654|  1.53k|            auto& str = m_storage.emplace();
 1655|  1.53k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|  1.53k|                str.reserve(range.size());
 1657|  1.53k|            }
 1658|  1.53k|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|  1.53k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.53k|                          std::back_inserter(str));
 1661|  1.53k|            }
 1662|  1.53k|            else {
 1663|  1.53k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.53k|                     ++it) {
 1665|  1.53k|                    str.push_back(*it);
 1666|  1.53k|                }
 1667|  1.53k|            }
 1668|  1.53k|            m_view = string_view_type{str};
 1669|  1.53k|        }
 1670|  1.53k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2381|  19.5k|    {
 2382|  19.5k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|   116k|    {
 2413|   116k|        return m_current;
 2414|   116k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  8.15k|    {
 2832|  8.15k|        return take_width_view{r, n};
 2833|  8.15k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2800|  8.15k|    {
 2801|  8.15k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|  8.15k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5662|    280|    {
 5663|    280|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 248, False: 32]
  ------------------
 5664|    280|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 32]
  ------------------
 5665|    248|            return read_default(range, value, loc);
 5666|    248|        }
 5667|       |
 5668|     32|        reader_impl_for_int<CharT> reader{};
 5669|     32|        signed char tmp_value{};
 5670|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     32|        value = static_cast<signed char>(value);
 5672|     32|        return ret;
 5673|    280|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5644|    248|    {
 5645|    248|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    248|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    248|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    248|            return code_unit_reader<char>{}.read(range, value);
 5648|    248|        }
 5649|    248|        else {
 5650|    248|            SCN_UNUSED(range);
 5651|    248|            SCN_EXPECT(false);
 5652|    248|            SCN_UNREACHABLE;
 5653|    248|        }
 5654|    248|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5563|    248|    {
 5564|    248|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 248]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    248|        ch = *range.begin();
 5566|    248|        return it;
 5567|    248|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  1.85k|{
 1846|  1.85k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.85k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  1.85k|    return ranges::next(range.begin());
 1851|  1.85k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  1.85k|{
  950|  1.85k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.85k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.85k|    return eof_error::good;
  954|  1.85k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  1.85k|{
  944|  1.85k|    return is_range_eof(r.begin(), r.end());
  945|  1.85k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  25.9k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  25.9k|    {
  937|  25.9k|        return begin == end;
  938|  25.9k|    }
  939|  25.9k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   110k|        {
 2770|   110k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 3.51k, False: 107k]
  |  Branch (2770:39): [True: 814, False: 2.70k]
  ------------------
 2771|   110k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 984, False: 109k]
  ------------------
 2772|   110k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|  61.9k|    {
 2816|  61.9k|        return sentinel<true>{m_base.get().end()};
 2817|  61.9k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|   100k|    {
 2717|   100k|        return view;
 2718|   100k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|  61.9k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.88k|    {
  296|  1.88k|        ++x;
  297|  1.88k|        return x;
  298|  1.88k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|  19.5k|    {
 2810|  19.5k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  19.5k|                                      m_count};
 2812|  19.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|     32|    {
 3539|     32|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     32|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     32|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 32]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     32|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 32]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     32|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3565|     32|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    802|{
 3326|    802|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|    802|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    802|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    802|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    802|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 802]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    802|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    802|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    802|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    802|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    802|        parse_integer_base_prefix(
 3331|    802|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    802|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 802]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    802|    else {
 3343|    802|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 802]
  |  Branch (3343:13): [True: 802, False: 0]
  ------------------
 3344|    802|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 802, False: 0]
  ------------------
 3345|    802|            digits_begin_it = base_prefix_begin_it;
 3346|    802|        }
 3347|    802|    }
 3348|       |
 3349|    802|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 802, False: 0]
  ------------------
 3350|    802|        sign = sign_type::plus_sign;
 3351|    802|    }
 3352|    802|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    802|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    802|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|  1.06k|{
 3141|  1.06k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.06k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.06k, False: 0]
  ------------------
 3143|  1.06k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.06k, False: 0]
  ------------------
 3144|  1.06k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.06k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.06k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|  1.06k|{
 2272|  1.06k|    auto it = read_code_unit(range);
 2273|  1.06k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.06k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  2.13k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.13k, False: 1.06k]
  ------------------
 2278|  2.13k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 2.13k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  2.13k|    }
 2282|       |
 2283|  1.06k|    return unexpected(parse_error::error);
 2284|  1.06k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    802|{
 3293|    802|    switch (base) {
 3294|     14|        case 2:
  ------------------
  |  Branch (3294:9): [True: 14, False: 788]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     14|                    false};
 3298|       |
 3299|     14|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 14, False: 788]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     14|            bool zero_parsed = false;
 3302|     14|            auto it = apply_opt(
 3303|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     14|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    260|        case 16:
  ------------------
  |  Branch (3307:9): [True: 260, False: 542]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    260|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    260|                    false};
 3311|       |
 3312|     20|        case 0:
  ------------------
  |  Branch (3312:9): [True: 20, False: 782]
  ------------------
 3313|       |            // detect base
 3314|     20|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    494|        default:
  ------------------
  |  Branch (3316:9): [True: 494, False: 308]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    494|            return {range.begin(), base, false};
 3319|    802|    }
 3320|    802|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    288|{
 2291|    288|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 288, False: 0]
  ------------------
 2292|    288|        return range.begin();
 2293|    288|    }
 2294|      0|    return *result;
 2295|    288|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     34|{
 3244|     34|    return read_matching_string_classic_nocase(range, "0b");
 3245|     34|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  1.12k|{
 2231|  1.12k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.12k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.12k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.12k|        if (range.size() < str.size()) {
 2236|  1.12k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.12k|        }
 2238|  1.12k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.12k|            return unexpected(parse_error::error);
 2240|  1.12k|        }
 2241|  1.12k|        return ranges::next(range.begin(), str.size());
 2242|  1.12k|    }
 2243|  1.12k|    else {
 2244|  1.12k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.12k|            if (ch < 'A' || ch > 'Z') {
 2246|  1.12k|                return ch;
 2247|  1.12k|            }
 2248|  1.12k|            return static_cast<char_type>(ch +
 2249|  1.12k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.12k|        };
 2251|       |
 2252|  1.12k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 948]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    174|    }                                                  \
  |  |  |  | 3671|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    948|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    948|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    948|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    948|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    948|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 948, False: 0]
  |  |  ------------------
  ------------------
 2257|    948|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    948|                    return ascii_tolower(a) ==
 2259|    948|                           static_cast<detail::char_t<Range>>(b);
 2260|    948|                }))) {
 2261|    948|            return unexpected(parse_error::error);
 2262|    948|        }
 2263|       |
 2264|      0|        return it;
 2265|    948|    }
 2266|  1.12k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  3.55k|{
 1857|  3.55k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  3.55k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  3.55k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  3.55k|        if (sz < count) {
 1862|  3.55k|            return unexpected(eof_error::eof);
 1863|  3.55k|        }
 1864|       |
 1865|  3.55k|        return ranges::next(range.begin(), count);
 1866|  3.55k|    }
 1867|  3.55k|    else {
 1868|  3.55k|        auto it = range.begin();
 1869|  3.55k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 3.55k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  13.1k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 9.75k, False: 3.35k]
  ------------------
 1874|  9.75k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 196, False: 9.55k]
  ------------------
 1875|    196|                return unexpected(eof_error::eof);
 1876|    196|            }
 1877|  9.75k|        }
 1878|       |
 1879|  3.35k|        return it;
 1880|  3.55k|    }
 1881|  3.55k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  3.55k|{
 1095|  3.55k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  3.55k|        return r.size();
 1097|  3.55k|    }
 1098|  3.55k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  3.55k|                           ranges::const_iterator_t<Range>,
 1100|  3.55k|                           typename detail::basic_scan_buffer<
 1101|  3.55k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  3.55k|        if constexpr (ranges::common_range<Range>) {
 1103|  3.55k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  3.55k|        }
 1105|  3.55k|        else {
 1106|  3.55k|            if (r.begin().stores_parent()) {
 1107|  3.55k|                return static_cast<size_t>(
 1108|  3.55k|                    r.begin().parent()->chars_available() -
 1109|  3.55k|                    r.begin().position());
 1110|  3.55k|            }
 1111|  3.55k|            return r.begin().contiguous_segment().size();
 1112|  3.55k|        }
 1113|  3.55k|    }
 1114|  3.55k|    else {
 1115|  3.55k|        return 0;
 1116|  3.55k|    }
 1117|  3.55k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2244|    948|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    948|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 42, False: 906]
  |  Branch (2245:29): [True: 906, False: 0]
  ------------------
 2246|    948|                return ch;
 2247|    948|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    948|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     34|{
 2146|     34|    auto it = read_code_unit(range);
 2147|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2152|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     34|        return unexpected(parse_error::error);
 2154|     34|    }
 2155|       |
 2156|      0|    return *it;
 2157|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     34|{
 1846|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     34|    return ranges::next(range.begin());
 1851|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  24.1k|{
  944|  24.1k|    return is_range_eof(r.begin(), r.end());
  945|  24.1k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    280|{
 3251|    280|    return read_matching_string_classic_nocase(range, "0x");
 3252|    280|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     20|{
 3274|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 20]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 20]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     20|    {
 3281|     20|        bool zero_parsed{false};
 3282|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 20]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     20|    }
 3286|     20|    return {range.begin(), 10, false};
 3287|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    778|{
 3360|    778|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    778|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    778|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    778|            return unexpected_scan_error(
 3365|    778|                scan_error::invalid_scanned_value,
 3366|    778|                "Failed to parse integer: No digits found");
 3367|    778|        }
 3368|    778|        return range.end();
 3369|    778|    }
 3370|    778|    else {
 3371|    778|        return read_while1_code_unit(range,
 3372|    778|                                     [&](char_type ch) noexcept {
 3373|    778|                                         return char_to_int(ch) < base;
 3374|    778|                                     })
 3375|    778|            .transform_error(map_parse_error_to_scan_error(
 3376|    778|                scan_error::invalid_scanned_value,
 3377|    778|                "Failed to parse integer: No digits found"));
 3378|    778|    }
 3379|    778|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|  1.04k|{
 1996|  1.04k|    auto it = read_while_code_unit(range, pred);
 1997|  1.04k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.04k, False: 0]
  ------------------
 1998|  1.04k|        return unexpected(parse_error::error);
 1999|  1.04k|    }
 2000|      0|    return it;
 2001|  1.04k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|  1.04k|{
 1976|  1.04k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.04k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|  1.04k|{
 1957|  1.04k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.04k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.04k|    }
 1960|  1.04k|    else {
 1961|  1.04k|        auto first = range.begin();
 1962|  1.04k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.04k, False: 0]
  ------------------
 1963|  1.04k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.04k, False: 0]
  ------------------
 1964|  1.04k|                return first;
 1965|  1.04k|            }
 1966|  1.04k|        }
 1967|      0|        return first;
 1968|  1.04k|    }
 1969|  1.04k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  59.8k|        {
 2781|  59.8k|            return !(y == x);
 2782|  59.8k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_:
  753|    778|    {
  754|    778|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|    778|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    778|              cvref<T> obj = *get<T>(fn);
  745|    778|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    778|                  obj(static_cast<decltype(args)>(args)...);
  747|    778|              }
  748|    778|              else {
  749|    778|                  return obj(static_cast<decltype(args)>(args)...);
  750|    778|              }
  751|    778|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|    778|    {
  684|    778|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    778|            return static_cast<T*>(s.m_cp);
  686|    778|        }
  687|    778|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    778|            return static_cast<T*>(s.m_p);
  689|    778|        }
  690|    778|        else {
  691|    778|            return reinterpret_cast<T*>(s.m_fp);
  692|    778|        }
  693|    778|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3372|    778|                                     [&](char_type ch) noexcept {
 3373|    778|                                         return char_to_int(ch) < base;
 3374|    778|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_LPv0EEEPSP_:
  661|    778|        {
  662|    778|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     24|{
 3390|     24|    std::basic_string<CharT> output;
 3391|     24|    std::string thsep_indices;
 3392|     24|    auto it = range.begin();
 3393|     24|    bool digit_matched = false;
 3394|     24|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 24, False: 0]
  ------------------
 3395|     24|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 24]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     24|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 24, False: 0]
  ------------------
 3400|     24|            break;
 3401|     24|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     24|    }
 3407|     24|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3408|     24|        return unexpected_scan_error(
 3409|     24|            scan_error::invalid_scanned_value,
 3410|     24|            "Failed to parse integer: No digits found");
 3411|     24|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     24|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|   113k|    {
 2417|   113k|        return m_count;
 2418|   113k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5662|    242|    {
 5663|    242|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 220, False: 22]
  ------------------
 5664|    242|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 22]
  ------------------
 5665|    220|            return read_default(range, value, loc);
 5666|    220|        }
 5667|       |
 5668|     22|        reader_impl_for_int<CharT> reader{};
 5669|     22|        signed char tmp_value{};
 5670|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     22|        value = static_cast<signed char>(value);
 5672|     22|        return ret;
 5673|    242|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5644|    846|    {
 5645|    846|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    846|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    846|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    846|            return code_unit_reader<char>{}.read(range, value);
 5648|    846|        }
 5649|    846|        else {
 5650|    846|            SCN_UNUSED(range);
 5651|    846|            SCN_EXPECT(false);
 5652|    846|            SCN_UNREACHABLE;
 5653|    846|        }
 5654|    846|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5563|    846|    {
 5564|    846|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    846|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    846|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    846|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    846|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 846]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    846|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    846|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    846|        ch = *range.begin();
 5566|    846|        return it;
 5567|    846|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.16k|{
 1846|  6.16k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.16k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.16k|    return ranges::next(range.begin());
 1851|  6.16k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  21.0k|{
  950|  21.0k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  21.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.0k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  21.0k|    return eof_error::good;
  954|  21.0k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   300k|{
  944|   300k|    return is_range_eof(r.begin(), r.end());
  945|   300k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   346k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   346k|    {
  937|   346k|        return begin == end;
  938|   346k|    }
  939|   346k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  41.3k|    {
  296|  41.3k|        ++x;
  297|  41.3k|        return x;
  298|  41.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|     22|    {
 3539|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     22|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 22]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 22]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3565|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|     22|                    parse_integer_digits_without_thsep(
 3567|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|     22|                        prefix_result.parsed_base));
 3569|       |
 3570|     22|            auto buf = make_contiguous_buffer(
 3571|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|     22|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.63k|{
 3326|  2.63k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  2.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.63k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.63k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.63k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.63k|        parse_integer_base_prefix(
 3331|  2.63k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.63k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.63k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.63k|    else {
 3343|  2.63k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.63k]
  ------------------
 3344|  2.63k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.63k, False: 0]
  ------------------
 3345|  2.63k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.63k|        }
 3347|  2.63k|    }
 3348|       |
 3349|  2.63k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.63k, False: 0]
  ------------------
 3350|  2.63k|        sign = sign_type::plus_sign;
 3351|  2.63k|    }
 3352|  2.63k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.63k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.63k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.51k|{
 3141|  3.51k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.51k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.51k, False: 0]
  ------------------
 3143|  3.51k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.51k, False: 0]
  ------------------
 3144|  3.51k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.51k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.51k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.51k|{
 2272|  3.51k|    auto it = read_code_unit(range);
 2273|  3.51k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.51k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.03k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.03k, False: 3.51k]
  ------------------
 2278|  7.03k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.03k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.03k|    }
 2282|       |
 2283|  3.51k|    return unexpected(parse_error::error);
 2284|  3.51k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.63k|{
 3293|  2.63k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 2.62k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     30|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 30, False: 2.60k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     30|            bool zero_parsed = false;
 3302|     30|            auto it = apply_opt(
 3303|     30|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     30|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    862|        case 16:
  ------------------
  |  Branch (3307:9): [True: 862, False: 1.77k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    862|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    862|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 2.62k]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.72k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.72k, False: 910]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.72k|            return {range.begin(), base, false};
 3319|  2.63k|    }
 3320|  2.63k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    898|{
 2291|    898|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 898, False: 0]
  ------------------
 2292|    898|        return range.begin();
 2293|    898|    }
 2294|      0|    return *result;
 2295|    898|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.56k|{
 2231|  3.56k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.56k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.56k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.56k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 3.55k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  3.55k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 3.55k, False: 0]
  ------------------
 2239|  3.55k|            return unexpected(parse_error::error);
 2240|  3.55k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|  3.55k|    }
 2243|  3.56k|    else {
 2244|  3.56k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.56k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.56k|                return ch;
 2247|  3.56k|            }
 2248|  3.56k|            return static_cast<char_type>(ch +
 2249|  3.56k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.56k|        };
 2251|       |
 2252|  3.56k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  3.56k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.56k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.56k|        if (SCN_UNLIKELY(!std::equal(
 2257|  3.56k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.56k|                    return ascii_tolower(a) ==
 2259|  3.56k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.56k|                }))) {
 2261|  3.56k|            return unexpected(parse_error::error);
 2262|  3.56k|        }
 2263|       |
 2264|  3.56k|        return it;
 2265|  3.56k|    }
 2266|  3.56k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     42|{
 3258|     42|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 42]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     42|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 42]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     42|    return unexpected(parse_error::error);
 3268|     42|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.80k|{
 2146|  1.80k|    auto it = read_code_unit(range);
 2147|  1.80k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.80k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.80k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.80k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.80k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.80k|        return unexpected(parse_error::error);
 2154|  1.80k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.80k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    874|{
 3251|    874|    return read_matching_string_classic_nocase(range, "0x");
 3252|    874|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.60k|{
 3360|  2.60k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.60k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.60k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.60k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.60k|        return range.end();
 3369|  2.60k|    }
 3370|  2.60k|    else {
 3371|  2.60k|        return read_while1_code_unit(range,
 3372|  2.60k|                                     [&](char_type ch) noexcept {
 3373|  2.60k|                                         return char_to_int(ch) < base;
 3374|  2.60k|                                     })
 3375|  2.60k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.60k|                scan_error::invalid_scanned_value,
 3377|  2.60k|                "Failed to parse integer: No digits found"));
 3378|  2.60k|    }
 3379|  2.60k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     24|{
 3390|     24|    std::basic_string<CharT> output;
 3391|     24|    std::string thsep_indices;
 3392|     24|    auto it = range.begin();
 3393|     24|    bool digit_matched = false;
 3394|     24|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 24, False: 0]
  ------------------
 3395|     24|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 24]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     24|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 24, False: 0]
  ------------------
 3400|     24|            break;
 3401|     24|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     24|    }
 3407|     24|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3408|     24|        return unexpected_scan_error(
 3409|     24|            scan_error::invalid_scanned_value,
 3410|     24|            "Failed to parse integer: No digits found");
 3411|     24|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     24|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  13.0k|{
 1683|  13.0k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  13.0k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  13.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  13.0k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  13.0k|    }
 1688|  13.0k|    else {
 1689|  13.0k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  13.0k|    }
 1691|  13.0k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  13.0k|    {
 1490|  13.0k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  58.4k|    {
 1503|  58.4k|        return sv;
 1504|  58.4k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|  1.89k|{
 5951|  1.89k|    using char_type = detail::char_t<Range>;
 5952|  1.89k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  1.89k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 1.64k, False: 250]
  ------------------
 5955|  1.64k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|  1.64k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|  1.64k|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 1.50k, False: 140]
  ------------------
 5959|  1.50k|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|  1.50k|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 142, False: 1.36k]
  ------------------
 5962|    142|                auto prefix_width =
 5963|    142|                    static_cast<std::ptrdiff_t>(
 5964|    142|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|    142|                    ranges::distance(range.begin(), it);
 5966|    142|                return result_type{it, prefix_width};
 5967|    142|            }
 5968|  1.36k|            return result_type{it, 0};
 5969|  1.50k|        }
 5970|       |
 5971|    140|        auto max_width_view = take_width(range, max_width);
 5972|    140|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    140|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 140, False: 0]
  ------------------
 5975|    140|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    140|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    140|    }
 5979|       |
 5980|    250|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    250|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 132, False: 118]
  ------------------
 5982|    132|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|    132|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 52, False: 80]
  ------------------
 5985|     52|            auto prefix_width =
 5986|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|     52|            return result_type{it, prefix_width};
 5989|     52|        }
 5990|     80|        return result_type{it, 0};
 5991|    132|    }
 5992|       |
 5993|    118|    auto max_width_view = take_width(range, max_width);
 5994|    118|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    118|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 118, False: 0]
  ------------------
 5997|    118|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    118|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    118|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.68k|{
 1976|  1.68k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.68k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  1.90k|{
 1957|  1.90k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.90k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.90k|    }
 1960|  1.90k|    else {
 1961|  1.90k|        auto first = range.begin();
 1962|  1.90k|        for (; first != range.end(); ++first) {
 1963|  1.90k|            if (pred(*first)) {
 1964|  1.90k|                return first;
 1965|  1.90k|            }
 1966|  1.90k|        }
 1967|  1.90k|        return first;
 1968|  1.90k|    }
 1969|  1.90k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_:
  753|  1.64k|    {
  754|  1.64k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  2.06k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.06k|              cvref<T> obj = *get<T>(fn);
  745|  2.06k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.06k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.06k|              }
  748|  2.06k|              else {
  749|  2.06k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.06k|              }
  751|  2.06k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  2.06k|    {
  684|  2.06k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.06k|            return static_cast<T*>(s.m_cp);
  686|  2.06k|        }
  687|  2.06k|        else if constexpr (std::is_object_v<T>) {
  688|  2.06k|            return static_cast<T*>(s.m_p);
  689|  2.06k|        }
  690|  2.06k|        else {
  691|  2.06k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.06k|        }
  693|  2.06k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  2.06k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSH_:
  666|  1.64k|        {
  667|  1.64k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    296|{
 1976|    296|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    296|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    542|{
 1957|    542|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    542|        return std::find_if(range.begin(), range.end(), pred);
 1959|    542|    }
 1960|    542|    else {
 1961|    542|        auto first = range.begin();
 1962|  8.66k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 8.39k, False: 268]
  ------------------
 1963|  8.39k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 274, False: 8.11k]
  ------------------
 1964|    274|                return first;
 1965|    274|            }
 1966|  8.39k|        }
 1967|    268|        return first;
 1968|    542|    }
 1969|    542|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|    132|{
 2037|    132|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    132|    auto it = range.begin();
 2040|    168|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 168, False: 0]
  ------------------
 2041|    168|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    168|                                           needle.size());
 2043|    168|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 6, False: 162]
  ------------------
 2044|      6|            return it;
 2045|      6|        }
 2046|    162|        static_assert(
 2047|    162|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    162|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 126, False: 36]
  ------------------
 2049|    126|            return it;
 2050|    126|        }
 2051|     36|        it = *r;
 2052|     36|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|    118|{
 2037|    118|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    118|    auto it = range.begin();
 2040|    168|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 138, False: 30]
  ------------------
 2041|    138|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    138|                                           needle.size());
 2043|    138|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 22, False: 116]
  ------------------
 2044|     22|            return it;
 2045|     22|        }
 2046|    116|        static_assert(
 2047|    116|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    116|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 66, False: 50]
  ------------------
 2049|     66|            return it;
 2050|     66|        }
 2051|     50|        it = *r;
 2052|     50|    }
 2053|     30|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     30|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     30|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|     30|    return it;
 2055|     30|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    454|{
 2951|    454|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 454]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    454|    return read_while_classic_space(range);
 2962|    454|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    454|{
 2117|    454|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    454|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    454|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    454|        auto buf = make_contiguous_buffer(range);
 2121|    454|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    454|        return ranges::next(range.begin(),
 2123|    454|                            ranges::distance(buf.view().begin(), it));
 2124|    454|    }
 2125|    454|    else {
 2126|    454|        auto it = range.begin();
 2127|       |
 2128|    454|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    454|            auto seg = get_contiguous_beginning(range);
 2130|    454|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    454|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 454]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|    454|            ranges::advance(it, seg.size());
 2135|    454|        }
 2136|       |
 2137|    454|        return read_while_code_point(
 2138|    454|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    454|    }
 2140|    454|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  1.16k|{
 1039|  1.16k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  1.16k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  1.16k|        return r;
 1042|  1.16k|    }
 1043|  1.16k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  1.16k|                           ranges::const_iterator_t<Range>,
 1045|  1.16k|                           typename detail::basic_scan_buffer<
 1046|  1.16k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  1.16k|        if constexpr (ranges::common_range<Range>) {
 1048|  1.16k|            auto seg = r.begin().contiguous_segment();
 1049|  1.16k|            auto dist =
 1050|  1.16k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  1.16k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  1.16k|        }
 1053|  1.16k|        else {
 1054|  1.16k|            return r.begin().contiguous_segment();
 1055|  1.16k|        }
 1056|  1.16k|    }
 1057|  1.16k|    else {
 1058|  1.16k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.16k|    }
 1060|  1.16k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|    652|{
 2082|    652|    return read_until_code_point(range, std::not_fn(pred));
 2083|    652|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|    802|{
 2061|    802|    auto it = range.begin();
 2062|  15.3k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 15.1k, False: 244]
  ------------------
 2063|  15.1k|        const auto val =
 2064|  15.1k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  15.1k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  15.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.2k, False: 832]
  |  |  ------------------
  ------------------
 2066|  14.2k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  14.2k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  14.2k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 558, False: 13.7k]
  ------------------
 2069|    558|                return it;
 2070|    558|            }
 2071|  14.2k|        }
 2072|  14.5k|        it = val.iterator;
 2073|  14.5k|    }
 2074|       |
 2075|    244|    return it;
 2076|    802|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  24.0k|{
 1899|  24.0k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  24.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  24.0k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  24.0k|    auto it = range.begin();
 1903|  24.0k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  24.0k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  24.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.13k, False: 21.9k]
  |  |  ------------------
  ------------------
 1906|  2.13k|        ++it;
 1907|  2.13k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  2.13k|        return {it, {}};
 1909|  2.13k|    }
 1910|       |
 1911|  21.9k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 18.9k, False: 2.95k]
  ------------------
 1912|  18.9k|        ++it;
 1913|  18.9k|        return {it, string_type(1, *range.begin())};
 1914|  18.9k|    }
 1915|       |
 1916|  2.95k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  2.95k|    return {it, string_type{range.begin(), it}};
 1918|  21.9k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  2.13k|{
 1155|  2.13k|    auto it = input.begin();
 1156|  3.43k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 3.30k, False: 132]
  ------------------
 1157|  3.30k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 2.00k, False: 1.30k]
  ------------------
 1158|  2.00k|            break;
 1159|  2.00k|        }
 1160|  3.30k|    }
 1161|  2.13k|    return it;
 1162|  2.13k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  2.95k|    {
  283|  2.95k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  2.95k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  2.95k|    {
  227|  2.95k|        constexpr iter_difference_t<I> zero{0};
  228|  2.95k|        iter_difference_t<I> counter{0};
  229|       |
  230|  2.95k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 2.95k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  2.95k|        else {
  237|  10.0k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 7.22k, False: 2.86k]
  |  Branch (237:34): [True: 7.13k, False: 90]
  ------------------
  238|  7.13k|                ++i;
  239|  7.13k|                ++counter;
  240|  7.13k|            }
  241|  2.95k|        }
  242|       |
  243|  2.95k|        return counter;
  244|  2.95k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    454|    {
  754|    454|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  1.22k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.22k|              cvref<T> obj = *get<T>(fn);
  745|  1.22k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.22k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.22k|              }
  748|  1.22k|              else {
  749|  1.22k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.22k|              }
  751|  1.22k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  1.22k|    {
  684|  1.22k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.22k|            return static_cast<T*>(s.m_cp);
  686|  1.22k|        }
  687|  1.22k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.22k|            return static_cast<T*>(s.m_p);
  689|  1.22k|        }
  690|  1.22k|        else {
  691|  1.22k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.22k|        }
  693|  1.22k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  1.22k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    454|        {
  662|    454|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  6.75k|{
 2951|  6.75k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 6.59k, False: 158]
  ------------------
 2952|  6.59k|        auto it = read_while_classic_space(range);
 2953|  6.59k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  6.59k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.59k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  6.59k|        return it;
 2959|  6.59k|    }
 2960|       |
 2961|    158|    return read_while_classic_space(range);
 2962|  6.75k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  12.5k|{
 2117|  12.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  12.5k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  12.5k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  12.5k|        auto buf = make_contiguous_buffer(range);
 2121|  12.5k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  12.5k|        return ranges::next(range.begin(),
 2123|  12.5k|                            ranges::distance(buf.view().begin(), it));
 2124|  12.5k|    }
 2125|  12.5k|    else {
 2126|  12.5k|        auto it = range.begin();
 2127|       |
 2128|  12.5k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  12.5k|            auto seg = get_contiguous_beginning(range);
 2130|  12.5k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  12.5k|                seg_it != seg.end()) {
 2132|  12.5k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  12.5k|            }
 2134|  12.5k|            ranges::advance(it, seg.size());
 2135|  12.5k|        }
 2136|       |
 2137|  12.5k|        return read_while_code_point(
 2138|  12.5k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  12.5k|    }
 2140|  12.5k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  15.2k|{
 1683|  15.2k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  15.2k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  15.2k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  15.2k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  15.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  15.2k|    }
 1688|  15.2k|    else {
 1689|  15.2k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  15.2k|    }
 1691|  15.2k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  15.2k|    {
 1490|  15.2k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  10.8k|    {
 3040|  10.8k|        reader_error_handler eh{};
 3041|  10.8k|        get_derived().check_specs_impl(specs, eh);
 3042|  10.8k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.78k, False: 1.10k]
  |  |  ------------------
  ------------------
 3043|  9.78k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.78k|        }
 3045|  1.10k|        return {};
 3046|  10.8k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  10.8k|    {
 3051|  10.8k|        return static_cast<Derived&>(*this);
 3052|  10.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  10.8k|    {
 3485|  10.8k|        detail::check_int_type_specs(specs, eh);
 3486|  10.8k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  2.35k|    {
 3035|  2.35k|        return true;
 3036|  2.35k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    268|    {
 3539|    268|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    268|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    268|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 268]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    268|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 268]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    268|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    268|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 256, False: 12]
  |  |  ------------------
  ------------------
 3565|    256|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    256|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 256, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    256|    }                                                  \
  |  |  |  | 3671|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     12|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     12|            localized_number_formatting_options<CharT>{loc};
 3586|     12|#endif
 3587|       |
 3588|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    254|    {
 3539|    254|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    254|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    254|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 254]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    254|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 254]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    254|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    254|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 242, False: 12]
  |  |  ------------------
  ------------------
 3565|    242|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    242|                    parse_integer_digits_without_thsep(
 3567|    242|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    242|                        prefix_result.parsed_base));
 3569|       |
 3570|    242|            auto buf = make_contiguous_buffer(
 3571|    242|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    242|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 242, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    242|    }                                                  \
  |  |  |  | 3671|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    242|        }
 3580|       |
 3581|     12|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     12|            localized_number_formatting_options<CharT>{loc};
 3586|     12|#endif
 3587|       |
 3588|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    268|    {
 3539|    268|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    268|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    268|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 268]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    268|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 268]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    268|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    268|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 256, False: 12]
  |  |  ------------------
  ------------------
 3565|    256|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    256|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 256, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    256|    }                                                  \
  |  |  |  | 3671|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     12|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     12|            localized_number_formatting_options<CharT>{loc};
 3586|     12|#endif
 3587|       |
 3588|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    254|    {
 3539|    254|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    254|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    254|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 254]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    254|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 254]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    254|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    254|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 242, False: 12]
  |  |  ------------------
  ------------------
 3565|    242|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    242|                    parse_integer_digits_without_thsep(
 3567|    242|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    242|                        prefix_result.parsed_base));
 3569|       |
 3570|    242|            auto buf = make_contiguous_buffer(
 3571|    242|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    242|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 242, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    242|    }                                                  \
  |  |  |  | 3671|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    242|        }
 3580|       |
 3581|     12|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     12|            localized_number_formatting_options<CharT>{loc};
 3586|     12|#endif
 3587|       |
 3588|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    234|    {
 3539|    234|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    234|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 234]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    234|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    234|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    234|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 234]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    234|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 234]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    234|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    234|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 234, False: 0]
  |  |  ------------------
  ------------------
 3565|    234|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    234|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 234, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    234|    }                                                  \
  |  |  |  | 3671|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    850|    {
 3539|    850|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    850|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    850|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    850|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 850]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    850|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    850|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    850|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    850|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 850]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    850|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 850]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    850|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    850|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 850, False: 0]
  |  |  ------------------
  ------------------
 3565|    850|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    850|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    850|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    850|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 850]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    850|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    850|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    850|                    parse_integer_digits_without_thsep(
 3567|    850|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    850|                        prefix_result.parsed_base));
 3569|       |
 3570|    850|            auto buf = make_contiguous_buffer(
 3571|    850|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    850|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    850|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    850|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    850|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 850, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    850|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    850|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    850|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    850|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    850|    }                                                  \
  |  |  |  | 3671|    850|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    850|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  5.44k|    {
 3040|  5.44k|        reader_error_handler eh{};
 3041|  5.44k|        get_derived().check_specs_impl(specs, eh);
 3042|  5.44k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.89k, False: 552]
  |  |  ------------------
  ------------------
 3043|  4.89k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.89k|        }
 3045|    552|        return {};
 3046|  5.44k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  5.44k|    {
 3051|  5.44k|        return static_cast<Derived&>(*this);
 3052|  5.44k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  5.44k|    {
 4145|  5.44k|        detail::check_float_type_specs(specs, eh);
 4146|  5.44k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  1.17k|    {
 3035|  1.17k|        return true;
 3036|  1.17k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|    522|    {
 4217|    522|        unsigned options{};
 4218|    522|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 16, False: 506]
  ------------------
 4219|     16|            options |= float_reader_base::allow_thsep;
 4220|     16|        }
 4221|       |
 4222|    522|        SCN_GCC_COMPAT_PUSH
 4223|    522|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    522|        switch (specs.type) {
 4226|     30|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 30, False: 492]
  ------------------
 4227|     30|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 4, False: 518]
  ------------------
 4230|      4|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     14|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 14, False: 508]
  ------------------
 4233|     14|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      8|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 8, False: 514]
  ------------------
 4236|      8|                return options | float_reader_base::allow_scientific |
 4237|      8|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    466|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 466, False: 56]
  ------------------
 4240|    466|                return options | float_reader_base::allow_scientific |
 4241|    466|                       float_reader_base::allow_fixed |
 4242|    466|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 522]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    522|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    522|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    522|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|    522|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  1.14k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  2.29k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|    860|    {
 4057|    860|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 860, False: 0]
  ------------------
 4058|    860|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 860, False: 0]
  ------------------
 4059|    860|            return;
 4060|    860|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|    744|    {
 1587|    744|        return m_storage.has_value();
 1588|    744|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|    372|    {
 1592|    372|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    372|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    372|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    372|        return *m_storage;
 1594|    372|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    264|    {
  763|    264|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    264|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    264|    {
 3705|    264|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 264]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    264|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    264|        auto it = sign_result.first;
 3708|    264|        m_sign = sign_result.second;
 3709|       |
 3710|    264|        auto digits_begin = it;
 3711|    264|        auto r = ranges::subrange{it, range.end()};
 3712|    264|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    264|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    264|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    264|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    264|                SCN_TRY_ASSIGN(
 3717|    264|                    it,
 3718|    264|                    do_read_source_impl(
 3719|    264|                        r,
 3720|    264|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    264|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    264|            }
 3723|    264|            else {
 3724|    264|                auto cb = [&](const auto& rr)
 3725|    264|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    264|                    auto res = read_all(rr);
 3727|    264|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    264|                        return unexpected_scan_error(
 3729|    264|                            scan_error::invalid_scanned_value,
 3730|    264|                            "Invalid float value");
 3731|    264|                    }
 3732|    264|                    return res;
 3733|    264|                };
 3734|    264|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    264|            }
 3736|    264|        }
 3737|    264|        else {
 3738|    264|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 264, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    264|    }                                                  \
  |  | 3671|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    264|    {
 4000|    264|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    264|        const bool allowed_nonhex =
 4002|    264|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    264|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    264|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 264, False: 0]
  |  Branch (4005:45): [True: 0, False: 264]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    264|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 264]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    264|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 264, False: 0]
  |  Branch (4014:45): [True: 0, False: 264]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    264|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 264]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    264|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 246, False: 18]
  |  Branch (4021:28): [True: 6, False: 240]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      6|            auto it = range.begin();
 4025|       |
 4026|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 6]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      6|            else {
 4031|      6|                m_kind = float_kind::hex_without_prefix;
 4032|      6|            }
 4033|       |
 4034|      6|            return read_hex(ranges::subrange{it, range.end()});
 4035|      6|        }
 4036|    258|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 18, False: 240]
  |  Branch (4036:29): [True: 18, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     18|            m_kind = float_kind::generic;
 4040|     18|            return read_regular_float(range);
 4041|     18|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    240|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 240]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    240|        m_kind = float_kind::generic;
 4052|    240|        return read_regular(range);
 4053|    240|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    264|    {
 3811|    264|        auto it = range.begin();
 3812|    264|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 264, False: 0]
  ------------------
 3813|    264|            return unexpected(r.error());
 3814|    264|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    264|    {
 3834|    264|        auto it = range.begin();
 3835|    264|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 264, False: 0]
  ------------------
 3836|    264|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    264|                scan_error::invalid_scanned_value,
 3838|    264|                "Invalid floating-point NaN value"));
 3839|    264|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    246|    {
 3804|    246|        return read_matching_string_classic_nocase(range, "0x");
 3805|    246|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      6|    {
 3904|      6|        auto it = range.begin();
 3905|       |
 3906|      6|        std::ptrdiff_t digits_count = 0;
 3907|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3909|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      6|                scan_error::invalid_scanned_value,
 3911|      6|                "Invalid hexadecimal floating-point value"));
 3912|      6|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      6|    {
 3789|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      6|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      6|        return read_while1_code_unit(
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      6|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    258|    {
 3944|    258|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    258|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 244, False: 14]
  |  Branch (3945:50): [True: 0, False: 244]
  ------------------
 3946|       |
 3947|    258|        auto it = ranges::begin(range);
 3948|    258|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    258|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    258|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 258, False: 0]
  |  |  ------------------
  ------------------
 3952|    258|            return r.transform_error(
 3953|    258|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    258|                                              "Invalid floating-point value"));
 3955|    258|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    258|    {
 3774|    258|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 258]
  |  |  |  Branch (859:45): [True: 0, False: 258]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    258|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    258|        return read_while1_code_unit(
 3783|    258|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    258|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|    258|    {
  754|    258|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|    258|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    258|              cvref<T> obj = *get<T>(fn);
  745|    258|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    258|                  obj(static_cast<decltype(args)>(args)...);
  747|    258|              }
  748|    258|              else {
  749|    258|                  return obj(static_cast<decltype(args)>(args)...);
  750|    258|              }
  751|    258|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    258|    {
  684|    258|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    258|            return static_cast<T*>(s.m_cp);
  686|    258|        }
  687|    258|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    258|            return static_cast<T*>(s.m_p);
  689|    258|        }
  690|    258|        else {
  691|    258|            return reinterpret_cast<T*>(s.m_fp);
  692|    258|        }
  693|    258|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3783|    258|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|    258|        {
  662|    258|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    256|    {
 3665|    256|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    256|        return read_source_impl(range);
 3671|    256|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    884|    {
  763|    884|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    884|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    884|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    884|    {
 3705|    884|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    884|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    884|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    884|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 884]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    884|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    884|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    884|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    884|        auto it = sign_result.first;
 3708|    884|        m_sign = sign_result.second;
 3709|       |
 3710|    884|        auto digits_begin = it;
 3711|    884|        auto r = ranges::subrange{it, range.end()};
 3712|    884|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    884|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    884|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 884]
  |  |  |  Branch (859:45): [True: 0, False: 884]
  |  |  |  Branch (859:45): [True: 0, False: 884]
  |  |  ------------------
  ------------------
 3715|    884|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    884|            else {
 3724|    884|                auto cb = [&](const auto& rr)
 3725|    884|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    884|                    auto res = read_all(rr);
 3727|    884|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    884|                        return unexpected_scan_error(
 3729|    884|                            scan_error::invalid_scanned_value,
 3730|    884|                            "Invalid float value");
 3731|    884|                    }
 3732|    884|                    return res;
 3733|    884|                };
 3734|    884|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|    884|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    884|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 24, False: 860]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     24|    }                                                  \
  |  | 3671|    884|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    884|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    860|            }
 3736|    884|        }
 3737|    860|        else {
 3738|    860|            SCN_TRY_ASSIGN(
 3739|    860|                it,
 3740|    860|                do_read_source_impl(
 3741|    860|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|    860|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|    860|        }
 3744|       |
 3745|    860|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    860|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    860|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    860|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 860, False: 0]
  |  Branch (3747:48): [True: 860, False: 0]
  ------------------
 3748|    860|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 860, False: 0]
  ------------------
 3749|    860|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 860, False: 0]
  ------------------
 3750|    860|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    860|        }
 3752|       |
 3753|    860|        handle_separators();
 3754|       |
 3755|    860|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 860]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    860|        return it;
 3768|    860|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    884|    {
 3811|    884|        auto it = range.begin();
 3812|    884|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 884, False: 0]
  ------------------
 3813|    884|            return unexpected(r.error());
 3814|    884|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    884|    {
 3834|    884|        auto it = range.begin();
 3835|    884|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 884, False: 0]
  ------------------
 3836|    884|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    884|                scan_error::invalid_scanned_value,
 3838|    884|                "Invalid floating-point NaN value"));
 3839|    884|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    860|    {
 3804|    860|        return read_matching_string_classic_nocase(range, "0x");
 3805|    860|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     24|{
 1996|     24|    auto it = read_while_code_unit(range, pred);
 1997|     24|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 24, False: 0]
  ------------------
 1998|     24|        return unexpected(parse_error::error);
 1999|     24|    }
 2000|      0|    return it;
 2001|     24|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     24|    {
 3944|     24|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     24|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 8, False: 16]
  |  Branch (3945:50): [True: 4, False: 4]
  ------------------
 3946|       |
 3947|     24|        auto it = ranges::begin(range);
 3948|     24|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     24|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     24|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3952|     24|            return r.transform_error(
 3953|     24|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     24|                                              "Invalid floating-point value"));
 3955|     24|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     24|    {
 3774|     24|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24]
  |  |  |  Branch (859:45): [True: 0, False: 24]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     24|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     24|        return read_while1_code_unit(
 3783|     24|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     24|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|     24|    {
  754|     24|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|     24|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     24|              cvref<T> obj = *get<T>(fn);
  745|     24|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     24|                  obj(static_cast<decltype(args)>(args)...);
  747|     24|              }
  748|     24|              else {
  749|     24|                  return obj(static_cast<decltype(args)>(args)...);
  750|     24|              }
  751|     24|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     24|    {
  684|     24|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     24|            return static_cast<T*>(s.m_cp);
  686|     24|        }
  687|     24|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     24|            return static_cast<T*>(s.m_p);
  689|     24|        }
  690|     24|        else {
  691|     24|            return reinterpret_cast<T*>(s.m_fp);
  692|     24|        }
  693|     24|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|     24|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|     24|        {
  662|     24|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    884|    {
 4000|    884|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    884|        const bool allowed_nonhex =
 4002|    884|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    884|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    884|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 884, False: 0]
  |  Branch (4005:45): [True: 0, False: 884]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    884|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 884]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    884|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 884, False: 0]
  |  Branch (4014:45): [True: 0, False: 884]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    884|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 884]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    884|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 860, False: 24]
  |  Branch (4021:28): [True: 8, False: 852]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      8|            auto it = range.begin();
 4025|       |
 4026|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 8]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      8|            else {
 4031|      8|                m_kind = float_kind::hex_without_prefix;
 4032|      8|            }
 4033|       |
 4034|      8|            return read_hex(ranges::subrange{it, range.end()});
 4035|      8|        }
 4036|    876|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 24, False: 852]
  |  Branch (4036:29): [True: 24, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     24|            m_kind = float_kind::generic;
 4040|     24|            return read_regular_float(range);
 4041|     24|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    852|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    852|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 852]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    852|        m_kind = float_kind::generic;
 4052|    852|        return read_regular(range);
 4053|    852|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    860|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    860|                    auto res = read_all(rr);
 3727|    860|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    860|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 860]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    860|                    return res;
 3733|    860|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    860|{
 1839|    860|    return ranges::next(range.begin(), range.end());
 1840|    860|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    860|    {
  313|    860|        ranges::advance(x, bound);
  314|    860|        return x;
  315|    860|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    860|    {
  275|    860|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    860|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    920|    {
  190|    920|        i = std::move(bound);
  191|    920|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|    860|    {
 1577|    860|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    860|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    860|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|    860|    {
 1621|    860|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    860|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    860|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    860|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    860|            m_storage.reset();
 1627|    860|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    860|        }
 1629|    860|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    860|                                          std::basic_string<CharT>>) {
 1631|    860|            m_storage.emplace(SCN_FWD(range));
 1632|    860|            m_view = string_view_type{*m_storage};
 1633|    860|        }
 1634|    860|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    860|                                          typename detail::basic_scan_buffer<
 1636|    860|                                              value_t>::forward_iterator> &&
 1637|    860|                           ranges::common_range<Range>) {
 1638|    860|            auto beg_seg = range.begin().contiguous_segment();
 1639|    860|            auto end_seg = range.end().contiguous_segment();
 1640|    860|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    860|                             detail::to_address(end_seg.end()))) {
 1642|    860|                auto& str = m_storage.emplace();
 1643|    860|                str.reserve(range.end().position() - range.begin().position());
 1644|    860|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    860|                m_view = string_view_type{str};
 1646|    860|                return;
 1647|    860|            }
 1648|       |
 1649|    860|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    860|                                                            end_seg.data());
 1651|    860|            m_storage.reset();
 1652|    860|        }
 1653|    860|        else {
 1654|    860|            auto& str = m_storage.emplace();
 1655|    860|            if constexpr (ranges::sized_range<Range>) {
 1656|    860|                str.reserve(range.size());
 1657|    860|            }
 1658|    860|            if constexpr (ranges::common_range<Range>) {
 1659|    860|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    860|                          std::back_inserter(str));
 1661|    860|            }
 1662|    860|            else {
 1663|    860|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    860|                     ++it) {
 1665|    860|                    str.push_back(*it);
 1666|    860|                }
 1667|    860|            }
 1668|    860|            m_view = string_view_type{str};
 1669|    860|        }
 1670|    860|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    876|    {
 3665|    876|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 876]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    876|        return read_source_impl(range);
 3671|    876|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    860|    {
 3691|    860|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    860|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    860|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    860|        const std::ptrdiff_t sign_len =
 3694|    860|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 860]
  ------------------
 3695|       |
 3696|    860|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|    860|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    860|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    860|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    860|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 860, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    860|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    860|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    860|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    860|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    860|    }                                                  \
  |  |  |  | 3671|    860|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    860|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    264|    {
 4170|    264|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    264|#if !SCN_DISABLE_LOCALE
 4173|    264|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 256]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    256|#endif
 4182|       |
 4183|    256|        return read_impl<Range>(
 4184|    256|            range, rd,
 4185|    256|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    256|                return r.read_source(SCN_FWD(args)...);
 4187|    256|            },
 4188|    256|            value);
 4189|    264|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    264|    {
 4206|    264|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    264|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 264, False: 0]
  |  |  ------------------
  ------------------
 4208|    264|            return unexpected(r.error());
 4209|    264|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    256|    {
  754|    256|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    256|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    256|              cvref<T> obj = *get<T>(fn);
  745|    256|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    256|                  obj(static_cast<decltype(args)>(args)...);
  747|    256|              }
  748|    256|              else {
  749|    256|                  return obj(static_cast<decltype(args)>(args)...);
  750|    256|              }
  751|    256|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    256|    {
  684|    256|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    256|            return static_cast<T*>(s.m_cp);
  686|    256|        }
  687|    256|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    256|            return static_cast<T*>(s.m_p);
  689|    256|        }
  690|    256|        else {
  691|    256|            return reinterpret_cast<T*>(s.m_fp);
  692|    256|        }
  693|    256|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    256|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    256|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    256|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  661|    256|        {
  662|    256|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    258|    {
 4170|    258|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    258|#if !SCN_DISABLE_LOCALE
 4173|    258|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 250]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    250|#endif
 4182|       |
 4183|    250|        return read_impl<Range>(
 4184|    250|            range, rd,
 4185|    250|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    250|                return r.read_source(SCN_FWD(args)...);
 4187|    250|            },
 4188|    250|            value);
 4189|    258|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    884|    {
 4206|    884|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    884|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 860]
  |  |  ------------------
  ------------------
 4208|     24|            return unexpected(r.error());
 4209|     24|        }
 4210|       |
 4211|    860|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|    860|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    860|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    860|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    860|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 860, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    860|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    860|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    860|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    860|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    860|    }                                                  \
  |  |  |  | 3671|    860|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    860|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    250|    {
  754|    250|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    250|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    250|              cvref<T> obj = *get<T>(fn);
  745|    250|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    250|                  obj(static_cast<decltype(args)>(args)...);
  747|    250|              }
  748|    250|              else {
  749|    250|                  return obj(static_cast<decltype(args)>(args)...);
  750|    250|              }
  751|    250|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    250|    {
  684|    250|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    250|            return static_cast<T*>(s.m_cp);
  686|    250|        }
  687|    250|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    250|            return static_cast<T*>(s.m_p);
  689|    250|        }
  690|    250|        else {
  691|    250|            return reinterpret_cast<T*>(s.m_fp);
  692|    250|        }
  693|    250|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    250|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    250|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    250|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|    250|        {
  662|    250|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|  6.03k|{
 5809|  6.03k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  6.03k|        return reader_impl_for_bool<CharT>{};
 5811|  6.03k|    }
 5812|  6.03k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  6.03k|        return reader_impl_for_char<CharT>{};
 5814|  6.03k|    }
 5815|  6.03k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  6.03k|        return reader_impl_for_wchar<CharT>{};
 5817|  6.03k|    }
 5818|  6.03k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  6.03k|        return reader_impl_for_code_point<CharT>{};
 5820|  6.03k|    }
 5821|  6.03k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  6.03k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.03k|        return reader_impl_for_string<CharT>{};
 5824|  6.03k|    }
 5825|  6.03k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  6.03k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  6.03k|        return reader_impl_for_string<CharT>{};
 5828|  6.03k|    }
 5829|  6.03k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  6.03k|                       std::is_same_v<T, wregex_matches>) {
 5831|  6.03k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  6.03k|    }
 5833|  6.03k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  6.03k|        return reader_impl_for_voidptr<CharT>{};
 5835|  6.03k|    }
 5836|  6.03k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  6.03k|        return reader_impl_for_float<CharT>{};
 5838|  6.03k|    }
 5839|  6.03k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  6.03k|                       !std::is_same_v<T, wchar_t> &&
 5841|  6.03k|                       !std::is_same_v<T, char32_t> &&
 5842|  6.03k|                       !std::is_same_v<T, bool>) {
 5843|  6.03k|        return reader_impl_for_int<CharT>{};
 5844|  6.03k|    }
 5845|  6.03k|    else {
 5846|  6.03k|        return reader_impl_for_monostate<CharT>{};
 5847|  6.03k|    }
 5848|  6.03k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|  18.1k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  16.2k|    {
 3040|  16.2k|        reader_error_handler eh{};
 3041|  16.2k|        get_derived().check_specs_impl(specs, eh);
 3042|  16.2k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 15.8k]
  |  |  ------------------
  ------------------
 3043|    384|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    384|        }
 3045|  15.8k|        return {};
 3046|  16.2k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  16.2k|    {
 3051|  16.2k|        return static_cast<Derived&>(*this);
 3052|  16.2k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  16.2k|    {
 5210|  16.2k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  16.2k|        SCN_GCC_PUSH
 5213|  16.2k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  16.2k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  16.2k|        SCN_CLANG_PUSH
 5217|  16.2k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  16.2k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  16.2k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 378, False: 15.8k]
  ------------------
 5221|  1.41k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.41k, False: 14.8k]
  ------------------
 5222|  1.41k|                m_type = reader_type::word;
 5223|  1.41k|                break;
 5224|       |
 5225|    522|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 522, False: 15.7k]
  ------------------
 5226|    522|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 84, False: 438]
  ------------------
 5227|    522|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 216, False: 222]
  ------------------
 5228|    300|                    m_type = reader_type::custom_word;
 5229|    300|                }
 5230|    222|                else {
 5231|    222|                    m_type = reader_type::word;
 5232|    222|                }
 5233|    522|                break;
 5234|      0|            }
 5235|       |
 5236|    102|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 102, False: 16.1k]
  ------------------
 5237|    102|                m_type = reader_type::character;
 5238|    102|                break;
 5239|       |
 5240|  3.24k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 3.24k, False: 12.9k]
  ------------------
 5241|  3.24k|                m_type = reader_type::character_set;
 5242|  3.24k|                break;
 5243|       |
 5244|  9.53k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 9.53k, False: 6.69k]
  ------------------
 5245|  9.53k|                m_type = reader_type::regex;
 5246|  9.53k|                break;
 5247|       |
 5248|  1.03k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 1.03k, False: 15.1k]
  ------------------
 5249|  1.03k|                m_type = reader_type::regex_escaped;
 5250|  1.03k|                break;
 5251|  16.2k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  16.2k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|  21.3k|    {
 5259|  21.3k|        return m_type == reader_type::word;
 5260|  21.3k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  9.73k|{
 1132|  9.73k|    auto it = src.begin();
 1133|   459k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 451k, False: 7.94k]
  ------------------
 1134|   451k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   451k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.10k, False: 450k]
  ------------------
 1136|  1.10k|            return false;
 1137|  1.10k|        }
 1138|   450k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 228, False: 450k]
  ------------------
 1139|    228|            return false;
 1140|    228|        }
 1141|   450k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   450k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   450k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 456, False: 449k]
  ------------------
 1144|    456|            return false;
 1145|    456|        }
 1146|   449k|        it += len;
 1147|   449k|    }
 1148|  7.94k|    return true;
 1149|  9.73k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    372|{
 2993|    372|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    372|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 372, False: 0]
  ------------------
 2995|    372|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    372|    static_cast<    \
  |  |  929|    372|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    372|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    372|    }
 3001|    372|    else {
 3002|    372|        return transcode_impl(source.view(), dest);
 3003|    372|    }
 3004|       |
 3005|    372|    return {};
 3006|    372|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  3.23k|        {
 5103|  3.23k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 582, False: 2.65k]
  ------------------
 5104|    582|                return {};
 5105|    582|            }
 5106|       |
 5107|  2.65k|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|  2.65k|            auto it = detail::to_address(charset_string.begin());
 5109|  2.65k|            auto set = detail::parse_presentation_set(
 5110|  2.65k|                it, detail::to_address(charset_string.end()), nonascii);
 5111|  2.65k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  2.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.65k]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|  2.65k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  2.65k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|  2.65k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  2.65k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|  2.65k|            std::sort(nonascii.extra_ranges.begin(),
 5118|  2.65k|                      nonascii.extra_ranges.end());
 5119|  2.65k|            return {};
 5120|  2.65k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|   291k|        {
 5138|   291k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 37.6k, False: 253k]
  ------------------
 5139|  37.6k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  37.6k|            }
 5141|       |
 5142|   253k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|   291k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  37.6k|        {
 5086|       |            // TODO: binary search?
 5087|  37.6k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 37.6k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  37.6k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  37.6k|            return std::find_if(
 5093|  37.6k|                       nonascii.extra_ranges.begin(),
 5094|  37.6k|                       nonascii.extra_ranges.end(),
 5095|  37.6k|                       [cp_val](const auto& pair) noexcept {
 5096|  37.6k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  37.6k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  37.6k|                       }) != nonascii.extra_ranges.end();
 5099|  37.6k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  7.92M|                       [cp_val](const auto& pair) noexcept {
 5096|  7.92M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 7.92M, False: 2.55k]
  ------------------
 5097|  7.92M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 36.8k, False: 7.88M]
  ------------------
 5098|  7.92M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|   260k|        {
 5076|   260k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|   260k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   260k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|   260k|            const auto val =
 5078|   260k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|   260k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|   260k|                    (val % 8)) &
 5081|   260k|                   1u;
 5082|   260k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  8.85k|        {
 5129|  8.85k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 1.63k, False: 7.21k]
  ------------------
 5130|  1.63k|                return false;
 5131|  1.63k|            }
 5132|       |
 5133|  7.21k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  8.85k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  3.23k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    654|    {
 5277|    654|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    654|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    654|        return read_impl(range, specs, value);
 5279|    654|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    654|    {
 5295|    654|        SCN_CLANG_PUSH
 5296|    654|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    654|        switch (m_type) {
 5299|    238|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 238, False: 416]
  ------------------
 5300|    238|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 56, False: 598]
  ------------------
 5303|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     56|                                                                   value);
 5305|       |
 5306|     32|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 32, False: 622]
  ------------------
 5307|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    214|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 214, False: 440]
  ------------------
 5310|    214|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    214|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 652]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    112|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 112, False: 542]
  ------------------
 5320|    112|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    112|                    range,
 5322|    112|                    get_unescaped_regex_pattern(
 5323|    112|                        specs.charset_string<SourceCharT>()),
 5324|    112|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 654]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    654|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    654|        }
 5331|       |
 5332|    654|        SCN_CLANG_POP
 5333|    654|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    238|    {
 4820|    238|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    238|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    326|{
 4752|    326|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    326|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    326|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 114, False: 212]
  ------------------
 4756|    114|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    114|                                     "Invalid encoding in scanned string");
 4758|    114|    }
 4759|    212|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    212|    static_cast<    \
  |  |  929|    212|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    212|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 212]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    212|    return SCN_MOVE(result);
  ------------------
  |  |  928|    212|    static_cast<    \
  |  |  929|    212|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    212|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    714|{
 2088|    714|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    714|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    714|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    714|        auto buf = make_contiguous_buffer(range);
 2092|    714|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    714|        return ranges::next(range.begin(),
 2094|    714|                            ranges::distance(buf.view().begin(), it));
 2095|    714|    }
 2096|    714|    else {
 2097|    714|        auto it = range.begin();
 2098|       |
 2099|    714|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    714|            auto seg = get_contiguous_beginning(range);
 2101|    714|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    714|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 714]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|    714|            ranges::advance(it, seg.size());
 2106|    714|        }
 2107|       |
 2108|    714|        return read_until_code_point(
 2109|    714|            ranges::subrange{it, range.end()},
 2110|    714|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    714|    }
 2112|    714|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    714|{
 2061|    714|    auto it = range.begin();
 2062|  9.49k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 8.94k, False: 552]
  ------------------
 2063|  8.94k|        const auto val =
 2064|  8.94k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  8.94k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  8.94k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.64k, False: 1.30k]
  |  |  ------------------
  ------------------
 2066|  7.64k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  7.64k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  7.64k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 162, False: 7.48k]
  ------------------
 2069|    162|                return it;
 2070|    162|            }
 2071|  7.64k|        }
 2072|  8.78k|        it = val.iterator;
 2073|  8.78k|    }
 2074|       |
 2075|    552|    return it;
 2076|    714|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    714|    {
  754|    714|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  7.64k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.64k|              cvref<T> obj = *get<T>(fn);
  745|  7.64k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.64k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.64k|              }
  748|  7.64k|              else {
  749|  7.64k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.64k|              }
  751|  7.64k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  7.64k|    {
  684|  7.64k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.64k|            return static_cast<T*>(s.m_cp);
  686|  7.64k|        }
  687|  7.64k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.64k|            return static_cast<T*>(s.m_p);
  689|  7.64k|        }
  690|  7.64k|        else {
  691|  7.64k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.64k|        }
  693|  7.64k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  7.64k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    714|        {
  662|    714|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     56|    {
 4841|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 36, False: 20]
  ------------------
 4842|     36|            return read_string_impl(
 4843|     36|                range,
 4844|     36|                read_until_code_unit(
 4845|     36|                    range,
 4846|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     36|                        SourceCharT ch) { return ch == until; }),
 4848|     36|                value);
 4849|     36|        }
 4850|     20|        return read_string_impl(
 4851|     20|            range,
 4852|     20|            read_until_code_units(
 4853|     20|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     20|            value);
 4855|     56|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    912|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    912|              cvref<T> obj = *get<T>(fn);
  745|    912|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    912|                  obj(static_cast<decltype(args)>(args)...);
  747|    912|              }
  748|    912|              else {
  749|    912|                  return obj(static_cast<decltype(args)>(args)...);
  750|    912|              }
  751|    912|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    912|    {
  684|    912|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    912|            return static_cast<T*>(s.m_cp);
  686|    912|        }
  687|    912|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    912|            return static_cast<T*>(s.m_p);
  689|    912|        }
  690|    912|        else {
  691|    912|            return reinterpret_cast<T*>(s.m_fp);
  692|    912|        }
  693|    912|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    912|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2006|     60|{
 2007|     60|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     60|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     60|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     60|                           needle.end());
 2012|     60|    }
 2013|     60|    else {
 2014|     60|        auto first = range.begin();
 2015|    258|        while (true) {
  ------------------
  |  Branch (2015:16): [Folded - Ignored]
  ------------------
 2016|    258|            auto it = first;
 2017|    354|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|    354|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2018:21): [True: 30, False: 324]
  ------------------
 2019|     30|                    return first;
 2020|     30|                }
 2021|    324|                if (it == range.end()) {
  ------------------
  |  Branch (2021:21): [True: 30, False: 294]
  ------------------
 2022|     30|                    return it;
 2023|     30|                }
 2024|    294|                if (*it != *needle_it) {
  ------------------
  |  Branch (2024:21): [True: 198, False: 96]
  ------------------
 2025|    198|                    break;
 2026|    198|                }
 2027|    294|            }
 2028|    198|            ++first;
 2029|    198|        }
 2030|     60|    }
 2031|     60|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     32|    {
 4947|     32|        return read_impl(
 4948|     32|            range,
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
 4952|     32|            detail::priority_tag<1>{});
 4953|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     32|    {
 4974|     32|        return read_cb(range);
 4975|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|     96|{
 1839|     96|    return ranges::next(range.begin(), range.end());
 1840|     96|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     96|    {
  313|     96|        ranges::advance(x, bound);
  314|     96|        return x;
  315|     96|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     96|    {
  275|     96|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     96|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     96|    {
  203|  1.96k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 1.86k, False: 96]
  ------------------
  204|  1.86k|            ++i;
  205|  1.86k|        }
  206|     96|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    214|    {
 5048|    214|        auto it = read_source_impl(range, {specs});
 5049|    214|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    214|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 202]
  |  |  ------------------
  ------------------
 5050|     12|            return unexpected(it.error());
 5051|     12|        }
 5052|       |
 5053|    202|        return read_string_impl(range, *it, value);
 5054|    214|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5152|    642|    {
 5153|    642|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    642|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    642|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 642]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    642|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    642|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 348, False: 294]
  ------------------
 5163|    348|            const auto cb = [&](char32_t cp) {
 5164|    348|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    348|            };
 5166|       |
 5167|    348|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 150, False: 198]
  ------------------
 5168|    150|                auto it = read_until_code_point(range, cb);
 5169|    150|                return check_nonempty(it, range);
 5170|    150|            }
 5171|    198|            auto it = read_while_code_point(range, cb);
 5172|    198|            return check_nonempty(it, range);
 5173|    348|        }
 5174|       |
 5175|    294|        const auto cb = [&](SourceCharT ch) {
 5176|    294|            return cb_wrapper.on_ascii_only(ch);
 5177|    294|        };
 5178|       |
 5179|    294|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 138, False: 156]
  ------------------
 5180|    138|            auto it = read_until_code_unit(range, cb);
 5181|    138|            return check_nonempty(it, range);
 5182|    138|        }
 5183|    156|        auto it = read_while_code_unit(range, cb);
 5184|    156|        return check_nonempty(it, range);
 5185|    294|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_:
  753|    348|    {
  754|    348|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  13.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.0k|              cvref<T> obj = *get<T>(fn);
  745|  13.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  13.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.0k|              }
  748|  13.0k|              else {
  749|  13.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.0k|              }
  751|  13.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  13.0k|    {
  684|  13.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  13.0k|            return static_cast<T*>(s.m_cp);
  686|  13.0k|        }
  687|  13.0k|        else if constexpr (std::is_object_v<T>) {
  688|  13.0k|            return static_cast<T*>(s.m_p);
  689|  13.0k|        }
  690|  13.0k|        else {
  691|  13.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  13.0k|        }
  693|  13.0k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  13.0k|            const auto cb = [&](char32_t cp) {
 5164|  13.0k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  13.0k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_LPv0EEEPKSL_:
  666|    348|        {
  667|    348|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5190|    642|    {
 5191|    642|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 36, False: 606]
  ------------------
 5192|     36|            return unexpected_scan_error(
 5193|     36|                scan_error::invalid_scanned_value,
 5194|     36|                "No characters matched in [character set]");
 5195|     36|        }
 5196|       |
 5197|    606|        return it;
 5198|    642|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_:
  753|    294|    {
  754|    294|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  5.32k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.32k|              cvref<T> obj = *get<T>(fn);
  745|  5.32k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.32k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.32k|              }
  748|  5.32k|              else {
  749|  5.32k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.32k|              }
  751|  5.32k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.32k|    {
  684|  5.32k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.32k|            return static_cast<T*>(s.m_cp);
  686|  5.32k|        }
  687|  5.32k|        else if constexpr (std::is_object_v<T>) {
  688|  5.32k|            return static_cast<T*>(s.m_p);
  689|  5.32k|        }
  690|  5.32k|        else {
  691|  5.32k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.32k|        }
  693|  5.32k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5175|  5.32k|        const auto cb = [&](SourceCharT ch) {
 5176|  5.32k|            return cb_wrapper.on_ascii_only(ch);
 5177|  5.32k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_LPv0EEEPKSL_:
  666|    294|        {
  667|    294|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    202|{
 4752|    202|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    202|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    202|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 42, False: 160]
  ------------------
 4756|     42|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     42|                                     "Invalid encoding in scanned string");
 4758|     42|    }
 4759|    160|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    160|    static_cast<    \
  |  |  929|    160|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    160|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 160]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    160|    return SCN_MOVE(result);
  ------------------
  |  |  928|    160|    static_cast<    \
  |  |  929|    160|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    160|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    114|    {
 4891|    114|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    114|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    114|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    114|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    114|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 114, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    114|    }                                                  \
  |  |  |  | 3671|    114|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    114|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|    342|    {
 4913|    342|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|    684|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|    342|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|    342|            return unexpected_scan_error(
 4916|    342|                scan_error::invalid_scanned_value,
 4917|    342|                "Regex backend doesn't support wide strings as input");
 4918|    342|        }
 4919|    342|        else {
 4920|    342|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 342, False: 0]
  ------------------
 4921|    342|                return unexpected_scan_error(
 4922|    342|                    scan_error::invalid_scanned_value,
 4923|    342|                    "Cannot use regex with a non-contiguous source "
 4924|    342|                    "range");
 4925|    342|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|    342|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|    342|{
  959|    342|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|    342|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|    342|        return true;
  962|    342|    }
  963|    342|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|    342|                           ranges::const_iterator_t<Range>,
  965|    342|                           typename detail::basic_scan_buffer<
  966|    342|                               detail::char_t<Range>>::forward_iterator>) {
  967|    342|        auto beg = r.begin();
  968|    342|        if (!beg.stores_parent()) {
  969|    342|            return true;
  970|    342|        }
  971|    342|        return beg.parent()->is_contiguous();
  972|    342|    }
  973|    342|    else {
  974|    342|        return false;
  975|    342|    }
  976|    342|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  4.60k|    {
 5277|  4.60k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.60k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.60k|        return read_impl(range, specs, value);
 5279|  4.60k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  4.60k|    {
 5295|  4.60k|        SCN_CLANG_PUSH
 5296|  4.60k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.60k|        switch (m_type) {
 5299|    284|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 284, False: 4.31k]
  ------------------
 5300|    284|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     44|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 44, False: 4.55k]
  ------------------
 5303|     44|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     44|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.60k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    864|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 864, False: 3.73k]
  ------------------
 5310|    864|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    864|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.17k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.17k, False: 1.42k]
  ------------------
 5315|  3.17k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.17k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.17k|                    specs.regexp_flags, value);
 5318|       |
 5319|    232|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 232, False: 4.36k]
  ------------------
 5320|    232|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    232|                    range,
 5322|    232|                    get_unescaped_regex_pattern(
 5323|    232|                        specs.charset_string<SourceCharT>()),
 5324|    232|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.60k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.60k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.60k|        }
 5331|       |
 5332|  4.60k|        SCN_CLANG_POP
 5333|  4.60k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    910|    {
 4820|    910|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    910|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    954|{
 4752|    954|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    954|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    954|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 310, False: 644]
  ------------------
 4756|    310|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    310|                                     "Invalid encoding in scanned string");
 4758|    310|    }
 4759|    644|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    644|    static_cast<    \
  |  |  929|    644|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    644|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    644|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 644]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    644|    return SCN_MOVE(result);
  ------------------
  |  |  928|    644|    static_cast<    \
  |  |  929|    644|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    644|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.61k|{
 3012|  1.61k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.61k|        dest.assign(source.view());
 3014|  1.61k|    }
 3015|  1.61k|    else {
 3016|  1.61k|        return transcode_impl(source.view(), dest);
 3017|  1.61k|    }
 3018|       |
 3019|  1.61k|    return {};
 3020|  1.61k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.73k|{
 2088|  2.73k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.73k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.73k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.73k|        auto buf = make_contiguous_buffer(range);
 2092|  2.73k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.73k|        return ranges::next(range.begin(),
 2094|  2.73k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.73k|    }
 2096|  2.73k|    else {
 2097|  2.73k|        auto it = range.begin();
 2098|       |
 2099|  2.73k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.73k|            auto seg = get_contiguous_beginning(range);
 2101|  2.73k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.73k|                seg_it != seg.end()) {
 2103|  2.73k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.73k|            }
 2105|  2.73k|            ranges::advance(it, seg.size());
 2106|  2.73k|        }
 2107|       |
 2108|  2.73k|        return read_until_code_point(
 2109|  2.73k|            ranges::subrange{it, range.end()},
 2110|  2.73k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.73k|    }
 2112|  2.73k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     44|    {
 4841|     44|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 30, False: 14]
  ------------------
 4842|     30|            return read_string_impl(
 4843|     30|                range,
 4844|     30|                read_until_code_unit(
 4845|     30|                    range,
 4846|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     30|                        SourceCharT ch) { return ch == until; }),
 4848|     30|                value);
 4849|     30|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     44|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|    442|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    442|                  obj(static_cast<decltype(args)>(args)...);
  747|    442|              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|    442|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    442|            return static_cast<T*>(s.m_cp);
  686|    442|        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    442|            return static_cast<T*>(s.m_p);
  689|    442|        }
  690|    442|        else {
  691|    442|            return reinterpret_cast<T*>(s.m_fp);
  692|    442|        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2006|     42|{
 2007|     42|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     42|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     42|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     42|                           needle.end());
 2012|     42|    }
 2013|     42|    else {
 2014|     42|        auto first = range.begin();
 2015|     42|        while (true) {
 2016|     42|            auto it = first;
 2017|     42|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|     42|                if (needle_it == needle.end()) {
 2019|     42|                    return first;
 2020|     42|                }
 2021|     42|                if (it == range.end()) {
 2022|     42|                    return it;
 2023|     42|                }
 2024|     42|                if (*it != *needle_it) {
 2025|     42|                    break;
 2026|     42|                }
 2027|     42|            }
 2028|     42|            ++first;
 2029|     42|        }
 2030|     42|    }
 2031|     42|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    864|    {
 5048|    864|        auto it = read_source_impl(range, {specs});
 5049|    864|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    864|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 328, False: 536]
  |  |  ------------------
  ------------------
 5050|    328|            return unexpected(it.error());
 5051|    328|        }
 5052|       |
 5053|    536|        return read_string_impl(range, *it, value);
 5054|    864|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  2.59k|    {
 5153|  2.59k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  2.59k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  2.59k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.59k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  2.59k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  2.59k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 2.30k, False: 288]
  ------------------
 5163|  2.30k|            const auto cb = [&](char32_t cp) {
 5164|  2.30k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  2.30k|            };
 5166|       |
 5167|  2.30k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 198, False: 2.10k]
  ------------------
 5168|    198|                auto it = read_until_code_point(range, cb);
 5169|    198|                return check_nonempty(it, range);
 5170|    198|            }
 5171|  2.10k|            auto it = read_while_code_point(range, cb);
 5172|  2.10k|            return check_nonempty(it, range);
 5173|  2.30k|        }
 5174|       |
 5175|    288|        const auto cb = [&](SourceCharT ch) {
 5176|    288|            return cb_wrapper.on_ascii_only(ch);
 5177|    288|        };
 5178|       |
 5179|    288|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 126, False: 162]
  ------------------
 5180|    126|            auto it = read_until_code_unit(range, cb);
 5181|    126|            return check_nonempty(it, range);
 5182|    126|        }
 5183|    162|        auto it = read_while_code_unit(range, cb);
 5184|    162|        return check_nonempty(it, range);
 5185|    288|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  2.30k|{
 2061|  2.30k|    auto it = range.begin();
 2062|   280k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 279k, False: 180]
  ------------------
 2063|   279k|        const auto val =
 2064|   279k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   279k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   279k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 278k, False: 1.47k]
  |  |  ------------------
  ------------------
 2066|   278k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   278k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   278k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.12k, False: 276k]
  ------------------
 2069|  2.12k|                return it;
 2070|  2.12k|            }
 2071|   278k|        }
 2072|   277k|        it = val.iterator;
 2073|   277k|    }
 2074|       |
 2075|    180|    return it;
 2076|  2.30k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   279k|{
 1899|   279k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   279k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   279k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   279k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   279k|    auto it = range.begin();
 1903|   279k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   279k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.47k, False: 278k]
  |  |  ------------------
  ------------------
 1906|  1.47k|        ++it;
 1907|  1.47k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  1.47k|        return {it, {}};
 1909|  1.47k|    }
 1910|       |
 1911|   278k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 242k, False: 36.2k]
  ------------------
 1912|   242k|        ++it;
 1913|   242k|        return {it, string_type(1, *range.begin())};
 1914|   242k|    }
 1915|       |
 1916|  36.2k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  36.2k|    return {it, string_type{range.begin(), it}};
 1918|   278k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  1.47k|{
 1155|  1.47k|    auto it = input.begin();
 1156|  2.14k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 2.08k, False: 54]
  ------------------
 1157|  2.08k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.41k, False: 672]
  ------------------
 1158|  1.41k|            break;
 1159|  1.41k|        }
 1160|  2.08k|    }
 1161|  1.47k|    return it;
 1162|  1.47k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  36.2k|    {
  283|  36.2k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  36.2k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  36.2k|    {
  212|  36.2k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 60, False: 36.1k]
  ------------------
  213|     60|            auto dist = bound - i;
  214|     60|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     60|            return dist;
  216|     60|        }
  217|  36.1k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  36.1k|        return n;
  219|  36.2k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|  72.5k|    {
  132|  72.5k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 72.5k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|  72.5k|        return t;
  136|  72.5k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|   279k|    {
 1890|   279k|        return !codepoint.empty();
 1891|   279k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  2.30k|    {
  754|  2.30k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|   278k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   278k|              cvref<T> obj = *get<T>(fn);
  745|   278k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   278k|                  obj(static_cast<decltype(args)>(args)...);
  747|   278k|              }
  748|   278k|              else {
  749|   278k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   278k|              }
  751|   278k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   278k|    {
  684|   278k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   278k|            return static_cast<T*>(s.m_cp);
  686|   278k|        }
  687|   278k|        else if constexpr (std::is_object_v<T>) {
  688|   278k|            return static_cast<T*>(s.m_p);
  689|   278k|        }
  690|   278k|        else {
  691|   278k|            return reinterpret_cast<T*>(s.m_fp);
  692|   278k|        }
  693|   278k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|   278k|            const auto cb = [&](char32_t cp) {
 5164|   278k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|   278k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  2.30k|        {
  667|  2.30k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  2.59k|    {
 5191|  2.59k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 984, False: 1.60k]
  ------------------
 5192|    984|            return unexpected_scan_error(
 5193|    984|                scan_error::invalid_scanned_value,
 5194|    984|                "No characters matched in [character set]");
 5195|    984|        }
 5196|       |
 5197|  1.60k|        return it;
 5198|  2.59k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  2.10k|{
 2082|  2.10k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.10k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|    288|    {
  754|    288|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  3.52k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.52k|              cvref<T> obj = *get<T>(fn);
  745|  3.52k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.52k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.52k|              }
  748|  3.52k|              else {
  749|  3.52k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.52k|              }
  751|  3.52k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  3.52k|    {
  684|  3.52k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.52k|            return static_cast<T*>(s.m_cp);
  686|  3.52k|        }
  687|  3.52k|        else if constexpr (std::is_object_v<T>) {
  688|  3.52k|            return static_cast<T*>(s.m_p);
  689|  3.52k|        }
  690|  3.52k|        else {
  691|  3.52k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.52k|        }
  693|  3.52k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  3.52k|        const auto cb = [&](SourceCharT ch) {
 5176|  3.52k|            return cb_wrapper.on_ascii_only(ch);
 5177|  3.52k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|    288|        {
  667|    288|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.10k|{
 4752|  1.10k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.10k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.10k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 130, False: 970]
  ------------------
 4756|    130|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    130|                                     "Invalid encoding in scanned string");
 4758|    130|    }
 4759|    970|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    970|    static_cast<    \
  |  |  929|    970|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    970|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    970|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 970]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    970|    return SCN_MOVE(result);
  ------------------
  |  |  928|    970|    static_cast<    \
  |  |  929|    970|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    970|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.40k|    {
 4891|  3.40k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.84k, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.84k|    }                                                  \
  |  |  |  | 3671|  3.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    564|        return read_string_impl(range, it, value);
 4893|  3.40k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  10.2k|    {
 4913|  10.2k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  20.4k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  10.2k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  10.2k|            return unexpected_scan_error(
 4916|  10.2k|                scan_error::invalid_scanned_value,
 4917|  10.2k|                "Regex backend doesn't support wide strings as input");
 4918|  10.2k|        }
 4919|  10.2k|        else {
 4920|  10.2k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 10.2k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  10.2k|            auto input = get_as_contiguous(range);
 4928|  10.2k|            SCN_TRY(it,
  ------------------
  |  | 3672|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.53k, False: 1.69k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.53k|    }                                                  \
  |  |  |  | 3671|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  1.69k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  1.69k|            return ranges::next(range.begin(),
 4931|  1.69k|                                ranges::distance(input.begin(), it));
 4932|  10.2k|        }
 4933|  10.2k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  10.2k|{
  959|  10.2k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  10.2k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  10.2k|        return true;
  962|  10.2k|    }
  963|  10.2k|    else if constexpr (std::is_same_v<
  964|  10.2k|                           ranges::const_iterator_t<Range>,
  965|  10.2k|                           typename detail::basic_scan_buffer<
  966|  10.2k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  10.2k|        auto beg = r.begin();
  968|  10.2k|        if (!beg.stores_parent()) {
  969|  10.2k|            return true;
  970|  10.2k|        }
  971|  10.2k|        return beg.parent()->is_contiguous();
  972|  10.2k|    }
  973|  10.2k|    else {
  974|  10.2k|        return false;
  975|  10.2k|    }
  976|  10.2k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  10.2k|{
 1065|  10.2k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  10.2k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  10.2k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  10.2k|        return r;
 1070|  10.2k|    }
 1071|  10.2k|    else if constexpr (std::is_same_v<
 1072|  10.2k|                           ranges::const_iterator_t<Range>,
 1073|  10.2k|                           typename detail::basic_scan_buffer<
 1074|  10.2k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  10.2k|        if constexpr (ranges::common_range<Range>) {
 1076|  10.2k|            return detail::make_string_view_from_pointers(
 1077|  10.2k|                r.begin().to_contiguous_segment_iterator(),
 1078|  10.2k|                r.end().to_contiguous_segment_iterator());
 1079|  10.2k|        }
 1080|  10.2k|        else {
 1081|  10.2k|            return r.begin().contiguous_segment();
 1082|  10.2k|        }
 1083|  10.2k|    }
 1084|  10.2k|    else {
 1085|  10.2k|        SCN_EXPECT(false);
 1086|  10.2k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  10.2k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  10.2k|    }
 1090|  10.2k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  10.2k|{
  981|  10.2k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  10.2k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  10.2k|        return true;
  984|  10.2k|    }
  985|  10.2k|    else if constexpr (std::is_same_v<
  986|  10.2k|                           ranges::const_iterator_t<Range>,
  987|  10.2k|                           typename detail::basic_scan_buffer<
  988|  10.2k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  10.2k|        auto beg = r.begin();
  990|  10.2k|        if (beg.contiguous_segment().empty()) {
  991|  10.2k|            return false;
  992|  10.2k|        }
  993|  10.2k|        if constexpr (ranges::common_range<Range>) {
  994|  10.2k|            return beg.contiguous_segment().end() ==
  995|  10.2k|                   ranges::end(r).contiguous_segment().end();
  996|  10.2k|        }
  997|  10.2k|        else {
  998|  10.2k|            if (beg.stores_parent()) {
  999|  10.2k|                return beg.contiguous_segment().end() ==
 1000|  10.2k|                       beg.parent()->current_view().end();
 1001|  10.2k|            }
 1002|  10.2k|            return true;
 1003|  10.2k|        }
 1004|  10.2k|    }
 1005|  10.2k|    else {
 1006|  10.2k|        return false;
 1007|  10.2k|    }
 1008|  10.2k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  10.2k|{
 4346|  10.2k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  10.2k|                  ranges::borrowed_range<Input> &&
 4348|  10.2k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  10.2k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  10.2k|    std::basic_regex<CharT> re{};
 4352|  10.2k|    try {
 4353|  10.2k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  10.2k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  10.2k|                                     re_flags | std::regex_constants::nosubs};
 4356|  10.2k|    }
 4357|  10.2k|    catch (const std::regex_error& err) {
 4358|  5.35k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  5.35k|                                     "Invalid regex");
 4360|  5.35k|    }
 4361|       |
 4362|  4.87k|    std::match_results<const CharT*> matches{};
 4363|  4.87k|    try {
 4364|  4.87k|        bool found = std::regex_search(input.data(),
 4365|  4.87k|                                       input.data() + input.size(), matches, re,
 4366|  4.87k|                                       std::regex_constants::match_continuous);
 4367|  4.87k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 3.18k, False: 1.69k]
  |  Branch (4367:23): [True: 0, False: 1.69k]
  ------------------
 4368|  3.01k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  3.01k|                                         "Regular expression didn't match");
 4370|  3.01k|        }
 4371|  4.87k|    }
 4372|  4.87k|    catch (const std::regex_error& err) {
 4373|    168|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|    168|                                     "Regex matching failed with an error");
 4375|    168|    }
 4376|       |
 4377|  1.69k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  4.87k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5808|  6.03k|{
 5809|  6.03k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  6.03k|        return reader_impl_for_bool<CharT>{};
 5811|  6.03k|    }
 5812|  6.03k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  6.03k|        return reader_impl_for_char<CharT>{};
 5814|  6.03k|    }
 5815|  6.03k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  6.03k|        return reader_impl_for_wchar<CharT>{};
 5817|  6.03k|    }
 5818|  6.03k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  6.03k|        return reader_impl_for_code_point<CharT>{};
 5820|  6.03k|    }
 5821|  6.03k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  6.03k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.03k|        return reader_impl_for_string<CharT>{};
 5824|  6.03k|    }
 5825|  6.03k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  6.03k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  6.03k|        return reader_impl_for_string<CharT>{};
 5828|  6.03k|    }
 5829|  6.03k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  6.03k|                       std::is_same_v<T, wregex_matches>) {
 5831|  6.03k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  6.03k|    }
 5833|  6.03k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  6.03k|        return reader_impl_for_voidptr<CharT>{};
 5835|  6.03k|    }
 5836|  6.03k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  6.03k|        return reader_impl_for_float<CharT>{};
 5838|  6.03k|    }
 5839|  6.03k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  6.03k|                       !std::is_same_v<T, wchar_t> &&
 5841|  6.03k|                       !std::is_same_v<T, char32_t> &&
 5842|  6.03k|                       !std::is_same_v<T, bool>) {
 5843|  6.03k|        return reader_impl_for_int<CharT>{};
 5844|  6.03k|    }
 5845|  6.03k|    else {
 5846|  6.03k|        return reader_impl_for_monostate<CharT>{};
 5847|  6.03k|    }
 5848|  6.03k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    372|{
 2993|    372|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    372|        if (source.stores_allocated_string()) {
 2995|    372|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    372|        }
 2997|    372|        else {
 2998|    372|            dest.assign(source.view());
 2999|    372|        }
 3000|    372|    }
 3001|    372|    else {
 3002|    372|        return transcode_impl(source.view(), dest);
 3003|    372|    }
 3004|       |
 3005|      0|    return {};
 3006|    372|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  1.98k|{
 2968|  1.98k|    dst.clear();
 2969|  1.98k|    transcode_valid_to_string(src, dst);
 2970|  1.98k|    return {};
 2971|  1.98k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  1.98k|{
 1403|  1.98k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  1.98k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  1.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  1.98k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  1.98k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1407:23): [Folded - Ignored]
  ------------------
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  1.98k|            std::u32string tmp;
 1410|  1.98k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  1.98k|            return transcode_to_string_impl_32to16<true>(
 1412|  1.98k|                std::u32string_view{tmp}, dest);
 1413|  1.98k|        }
 1414|  1.98k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1414:28): [Folded - Ignored]
  ------------------
 1415|  1.98k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  1.98k|        }
 1417|  1.98k|    }
 1418|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1420|      0|            std::u32string tmp;
 1421|      0|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|      0|            return transcode_to_string_impl_32to8<true>(
 1423|      0|                std::u32string_view{tmp}, dest);
 1424|      0|        }
 1425|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|      0|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|      0|        }
 1428|      0|    }
 1429|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1431|      0|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|      0|        }
 1433|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|      0|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|      0|        }
 1436|      0|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  1.98k|{
 1277|  1.98k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  1.98k|    auto it = src.begin();
 1280|   110k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 108k, False: 1.98k]
  ------------------
 1281|   108k|        auto res = get_next_code_point_valid(
 1282|   108k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   108k|                                                                 src.end()));
 1284|   108k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   108k|        dest.push_back(res.value);
 1286|   108k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   108k|    }
 1288|  1.98k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   108k|{
 1189|   108k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   108k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   108k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   108k|    return {input.begin() + len,
 1195|   108k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   108k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    654|    {
 5277|    654|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    654|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    654|        return read_impl(range, specs, value);
 5279|    654|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    654|    {
 5295|    654|        SCN_CLANG_PUSH
 5296|    654|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    654|        switch (m_type) {
 5299|    238|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 238, False: 416]
  ------------------
 5300|    238|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 56, False: 598]
  ------------------
 5303|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     56|                                                                   value);
 5305|       |
 5306|     32|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 32, False: 622]
  ------------------
 5307|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    214|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 214, False: 440]
  ------------------
 5310|    214|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    214|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 652]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    112|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 112, False: 542]
  ------------------
 5320|    112|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    112|                    range,
 5322|    112|                    get_unescaped_regex_pattern(
 5323|    112|                        specs.charset_string<SourceCharT>()),
 5324|    112|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 654]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    654|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    654|        }
 5331|       |
 5332|    654|        SCN_CLANG_POP
 5333|    654|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    238|    {
 4820|    238|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    238|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    326|{
 4752|    326|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    326|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    326|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 114, False: 212]
  ------------------
 4756|    114|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    114|                                     "Invalid encoding in scanned string");
 4758|    114|    }
 4759|    212|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    212|    static_cast<    \
  |  |  929|    212|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    212|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 212]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    212|    return SCN_MOVE(result);
  ------------------
  |  |  928|    212|    static_cast<    \
  |  |  929|    212|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    212|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     56|    {
 4841|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 36, False: 20]
  ------------------
 4842|     36|            return read_string_impl(
 4843|     36|                range,
 4844|     36|                read_until_code_unit(
 4845|     36|                    range,
 4846|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     36|                        SourceCharT ch) { return ch == until; }),
 4848|     36|                value);
 4849|     36|        }
 4850|     20|        return read_string_impl(
 4851|     20|            range,
 4852|     20|            read_until_code_units(
 4853|     20|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     20|            value);
 4855|     56|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    912|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    912|              cvref<T> obj = *get<T>(fn);
  745|    912|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    912|                  obj(static_cast<decltype(args)>(args)...);
  747|    912|              }
  748|    912|              else {
  749|    912|                  return obj(static_cast<decltype(args)>(args)...);
  750|    912|              }
  751|    912|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    912|    {
  684|    912|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    912|            return static_cast<T*>(s.m_cp);
  686|    912|        }
  687|    912|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    912|            return static_cast<T*>(s.m_p);
  689|    912|        }
  690|    912|        else {
  691|    912|            return reinterpret_cast<T*>(s.m_fp);
  692|    912|        }
  693|    912|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    912|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     32|    {
 4947|     32|        return read_impl(
 4948|     32|            range,
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
 4952|     32|            detail::priority_tag<1>{});
 4953|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     32|    {
 4974|     32|        return read_cb(range);
 4975|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    214|    {
 5048|    214|        auto it = read_source_impl(range, {specs});
 5049|    214|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    214|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 202]
  |  |  ------------------
  ------------------
 5050|     12|            return unexpected(it.error());
 5051|     12|        }
 5052|       |
 5053|    202|        return read_string_impl(range, *it, value);
 5054|    214|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    202|{
 4752|    202|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    202|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    202|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 42, False: 160]
  ------------------
 4756|     42|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     42|                                     "Invalid encoding in scanned string");
 4758|     42|    }
 4759|    160|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    160|    static_cast<    \
  |  |  929|    160|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    160|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 160]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    160|    return SCN_MOVE(result);
  ------------------
  |  |  928|    160|    static_cast<    \
  |  |  929|    160|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    160|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    114|    {
 4891|    114|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    114|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    114|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    114|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    114|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 114, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    114|    }                                                  \
  |  |  |  | 3671|    114|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    114|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  4.60k|    {
 5277|  4.60k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.60k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.60k|        return read_impl(range, specs, value);
 5279|  4.60k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  4.60k|    {
 5295|  4.60k|        SCN_CLANG_PUSH
 5296|  4.60k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.60k|        switch (m_type) {
 5299|    284|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 284, False: 4.31k]
  ------------------
 5300|    284|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     44|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 44, False: 4.55k]
  ------------------
 5303|     44|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     44|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.60k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    864|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 864, False: 3.73k]
  ------------------
 5310|    864|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    864|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.17k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.17k, False: 1.42k]
  ------------------
 5315|  3.17k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.17k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.17k|                    specs.regexp_flags, value);
 5318|       |
 5319|    232|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 232, False: 4.36k]
  ------------------
 5320|    232|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    232|                    range,
 5322|    232|                    get_unescaped_regex_pattern(
 5323|    232|                        specs.charset_string<SourceCharT>()),
 5324|    232|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.60k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.60k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.60k|        }
 5331|       |
 5332|  4.60k|        SCN_CLANG_POP
 5333|  4.60k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    910|    {
 4820|    910|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    910|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    954|{
 4752|    954|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    954|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    954|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 310, False: 644]
  ------------------
 4756|    310|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    310|                                     "Invalid encoding in scanned string");
 4758|    310|    }
 4759|    644|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    644|    static_cast<    \
  |  |  929|    644|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    644|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    644|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 644]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    644|    return SCN_MOVE(result);
  ------------------
  |  |  928|    644|    static_cast<    \
  |  |  929|    644|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    644|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.61k|{
 3012|  1.61k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.61k|        dest.assign(source.view());
 3014|  1.61k|    }
 3015|  1.61k|    else {
 3016|  1.61k|        return transcode_impl(source.view(), dest);
 3017|  1.61k|    }
 3018|       |
 3019|      0|    return {};
 3020|  1.61k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     44|    {
 4841|     44|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 30, False: 14]
  ------------------
 4842|     30|            return read_string_impl(
 4843|     30|                range,
 4844|     30|                read_until_code_unit(
 4845|     30|                    range,
 4846|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     30|                        SourceCharT ch) { return ch == until; }),
 4848|     30|                value);
 4849|     30|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     44|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|    442|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    442|                  obj(static_cast<decltype(args)>(args)...);
  747|    442|              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|    442|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    442|            return static_cast<T*>(s.m_cp);
  686|    442|        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    442|            return static_cast<T*>(s.m_p);
  689|    442|        }
  690|    442|        else {
  691|    442|            return reinterpret_cast<T*>(s.m_fp);
  692|    442|        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    864|    {
 5048|    864|        auto it = read_source_impl(range, {specs});
 5049|    864|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    864|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 328, False: 536]
  |  |  ------------------
  ------------------
 5050|    328|            return unexpected(it.error());
 5051|    328|        }
 5052|       |
 5053|    536|        return read_string_impl(range, *it, value);
 5054|    864|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.10k|{
 4752|  1.10k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.10k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.10k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 130, False: 970]
  ------------------
 4756|    130|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    130|                                     "Invalid encoding in scanned string");
 4758|    130|    }
 4759|    970|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    970|    static_cast<    \
  |  |  929|    970|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    970|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    970|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 970]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    970|    return SCN_MOVE(result);
  ------------------
  |  |  928|    970|    static_cast<    \
  |  |  929|    970|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    970|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.40k|    {
 4891|  3.40k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.84k, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.84k|    }                                                  \
  |  |  |  | 3671|  3.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    564|        return read_string_impl(range, it, value);
 4893|  3.40k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|  6.03k|{
 5809|  6.03k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  6.03k|        return reader_impl_for_bool<CharT>{};
 5811|  6.03k|    }
 5812|  6.03k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  6.03k|        return reader_impl_for_char<CharT>{};
 5814|  6.03k|    }
 5815|  6.03k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  6.03k|        return reader_impl_for_wchar<CharT>{};
 5817|  6.03k|    }
 5818|  6.03k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  6.03k|        return reader_impl_for_code_point<CharT>{};
 5820|  6.03k|    }
 5821|  6.03k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  6.03k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.03k|        return reader_impl_for_string<CharT>{};
 5824|  6.03k|    }
 5825|  6.03k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  6.03k|                       std::is_same_v<T, std::wstring>) {
 5827|  6.03k|        return reader_impl_for_string<CharT>{};
 5828|  6.03k|    }
 5829|  6.03k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  6.03k|                       std::is_same_v<T, wregex_matches>) {
 5831|  6.03k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  6.03k|    }
 5833|  6.03k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  6.03k|        return reader_impl_for_voidptr<CharT>{};
 5835|  6.03k|    }
 5836|  6.03k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  6.03k|        return reader_impl_for_float<CharT>{};
 5838|  6.03k|    }
 5839|  6.03k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  6.03k|                       !std::is_same_v<T, wchar_t> &&
 5841|  6.03k|                       !std::is_same_v<T, char32_t> &&
 5842|  6.03k|                       !std::is_same_v<T, bool>) {
 5843|  6.03k|        return reader_impl_for_int<CharT>{};
 5844|  6.03k|    }
 5845|  6.03k|    else {
 5846|  6.03k|        return reader_impl_for_monostate<CharT>{};
 5847|  6.03k|    }
 5848|  6.03k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    654|    {
 5277|    654|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    654|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    654|        return read_impl(range, specs, value);
 5279|    654|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    654|    {
 5295|    654|        SCN_CLANG_PUSH
 5296|    654|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    654|        switch (m_type) {
 5299|    238|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 238, False: 416]
  ------------------
 5300|    238|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 56, False: 598]
  ------------------
 5303|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     56|                                                                   value);
 5305|       |
 5306|     32|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 32, False: 622]
  ------------------
 5307|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    214|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 214, False: 440]
  ------------------
 5310|    214|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    214|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 652]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    112|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 112, False: 542]
  ------------------
 5320|    112|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    112|                    range,
 5322|    112|                    get_unescaped_regex_pattern(
 5323|    112|                        specs.charset_string<SourceCharT>()),
 5324|    112|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 654]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    654|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    654|        }
 5331|       |
 5332|    654|        SCN_CLANG_POP
 5333|    654|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    238|    {
 4827|    238|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    238|                                     value);
 4829|    238|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    326|{
 4773|    326|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    326|    auto src = [&]() {
 4776|    326|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    326|            return make_contiguous_buffer(
 4778|    326|                ranges::subrange{range.begin().base(), result.base()});
 4779|    326|        }
 4780|    326|        else {
 4781|    326|            return make_contiguous_buffer(
 4782|    326|                ranges::subrange{range.begin(), result});
 4783|    326|        }
 4784|    326|    }();
 4785|    326|    using src_type = decltype(src);
 4786|       |
 4787|    326|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    326|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    326|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    326|                                     "Cannot read a string_view from "
 4796|    326|                                     "this source range (would require "
 4797|    326|                                     "transcoding)");
 4798|    326|    }
 4799|    326|    else {
 4800|    326|        const auto view = src.view();
 4801|    326|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    326|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 114, False: 212]
  ------------------
 4804|    114|            return unexpected_scan_error(
 4805|    114|                scan_error::invalid_scanned_value,
 4806|    114|                "Invalid encoding in scanned string_view");
 4807|    114|        }
 4808|       |
 4809|    212|        return SCN_MOVE(result);
  ------------------
  |  |  928|    212|    static_cast<    \
  |  |  929|    212|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    326|    }
 4811|    326|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    326|    auto src = [&]() {
 4776|    326|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    326|            return make_contiguous_buffer(
 4778|    326|                ranges::subrange{range.begin().base(), result.base()});
 4779|    326|        }
 4780|    326|        else {
 4781|    326|            return make_contiguous_buffer(
 4782|    326|                ranges::subrange{range.begin(), result});
 4783|    326|        }
 4784|    326|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     56|    {
 4863|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 36, False: 20]
  ------------------
 4864|     36|            return read_string_view_impl(
 4865|     36|                range,
 4866|     36|                read_until_code_unit(
 4867|     36|                    range,
 4868|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     36|                        SourceCharT ch) { return ch == until; }),
 4870|     36|                value);
 4871|     36|        }
 4872|     20|        return read_string_view_impl(
 4873|     20|            range,
 4874|     20|            read_until_code_units(
 4875|     20|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     20|            value);
 4877|     56|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_:
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    912|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    912|              cvref<T> obj = *get<T>(fn);
  745|    912|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    912|                  obj(static_cast<decltype(args)>(args)...);
  747|    912|              }
  748|    912|              else {
  749|    912|                  return obj(static_cast<decltype(args)>(args)...);
  750|    912|              }
  751|    912|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    912|    {
  684|    912|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    912|            return static_cast<T*>(s.m_cp);
  686|    912|        }
  687|    912|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    912|            return static_cast<T*>(s.m_p);
  689|    912|        }
  690|    912|        else {
  691|    912|            return reinterpret_cast<T*>(s.m_fp);
  692|    912|        }
  693|    912|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4869|    912|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     32|    {
 4959|     32|        return read_impl(
 4960|     32|            range,
 4961|     32|            [&](const auto& rng) {
 4962|     32|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     32|            },
 4964|     32|            detail::priority_tag<1>{});
 4965|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     32|    {
 4974|     32|        return read_cb(range);
 4975|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     32|            [&](const auto& rng) {
 4962|     32|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     32|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5061|    214|    {
 5062|    214|        auto it = read_source_impl(range, {specs});
 5063|    214|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    214|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 202]
  |  |  ------------------
  ------------------
 5064|     12|            return unexpected(it.error());
 5065|     12|        }
 5066|       |
 5067|    202|        return read_string_view_impl(range, *it, value);
 5068|    214|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4772|    202|{
 4773|    202|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    202|    auto src = [&]() {
 4776|    202|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    202|            return make_contiguous_buffer(
 4778|    202|                ranges::subrange{range.begin().base(), result.base()});
 4779|    202|        }
 4780|    202|        else {
 4781|    202|            return make_contiguous_buffer(
 4782|    202|                ranges::subrange{range.begin(), result});
 4783|    202|        }
 4784|    202|    }();
 4785|    202|    using src_type = decltype(src);
 4786|       |
 4787|    202|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    202|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    202|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    202|                                     "Cannot read a string_view from "
 4796|    202|                                     "this source range (would require "
 4797|    202|                                     "transcoding)");
 4798|    202|    }
 4799|    202|    else {
 4800|    202|        const auto view = src.view();
 4801|    202|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    202|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 42, False: 160]
  ------------------
 4804|     42|            return unexpected_scan_error(
 4805|     42|                scan_error::invalid_scanned_value,
 4806|     42|                "Invalid encoding in scanned string_view");
 4807|     42|        }
 4808|       |
 4809|    160|        return SCN_MOVE(result);
  ------------------
  |  |  928|    160|    static_cast<    \
  |  |  929|    160|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    202|    }
 4811|    202|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4775|    202|    auto src = [&]() {
 4776|    202|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    202|            return make_contiguous_buffer(
 4778|    202|                ranges::subrange{range.begin().base(), result.base()});
 4779|    202|        }
 4780|    202|        else {
 4781|    202|            return make_contiguous_buffer(
 4782|    202|                ranges::subrange{range.begin(), result});
 4783|    202|        }
 4784|    202|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|    114|    {
 4902|    114|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    114|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    114|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    114|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    114|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 114, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    114|    }                                                  \
  |  |  |  | 3671|    114|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|    114|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  4.60k|    {
 5277|  4.60k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.60k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.60k|        return read_impl(range, specs, value);
 5279|  4.60k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  4.60k|    {
 5295|  4.60k|        SCN_CLANG_PUSH
 5296|  4.60k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.60k|        switch (m_type) {
 5299|    284|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 284, False: 4.31k]
  ------------------
 5300|    284|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     44|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 44, False: 4.55k]
  ------------------
 5303|     44|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     44|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.60k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    864|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 864, False: 3.73k]
  ------------------
 5310|    864|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    864|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.17k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.17k, False: 1.42k]
  ------------------
 5315|  3.17k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.17k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.17k|                    specs.regexp_flags, value);
 5318|       |
 5319|    232|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 232, False: 4.36k]
  ------------------
 5320|    232|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    232|                    range,
 5322|    232|                    get_unescaped_regex_pattern(
 5323|    232|                        specs.charset_string<SourceCharT>()),
 5324|    232|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.60k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.60k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.60k|        }
 5331|       |
 5332|  4.60k|        SCN_CLANG_POP
 5333|  4.60k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    910|    {
 4827|    910|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    910|                                     value);
 4829|    910|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|    954|{
 4773|    954|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    954|    auto src = [&]() {
 4776|    954|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    954|            return make_contiguous_buffer(
 4778|    954|                ranges::subrange{range.begin().base(), result.base()});
 4779|    954|        }
 4780|    954|        else {
 4781|    954|            return make_contiguous_buffer(
 4782|    954|                ranges::subrange{range.begin(), result});
 4783|    954|        }
 4784|    954|    }();
 4785|    954|    using src_type = decltype(src);
 4786|       |
 4787|    954|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    954|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    954|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    954|                                     "Cannot read a string_view from "
 4796|    954|                                     "this source range (would require "
 4797|    954|                                     "transcoding)");
 4798|    954|    }
 4799|    954|    else {
 4800|    954|        const auto view = src.view();
 4801|    954|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    954|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 310, False: 644]
  ------------------
 4804|    310|            return unexpected_scan_error(
 4805|    310|                scan_error::invalid_scanned_value,
 4806|    310|                "Invalid encoding in scanned string_view");
 4807|    310|        }
 4808|       |
 4809|    644|        return SCN_MOVE(result);
  ------------------
  |  |  928|    644|    static_cast<    \
  |  |  929|    644|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    954|    }
 4811|    954|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|    954|    auto src = [&]() {
 4776|    954|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    954|            return make_contiguous_buffer(
 4778|    954|                ranges::subrange{range.begin().base(), result.base()});
 4779|    954|        }
 4780|    954|        else {
 4781|    954|            return make_contiguous_buffer(
 4782|    954|                ranges::subrange{range.begin(), result});
 4783|    954|        }
 4784|    954|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     44|    {
 4863|     44|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 30, False: 14]
  ------------------
 4864|     30|            return read_string_view_impl(
 4865|     30|                range,
 4866|     30|                read_until_code_unit(
 4867|     30|                    range,
 4868|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     30|                        SourceCharT ch) { return ch == until; }),
 4870|     30|                value);
 4871|     30|        }
 4872|     14|        return read_string_view_impl(
 4873|     14|            range,
 4874|     14|            read_until_code_units(
 4875|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     14|            value);
 4877|     44|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES14_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|    442|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    442|                  obj(static_cast<decltype(args)>(args)...);
  747|    442|              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|    442|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    442|            return static_cast<T*>(s.m_cp);
  686|    442|        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    442|            return static_cast<T*>(s.m_p);
  689|    442|        }
  690|    442|        else {
  691|    442|            return reinterpret_cast<T*>(s.m_fp);
  692|    442|        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4869|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|    864|    {
 5062|    864|        auto it = read_source_impl(range, {specs});
 5063|    864|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    864|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 328, False: 536]
  |  |  ------------------
  ------------------
 5064|    328|            return unexpected(it.error());
 5065|    328|        }
 5066|       |
 5067|    536|        return read_string_view_impl(range, *it, value);
 5068|    864|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  1.10k|{
 4773|  1.10k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.10k|    auto src = [&]() {
 4776|  1.10k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.10k|            return make_contiguous_buffer(
 4778|  1.10k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.10k|        }
 4780|  1.10k|        else {
 4781|  1.10k|            return make_contiguous_buffer(
 4782|  1.10k|                ranges::subrange{range.begin(), result});
 4783|  1.10k|        }
 4784|  1.10k|    }();
 4785|  1.10k|    using src_type = decltype(src);
 4786|       |
 4787|  1.10k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.10k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.10k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.10k|                                     "Cannot read a string_view from "
 4796|  1.10k|                                     "this source range (would require "
 4797|  1.10k|                                     "transcoding)");
 4798|  1.10k|    }
 4799|  1.10k|    else {
 4800|  1.10k|        const auto view = src.view();
 4801|  1.10k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.10k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 130, False: 970]
  ------------------
 4804|    130|            return unexpected_scan_error(
 4805|    130|                scan_error::invalid_scanned_value,
 4806|    130|                "Invalid encoding in scanned string_view");
 4807|    130|        }
 4808|       |
 4809|    970|        return SCN_MOVE(result);
  ------------------
  |  |  928|    970|    static_cast<    \
  |  |  929|    970|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.10k|    }
 4811|  1.10k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  1.10k|    auto src = [&]() {
 4776|  1.10k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.10k|            return make_contiguous_buffer(
 4778|  1.10k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.10k|        }
 4780|  1.10k|        else {
 4781|  1.10k|            return make_contiguous_buffer(
 4782|  1.10k|                ranges::subrange{range.begin(), result});
 4783|  1.10k|        }
 4784|  1.10k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  3.40k|    {
 4902|  3.40k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.84k, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.84k|    }                                                  \
  |  |  |  | 3671|  3.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    564|        return read_string_view_impl(range, it, value);
 4904|  3.40k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5623|  2.55k|    {
 5624|  2.55k|        reader_error_handler eh{};
 5625|  2.55k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  2.55k|            detail::check_code_point_type_specs(specs, eh);
 5627|  2.55k|        }
 5628|  2.55k|        else {
 5629|  2.55k|            detail::check_char_type_specs(specs, eh);
 5630|  2.55k|        }
 5631|  2.55k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.10k, False: 448]
  |  |  ------------------
  ------------------
 5632|  2.10k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  2.10k|        }
 5634|    448|        return {};
 5635|  2.55k|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  9.57k|    {
  763|  9.57k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  9.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  9.57k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.28k|    {
  754|  1.28k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  3.33k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.33k|              cvref<T> obj = *get<T>(fn);
  745|  3.33k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.33k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.33k|              }
  748|  3.33k|              else {
  749|  3.33k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.33k|              }
  751|  3.33k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  3.33k|    {
  684|  3.33k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.33k|            return static_cast<T*>(s.m_cp);
  686|  3.33k|        }
  687|  3.33k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.33k|            return static_cast<T*>(s.m_p);
  689|  3.33k|        }
  690|  3.33k|        else {
  691|  3.33k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.33k|        }
  693|  3.33k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  1.28k|        {
  662|  1.28k|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5618|  1.32k|    {
 5619|  1.32k|        return false;
 5620|  1.32k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|     70|    {
 1780|     70|        auto stdloc = loc.get<std::locale>();
 1781|     70|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     70|        grouping = numpunct.grouping();
 1783|     70|        thousands_sep =
 1784|     70|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 70]
  ------------------
 1785|     70|        decimal_point = numpunct.decimal_point();
 1786|     70|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|     84|{
 1717|     84|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 84, False: 0]
  ------------------
 1718|     84|        return std::use_facet<Facet>(stdloc);
 1719|     84|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     84|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  3.63k|{
 2349|  3.63k|    size_t count{0};
 2350|  3.63k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  3.63k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  3.63k|    });
 2353|  3.63k|    return count;
 2354|  3.63k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  3.63k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  3.63k|    auto it = input.begin();
 1448|  11.8k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 8.21k, False: 3.63k]
  ------------------
 1449|  8.21k|        auto res = get_next_code_point(
 1450|  8.21k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  8.21k|        cb(res.value);
 1452|  8.21k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  8.21k|    }
 1454|  3.63k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   231k|{
 1169|   231k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   231k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   231k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   231k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   231k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 231k]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   231k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 231k]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   231k|    return {input.begin() + len,
 1181|   231k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   231k|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  3.63k|    {
  754|  3.63k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  8.21k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.21k|              cvref<T> obj = *get<T>(fn);
  745|  8.21k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  8.21k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.21k|              }
  748|  8.21k|              else {
  749|  8.21k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.21k|              }
  751|  8.21k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  8.21k|    {
  684|  8.21k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  8.21k|            return static_cast<T*>(s.m_cp);
  686|  8.21k|        }
  687|  8.21k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  8.21k|            return static_cast<T*>(s.m_p);
  689|  8.21k|        }
  690|  8.21k|        else {
  691|  8.21k|            return reinterpret_cast<T*>(s.m_fp);
  692|  8.21k|        }
  693|  8.21k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  8.21k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  8.21k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  8.21k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  3.63k|        {
  662|  3.63k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  1.95k|    {
 1582|  1.95k|        return m_view;
 1583|  1.95k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  2.12k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2420|    280|    {
 2421|    280|        return m_multibyte_left;
 2422|    280|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2425|  25.2k|    {
 2426|  25.2k|        return *m_current;
 2427|  25.2k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2434|  18.9k|    {
 2435|  18.9k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  18.9k|        _increment_current();
 2437|  18.9k|        return *this;
 2438|  18.9k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2667|  18.9k|    {
 2668|  18.9k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 18.9k, False: 0]
  ------------------
 2669|  18.9k|            auto cplen = _get_cp_length_at_current();
 2670|  18.9k|            m_multibyte_left = cplen - 1;
 2671|  18.9k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  18.9k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  18.9k|        ++m_current;
 2678|  18.9k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2638|  18.9k|    {
 2639|  18.9k|        return static_cast<difference_type>(
 2640|  18.9k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  18.9k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2644|  18.9k|    {
 2645|  18.9k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.9k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  18.9k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 18.9k, False: 0]
  ------------------
 2650|  18.9k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  18.9k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  18.9k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  18.9k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  5.00k|{
 1857|  5.00k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  5.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  5.00k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  5.00k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  5.00k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 118, False: 4.89k]
  ------------------
 1862|    118|            return unexpected(eof_error::eof);
 1863|    118|        }
 1864|       |
 1865|  4.89k|        return ranges::next(range.begin(), count);
 1866|  5.00k|    }
 1867|  5.00k|    else {
 1868|  5.00k|        auto it = range.begin();
 1869|  5.00k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  5.00k|            return ranges::next(it, count);
 1871|  5.00k|        }
 1872|       |
 1873|  5.00k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  5.00k|            if (it == range.end()) {
 1875|  5.00k|                return unexpected(eof_error::eof);
 1876|  5.00k|            }
 1877|  5.00k|        }
 1878|       |
 1879|  5.00k|        return it;
 1880|  5.00k|    }
 1881|  5.00k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  6.41k|    {
 2531|  6.41k|        return !(a == b);
 2532|  6.41k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  6.86k|    {
 2523|  6.86k|        return a.m_current == b.m_current;
 2524|  6.86k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2429|  1.62k|    {
 2430|  1.62k|        return *m_current;
 2431|  1.62k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1889|  6.57k|    {
 1890|  6.57k|        return !codepoint.empty();
 1891|  6.57k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1682|    274|{
 1683|    274|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|    274|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|    274|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|    274|        return string_view_wrapper{SCN_FWD(range)};
 1687|    274|    }
 1688|    274|    else {
 1689|    274|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|    274|    }
 1691|    274|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EELPv0EEEOT_:
 1536|    274|    {
 1537|    274|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|    274|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1620|    274|    {
 1621|    274|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    274|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    274|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    274|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    274|            m_storage.reset();
 1627|    274|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    274|        }
 1629|    274|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|    274|                                          std::basic_string<CharT>>) {
 1631|    274|            m_storage.emplace(SCN_FWD(range));
 1632|    274|            m_view = string_view_type{*m_storage};
 1633|    274|        }
 1634|    274|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|    274|                                          typename detail::basic_scan_buffer<
 1636|    274|                                              value_t>::forward_iterator> &&
 1637|    274|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|    274|            auto beg_seg = range.begin().contiguous_segment();
 1639|    274|            auto end_seg = range.end().contiguous_segment();
 1640|    274|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    274|                             detail::to_address(end_seg.end()))) {
 1642|    274|                auto& str = m_storage.emplace();
 1643|    274|                str.reserve(range.end().position() - range.begin().position());
 1644|    274|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    274|                m_view = string_view_type{str};
 1646|    274|                return;
 1647|    274|            }
 1648|       |
 1649|    274|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    274|                                                            end_seg.data());
 1651|    274|            m_storage.reset();
 1652|    274|        }
 1653|    274|        else {
 1654|    274|            auto& str = m_storage.emplace();
 1655|    274|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|    274|                str.reserve(range.size());
 1657|    274|            }
 1658|    274|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|    274|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    274|                          std::back_inserter(str));
 1661|    274|            }
 1662|    274|            else {
 1663|    274|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    274|                     ++it) {
 1665|    274|                    str.push_back(*it);
 1666|    274|                }
 1667|    274|            }
 1668|    274|            m_view = string_view_type{str};
 1669|    274|        }
 1670|    274|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2381|  6.81k|    {
 2382|  6.81k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2412|  26.1k|    {
 2413|  26.1k|        return m_current;
 2414|  26.1k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  2.97k|{
 2117|  2.97k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.97k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.97k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.97k|        auto buf = make_contiguous_buffer(range);
 2121|  2.97k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.97k|        return ranges::next(range.begin(),
 2123|  2.97k|                            ranges::distance(buf.view().begin(), it));
 2124|  2.97k|    }
 2125|  2.97k|    else {
 2126|  2.97k|        auto it = range.begin();
 2127|       |
 2128|  2.97k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.97k|            auto seg = get_contiguous_beginning(range);
 2130|  2.97k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.97k|                seg_it != seg.end()) {
 2132|  2.97k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  2.97k|            }
 2134|  2.97k|            ranges::advance(it, seg.size());
 2135|  2.97k|        }
 2136|       |
 2137|  2.97k|        return read_while_code_point(
 2138|  2.97k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.97k|    }
 2140|  2.97k|}
_ZN3scn2v34impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2081|  2.97k|{
 2082|  2.97k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.97k|}
_ZN3scn2v34impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2060|  2.97k|{
 2061|  2.97k|    auto it = range.begin();
 2062|  4.99k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 4.14k, False: 850]
  ------------------
 2063|  4.14k|        const auto val =
 2064|  4.14k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  4.14k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  4.14k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.14k, False: 0]
  |  |  ------------------
  ------------------
 2066|  4.14k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  4.14k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  4.14k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.12k, False: 2.02k]
  ------------------
 2069|  2.12k|                return it;
 2070|  2.12k|            }
 2071|  4.14k|        }
 2072|  2.02k|        it = val.iterator;
 2073|  2.02k|    }
 2074|       |
 2075|    850|    return it;
 2076|  2.97k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  45.8k|{
 1899|  45.8k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  45.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  45.8k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  45.8k|    auto it = range.begin();
 1903|  45.8k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  45.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  45.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.8k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  45.8k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 45.8k, False: 0]
  ------------------
 1912|  45.8k|        ++it;
 1913|  45.8k|        return {it, string_type(1, *range.begin())};
 1914|  45.8k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  45.8k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  64.4k|{
  944|  64.4k|    return is_range_eof(r.begin(), r.end());
  945|  64.4k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   287k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   287k|    {
  937|   287k|        return begin == end;
  938|   287k|    }
  939|   287k|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    804|    {
  190|    804|        i = std::move(bound);
  191|    804|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  45.8k|    {
 1890|  45.8k|        return !codepoint.empty();
 1891|  45.8k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  2.97k|    {
  754|  2.97k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  4.14k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.14k|              cvref<T> obj = *get<T>(fn);
  745|  4.14k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.14k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.14k|              }
  748|  4.14k|              else {
  749|  4.14k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.14k|              }
  751|  4.14k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  4.14k|    {
  684|  4.14k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.14k|            return static_cast<T*>(s.m_cp);
  686|  4.14k|        }
  687|  4.14k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.14k|            return static_cast<T*>(s.m_p);
  689|  4.14k|        }
  690|  4.14k|        else {
  691|  4.14k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.14k|        }
  693|  4.14k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2138|  4.14k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  2.97k|        {
  662|  2.97k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  18.6k|{
  950|  18.6k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.6k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  18.6k|    return eof_error::good;
  954|  18.6k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  2.48k|    {
 2832|  2.48k|        return take_width_view{r, n};
 2833|  2.48k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2800|  2.48k|    {
 2801|  2.48k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2713|  2.48k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5698|    112|    {
 5699|    112|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 92, False: 20]
  ------------------
 5700|    112|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 20]
  ------------------
 5701|     92|            return read_default(range, value, loc);
 5702|     92|        }
 5703|       |
 5704|     20|        reader_impl_for_int<CharT> reader{};
 5705|     20|        using integer_type =
 5706|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     20|        integer_type tmp_value{};
 5708|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     20|        value = static_cast<integer_type>(value);
 5710|     20|        return ret;
 5711|    112|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5682|     92|    {
 5683|     92|        SCN_UNUSED(loc);
  ------------------
  |  |  909|     92|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|     92|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|     92|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|     92|        }
 5687|     92|        else {
 5688|     92|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|     92|        }
 5690|     92|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5563|     92|    {
 5564|     92|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|     92|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     92|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     92|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     92|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 92]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     92|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     92|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|     92|        ch = *range.begin();
 5566|     92|        return it;
 5567|     92|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|    822|{
 1846|    822|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    822|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 822]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|    822|    return ranges::next(range.begin());
 1851|    822|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|    822|{
  950|    822|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|    822|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 822]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|    822|    return eof_error::good;
  954|    822|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|    822|{
  944|    822|    return is_range_eof(r.begin(), r.end());
  945|    822|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  7.43k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  7.43k|    {
  937|  7.43k|        return begin == end;
  938|  7.43k|    }
  939|  7.43k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  24.5k|        {
 2770|  24.5k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 280, False: 24.2k]
  |  Branch (2770:39): [True: 280, False: 0]
  ------------------
 2771|  24.5k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 270, False: 23.9k]
  ------------------
 2772|  24.5k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2815|  9.72k|    {
 2816|  9.72k|        return sentinel<true>{m_base.get().end()};
 2817|  9.72k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2716|  23.3k|    {
 2717|  23.3k|        return view;
 2718|  23.3k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2750|  9.72k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|    856|    {
  296|    856|        ++x;
  297|    856|        return x;
  298|    856|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2809|  6.81k|    {
 2810|  6.81k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  6.81k|                                      m_count};
 2812|  6.81k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    146|    {
 3539|    146|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    146|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    146|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    146|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 146]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    146|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    146|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    146|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    146|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 146]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    146|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 146]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    146|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    146|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 132, False: 14]
  |  |  ------------------
  ------------------
 3565|    132|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    132|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    132|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    132|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 132, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    132|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    132|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    132|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    132|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    132|    }                                                  \
  |  |  |  | 3671|    132|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     14|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     14|            localized_number_formatting_options<CharT>{loc};
 3586|     14|#endif
 3587|       |
 3588|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    366|{
 3326|    366|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|    366|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    366|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    366|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 366]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    366|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    366|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    366|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    366|        parse_integer_base_prefix(
 3331|    366|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    366|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 366]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    366|    else {
 3343|    366|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 366]
  |  Branch (3343:13): [True: 366, False: 0]
  ------------------
 3344|    366|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 366, False: 0]
  ------------------
 3345|    366|            digits_begin_it = base_prefix_begin_it;
 3346|    366|        }
 3347|    366|    }
 3348|       |
 3349|    366|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 366, False: 0]
  ------------------
 3350|    366|        sign = sign_type::plus_sign;
 3351|    366|    }
 3352|    366|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    366|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    366|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|    478|{
 3141|    478|    auto r = read_one_of_code_unit(range, "+-");
 3142|    478|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 478, False: 0]
  ------------------
 3143|    478|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 478, False: 0]
  ------------------
 3144|    478|            return std::pair{range.begin(), sign_type::default_sign};
 3145|    478|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|    478|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|    478|{
 2272|    478|    auto it = read_code_unit(range);
 2273|    478|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 478]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|    956|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 956, False: 478]
  ------------------
 2278|    956|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 956]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|    956|    }
 2282|       |
 2283|    478|    return unexpected(parse_error::error);
 2284|    478|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    366|{
 3293|    366|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 360]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     12|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 12, False: 354]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     12|            bool zero_parsed = false;
 3302|     12|            auto it = apply_opt(
 3303|     12|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     12|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    104|        case 16:
  ------------------
  |  Branch (3307:9): [True: 104, False: 262]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    104|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    104|                    false};
 3311|       |
 3312|     22|        case 0:
  ------------------
  |  Branch (3312:9): [True: 22, False: 344]
  ------------------
 3313|       |            // detect base
 3314|     22|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    222|        default:
  ------------------
  |  Branch (3316:9): [True: 222, False: 144]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    222|            return {range.begin(), base, false};
 3319|    366|    }
 3320|    366|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    122|{
 2291|    122|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 122, False: 0]
  ------------------
 2292|    122|        return range.begin();
 2293|    122|    }
 2294|      0|    return *result;
 2295|    122|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     28|{
 3244|     28|    return read_matching_string_classic_nocase(range, "0b");
 3245|     28|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|    516|{
 2231|    516|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|    516|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|    516|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|    516|        if (range.size() < str.size()) {
 2236|    516|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|    516|        }
 2238|    516|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|    516|            return unexpected(parse_error::error);
 2240|    516|        }
 2241|    516|        return ranges::next(range.begin(), str.size());
 2242|    516|    }
 2243|    516|    else {
 2244|    516|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    516|            if (ch < 'A' || ch > 'Z') {
 2246|    516|                return ch;
 2247|    516|            }
 2248|    516|            return static_cast<char_type>(ch +
 2249|    516|                                          static_cast<char_type>('a' - 'A'));
 2250|    516|        };
 2251|       |
 2252|    516|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    516|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    516|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    516|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    516|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 82, False: 434]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     82|    }                                                  \
  |  |  |  | 3671|    516|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    434|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    434|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    434|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    434|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    434|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 434, False: 0]
  |  |  ------------------
  ------------------
 2257|    434|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    434|                    return ascii_tolower(a) ==
 2259|    434|                           static_cast<detail::char_t<Range>>(b);
 2260|    434|                }))) {
 2261|    434|            return unexpected(parse_error::error);
 2262|    434|        }
 2263|       |
 2264|      0|        return it;
 2265|    434|    }
 2266|    516|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|    516|{
 1857|    516|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    516|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    516|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    516|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    516|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    516|        if (sz < count) {
 1862|    516|            return unexpected(eof_error::eof);
 1863|    516|        }
 1864|       |
 1865|    516|        return ranges::next(range.begin(), count);
 1866|    516|    }
 1867|    516|    else {
 1868|    516|        auto it = range.begin();
 1869|    516|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 516]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  1.67k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.24k, False: 434]
  ------------------
 1874|  1.24k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 82, False: 1.15k]
  ------------------
 1875|     82|                return unexpected(eof_error::eof);
 1876|     82|            }
 1877|  1.24k|        }
 1878|       |
 1879|    434|        return it;
 1880|    516|    }
 1881|    516|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|    516|{
 1095|    516|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    516|        return r.size();
 1097|    516|    }
 1098|    516|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    516|                           ranges::const_iterator_t<Range>,
 1100|    516|                           typename detail::basic_scan_buffer<
 1101|    516|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    516|        if constexpr (ranges::common_range<Range>) {
 1103|    516|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    516|        }
 1105|    516|        else {
 1106|    516|            if (r.begin().stores_parent()) {
 1107|    516|                return static_cast<size_t>(
 1108|    516|                    r.begin().parent()->chars_available() -
 1109|    516|                    r.begin().position());
 1110|    516|            }
 1111|    516|            return r.begin().contiguous_segment().size();
 1112|    516|        }
 1113|    516|    }
 1114|    516|    else {
 1115|    516|        return 0;
 1116|    516|    }
 1117|    516|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2244|    434|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    434|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 32, False: 402]
  |  Branch (2245:29): [True: 402, False: 0]
  ------------------
 2246|    434|                return ch;
 2247|    434|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    434|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     34|{
 2146|     34|    auto it = read_code_unit(range);
 2147|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2152|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     34|        return unexpected(parse_error::error);
 2154|     34|    }
 2155|       |
 2156|      0|    return *it;
 2157|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     34|{
 1846|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     34|    return ranges::next(range.begin());
 1851|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  6.60k|{
  944|  6.60k|    return is_range_eof(r.begin(), r.end());
  945|  6.60k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    126|{
 3251|    126|    return read_matching_string_classic_nocase(range, "0x");
 3252|    126|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     22|{
 3274|     22|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 22]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     22|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 22]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     22|    {
 3281|     22|        bool zero_parsed{false};
 3282|     22|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 22]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     22|    }
 3286|     22|    return {range.begin(), 10, false};
 3287|     22|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    338|{
 3360|    338|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    338|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    338|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    338|            return unexpected_scan_error(
 3365|    338|                scan_error::invalid_scanned_value,
 3366|    338|                "Failed to parse integer: No digits found");
 3367|    338|        }
 3368|    338|        return range.end();
 3369|    338|    }
 3370|    338|    else {
 3371|    338|        return read_while1_code_unit(range,
 3372|    338|                                     [&](char_type ch) noexcept {
 3373|    338|                                         return char_to_int(ch) < base;
 3374|    338|                                     })
 3375|    338|            .transform_error(map_parse_error_to_scan_error(
 3376|    338|                scan_error::invalid_scanned_value,
 3377|    338|                "Failed to parse integer: No digits found"));
 3378|    338|    }
 3379|    338|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|    450|{
 1996|    450|    auto it = read_while_code_unit(range, pred);
 1997|    450|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 450, False: 0]
  ------------------
 1998|    450|        return unexpected(parse_error::error);
 1999|    450|    }
 2000|      0|    return it;
 2001|    450|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|    450|{
 1976|    450|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    450|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|    450|{
 1957|    450|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    450|        return std::find_if(range.begin(), range.end(), pred);
 1959|    450|    }
 1960|    450|    else {
 1961|    450|        auto first = range.begin();
 1962|    450|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 450, False: 0]
  ------------------
 1963|    450|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 450, False: 0]
  ------------------
 1964|    450|                return first;
 1965|    450|            }
 1966|    450|        }
 1967|      0|        return first;
 1968|    450|    }
 1969|    450|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  11.9k|        {
 2781|  11.9k|            return !(y == x);
 2782|  11.9k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_:
  753|    338|    {
  754|    338|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|    338|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    338|              cvref<T> obj = *get<T>(fn);
  745|    338|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    338|                  obj(static_cast<decltype(args)>(args)...);
  747|    338|              }
  748|    338|              else {
  749|    338|                  return obj(static_cast<decltype(args)>(args)...);
  750|    338|              }
  751|    338|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    338|    {
  684|    338|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    338|            return static_cast<T*>(s.m_cp);
  686|    338|        }
  687|    338|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    338|            return static_cast<T*>(s.m_p);
  689|    338|        }
  690|    338|        else {
  691|    338|            return reinterpret_cast<T*>(s.m_fp);
  692|    338|        }
  693|    338|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3372|    338|                                     [&](char_type ch) noexcept {
 3373|    338|                                         return char_to_int(ch) < base;
 3374|    338|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_LPv0EEEPSP_:
  661|    338|        {
  662|    338|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     28|{
 3390|     28|    std::basic_string<CharT> output;
 3391|     28|    std::string thsep_indices;
 3392|     28|    auto it = range.begin();
 3393|     28|    bool digit_matched = false;
 3394|     28|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 28, False: 0]
  ------------------
 3395|     28|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 28]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     28|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 28, False: 0]
  ------------------
 3400|     28|            break;
 3401|     28|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     28|    }
 3407|     28|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 3408|     28|        return unexpected_scan_error(
 3409|     28|            scan_error::invalid_scanned_value,
 3410|     28|            "Failed to parse integer: No digits found");
 3411|     28|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     28|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2416|  24.9k|    {
 2417|  24.9k|        return m_count;
 2418|  24.9k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5698|    334|    {
 5699|    334|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 314, False: 20]
  ------------------
 5700|    334|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 20]
  ------------------
 5701|    314|            return read_default(range, value, loc);
 5702|    314|        }
 5703|       |
 5704|     20|        reader_impl_for_int<CharT> reader{};
 5705|     20|        using integer_type =
 5706|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     20|        integer_type tmp_value{};
 5708|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     20|        value = static_cast<integer_type>(value);
 5710|     20|        return ret;
 5711|    334|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5682|    788|    {
 5683|    788|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    788|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|    788|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|    788|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|    788|        }
 5687|    788|        else {
 5688|    788|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    788|        }
 5690|    788|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5563|    788|    {
 5564|    788|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    788|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    788|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    788|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    788|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 788]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    788|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    788|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    788|        ch = *range.begin();
 5566|    788|        return it;
 5567|    788|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  5.72k|{
 1846|  5.72k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.72k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  5.72k|    return ranges::next(range.begin());
 1851|  5.72k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   164k|    {
  296|   164k|        ++x;
  297|   164k|        return x;
  298|   164k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    368|    {
 3539|    368|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    368|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    368|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    368|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    368|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    368|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    368|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 368]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    368|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 368]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    368|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    368|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 354, False: 14]
  |  |  ------------------
  ------------------
 3565|    354|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    354|                    parse_integer_digits_without_thsep(
 3567|    354|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    354|                        prefix_result.parsed_base));
 3569|       |
 3570|    354|            auto buf = make_contiguous_buffer(
 3571|    354|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    354|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 354, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    354|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    354|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    354|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    354|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    354|    }                                                  \
  |  |  |  | 3671|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    354|        }
 3580|       |
 3581|     14|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     14|            localized_number_formatting_options<CharT>{loc};
 3586|     14|#endif
 3587|       |
 3588|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.45k|{
 3326|  2.45k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  2.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.45k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.45k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.45k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.45k|        parse_integer_base_prefix(
 3331|  2.45k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.45k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.45k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.45k|    else {
 3343|  2.45k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.45k]
  ------------------
 3344|  2.45k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.45k, False: 0]
  ------------------
 3345|  2.45k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.45k|        }
 3347|  2.45k|    }
 3348|       |
 3349|  2.45k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.45k, False: 0]
  ------------------
 3350|  2.45k|        sign = sign_type::plus_sign;
 3351|  2.45k|    }
 3352|  2.45k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.45k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.45k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.26k|{
 3141|  3.26k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.26k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.26k, False: 0]
  ------------------
 3143|  3.26k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.26k, False: 0]
  ------------------
 3144|  3.26k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.26k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.26k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.26k|{
 2272|  3.26k|    auto it = read_code_unit(range);
 2273|  3.26k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.26k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  6.53k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 6.53k, False: 3.26k]
  ------------------
 2278|  6.53k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 6.53k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  6.53k|    }
 2282|       |
 2283|  3.26k|    return unexpected(parse_error::error);
 2284|  3.26k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.45k|{
 3293|  2.45k|    switch (base) {
 3294|     12|        case 2:
  ------------------
  |  Branch (3294:9): [True: 12, False: 2.44k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     12|                    false};
 3298|       |
 3299|     10|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 10, False: 2.44k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     10|            bool zero_parsed = false;
 3302|     10|            auto it = apply_opt(
 3303|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     10|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    806|        case 16:
  ------------------
  |  Branch (3307:9): [True: 806, False: 1.64k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    806|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    806|                    false};
 3311|       |
 3312|     16|        case 0:
  ------------------
  |  Branch (3312:9): [True: 16, False: 2.43k]
  ------------------
 3313|       |            // detect base
 3314|     16|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.61k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.61k, False: 844]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.61k|            return {range.begin(), base, false};
 3319|  2.45k|    }
 3320|  2.45k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    828|{
 2291|    828|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 828, False: 0]
  ------------------
 2292|    828|        return range.begin();
 2293|    828|    }
 2294|      0|    return *result;
 2295|    828|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     28|{
 3244|     28|    return read_matching_string_classic_nocase(range, "0b");
 3245|     28|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.30k|{
 2231|  3.30k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.30k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.30k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.30k|        if (range.size() < str.size()) {
 2236|  3.30k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  3.30k|        }
 2238|  3.30k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  3.30k|            return unexpected(parse_error::error);
 2240|  3.30k|        }
 2241|  3.30k|        return ranges::next(range.begin(), str.size());
 2242|  3.30k|    }
 2243|  3.30k|    else {
 2244|  3.30k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.30k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.30k|                return ch;
 2247|  3.30k|            }
 2248|  3.30k|            return static_cast<char_type>(ch +
 2249|  3.30k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.30k|        };
 2251|       |
 2252|  3.30k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  3.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 3.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      4|    }                                                  \
  |  |  |  | 3671|  3.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  3.30k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.30k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.30k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.30k, False: 0]
  |  |  ------------------
  ------------------
 2257|  3.30k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.30k|                    return ascii_tolower(a) ==
 2259|  3.30k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.30k|                }))) {
 2261|  3.30k|            return unexpected(parse_error::error);
 2262|  3.30k|        }
 2263|       |
 2264|      0|        return it;
 2265|  3.30k|    }
 2266|  3.30k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  3.30k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.30k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 44, False: 3.25k]
  |  Branch (2245:29): [True: 3.25k, False: 0]
  ------------------
 2246|  3.30k|                return ch;
 2247|  3.30k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.30k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     26|{
 3258|     26|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 26]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     26|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 26]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     26|    return unexpected(parse_error::error);
 3268|     26|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.67k|{
 2146|  1.67k|    auto it = read_code_unit(range);
 2147|  1.67k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.67k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.67k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.67k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.67k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.67k|        return unexpected(parse_error::error);
 2154|  1.67k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.67k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    822|{
 3251|    822|    return read_matching_string_classic_nocase(range, "0x");
 3252|    822|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     16|{
 3274|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 16]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 16]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     16|    {
 3281|     16|        bool zero_parsed{false};
 3282|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 16]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     16|    }
 3286|     16|    return {range.begin(), 10, false};
 3287|     16|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.42k|{
 3360|  2.42k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.42k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.42k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.42k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.42k|        return range.end();
 3369|  2.42k|    }
 3370|  2.42k|    else {
 3371|  2.42k|        return read_while1_code_unit(range,
 3372|  2.42k|                                     [&](char_type ch) noexcept {
 3373|  2.42k|                                         return char_to_int(ch) < base;
 3374|  2.42k|                                     })
 3375|  2.42k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.42k|                scan_error::invalid_scanned_value,
 3377|  2.42k|                "Failed to parse integer: No digits found"));
 3378|  2.42k|    }
 3379|  2.42k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     28|{
 3390|     28|    std::basic_string<CharT> output;
 3391|     28|    std::string thsep_indices;
 3392|     28|    auto it = range.begin();
 3393|     28|    bool digit_matched = false;
 3394|     28|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 28, False: 0]
  ------------------
 3395|     28|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 28]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     28|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 28, False: 0]
  ------------------
 3400|     28|            break;
 3401|     28|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     28|    }
 3407|     28|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 3408|     28|        return unexpected_scan_error(
 3409|     28|            scan_error::invalid_scanned_value,
 3410|     28|            "Failed to parse integer: No digits found");
 3411|     28|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     28|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  10.0k|{
 1683|  10.0k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  10.0k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  10.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  10.0k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  10.0k|    }
 1688|  10.0k|    else {
 1689|  10.0k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  10.0k|    }
 1691|  10.0k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  10.0k|    {
 1490|  10.0k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  11.8k|    {
 1503|  11.8k|        return sv;
 1504|  11.8k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|    536|{
 5951|    536|    using char_type = detail::char_t<Range>;
 5952|    536|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    536|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 536, False: 0]
  ------------------
 5955|    536|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    536|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    536|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 448, False: 88]
  ------------------
 5959|    448|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|    448|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 106, False: 342]
  ------------------
 5962|    106|                auto prefix_width =
 5963|    106|                    static_cast<std::ptrdiff_t>(
 5964|    106|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|    106|                    ranges::distance(range.begin(), it);
 5966|    106|                return result_type{it, prefix_width};
 5967|    106|            }
 5968|    342|            return result_type{it, 0};
 5969|    448|        }
 5970|       |
 5971|     88|        auto max_width_view = take_width(range, max_width);
 5972|     88|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|     88|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 88, False: 0]
  ------------------
 5975|     88|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|     88|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|     88|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|    510|{
 1976|    510|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    510|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|    678|{
 1957|    678|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    678|        return std::find_if(range.begin(), range.end(), pred);
 1959|    678|    }
 1960|    678|    else {
 1961|    678|        auto first = range.begin();
 1962|    678|        for (; first != range.end(); ++first) {
 1963|    678|            if (pred(*first)) {
 1964|    678|                return first;
 1965|    678|            }
 1966|    678|        }
 1967|    678|        return first;
 1968|    678|    }
 1969|    678|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_:
  753|    536|    {
  754|    536|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  1.51k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.51k|              cvref<T> obj = *get<T>(fn);
  745|  1.51k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.51k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.51k|              }
  748|  1.51k|              else {
  749|  1.51k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.51k|              }
  751|  1.51k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|  1.51k|    {
  684|  1.51k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.51k|            return static_cast<T*>(s.m_cp);
  686|  1.51k|        }
  687|  1.51k|        else if constexpr (std::is_object_v<T>) {
  688|  1.51k|            return static_cast<T*>(s.m_p);
  689|  1.51k|        }
  690|  1.51k|        else {
  691|  1.51k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.51k|        }
  693|  1.51k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|  1.51k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSH_:
  666|    536|        {
  667|    536|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|     88|{
 1976|     88|    return read_until_code_unit(range, std::not_fn(pred));
 1977|     88|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    148|{
 1957|    148|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    148|        return std::find_if(range.begin(), range.end(), pred);
 1959|    148|    }
 1960|    148|    else {
 1961|    148|        auto first = range.begin();
 1962|  1.96k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.86k, False: 104]
  ------------------
 1963|  1.86k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 44, False: 1.81k]
  ------------------
 1964|     44|                return first;
 1965|     44|            }
 1966|  1.86k|        }
 1967|    104|        return first;
 1968|    148|    }
 1969|    148|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|     76|{
 2951|     76|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 76]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|     76|    return read_while_classic_space(range);
 2962|     76|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|     76|{
 2117|     76|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|     76|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|     76|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|     76|        auto buf = make_contiguous_buffer(range);
 2121|     76|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|     76|        return ranges::next(range.begin(),
 2123|     76|                            ranges::distance(buf.view().begin(), it));
 2124|     76|    }
 2125|     76|    else {
 2126|     76|        auto it = range.begin();
 2127|       |
 2128|     76|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|     76|            auto seg = get_contiguous_beginning(range);
 2130|     76|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|     76|                seg_it != seg.end()) {
 2132|     76|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|     76|            }
 2134|     76|            ranges::advance(it, seg.size());
 2135|     76|        }
 2136|       |
 2137|     76|        return read_while_code_point(
 2138|     76|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|     76|    }
 2140|     76|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|     76|{
 2082|     76|    return read_until_code_point(range, std::not_fn(pred));
 2083|     76|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|     76|{
 2061|     76|    auto it = range.begin();
 2062|     76|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 76, False: 0]
  ------------------
 2063|     76|        const auto val =
 2064|     76|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|     76|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|     76|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 76, False: 0]
  |  |  ------------------
  ------------------
 2066|     76|            const auto cp = detail::decode_code_point_exhaustive(
 2067|     76|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|     76|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 76, False: 0]
  ------------------
 2069|     76|                return it;
 2070|     76|            }
 2071|     76|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|     76|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  6.57k|{
 1899|  6.57k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  6.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  6.57k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  6.57k|    auto it = range.begin();
 1903|  6.57k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  6.57k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  6.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.57k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  6.57k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 6.57k, False: 0]
  ------------------
 1912|  6.57k|        ++it;
 1913|  6.57k|        return {it, string_type(1, *range.begin())};
 1914|  6.57k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  6.57k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|     76|    {
  754|     76|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|     76|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     76|              cvref<T> obj = *get<T>(fn);
  745|     76|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     76|                  obj(static_cast<decltype(args)>(args)...);
  747|     76|              }
  748|     76|              else {
  749|     76|                  return obj(static_cast<decltype(args)>(args)...);
  750|     76|              }
  751|     76|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|     76|    {
  684|     76|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     76|            return static_cast<T*>(s.m_cp);
  686|     76|        }
  687|     76|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     76|            return static_cast<T*>(s.m_p);
  689|     76|        }
  690|     76|        else {
  691|     76|            return reinterpret_cast<T*>(s.m_fp);
  692|     76|        }
  693|     76|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|     76|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|     76|        {
  662|     76|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  6.66k|{
 2951|  6.66k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 6.21k, False: 452]
  ------------------
 2952|  6.21k|        auto it = read_while_classic_space(range);
 2953|  6.21k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  6.21k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.21k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  6.21k|        return it;
 2959|  6.21k|    }
 2960|       |
 2961|    452|    return read_while_classic_space(range);
 2962|  6.66k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  9.63k|{
 2117|  9.63k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  9.63k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  9.63k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  9.63k|        auto buf = make_contiguous_buffer(range);
 2121|  9.63k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  9.63k|        return ranges::next(range.begin(),
 2123|  9.63k|                            ranges::distance(buf.view().begin(), it));
 2124|  9.63k|    }
 2125|  9.63k|    else {
 2126|  9.63k|        auto it = range.begin();
 2127|       |
 2128|  9.63k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  9.63k|            auto seg = get_contiguous_beginning(range);
 2130|  9.63k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  9.63k|                seg_it != seg.end()) {
 2132|  9.63k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  9.63k|            }
 2134|  9.63k|            ranges::advance(it, seg.size());
 2135|  9.63k|        }
 2136|       |
 2137|  9.63k|        return read_while_code_point(
 2138|  9.63k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  9.63k|    }
 2140|  9.63k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  9.80k|{
 2082|  9.80k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  9.80k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  12.2k|{
 2061|  12.2k|    auto it = range.begin();
 2062|  44.3k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 41.6k, False: 2.68k]
  ------------------
 2063|  41.6k|        const auto val =
 2064|  41.6k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  41.6k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  41.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 41.6k, False: 0]
  |  |  ------------------
  ------------------
 2066|  41.6k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  41.6k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  41.6k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 9.59k, False: 32.0k]
  ------------------
 2069|  9.59k|                return it;
 2070|  9.59k|            }
 2071|  41.6k|        }
 2072|  32.0k|        it = val.iterator;
 2073|  32.0k|    }
 2074|       |
 2075|  2.68k|    return it;
 2076|  12.2k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  9.63k|    {
  754|  9.63k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  11.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.5k|              cvref<T> obj = *get<T>(fn);
  745|  11.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  11.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.5k|              }
  748|  11.5k|              else {
  749|  11.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.5k|              }
  751|  11.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  11.5k|    {
  684|  11.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  11.5k|            return static_cast<T*>(s.m_cp);
  686|  11.5k|        }
  687|  11.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  11.5k|            return static_cast<T*>(s.m_p);
  689|  11.5k|        }
  690|  11.5k|        else {
  691|  11.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  11.5k|        }
  693|  11.5k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  11.5k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  9.63k|        {
  662|  9.63k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  5.18k|    {
 3040|  5.18k|        reader_error_handler eh{};
 3041|  5.18k|        get_derived().check_specs_impl(specs, eh);
 3042|  5.18k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.22k, False: 952]
  |  |  ------------------
  ------------------
 3043|  4.22k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.22k|        }
 3045|    952|        return {};
 3046|  5.18k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|  5.18k|    {
 3051|  5.18k|        return static_cast<Derived&>(*this);
 3052|  5.18k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  5.18k|    {
 3485|  5.18k|        detail::check_int_type_specs(specs, eh);
 3486|  5.18k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|  1.90k|    {
 3035|  1.90k|        return true;
 3036|  1.90k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    126|    {
 3539|    126|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    126|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    126|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 126]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    126|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 126]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    126|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    126|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 112, False: 14]
  |  |  ------------------
  ------------------
 3565|    112|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    112|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    112|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    112|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 112, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    112|    }                                                  \
  |  |  |  | 3671|    112|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     14|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     14|            localized_number_formatting_options<CharT>{loc};
 3586|     14|#endif
 3587|       |
 3588|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    348|    {
 3539|    348|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    348|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    348|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    348|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 348]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    348|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    348|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    348|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 348]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    348|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 348]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    348|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    348|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 334, False: 14]
  |  |  ------------------
  ------------------
 3565|    334|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 334]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    334|                    parse_integer_digits_without_thsep(
 3567|    334|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    334|                        prefix_result.parsed_base));
 3569|       |
 3570|    334|            auto buf = make_contiguous_buffer(
 3571|    334|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    334|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 334, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    334|    }                                                  \
  |  |  |  | 3671|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    334|        }
 3580|       |
 3581|     14|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     14|            localized_number_formatting_options<CharT>{loc};
 3586|     14|#endif
 3587|       |
 3588|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|     94|    {
 3539|     94|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     94|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     94|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     94|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 94]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     94|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     94|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     94|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     94|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 94]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     94|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 94]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     94|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     94|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 94, False: 0]
  |  |  ------------------
  ------------------
 3565|     94|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     94|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     94|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     94|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 94, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     94|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     94|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     94|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     94|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     94|    }                                                  \
  |  |  |  | 3671|     94|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    790|    {
 3539|    790|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    790|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    790|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    790|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    790|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 790]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    790|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    790|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    790|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    790|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 790]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    790|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 790]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    790|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    790|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 790, False: 0]
  |  |  ------------------
  ------------------
 3565|    790|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    790|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    790|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    790|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    790|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 790]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    790|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    790|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    790|                    parse_integer_digits_without_thsep(
 3567|    790|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    790|                        prefix_result.parsed_base));
 3569|       |
 3570|    790|            auto buf = make_contiguous_buffer(
 3571|    790|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    790|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    790|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    790|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    790|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    790|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 790, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    790|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    790|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    790|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    790|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    790|    }                                                  \
  |  |  |  | 3671|    790|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    790|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  2.59k|    {
 3040|  2.59k|        reader_error_handler eh{};
 3041|  2.59k|        get_derived().check_specs_impl(specs, eh);
 3042|  2.59k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.13k, False: 454]
  |  |  ------------------
  ------------------
 3043|  2.13k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  2.13k|        }
 3045|    454|        return {};
 3046|  2.59k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|  2.59k|    {
 3051|  2.59k|        return static_cast<Derived&>(*this);
 3052|  2.59k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  2.59k|    {
 4145|  2.59k|        detail::check_float_type_specs(specs, eh);
 4146|  2.59k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|    928|    {
 3035|    928|        return true;
 3036|    928|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|    450|    {
 4217|    450|        unsigned options{};
 4218|    450|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 14, False: 436]
  ------------------
 4219|     14|            options |= float_reader_base::allow_thsep;
 4220|     14|        }
 4221|       |
 4222|    450|        SCN_GCC_COMPAT_PUSH
 4223|    450|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    450|        switch (specs.type) {
 4226|     10|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 10, False: 440]
  ------------------
 4227|     10|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 4, False: 446]
  ------------------
 4230|      4|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     18|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 18, False: 432]
  ------------------
 4233|     18|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      2|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 2, False: 448]
  ------------------
 4236|      2|                return options | float_reader_base::allow_scientific |
 4237|      2|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    416|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 416, False: 34]
  ------------------
 4240|    416|                return options | float_reader_base::allow_scientific |
 4241|    416|                       float_reader_base::allow_fixed |
 4242|    416|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 450]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    450|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    450|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    450|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|    450|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|    924|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.84k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|    804|    {
 4057|    804|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 804, False: 0]
  ------------------
 4058|    804|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 804, False: 0]
  ------------------
 4059|    804|            return;
 4060|    804|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|    148|    {
 1587|    148|        return m_storage.has_value();
 1588|    148|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|     74|    {
 1592|     74|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|     74|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     74|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|     74|        return *m_storage;
 1594|     74|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    112|    {
  763|    112|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    112|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    112|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      6|    {
 3679|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      6|        return read_source_impl(range);
 3685|      6|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    112|    {
 3705|    112|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    112|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    112|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    112|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 112]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    112|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    112|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    112|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    112|        auto it = sign_result.first;
 3708|    112|        m_sign = sign_result.second;
 3709|       |
 3710|    112|        auto digits_begin = it;
 3711|    112|        auto r = ranges::subrange{it, range.end()};
 3712|    112|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    112|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    112|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    112|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    112|                SCN_TRY_ASSIGN(
 3717|    112|                    it,
 3718|    112|                    do_read_source_impl(
 3719|    112|                        r,
 3720|    112|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    112|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    112|            }
 3723|    112|            else {
 3724|    112|                auto cb = [&](const auto& rr)
 3725|    112|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    112|                    auto res = read_all(rr);
 3727|    112|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    112|                        return unexpected_scan_error(
 3729|    112|                            scan_error::invalid_scanned_value,
 3730|    112|                            "Invalid float value");
 3731|    112|                    }
 3732|    112|                    return res;
 3733|    112|                };
 3734|    112|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    112|            }
 3736|    112|        }
 3737|    112|        else {
 3738|    112|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    112|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    112|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 112, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    112|    }                                                  \
  |  | 3671|    112|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    112|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    112|    {
 4000|    112|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    112|        const bool allowed_nonhex =
 4002|    112|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    112|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    112|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 112, False: 0]
  |  Branch (4005:45): [True: 0, False: 112]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    112|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 112]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    112|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 112, False: 0]
  |  Branch (4014:45): [True: 0, False: 112]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    112|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 112]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    112|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 104, False: 8]
  |  Branch (4021:28): [True: 6, False: 98]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      6|            auto it = range.begin();
 4025|       |
 4026|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 6]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      6|            else {
 4031|      6|                m_kind = float_kind::hex_without_prefix;
 4032|      6|            }
 4033|       |
 4034|      6|            return read_hex(ranges::subrange{it, range.end()});
 4035|      6|        }
 4036|    106|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 8, False: 98]
  |  Branch (4036:29): [True: 8, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      8|            m_kind = float_kind::generic;
 4040|      8|            return read_regular_float(range);
 4041|      8|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|     98|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|     98|        m_kind = float_kind::generic;
 4052|     98|        return read_regular(range);
 4053|     98|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    112|    {
 3811|    112|        auto it = range.begin();
 3812|    112|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 112, False: 0]
  ------------------
 3813|    112|            return unexpected(r.error());
 3814|    112|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    112|    {
 3834|    112|        auto it = range.begin();
 3835|    112|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 112, False: 0]
  ------------------
 3836|    112|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    112|                scan_error::invalid_scanned_value,
 3838|    112|                "Invalid floating-point NaN value"));
 3839|    112|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    104|    {
 3804|    104|        return read_matching_string_classic_nocase(range, "0x");
 3805|    104|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      6|    {
 3904|      6|        auto it = range.begin();
 3905|       |
 3906|      6|        std::ptrdiff_t digits_count = 0;
 3907|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3909|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      6|                scan_error::invalid_scanned_value,
 3911|      6|                "Invalid hexadecimal floating-point value"));
 3912|      6|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      6|    {
 3789|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      6|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      6|        return read_while1_code_unit(
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      6|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    106|    {
 3944|    106|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    106|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 100, False: 6]
  |  Branch (3945:50): [True: 2, False: 98]
  ------------------
 3946|       |
 3947|    106|        auto it = ranges::begin(range);
 3948|    106|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    106|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    106|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 0]
  |  |  ------------------
  ------------------
 3952|    106|            return r.transform_error(
 3953|    106|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    106|                                              "Invalid floating-point value"));
 3955|    106|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    106|    {
 3774|    106|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 106]
  |  |  |  Branch (859:45): [True: 0, False: 106]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    106|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    106|        return read_while1_code_unit(
 3783|    106|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    106|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|    106|    {
  754|    106|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|    106|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    106|              cvref<T> obj = *get<T>(fn);
  745|    106|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    106|                  obj(static_cast<decltype(args)>(args)...);
  747|    106|              }
  748|    106|              else {
  749|    106|                  return obj(static_cast<decltype(args)>(args)...);
  750|    106|              }
  751|    106|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    106|    {
  684|    106|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    106|            return static_cast<T*>(s.m_cp);
  686|    106|        }
  687|    106|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    106|            return static_cast<T*>(s.m_p);
  689|    106|        }
  690|    106|        else {
  691|    106|            return reinterpret_cast<T*>(s.m_fp);
  692|    106|        }
  693|    106|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3783|    106|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|    106|        {
  662|    106|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    106|    {
 3665|    106|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 106]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    106|        return read_source_impl(range);
 3671|    106|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    812|    {
  763|    812|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    812|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    812|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    812|    {
 3705|    812|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    812|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    812|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    812|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    812|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 812]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    812|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    812|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    812|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    812|        auto it = sign_result.first;
 3708|    812|        m_sign = sign_result.second;
 3709|       |
 3710|    812|        auto digits_begin = it;
 3711|    812|        auto r = ranges::subrange{it, range.end()};
 3712|    812|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    812|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    812|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 812]
  |  |  |  Branch (859:45): [True: 0, False: 812]
  |  |  |  Branch (859:45): [True: 0, False: 812]
  |  |  ------------------
  ------------------
 3715|    812|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    812|            else {
 3724|    812|                auto cb = [&](const auto& rr)
 3725|    812|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    812|                    auto res = read_all(rr);
 3727|    812|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    812|                        return unexpected_scan_error(
 3729|    812|                            scan_error::invalid_scanned_value,
 3730|    812|                            "Invalid float value");
 3731|    812|                    }
 3732|    812|                    return res;
 3733|    812|                };
 3734|    812|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|    812|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    812|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    812|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8, False: 804]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      8|    }                                                  \
  |  | 3671|    812|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    812|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    804|            }
 3736|    812|        }
 3737|    804|        else {
 3738|    804|            SCN_TRY_ASSIGN(
 3739|    804|                it,
 3740|    804|                do_read_source_impl(
 3741|    804|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|    804|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|    804|        }
 3744|       |
 3745|    804|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    804|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    804|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    804|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 804, False: 0]
  |  Branch (3747:48): [True: 804, False: 0]
  ------------------
 3748|    804|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 804, False: 0]
  ------------------
 3749|    804|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 804, False: 0]
  ------------------
 3750|    804|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    804|        }
 3752|       |
 3753|    804|        handle_separators();
 3754|       |
 3755|    804|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 804]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    804|        return it;
 3768|    804|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    812|    {
 3811|    812|        auto it = range.begin();
 3812|    812|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 812, False: 0]
  ------------------
 3813|    812|            return unexpected(r.error());
 3814|    812|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    812|    {
 3834|    812|        auto it = range.begin();
 3835|    812|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 812, False: 0]
  ------------------
 3836|    812|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    812|                scan_error::invalid_scanned_value,
 3838|    812|                "Invalid floating-point NaN value"));
 3839|    812|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    804|    {
 3804|    804|        return read_matching_string_classic_nocase(range, "0x");
 3805|    804|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|      8|{
 1996|      8|    auto it = read_while_code_unit(range, pred);
 1997|      8|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 8, False: 0]
  ------------------
 1998|      8|        return unexpected(parse_error::error);
 1999|      8|    }
 2000|      0|    return it;
 2001|      8|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|      8|    {
 3944|      8|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|      8|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 4, False: 4]
  |  Branch (3945:50): [True: 2, False: 2]
  ------------------
 3946|       |
 3947|      8|        auto it = ranges::begin(range);
 3948|      8|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|      8|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|      8|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 3952|      8|            return r.transform_error(
 3953|      8|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|      8|                                              "Invalid floating-point value"));
 3955|      8|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|      8|    {
 3774|      8|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8]
  |  |  |  Branch (859:45): [True: 0, False: 8]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|      8|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|      8|        return read_while1_code_unit(
 3783|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|      8|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    812|    {
 4000|    812|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    812|        const bool allowed_nonhex =
 4002|    812|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    812|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    812|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 812, False: 0]
  |  Branch (4005:45): [True: 0, False: 812]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    812|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 812]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    812|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 812, False: 0]
  |  Branch (4014:45): [True: 0, False: 812]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    812|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 812]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    812|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 804, False: 8]
  |  Branch (4021:28): [True: 12, False: 792]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     12|            auto it = range.begin();
 4025|       |
 4026|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 12]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     12|            else {
 4031|     12|                m_kind = float_kind::hex_without_prefix;
 4032|     12|            }
 4033|       |
 4034|     12|            return read_hex(ranges::subrange{it, range.end()});
 4035|     12|        }
 4036|    800|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 8, False: 792]
  |  Branch (4036:29): [True: 8, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      8|            m_kind = float_kind::generic;
 4040|      8|            return read_regular_float(range);
 4041|      8|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    792|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    792|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 792]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    792|        m_kind = float_kind::generic;
 4052|    792|        return read_regular(range);
 4053|    792|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    804|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    804|                    auto res = read_all(rr);
 3727|    804|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 804]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    804|                    return res;
 3733|    804|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    804|{
 1839|    804|    return ranges::next(range.begin(), range.end());
 1840|    804|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    804|    {
  313|    804|        ranges::advance(x, bound);
  314|    804|        return x;
  315|    804|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    804|    {
  275|    804|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    804|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|    804|    {
 1577|    804|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    804|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    804|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|    804|    {
 1621|    804|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    804|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    804|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    804|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    804|            m_storage.reset();
 1627|    804|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    804|        }
 1629|    804|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    804|                                          std::basic_string<CharT>>) {
 1631|    804|            m_storage.emplace(SCN_FWD(range));
 1632|    804|            m_view = string_view_type{*m_storage};
 1633|    804|        }
 1634|    804|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    804|                                          typename detail::basic_scan_buffer<
 1636|    804|                                              value_t>::forward_iterator> &&
 1637|    804|                           ranges::common_range<Range>) {
 1638|    804|            auto beg_seg = range.begin().contiguous_segment();
 1639|    804|            auto end_seg = range.end().contiguous_segment();
 1640|    804|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    804|                             detail::to_address(end_seg.end()))) {
 1642|    804|                auto& str = m_storage.emplace();
 1643|    804|                str.reserve(range.end().position() - range.begin().position());
 1644|    804|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    804|                m_view = string_view_type{str};
 1646|    804|                return;
 1647|    804|            }
 1648|       |
 1649|    804|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    804|                                                            end_seg.data());
 1651|    804|            m_storage.reset();
 1652|    804|        }
 1653|    804|        else {
 1654|    804|            auto& str = m_storage.emplace();
 1655|    804|            if constexpr (ranges::sized_range<Range>) {
 1656|    804|                str.reserve(range.size());
 1657|    804|            }
 1658|    804|            if constexpr (ranges::common_range<Range>) {
 1659|    804|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    804|                          std::back_inserter(str));
 1661|    804|            }
 1662|    804|            else {
 1663|    804|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    804|                     ++it) {
 1665|    804|                    str.push_back(*it);
 1666|    804|                }
 1667|    804|            }
 1668|    804|            m_view = string_view_type{str};
 1669|    804|        }
 1670|    804|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    804|    {
 3665|    804|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 804]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    804|        return read_source_impl(range);
 3671|    804|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    804|    {
 3691|    804|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    804|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    804|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    804|        const std::ptrdiff_t sign_len =
 3694|    804|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 804]
  ------------------
 3695|       |
 3696|    804|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|    804|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    804|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    804|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 804, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    804|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    804|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    804|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    804|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    804|    }                                                  \
  |  |  |  | 3671|    804|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    804|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    112|    {
 4170|    112|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    112|#if !SCN_DISABLE_LOCALE
 4173|    112|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 6, False: 106]
  ------------------
 4174|      6|            return read_impl<Range>(
 4175|      6|                range, rd,
 4176|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      6|                },
 4179|      6|                value, loc);
 4180|      6|        }
 4181|    106|#endif
 4182|       |
 4183|    106|        return read_impl<Range>(
 4184|    106|            range, rd,
 4185|    106|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    106|                return r.read_source(SCN_FWD(args)...);
 4187|    106|            },
 4188|    106|            value);
 4189|    112|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    112|    {
 4206|    112|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    112|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 0]
  |  |  ------------------
  ------------------
 4208|    112|            return unexpected(r.error());
 4209|    112|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      6|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSL_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    106|    {
  754|    106|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    106|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    106|              cvref<T> obj = *get<T>(fn);
  745|    106|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    106|                  obj(static_cast<decltype(args)>(args)...);
  747|    106|              }
  748|    106|              else {
  749|    106|                  return obj(static_cast<decltype(args)>(args)...);
  750|    106|              }
  751|    106|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    106|    {
  684|    106|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    106|            return static_cast<T*>(s.m_cp);
  686|    106|        }
  687|    106|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    106|            return static_cast<T*>(s.m_p);
  689|    106|        }
  690|    106|        else {
  691|    106|            return reinterpret_cast<T*>(s.m_fp);
  692|    106|        }
  693|    106|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    106|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    106|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    106|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    106|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSL_:
  661|    106|        {
  662|    106|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    338|    {
 4170|    338|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    338|#if !SCN_DISABLE_LOCALE
 4173|    338|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 330]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    330|#endif
 4182|       |
 4183|    330|        return read_impl<Range>(
 4184|    330|            range, rd,
 4185|    330|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    330|                return r.read_source(SCN_FWD(args)...);
 4187|    330|            },
 4188|    330|            value);
 4189|    338|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    812|    {
 4206|    812|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    812|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    812|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 804]
  |  |  ------------------
  ------------------
 4208|      8|            return unexpected(r.error());
 4209|      8|        }
 4210|       |
 4211|    804|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|    804|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    804|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    804|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 804, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    804|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    804|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    804|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    804|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    804|    }                                                  \
  |  |  |  | 3671|    804|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    804|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    330|    {
  754|    330|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    330|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    330|              cvref<T> obj = *get<T>(fn);
  745|    330|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    330|                  obj(static_cast<decltype(args)>(args)...);
  747|    330|              }
  748|    330|              else {
  749|    330|                  return obj(static_cast<decltype(args)>(args)...);
  750|    330|              }
  751|    330|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    330|    {
  684|    330|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    330|            return static_cast<T*>(s.m_cp);
  686|    330|        }
  687|    330|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    330|            return static_cast<T*>(s.m_p);
  689|    330|        }
  690|    330|        else {
  691|    330|            return reinterpret_cast<T*>(s.m_fp);
  692|    330|        }
  693|    330|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    330|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    330|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    330|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    330|        {
  662|    330|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5808|  3.02k|{
 5809|  3.02k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  3.02k|        return reader_impl_for_bool<CharT>{};
 5811|  3.02k|    }
 5812|  3.02k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  3.02k|        return reader_impl_for_char<CharT>{};
 5814|  3.02k|    }
 5815|  3.02k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  3.02k|        return reader_impl_for_wchar<CharT>{};
 5817|  3.02k|    }
 5818|  3.02k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  3.02k|        return reader_impl_for_code_point<CharT>{};
 5820|  3.02k|    }
 5821|  3.02k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  3.02k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  3.02k|        return reader_impl_for_string<CharT>{};
 5824|  3.02k|    }
 5825|  3.02k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  3.02k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  3.02k|        return reader_impl_for_string<CharT>{};
 5828|  3.02k|    }
 5829|  3.02k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  3.02k|                       std::is_same_v<T, wregex_matches>) {
 5831|  3.02k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  3.02k|    }
 5833|  3.02k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  3.02k|        return reader_impl_for_voidptr<CharT>{};
 5835|  3.02k|    }
 5836|  3.02k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  3.02k|        return reader_impl_for_float<CharT>{};
 5838|  3.02k|    }
 5839|  3.02k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  3.02k|                       !std::is_same_v<T, wchar_t> &&
 5841|  3.02k|                       !std::is_same_v<T, char32_t> &&
 5842|  3.02k|                       !std::is_same_v<T, bool>) {
 5843|  3.02k|        return reader_impl_for_int<CharT>{};
 5844|  3.02k|    }
 5845|  3.02k|    else {
 5846|  3.02k|        return reader_impl_for_monostate<CharT>{};
 5847|  3.02k|    }
 5848|  3.02k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  9.07k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  7.65k|    {
 3040|  7.65k|        reader_error_handler eh{};
 3041|  7.65k|        get_derived().check_specs_impl(specs, eh);
 3042|  7.65k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  7.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 234, False: 7.42k]
  |  |  ------------------
  ------------------
 3043|    234|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    234|        }
 3045|  7.42k|        return {};
 3046|  7.65k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  7.65k|    {
 3051|  7.65k|        return static_cast<Derived&>(*this);
 3052|  7.65k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  7.65k|    {
 5210|  7.65k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  7.65k|        SCN_GCC_PUSH
 5213|  7.65k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  7.65k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  7.65k|        SCN_CLANG_PUSH
 5217|  7.65k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  7.65k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  7.65k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 228, False: 7.42k]
  ------------------
 5221|  1.22k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.22k, False: 6.43k]
  ------------------
 5222|  1.22k|                m_type = reader_type::word;
 5223|  1.22k|                break;
 5224|       |
 5225|    252|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 252, False: 7.40k]
  ------------------
 5226|    252|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 72, False: 180]
  ------------------
 5227|    252|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 132, False: 48]
  ------------------
 5228|    204|                    m_type = reader_type::custom_word;
 5229|    204|                }
 5230|     48|                else {
 5231|     48|                    m_type = reader_type::word;
 5232|     48|                }
 5233|    252|                break;
 5234|      0|            }
 5235|       |
 5236|     60|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 60, False: 7.59k]
  ------------------
 5237|     60|                m_type = reader_type::character;
 5238|     60|                break;
 5239|       |
 5240|    330|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 330, False: 7.32k]
  ------------------
 5241|    330|                m_type = reader_type::character_set;
 5242|    330|                break;
 5243|       |
 5244|  5.37k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 5.37k, False: 2.28k]
  ------------------
 5245|  5.37k|                m_type = reader_type::regex;
 5246|  5.37k|                break;
 5247|       |
 5248|    186|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 186, False: 7.47k]
  ------------------
 5249|    186|                m_type = reader_type::regex_escaped;
 5250|    186|                break;
 5251|  7.65k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  7.65k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  10.1k|    {
 5259|  10.1k|        return m_type == reader_type::word;
 5260|  10.1k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  5.19k|{
 1132|  5.19k|    auto it = src.begin();
 1133|  45.7k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 41.9k, False: 3.81k]
  ------------------
 1134|  41.9k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  41.9k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 41.9k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  41.9k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 41.9k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  41.9k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  41.9k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  41.9k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.38k, False: 40.5k]
  ------------------
 1144|  1.38k|            return false;
 1145|  1.38k|        }
 1146|  40.5k|        it += len;
 1147|  40.5k|    }
 1148|  3.81k|    return true;
 1149|  5.19k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|     74|{
 2993|     74|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|     74|        if (source.stores_allocated_string()) {
 2995|     74|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|     74|        }
 2997|     74|        else {
 2998|     74|            dest.assign(source.view());
 2999|     74|        }
 3000|     74|    }
 3001|     74|    else {
 3002|     74|        return transcode_impl(source.view(), dest);
 3003|     74|    }
 3004|       |
 3005|      0|    return {};
 3006|     74|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|    954|{
 2968|    954|    dst.clear();
 2969|    954|    transcode_valid_to_string(src, dst);
 2970|    954|    return {};
 2971|    954|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|    954|{
 1403|    954|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|    954|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|    954|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    954|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|    954|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|    954|        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|    954|            std::u32string tmp;
 1410|    954|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|    954|            return transcode_to_string_impl_32to16<true>(
 1412|    954|                std::u32string_view{tmp}, dest);
 1413|    954|        }
 1414|    954|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|    954|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|    954|        }
 1417|    954|    }
 1418|    954|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1418:24): [Folded - Ignored]
  ------------------
 1419|    954|        if constexpr (sizeof(DestCharT) == 1) {
 1420|    954|            std::u32string tmp;
 1421|    954|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|    954|            return transcode_to_string_impl_32to8<true>(
 1423|    954|                std::u32string_view{tmp}, dest);
 1424|    954|        }
 1425|    954|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|    954|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|    954|        }
 1428|    954|    }
 1429|    954|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1429:24): [Folded - Ignored]
  ------------------
 1430|    954|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1430:23): [Folded - Ignored]
  ------------------
 1431|    954|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|    954|        }
 1433|    954|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|    954|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|    954|        }
 1436|    954|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|    954|{
 1294|    954|    static_assert(sizeof(SourceCharT) == 4);
 1295|    954|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  7.88k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 7.88k, False: 954]
  ------------------
 1298|  7.88k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  7.88k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  7.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  7.88k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 6.31k, False: 1.56k]
  ------------------
 1306|  6.31k|            dest.push_back(static_cast<char>(cp));
 1307|  6.31k|        }
 1308|  1.56k|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 126, False: 1.44k]
  ------------------
 1309|    126|            dest.push_back(
 1310|    126|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|    126|            dest.push_back(
 1312|    126|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|    126|        }
 1314|  1.44k|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 1.09k, False: 350]
  ------------------
 1315|  1.09k|            dest.push_back(
 1316|  1.09k|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|  1.09k|            dest.push_back(static_cast<char>(
 1318|  1.09k|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|  1.09k|            dest.push_back(
 1320|  1.09k|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|  1.09k|        }
 1322|    350|        else {
 1323|    350|            dest.push_back(
 1324|    350|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    350|            dest.push_back(static_cast<char>(
 1326|    350|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    350|            dest.push_back(static_cast<char>(
 1328|    350|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    350|            dest.push_back(
 1330|    350|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    350|        }
 1332|  7.88k|    }
 1333|    954|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|    330|        {
 5103|    330|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 84, False: 246]
  ------------------
 5104|     84|                return {};
 5105|     84|            }
 5106|       |
 5107|    246|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|    246|            auto it = detail::to_address(charset_string.begin());
 5109|    246|            auto set = detail::parse_presentation_set(
 5110|    246|                it, detail::to_address(charset_string.end()), nonascii);
 5111|    246|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|    246|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|    246|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    246|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|    246|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|    246|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    246|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|    246|            std::sort(nonascii.extra_ranges.begin(),
 5118|    246|                      nonascii.extra_ranges.end());
 5119|    246|            return {};
 5120|    246|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|  3.73k|        {
 5138|  3.73k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 1.09k, False: 2.64k]
  ------------------
 5139|  1.09k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  1.09k|            }
 5141|       |
 5142|  2.64k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|  3.73k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  1.09k|        {
 5086|       |            // TODO: binary search?
 5087|  1.09k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 1.09k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  1.09k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  1.09k|            return std::find_if(
 5093|  1.09k|                       nonascii.extra_ranges.begin(),
 5094|  1.09k|                       nonascii.extra_ranges.end(),
 5095|  1.09k|                       [cp_val](const auto& pair) noexcept {
 5096|  1.09k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  1.09k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  1.09k|                       }) != nonascii.extra_ranges.end();
 5099|  1.09k|        }
_ZZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  9.88k|                       [cp_val](const auto& pair) noexcept {
 5096|  9.88k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 9.78k, False: 108]
  ------------------
 5097|  9.88k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 1.03k, False: 8.74k]
  ------------------
 5098|  9.88k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  3.81k|        {
 5076|  3.81k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  3.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  3.81k|            const auto val =
 5078|  3.81k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  3.81k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  3.81k|                    (val % 8)) &
 5081|  3.81k|                   1u;
 5082|  3.81k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  1.18k|        {
 5129|  1.18k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 12, False: 1.17k]
  ------------------
 5130|     12|                return false;
 5131|     12|            }
 5132|       |
 5133|  1.17k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  1.18k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|    330|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    140|    {
 5277|    140|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    140|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    140|        return read_impl(range, specs, value);
 5279|    140|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    140|    {
 5295|    140|        SCN_CLANG_PUSH
 5296|    140|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    140|        switch (m_type) {
 5299|     96|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 96, False: 44]
  ------------------
 5300|     96|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 120]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     18|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 18, False: 122]
  ------------------
 5307|     18|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 140]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 138]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 136]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 140]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    140|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    140|        }
 5331|       |
 5332|    140|        SCN_CLANG_POP
 5333|    140|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|     96|    {
 4820|     96|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|     96|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    134|{
 4752|    134|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    134|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    134|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 60, False: 74]
  ------------------
 4756|     60|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     60|                                     "Invalid encoding in scanned string");
 4758|     60|    }
 4759|     74|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     74|    static_cast<    \
  |  |  929|     74|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     74|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     74|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 74]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     74|    return SCN_MOVE(result);
  ------------------
  |  |  928|     74|    static_cast<    \
  |  |  929|     74|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     74|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    288|{
 2088|    288|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    288|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    288|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    288|        auto buf = make_contiguous_buffer(range);
 2092|    288|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    288|        return ranges::next(range.begin(),
 2094|    288|                            ranges::distance(buf.view().begin(), it));
 2095|    288|    }
 2096|    288|    else {
 2097|    288|        auto it = range.begin();
 2098|       |
 2099|    288|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    288|            auto seg = get_contiguous_beginning(range);
 2101|    288|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    288|                seg_it != seg.end()) {
 2103|    288|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|    288|            }
 2105|    288|            ranges::advance(it, seg.size());
 2106|    288|        }
 2107|       |
 2108|    288|        return read_until_code_point(
 2109|    288|            ranges::subrange{it, range.end()},
 2110|    288|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    288|    }
 2112|    288|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    288|{
 2061|    288|    auto it = range.begin();
 2062|  6.75k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 6.49k, False: 252]
  ------------------
 2063|  6.49k|        const auto val =
 2064|  6.49k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  6.49k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  6.49k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.49k, False: 0]
  |  |  ------------------
  ------------------
 2066|  6.49k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  6.49k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  6.49k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 36, False: 6.46k]
  ------------------
 2069|     36|                return it;
 2070|     36|            }
 2071|  6.49k|        }
 2072|  6.46k|        it = val.iterator;
 2073|  6.46k|    }
 2074|       |
 2075|    252|    return it;
 2076|    288|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    288|    {
  754|    288|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  6.49k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.49k|              cvref<T> obj = *get<T>(fn);
  745|  6.49k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.49k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.49k|              }
  748|  6.49k|              else {
  749|  6.49k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.49k|              }
  751|  6.49k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  6.49k|    {
  684|  6.49k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.49k|            return static_cast<T*>(s.m_cp);
  686|  6.49k|        }
  687|  6.49k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.49k|            return static_cast<T*>(s.m_p);
  689|  6.49k|        }
  690|  6.49k|        else {
  691|  6.49k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.49k|        }
  693|  6.49k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  6.49k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    288|        {
  662|    288|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     20|    {
 4841|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 20, False: 0]
  ------------------
 4842|     20|            return read_string_impl(
 4843|     20|                range,
 4844|     20|                read_until_code_unit(
 4845|     20|                    range,
 4846|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     20|                        SourceCharT ch) { return ch == until; }),
 4848|     20|                value);
 4849|     20|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|    350|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    350|                  obj(static_cast<decltype(args)>(args)...);
  747|    350|              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|    350|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    350|            return static_cast<T*>(s.m_cp);
  686|    350|        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    350|            return static_cast<T*>(s.m_p);
  689|    350|        }
  690|    350|        else {
  691|    350|            return reinterpret_cast<T*>(s.m_fp);
  692|    350|        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     18|    {
 4947|     18|        return read_impl(
 4948|     18|            range,
 4949|     18|            [&](const auto& rng) {
 4950|     18|                return read_string_impl(rng, read_all(rng), value);
 4951|     18|            },
 4952|     18|            detail::priority_tag<1>{});
 4953|     18|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     18|    {
 4974|     18|        return read_cb(range);
 4975|     18|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     18|            [&](const auto& rng) {
 4950|     18|                return read_string_impl(rng, read_all(rng), value);
 4951|     18|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|     54|{
 1839|     54|    return ranges::next(range.begin(), range.end());
 1840|     54|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     54|    {
  313|     54|        ranges::advance(x, bound);
  314|     54|        return x;
  315|     54|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     54|    {
  275|     54|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     54|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     54|    {
  203|  1.07k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 1.02k, False: 54]
  ------------------
  204|  1.02k|            ++i;
  205|  1.02k|        }
  206|     54|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|      6|    {
 4891|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|      6|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|     18|    {
 4913|     18|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|     36|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|     18|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|     18|            return unexpected_scan_error(
 4916|     18|                scan_error::invalid_scanned_value,
 4917|     18|                "Regex backend doesn't support wide strings as input");
 4918|     18|        }
 4919|     18|        else {
 4920|     18|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 18, False: 0]
  ------------------
 4921|     18|                return unexpected_scan_error(
 4922|     18|                    scan_error::invalid_scanned_value,
 4923|     18|                    "Cannot use regex with a non-contiguous source "
 4924|     18|                    "range");
 4925|     18|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|     18|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  958|     18|{
  959|     18|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|     18|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|     18|        return true;
  962|     18|    }
  963|     18|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|     18|                           ranges::const_iterator_t<Range>,
  965|     18|                           typename detail::basic_scan_buffer<
  966|     18|                               detail::char_t<Range>>::forward_iterator>) {
  967|     18|        auto beg = r.begin();
  968|     18|        if (!beg.stores_parent()) {
  969|     18|            return true;
  970|     18|        }
  971|     18|        return beg.parent()->is_contiguous();
  972|     18|    }
  973|     18|    else {
  974|     18|        return false;
  975|     18|    }
  976|     18|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  2.32k|    {
 5277|  2.32k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.32k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  2.32k|        return read_impl(range, specs, value);
 5279|  2.32k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  2.32k|    {
 5295|  2.32k|        SCN_CLANG_PUSH
 5296|  2.32k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  2.32k|        switch (m_type) {
 5299|    326|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 326, False: 2.00k]
  ------------------
 5300|    326|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 2.28k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 2.32k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    110|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 110, False: 2.21k]
  ------------------
 5310|    110|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    110|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  1.78k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 1.78k, False: 540]
  ------------------
 5315|  1.78k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  1.78k|                    range, specs.charset_string<SourceCharT>(),
 5317|  1.78k|                    specs.regexp_flags, value);
 5318|       |
 5319|     58|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 58, False: 2.27k]
  ------------------
 5320|     58|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     58|                    range,
 5322|     58|                    get_unescaped_regex_pattern(
 5323|     58|                        specs.charset_string<SourceCharT>()),
 5324|     58|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 2.32k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  2.32k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  2.32k|        }
 5331|       |
 5332|  2.32k|        SCN_CLANG_POP
 5333|  2.32k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    800|    {
 4820|    800|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    800|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    846|{
 4752|    846|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    846|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    846|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 266, False: 580]
  ------------------
 4756|    266|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    266|                                     "Invalid encoding in scanned string");
 4758|    266|    }
 4759|    580|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    580|    static_cast<    \
  |  |  929|    580|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    580|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    580|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 580]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    580|    return SCN_MOVE(result);
  ------------------
  |  |  928|    580|    static_cast<    \
  |  |  929|    580|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    580|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    880|{
 3012|    880|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    880|        dest.assign(source.view());
 3014|    880|    }
 3015|    880|    else {
 3016|    880|        return transcode_impl(source.view(), dest);
 3017|    880|    }
 3018|       |
 3019|      0|    return {};
 3020|    880|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.40k|{
 2088|  2.40k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.40k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.40k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.40k|        auto buf = make_contiguous_buffer(range);
 2092|  2.40k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.40k|        return ranges::next(range.begin(),
 2094|  2.40k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.40k|    }
 2096|  2.40k|    else {
 2097|  2.40k|        auto it = range.begin();
 2098|       |
 2099|  2.40k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  2.40k|            auto seg = get_contiguous_beginning(range);
 2101|  2.40k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.40k|                seg_it != seg.end()) {
 2103|  2.40k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.40k|            }
 2105|  2.40k|            ranges::advance(it, seg.size());
 2106|  2.40k|        }
 2107|       |
 2108|  2.40k|        return read_until_code_point(
 2109|  2.40k|            ranges::subrange{it, range.end()},
 2110|  2.40k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.40k|    }
 2112|  2.40k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  2.40k|    {
  754|  2.40k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  26.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.3k|              cvref<T> obj = *get<T>(fn);
  745|  26.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  26.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.3k|              }
  748|  26.3k|              else {
  749|  26.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.3k|              }
  751|  26.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  26.3k|    {
  684|  26.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  26.3k|            return static_cast<T*>(s.m_cp);
  686|  26.3k|        }
  687|  26.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  26.3k|            return static_cast<T*>(s.m_p);
  689|  26.3k|        }
  690|  26.3k|        else {
  691|  26.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  26.3k|        }
  693|  26.3k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  26.3k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  2.40k|        {
  662|  2.40k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 46, False: 0]
  ------------------
 4842|     46|            return read_string_impl(
 4843|     46|                range,
 4844|     46|                read_until_code_unit(
 4845|     46|                    range,
 4846|     46|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     46|                        SourceCharT ch) { return ch == until; }),
 4848|     46|                value);
 4849|     46|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     46|    {
  754|     46|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    582|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    582|              cvref<T> obj = *get<T>(fn);
  745|    582|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    582|                  obj(static_cast<decltype(args)>(args)...);
  747|    582|              }
  748|    582|              else {
  749|    582|                  return obj(static_cast<decltype(args)>(args)...);
  750|    582|              }
  751|    582|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    582|    {
  684|    582|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    582|            return static_cast<T*>(s.m_cp);
  686|    582|        }
  687|    582|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    582|            return static_cast<T*>(s.m_p);
  689|    582|        }
  690|    582|        else {
  691|    582|            return reinterpret_cast<T*>(s.m_fp);
  692|    582|        }
  693|    582|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    582|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     46|        {
  662|     46|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    110|    {
 5048|    110|        auto it = read_source_impl(range, {specs});
 5049|    110|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 92]
  |  |  ------------------
  ------------------
 5050|     18|            return unexpected(it.error());
 5051|     18|        }
 5052|       |
 5053|     92|        return read_string_impl(range, *it, value);
 5054|    110|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|    330|    {
 5153|    330|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    330|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    330|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    330|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    330|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 246, False: 84]
  ------------------
 5163|    246|            const auto cb = [&](char32_t cp) {
 5164|    246|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    246|            };
 5166|       |
 5167|    246|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 78, False: 168]
  ------------------
 5168|     78|                auto it = read_until_code_point(range, cb);
 5169|     78|                return check_nonempty(it, range);
 5170|     78|            }
 5171|    168|            auto it = read_while_code_point(range, cb);
 5172|    168|            return check_nonempty(it, range);
 5173|    246|        }
 5174|       |
 5175|     84|        const auto cb = [&](SourceCharT ch) {
 5176|     84|            return cb_wrapper.on_ascii_only(ch);
 5177|     84|        };
 5178|       |
 5179|     84|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 30, False: 54]
  ------------------
 5180|     30|            auto it = read_until_code_unit(range, cb);
 5181|     30|            return check_nonempty(it, range);
 5182|     30|        }
 5183|     54|        auto it = read_while_code_unit(range, cb);
 5184|     54|        return check_nonempty(it, range);
 5185|     84|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|    246|    {
  754|    246|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|  3.73k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.73k|              cvref<T> obj = *get<T>(fn);
  745|  3.73k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.73k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.73k|              }
  748|  3.73k|              else {
  749|  3.73k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.73k|              }
  751|  3.73k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  3.73k|    {
  684|  3.73k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.73k|            return static_cast<T*>(s.m_cp);
  686|  3.73k|        }
  687|  3.73k|        else if constexpr (std::is_object_v<T>) {
  688|  3.73k|            return static_cast<T*>(s.m_p);
  689|  3.73k|        }
  690|  3.73k|        else {
  691|  3.73k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.73k|        }
  693|  3.73k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  3.73k|            const auto cb = [&](char32_t cp) {
 5164|  3.73k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  3.73k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|    246|        {
  667|    246|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|    330|    {
 5191|    330|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 54, False: 276]
  ------------------
 5192|     54|            return unexpected_scan_error(
 5193|     54|                scan_error::invalid_scanned_value,
 5194|     54|                "No characters matched in [character set]");
 5195|     54|        }
 5196|       |
 5197|    276|        return it;
 5198|    330|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|     84|    {
  754|     84|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  1.18k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.18k|              cvref<T> obj = *get<T>(fn);
  745|  1.18k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.18k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.18k|              }
  748|  1.18k|              else {
  749|  1.18k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.18k|              }
  751|  1.18k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  1.18k|    {
  684|  1.18k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.18k|            return static_cast<T*>(s.m_cp);
  686|  1.18k|        }
  687|  1.18k|        else if constexpr (std::is_object_v<T>) {
  688|  1.18k|            return static_cast<T*>(s.m_p);
  689|  1.18k|        }
  690|  1.18k|        else {
  691|  1.18k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.18k|        }
  693|  1.18k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  1.18k|        const auto cb = [&](SourceCharT ch) {
 5176|  1.18k|            return cb_wrapper.on_ascii_only(ch);
 5177|  1.18k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|     84|        {
  667|     84|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    434|{
 4752|    434|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    434|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    434|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 134, False: 300]
  ------------------
 4756|    134|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    134|                                     "Invalid encoding in scanned string");
 4758|    134|    }
 4759|    300|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    300|    static_cast<    \
  |  |  929|    300|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    300|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    300|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 300]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    300|    return SCN_MOVE(result);
  ------------------
  |  |  928|    300|    static_cast<    \
  |  |  929|    300|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    300|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  1.84k|    {
 4891|  1.84k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  1.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.50k, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.50k|    }                                                  \
  |  |  |  | 3671|  1.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    342|        return read_string_impl(range, it, value);
 4893|  1.84k|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|  5.53k|    {
 4913|  5.53k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  11.0k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  5.53k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  5.53k|            return unexpected_scan_error(
 4916|  5.53k|                scan_error::invalid_scanned_value,
 4917|  5.53k|                "Regex backend doesn't support wide strings as input");
 4918|  5.53k|        }
 4919|  5.53k|        else {
 4920|  5.53k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 5.53k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  5.53k|            auto input = get_as_contiguous(range);
 4928|  5.53k|            SCN_TRY(it,
  ------------------
  |  | 3672|  5.53k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.53k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.53k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.51k, False: 1.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.51k|    }                                                  \
  |  |  |  | 3671|  5.53k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  1.02k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  1.02k|            return ranges::next(range.begin(),
 4931|  1.02k|                                ranges::distance(input.begin(), it));
 4932|  5.53k|        }
 4933|  5.53k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|  5.53k|{
  959|  5.53k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  5.53k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  5.53k|        return true;
  962|  5.53k|    }
  963|  5.53k|    else if constexpr (std::is_same_v<
  964|  5.53k|                           ranges::const_iterator_t<Range>,
  965|  5.53k|                           typename detail::basic_scan_buffer<
  966|  5.53k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  5.53k|        auto beg = r.begin();
  968|  5.53k|        if (!beg.stores_parent()) {
  969|  5.53k|            return true;
  970|  5.53k|        }
  971|  5.53k|        return beg.parent()->is_contiguous();
  972|  5.53k|    }
  973|  5.53k|    else {
  974|  5.53k|        return false;
  975|  5.53k|    }
  976|  5.53k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|  5.53k|{
 1065|  5.53k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  5.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  5.53k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  5.53k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  5.53k|        return r;
 1070|  5.53k|    }
 1071|  5.53k|    else if constexpr (std::is_same_v<
 1072|  5.53k|                           ranges::const_iterator_t<Range>,
 1073|  5.53k|                           typename detail::basic_scan_buffer<
 1074|  5.53k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  5.53k|        if constexpr (ranges::common_range<Range>) {
 1076|  5.53k|            return detail::make_string_view_from_pointers(
 1077|  5.53k|                r.begin().to_contiguous_segment_iterator(),
 1078|  5.53k|                r.end().to_contiguous_segment_iterator());
 1079|  5.53k|        }
 1080|  5.53k|        else {
 1081|  5.53k|            return r.begin().contiguous_segment();
 1082|  5.53k|        }
 1083|  5.53k|    }
 1084|  5.53k|    else {
 1085|  5.53k|        SCN_EXPECT(false);
 1086|  5.53k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  5.53k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  5.53k|    }
 1090|  5.53k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|  5.53k|{
  981|  5.53k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  5.53k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  5.53k|        return true;
  984|  5.53k|    }
  985|  5.53k|    else if constexpr (std::is_same_v<
  986|  5.53k|                           ranges::const_iterator_t<Range>,
  987|  5.53k|                           typename detail::basic_scan_buffer<
  988|  5.53k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  5.53k|        auto beg = r.begin();
  990|  5.53k|        if (beg.contiguous_segment().empty()) {
  991|  5.53k|            return false;
  992|  5.53k|        }
  993|  5.53k|        if constexpr (ranges::common_range<Range>) {
  994|  5.53k|            return beg.contiguous_segment().end() ==
  995|  5.53k|                   ranges::end(r).contiguous_segment().end();
  996|  5.53k|        }
  997|  5.53k|        else {
  998|  5.53k|            if (beg.stores_parent()) {
  999|  5.53k|                return beg.contiguous_segment().end() ==
 1000|  5.53k|                       beg.parent()->current_view().end();
 1001|  5.53k|            }
 1002|  5.53k|            return true;
 1003|  5.53k|        }
 1004|  5.53k|    }
 1005|  5.53k|    else {
 1006|  5.53k|        return false;
 1007|  5.53k|    }
 1008|  5.53k|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  5.53k|{
 4346|  5.53k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  5.53k|                  ranges::borrowed_range<Input> &&
 4348|  5.53k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  5.53k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  5.53k|    std::basic_regex<CharT> re{};
 4352|  5.53k|    try {
 4353|  5.53k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  5.53k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.53k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.53k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 5.53k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  5.53k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  5.53k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  5.53k|                                     re_flags | std::regex_constants::nosubs};
 4356|  5.53k|    }
 4357|  5.53k|    catch (const std::regex_error& err) {
 4358|  2.14k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  2.14k|                                     "Invalid regex");
 4360|  2.14k|    }
 4361|       |
 4362|  3.39k|    std::match_results<const CharT*> matches{};
 4363|  3.39k|    try {
 4364|  3.39k|        bool found = std::regex_search(input.data(),
 4365|  3.39k|                                       input.data() + input.size(), matches, re,
 4366|  3.39k|                                       std::regex_constants::match_continuous);
 4367|  3.39k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 2.37k, False: 1.02k]
  |  Branch (4367:23): [True: 0, False: 1.02k]
  ------------------
 4368|  2.36k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  2.36k|                                         "Regular expression didn't match");
 4370|  2.36k|        }
 4371|  3.39k|    }
 4372|  3.39k|    catch (const std::regex_error& err) {
 4373|      6|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|      6|                                     "Regex matching failed with an error");
 4375|      6|    }
 4376|       |
 4377|  1.02k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  3.39k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  3.02k|{
 5809|  3.02k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  3.02k|        return reader_impl_for_bool<CharT>{};
 5811|  3.02k|    }
 5812|  3.02k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  3.02k|        return reader_impl_for_char<CharT>{};
 5814|  3.02k|    }
 5815|  3.02k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  3.02k|        return reader_impl_for_wchar<CharT>{};
 5817|  3.02k|    }
 5818|  3.02k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  3.02k|        return reader_impl_for_code_point<CharT>{};
 5820|  3.02k|    }
 5821|  3.02k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  3.02k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  3.02k|        return reader_impl_for_string<CharT>{};
 5824|  3.02k|    }
 5825|  3.02k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  3.02k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  3.02k|        return reader_impl_for_string<CharT>{};
 5828|  3.02k|    }
 5829|  3.02k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  3.02k|                       std::is_same_v<T, wregex_matches>) {
 5831|  3.02k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  3.02k|    }
 5833|  3.02k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  3.02k|        return reader_impl_for_voidptr<CharT>{};
 5835|  3.02k|    }
 5836|  3.02k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  3.02k|        return reader_impl_for_float<CharT>{};
 5838|  3.02k|    }
 5839|  3.02k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  3.02k|                       !std::is_same_v<T, wchar_t> &&
 5841|  3.02k|                       !std::is_same_v<T, char32_t> &&
 5842|  3.02k|                       !std::is_same_v<T, bool>) {
 5843|  3.02k|        return reader_impl_for_int<CharT>{};
 5844|  3.02k|    }
 5845|  3.02k|    else {
 5846|  3.02k|        return reader_impl_for_monostate<CharT>{};
 5847|  3.02k|    }
 5848|  3.02k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|     74|{
 2993|     74|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|     74|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 74, False: 0]
  ------------------
 2995|     74|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|     74|    static_cast<    \
  |  |  929|     74|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|     74|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|     74|    }
 3001|     74|    else {
 3002|     74|        return transcode_impl(source.view(), dest);
 3003|     74|    }
 3004|       |
 3005|     74|    return {};
 3006|     74|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    140|    {
 5277|    140|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    140|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    140|        return read_impl(range, specs, value);
 5279|    140|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    140|    {
 5295|    140|        SCN_CLANG_PUSH
 5296|    140|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    140|        switch (m_type) {
 5299|     96|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 96, False: 44]
  ------------------
 5300|     96|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 120]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     18|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 18, False: 122]
  ------------------
 5307|     18|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 140]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 138]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 136]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 140]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    140|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    140|        }
 5331|       |
 5332|    140|        SCN_CLANG_POP
 5333|    140|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|     96|    {
 4820|     96|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|     96|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    134|{
 4752|    134|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    134|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    134|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 60, False: 74]
  ------------------
 4756|     60|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     60|                                     "Invalid encoding in scanned string");
 4758|     60|    }
 4759|     74|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     74|    static_cast<    \
  |  |  929|     74|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     74|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     74|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 74]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     74|    return SCN_MOVE(result);
  ------------------
  |  |  928|     74|    static_cast<    \
  |  |  929|     74|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     74|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     20|    {
 4841|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 20, False: 0]
  ------------------
 4842|     20|            return read_string_impl(
 4843|     20|                range,
 4844|     20|                read_until_code_unit(
 4845|     20|                    range,
 4846|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     20|                        SourceCharT ch) { return ch == until; }),
 4848|     20|                value);
 4849|     20|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|    350|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    350|                  obj(static_cast<decltype(args)>(args)...);
  747|    350|              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|    350|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    350|            return static_cast<T*>(s.m_cp);
  686|    350|        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    350|            return static_cast<T*>(s.m_p);
  689|    350|        }
  690|    350|        else {
  691|    350|            return reinterpret_cast<T*>(s.m_fp);
  692|    350|        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     18|    {
 4947|     18|        return read_impl(
 4948|     18|            range,
 4949|     18|            [&](const auto& rng) {
 4950|     18|                return read_string_impl(rng, read_all(rng), value);
 4951|     18|            },
 4952|     18|            detail::priority_tag<1>{});
 4953|     18|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     18|    {
 4974|     18|        return read_cb(range);
 4975|     18|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     18|            [&](const auto& rng) {
 4950|     18|                return read_string_impl(rng, read_all(rng), value);
 4951|     18|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|      6|    {
 4891|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|      6|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  2.32k|    {
 5277|  2.32k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.32k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  2.32k|        return read_impl(range, specs, value);
 5279|  2.32k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  2.32k|    {
 5295|  2.32k|        SCN_CLANG_PUSH
 5296|  2.32k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  2.32k|        switch (m_type) {
 5299|    326|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 326, False: 2.00k]
  ------------------
 5300|    326|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 2.28k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 2.32k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    110|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 110, False: 2.21k]
  ------------------
 5310|    110|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    110|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  1.78k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 1.78k, False: 540]
  ------------------
 5315|  1.78k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  1.78k|                    range, specs.charset_string<SourceCharT>(),
 5317|  1.78k|                    specs.regexp_flags, value);
 5318|       |
 5319|     58|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 58, False: 2.27k]
  ------------------
 5320|     58|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     58|                    range,
 5322|     58|                    get_unescaped_regex_pattern(
 5323|     58|                        specs.charset_string<SourceCharT>()),
 5324|     58|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 2.32k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  2.32k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  2.32k|        }
 5331|       |
 5332|  2.32k|        SCN_CLANG_POP
 5333|  2.32k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    800|    {
 4820|    800|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    800|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    846|{
 4752|    846|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    846|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    846|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 266, False: 580]
  ------------------
 4756|    266|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    266|                                     "Invalid encoding in scanned string");
 4758|    266|    }
 4759|    580|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    580|    static_cast<    \
  |  |  929|    580|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    580|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    580|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 580]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    580|    return SCN_MOVE(result);
  ------------------
  |  |  928|    580|    static_cast<    \
  |  |  929|    580|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    580|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    880|{
 3012|    880|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    880|        dest.assign(source.view());
 3014|    880|    }
 3015|    880|    else {
 3016|    880|        return transcode_impl(source.view(), dest);
 3017|    880|    }
 3018|       |
 3019|    880|    return {};
 3020|    880|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 46, False: 0]
  ------------------
 4842|     46|            return read_string_impl(
 4843|     46|                range,
 4844|     46|                read_until_code_unit(
 4845|     46|                    range,
 4846|     46|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     46|                        SourceCharT ch) { return ch == until; }),
 4848|     46|                value);
 4849|     46|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     46|    {
  754|     46|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    582|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    582|              cvref<T> obj = *get<T>(fn);
  745|    582|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    582|                  obj(static_cast<decltype(args)>(args)...);
  747|    582|              }
  748|    582|              else {
  749|    582|                  return obj(static_cast<decltype(args)>(args)...);
  750|    582|              }
  751|    582|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    582|    {
  684|    582|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    582|            return static_cast<T*>(s.m_cp);
  686|    582|        }
  687|    582|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    582|            return static_cast<T*>(s.m_p);
  689|    582|        }
  690|    582|        else {
  691|    582|            return reinterpret_cast<T*>(s.m_fp);
  692|    582|        }
  693|    582|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    582|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     46|        {
  662|     46|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    110|    {
 5048|    110|        auto it = read_source_impl(range, {specs});
 5049|    110|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 92]
  |  |  ------------------
  ------------------
 5050|     18|            return unexpected(it.error());
 5051|     18|        }
 5052|       |
 5053|     92|        return read_string_impl(range, *it, value);
 5054|    110|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    434|{
 4752|    434|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    434|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    434|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 134, False: 300]
  ------------------
 4756|    134|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    134|                                     "Invalid encoding in scanned string");
 4758|    134|    }
 4759|    300|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    300|    static_cast<    \
  |  |  929|    300|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    300|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    300|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 300]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    300|    return SCN_MOVE(result);
  ------------------
  |  |  928|    300|    static_cast<    \
  |  |  929|    300|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    300|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  1.84k|    {
 4891|  1.84k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  1.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.50k, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.50k|    }                                                  \
  |  |  |  | 3671|  1.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    342|        return read_string_impl(range, it, value);
 4893|  1.84k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  3.02k|{
 5809|  3.02k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  3.02k|        return reader_impl_for_bool<CharT>{};
 5811|  3.02k|    }
 5812|  3.02k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  3.02k|        return reader_impl_for_char<CharT>{};
 5814|  3.02k|    }
 5815|  3.02k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  3.02k|        return reader_impl_for_wchar<CharT>{};
 5817|  3.02k|    }
 5818|  3.02k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  3.02k|        return reader_impl_for_code_point<CharT>{};
 5820|  3.02k|    }
 5821|  3.02k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  3.02k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  3.02k|        return reader_impl_for_string<CharT>{};
 5824|  3.02k|    }
 5825|  3.02k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  3.02k|                       std::is_same_v<T, std::wstring>) {
 5827|  3.02k|        return reader_impl_for_string<CharT>{};
 5828|  3.02k|    }
 5829|  3.02k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  3.02k|                       std::is_same_v<T, wregex_matches>) {
 5831|  3.02k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  3.02k|    }
 5833|  3.02k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  3.02k|        return reader_impl_for_voidptr<CharT>{};
 5835|  3.02k|    }
 5836|  3.02k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  3.02k|        return reader_impl_for_float<CharT>{};
 5838|  3.02k|    }
 5839|  3.02k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  3.02k|                       !std::is_same_v<T, wchar_t> &&
 5841|  3.02k|                       !std::is_same_v<T, char32_t> &&
 5842|  3.02k|                       !std::is_same_v<T, bool>) {
 5843|  3.02k|        return reader_impl_for_int<CharT>{};
 5844|  3.02k|    }
 5845|  3.02k|    else {
 5846|  3.02k|        return reader_impl_for_monostate<CharT>{};
 5847|  3.02k|    }
 5848|  3.02k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    140|    {
 5277|    140|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    140|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    140|        return read_impl(range, specs, value);
 5279|    140|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    140|    {
 5295|    140|        SCN_CLANG_PUSH
 5296|    140|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    140|        switch (m_type) {
 5299|     96|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 96, False: 44]
  ------------------
 5300|     96|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 120]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     18|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 18, False: 122]
  ------------------
 5307|     18|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 140]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 138]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 136]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 140]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    140|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    140|        }
 5331|       |
 5332|    140|        SCN_CLANG_POP
 5333|    140|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|     96|    {
 4827|     96|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|     96|                                     value);
 4829|     96|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    134|{
 4773|    134|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    134|    auto src = [&]() {
 4776|    134|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    134|            return make_contiguous_buffer(
 4778|    134|                ranges::subrange{range.begin().base(), result.base()});
 4779|    134|        }
 4780|    134|        else {
 4781|    134|            return make_contiguous_buffer(
 4782|    134|                ranges::subrange{range.begin(), result});
 4783|    134|        }
 4784|    134|    }();
 4785|    134|    using src_type = decltype(src);
 4786|       |
 4787|    134|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    134|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    134|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    134|                                     "Cannot read a string_view from "
 4796|    134|                                     "this source range (would require "
 4797|    134|                                     "transcoding)");
 4798|    134|    }
 4799|    134|    else {
 4800|    134|        const auto view = src.view();
 4801|    134|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    134|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 60, False: 74]
  ------------------
 4804|     60|            return unexpected_scan_error(
 4805|     60|                scan_error::invalid_scanned_value,
 4806|     60|                "Invalid encoding in scanned string_view");
 4807|     60|        }
 4808|       |
 4809|     74|        return SCN_MOVE(result);
  ------------------
  |  |  928|     74|    static_cast<    \
  |  |  929|     74|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    134|    }
 4811|    134|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    134|    auto src = [&]() {
 4776|    134|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    134|            return make_contiguous_buffer(
 4778|    134|                ranges::subrange{range.begin().base(), result.base()});
 4779|    134|        }
 4780|    134|        else {
 4781|    134|            return make_contiguous_buffer(
 4782|    134|                ranges::subrange{range.begin(), result});
 4783|    134|        }
 4784|    134|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     20|    {
 4863|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 20, False: 0]
  ------------------
 4864|     20|            return read_string_view_impl(
 4865|     20|                range,
 4866|     20|                read_until_code_unit(
 4867|     20|                    range,
 4868|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     20|                        SourceCharT ch) { return ch == until; }),
 4870|     20|                value);
 4871|     20|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_:
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|    350|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    350|                  obj(static_cast<decltype(args)>(args)...);
  747|    350|              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|    350|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    350|            return static_cast<T*>(s.m_cp);
  686|    350|        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    350|            return static_cast<T*>(s.m_p);
  689|    350|        }
  690|    350|        else {
  691|    350|            return reinterpret_cast<T*>(s.m_fp);
  692|    350|        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4869|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     18|    {
 4959|     18|        return read_impl(
 4960|     18|            range,
 4961|     18|            [&](const auto& rng) {
 4962|     18|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     18|            },
 4964|     18|            detail::priority_tag<1>{});
 4965|     18|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     18|    {
 4974|     18|        return read_cb(range);
 4975|     18|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     18|            [&](const auto& rng) {
 4962|     18|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     18|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|      6|    {
 4902|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|      6|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  2.32k|    {
 5277|  2.32k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.32k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  2.32k|        return read_impl(range, specs, value);
 5279|  2.32k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  2.32k|    {
 5295|  2.32k|        SCN_CLANG_PUSH
 5296|  2.32k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  2.32k|        switch (m_type) {
 5299|    326|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 326, False: 2.00k]
  ------------------
 5300|    326|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 2.28k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 2.32k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    110|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 110, False: 2.21k]
  ------------------
 5310|    110|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    110|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  1.78k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 1.78k, False: 540]
  ------------------
 5315|  1.78k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  1.78k|                    range, specs.charset_string<SourceCharT>(),
 5317|  1.78k|                    specs.regexp_flags, value);
 5318|       |
 5319|     58|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 58, False: 2.27k]
  ------------------
 5320|     58|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     58|                    range,
 5322|     58|                    get_unescaped_regex_pattern(
 5323|     58|                        specs.charset_string<SourceCharT>()),
 5324|     58|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 2.32k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  2.32k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  2.32k|        }
 5331|       |
 5332|  2.32k|        SCN_CLANG_POP
 5333|  2.32k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    800|    {
 4827|    800|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    800|                                     value);
 4829|    800|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|    846|{
 4773|    846|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    846|    auto src = [&]() {
 4776|    846|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    846|            return make_contiguous_buffer(
 4778|    846|                ranges::subrange{range.begin().base(), result.base()});
 4779|    846|        }
 4780|    846|        else {
 4781|    846|            return make_contiguous_buffer(
 4782|    846|                ranges::subrange{range.begin(), result});
 4783|    846|        }
 4784|    846|    }();
 4785|    846|    using src_type = decltype(src);
 4786|       |
 4787|    846|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    846|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    846|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    846|                                     "Cannot read a string_view from "
 4796|    846|                                     "this source range (would require "
 4797|    846|                                     "transcoding)");
 4798|    846|    }
 4799|    846|    else {
 4800|    846|        const auto view = src.view();
 4801|    846|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    846|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 266, False: 580]
  ------------------
 4804|    266|            return unexpected_scan_error(
 4805|    266|                scan_error::invalid_scanned_value,
 4806|    266|                "Invalid encoding in scanned string_view");
 4807|    266|        }
 4808|       |
 4809|    580|        return SCN_MOVE(result);
  ------------------
  |  |  928|    580|    static_cast<    \
  |  |  929|    580|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    846|    }
 4811|    846|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|    846|    auto src = [&]() {
 4776|    846|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    846|            return make_contiguous_buffer(
 4778|    846|                ranges::subrange{range.begin().base(), result.base()});
 4779|    846|        }
 4780|    846|        else {
 4781|    846|            return make_contiguous_buffer(
 4782|    846|                ranges::subrange{range.begin(), result});
 4783|    846|        }
 4784|    846|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     46|    {
 4863|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 46, False: 0]
  ------------------
 4864|     46|            return read_string_view_impl(
 4865|     46|                range,
 4866|     46|                read_until_code_unit(
 4867|     46|                    range,
 4868|     46|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     46|                        SourceCharT ch) { return ch == until; }),
 4870|     46|                value);
 4871|     46|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     46|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_:
  753|     46|    {
  754|     46|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES14_w:
  743|    582|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    582|              cvref<T> obj = *get<T>(fn);
  745|    582|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    582|                  obj(static_cast<decltype(args)>(args)...);
  747|    582|              }
  748|    582|              else {
  749|    582|                  return obj(static_cast<decltype(args)>(args)...);
  750|    582|              }
  751|    582|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    582|    {
  684|    582|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    582|            return static_cast<T*>(s.m_cp);
  686|    582|        }
  687|    582|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    582|            return static_cast<T*>(s.m_p);
  689|    582|        }
  690|    582|        else {
  691|    582|            return reinterpret_cast<T*>(s.m_fp);
  692|    582|        }
  693|    582|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4869|    582|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     46|        {
  662|     46|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|    110|    {
 5062|    110|        auto it = read_source_impl(range, {specs});
 5063|    110|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 92]
  |  |  ------------------
  ------------------
 5064|     18|            return unexpected(it.error());
 5065|     18|        }
 5066|       |
 5067|     92|        return read_string_view_impl(range, *it, value);
 5068|    110|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|    434|{
 4773|    434|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    434|    auto src = [&]() {
 4776|    434|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    434|            return make_contiguous_buffer(
 4778|    434|                ranges::subrange{range.begin().base(), result.base()});
 4779|    434|        }
 4780|    434|        else {
 4781|    434|            return make_contiguous_buffer(
 4782|    434|                ranges::subrange{range.begin(), result});
 4783|    434|        }
 4784|    434|    }();
 4785|    434|    using src_type = decltype(src);
 4786|       |
 4787|    434|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    434|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    434|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    434|                                     "Cannot read a string_view from "
 4796|    434|                                     "this source range (would require "
 4797|    434|                                     "transcoding)");
 4798|    434|    }
 4799|    434|    else {
 4800|    434|        const auto view = src.view();
 4801|    434|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    434|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 134, False: 300]
  ------------------
 4804|    134|            return unexpected_scan_error(
 4805|    134|                scan_error::invalid_scanned_value,
 4806|    134|                "Invalid encoding in scanned string_view");
 4807|    134|        }
 4808|       |
 4809|    300|        return SCN_MOVE(result);
  ------------------
  |  |  928|    300|    static_cast<    \
  |  |  929|    300|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    434|    }
 4811|    434|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|    434|    auto src = [&]() {
 4776|    434|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    434|            return make_contiguous_buffer(
 4778|    434|                ranges::subrange{range.begin().base(), result.base()});
 4779|    434|        }
 4780|    434|        else {
 4781|    434|            return make_contiguous_buffer(
 4782|    434|                ranges::subrange{range.begin(), result});
 4783|    434|        }
 4784|    434|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  1.84k|    {
 4902|  1.84k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  1.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.50k, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.50k|    }                                                  \
  |  |  |  | 3671|  1.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    342|        return read_string_view_impl(range, it, value);
 4904|  1.84k|    }
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  5.79k|{
 1683|  5.79k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  5.79k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  5.79k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  5.79k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  5.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  5.79k|    }
 1688|  5.79k|    else {
 1689|  5.79k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  5.79k|    }
 1691|  5.79k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  5.79k|    {
 1490|  5.79k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|    860|    {
 4100|    860|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 860]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    860|        return std::copysign(value, T{1.0});
 4104|    860|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|    804|    {
 4100|    804|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 804]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    804|        return std::copysign(value, T{1.0});
 4104|    804|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  5.63k|{
 5795|  5.63k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.63k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  5.63k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 626, False: 5.00k]
  ------------------
 5800|    626|        return range.begin();
 5801|    626|    }
 5802|       |
 5803|  5.00k|    return skip_classic_whitespace(range);
 5804|  5.63k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    626|    {
 3528|    626|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    626|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    626|        return read_default_with_base(range, value, 10);
 3530|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    626|    {
 3528|    626|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    626|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    626|        return read_default_with_base(range, value, 10);
 3530|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5747|  1.10k|    {
 5748|  1.10k|        return true;
 5749|  1.10k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    850|    {
 5765|    850|        detail::format_specs specs{};
 5766|    850|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    850|        std::uintptr_t intvalue{};
 5769|    850|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    850|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    850|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    850|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 850, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    850|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    850|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    850|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    850|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    850|    }                                                  \
  |  |  |  | 3671|    850|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    850|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  1.36k|    {
 3035|  1.36k|        return true;
 3036|  1.36k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    626|    {
 5504|    626|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    626|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    626|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    626|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5348|  1.10k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|    976|    {
 5355|    976|        scan_error err{scan_error::invalid_scanned_value,
 5356|    976|                       "Failed to read boolean"};
 5357|       |
 5358|    976|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 868, False: 108]
  ------------------
 5359|    868|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 868]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    868|            else {
 5363|    868|                err = r.error();
 5364|    868|            }
 5365|    868|        }
 5366|       |
 5367|    976|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 954, False: 22]
  ------------------
 5368|    954|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 954]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    954|            else {
 5372|    954|                err = r.error();
 5373|    954|            }
 5374|    954|        }
 5375|       |
 5376|    976|        return unexpected(err);
 5377|    976|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    882|    {
 5384|    882|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 882]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    882|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 882]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    882|        return unexpected_scan_error(
 5394|    882|            scan_error::invalid_scanned_value,
 5395|    882|            "Failed to read numeric boolean value: No match");
 5396|    882|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|    954|    {
 5402|    954|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 954]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    954|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 954]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    954|        return unexpected_scan_error(
 5412|    954|            scan_error::invalid_scanned_value,
 5413|    954|            "Failed to read textual boolean value: No match");
 5414|    954|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  1.90k|{
 2194|  1.90k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.90k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.90k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.90k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 100, False: 1.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    100|    }                                                  \
  |  |  |  | 3671|  1.90k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.80k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.80k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.80k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.80k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.80k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.80k, False: 0]
  |  |  ------------------
  ------------------
 2201|  1.80k|            return unexpected(parse_error::error);
 2202|  1.80k|        }
 2203|      0|        return it;
 2204|  1.80k|    }
 2205|  1.80k|    else {
 2206|  1.80k|        auto range_it = range.begin();
 2207|  1.80k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  1.80k|            if (SCN_UNLIKELY(*range_it !=
 2209|  1.80k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.80k|                return unexpected(parse_error::error);
 2211|  1.80k|            }
 2212|  1.80k|        }
 2213|  1.80k|        return it;
 2214|  1.80k|    }
 2215|  1.80k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|    626|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.10k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    626|    {
 4152|    626|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    626|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    626|        float_reader<CharT> rd{};
 4155|    626|        return read_impl<Range>(
 4156|    626|            range, rd,
 4157|    626|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    626|                return r.read_source(SCN_FWD(args)...);
 4159|    626|            },
 4160|    626|            value);
 4161|    626|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    626|    {
  754|    626|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    626|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    626|              cvref<T> obj = *get<T>(fn);
  745|    626|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    626|                  obj(static_cast<decltype(args)>(args)...);
  747|    626|              }
  748|    626|              else {
  749|    626|                  return obj(static_cast<decltype(args)>(args)...);
  750|    626|              }
  751|    626|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    626|    {
  684|    626|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    626|            return static_cast<T*>(s.m_cp);
  686|    626|        }
  687|    626|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    626|            return static_cast<T*>(s.m_p);
  689|    626|        }
  690|    626|        else {
  691|    626|            return reinterpret_cast<T*>(s.m_fp);
  692|    626|        }
  693|    626|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    626|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    626|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    626|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|    626|        {
  662|    626|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    626|    {
 5266|    626|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    626|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    626|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    626|    {
 5266|    626|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    626|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    626|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    626|    {
 5266|    626|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    626|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    626|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    626|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  89.3k|    {
 2879|  89.3k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   198k|    {
 2883|   198k|        return m_current;
 2884|   198k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   153k|    {
 2888|   153k|        return m_range.end();
 2889|   153k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|  44.5k|{
 1221|       |    // TODO: optimize
 1222|  44.5k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|  44.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|  44.5k|    auto res = get_next_code_point(str);
 1224|  44.5k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|  44.5k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  47.5k|    {
 2903|  47.5k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  47.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  47.5k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  47.5k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 47.5k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  47.5k|        }
 2909|  47.5k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  47.5k|    static_cast<    \
  |  |  929|  47.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  47.5k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  60.4k|    {
 2893|  60.4k|        return ranges::subrange{begin(), end()};
 2894|  60.4k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  5.79k|{
 2117|  5.79k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  5.79k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  5.79k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  5.79k|        auto buf = make_contiguous_buffer(range);
 2121|  5.79k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  5.79k|        return ranges::next(range.begin(),
 2123|  5.79k|                            ranges::distance(buf.view().begin(), it));
 2124|  5.79k|    }
 2125|  5.79k|    else {
 2126|  5.79k|        auto it = range.begin();
 2127|       |
 2128|  5.79k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  5.79k|            auto seg = get_contiguous_beginning(range);
 2130|  5.79k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  5.79k|                seg_it != seg.end()) {
 2132|  5.79k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  5.79k|            }
 2134|  5.79k|            ranges::advance(it, seg.size());
 2135|  5.79k|        }
 2136|       |
 2137|  5.79k|        return read_while_code_point(
 2138|  5.79k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  5.79k|    }
 2140|  5.79k|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  3.83k|    {
 6037|  3.83k|        const bool need_skipped_width =
 6038|  3.83k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 46, False: 3.79k]
  |  Branch (6038:33): [True: 3.79k, False: 0]
  ------------------
 6039|  3.83k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  3.83k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 196, False: 3.64k]
  ------------------
 6043|  3.83k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 760, False: 2.88k]
  ------------------
 6044|    956|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    956|                             need_skipped_width);
 6046|    956|        }
 6047|  2.88k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 2.75k, False: 124]
  |  Branch (6047:56): [True: 1.88k, False: 872]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.88k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 1.88k, False: 0]
  ------------------
 6051|  1.88k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  1.88k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  1.88k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.88k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.88k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 1.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    174|    }                                                  \
  |  |  |  | 3671|  1.88k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  1.71k|                                  .transform_error(make_eof_scan_error));
 6054|  1.71k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  1.88k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|    996|        return result_type{rng.begin(), 0};
 6070|  2.88k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|    956|{
 5951|    956|    using char_type = detail::char_t<Range>;
 5952|    956|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    956|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 742, False: 214]
  ------------------
 5955|    742|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    742|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    742|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 742]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    742|        auto max_width_view = take_width(range, max_width);
 5972|    742|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    742|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 742, False: 0]
  ------------------
 5975|    742|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    742|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    742|    }
 5979|       |
 5980|    214|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    214|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 214]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|    214|    auto max_width_view = take_width(range, max_width);
 5994|    214|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    214|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 214, False: 0]
  ------------------
 5997|    214|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    214|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    214|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_:
  753|    742|    {
  754|    742|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  1.05k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.05k|              cvref<T> obj = *get<T>(fn);
  745|  1.05k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.05k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.05k|              }
  748|  1.05k|              else {
  749|  1.05k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.05k|              }
  751|  1.05k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  1.05k|    {
  684|  1.05k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.05k|            return static_cast<T*>(s.m_cp);
  686|  1.05k|        }
  687|  1.05k|        else if constexpr (std::is_object_v<T>) {
  688|  1.05k|            return static_cast<T*>(s.m_p);
  689|  1.05k|        }
  690|  1.05k|        else {
  691|  1.05k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.05k|        }
  693|  1.05k|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  1.05k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSJ_:
  666|    742|        {
  667|    742|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    742|{
 1976|    742|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    742|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    742|{
 1957|    742|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    742|        return std::find_if(range.begin(), range.end(), pred);
 1959|    742|    }
 1960|    742|    else {
 1961|    742|        auto first = range.begin();
 1962|  1.10k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.05k, False: 54]
  ------------------
 1963|  1.05k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 688, False: 362]
  ------------------
 1964|    688|                return first;
 1965|    688|            }
 1966|  1.05k|        }
 1967|     54|        return first;
 1968|    742|    }
 1969|    742|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2809|  4.72k|    {
 2810|  4.72k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  4.72k|                                      m_count};
 2812|  4.72k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2716|  18.9k|    {
 2717|  18.9k|        return view;
 2718|  18.9k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  4.72k|    {
 2382|  4.72k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  6.55k|        {
 2781|  6.55k|            return !(y == x);
 2782|  6.55k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  12.0k|        {
 2770|  12.0k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 792, False: 11.3k]
  |  Branch (2770:39): [True: 462, False: 330]
  ------------------
 2771|  12.0k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 11.6k]
  ------------------
 2772|  12.0k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|    792|    {
 2421|    792|        return m_multibyte_left;
 2422|    792|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2815|  9.53k|    {
 2816|  9.53k|        return sentinel<true>{m_base.get().end()};
 2817|  9.53k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  9.53k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  8.51k|    {
 2426|  8.51k|        return *m_current;
 2427|  8.51k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  9.51k|    {
 2435|  9.51k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  9.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  9.51k|        _increment_current();
 2437|  9.51k|        return *this;
 2438|  9.51k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  9.51k|    {
 2668|  9.51k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 5.29k, False: 4.22k]
  ------------------
 2669|  5.29k|            auto cplen = _get_cp_length_at_current();
 2670|  5.29k|            m_multibyte_left = cplen - 1;
 2671|  5.29k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  5.29k|        }
 2673|  4.22k|        else {
 2674|  4.22k|            --m_multibyte_left;
 2675|  4.22k|        }
 2676|       |
 2677|  9.51k|        ++m_current;
 2678|  9.51k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  5.29k|    {
 2639|  5.29k|        return static_cast<difference_type>(
 2640|  5.29k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  5.29k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  5.29k|    {
 2645|  5.29k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  5.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.29k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  5.29k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 3.00k, False: 2.29k]
  ------------------
 2650|  3.00k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  3.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  3.00k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  3.00k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  3.00k|        }
 2654|       |
 2655|  2.29k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  2.29k|                                           cplen);
 2657|  2.29k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.29k]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|  2.29k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  2.29k|        return static_cast<difference_type>(
 2663|  2.29k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  2.29k|    }
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2036|    214|{
 2037|    214|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    214|    auto it = range.begin();
 2040|    214|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 214, False: 0]
  ------------------
 2041|    214|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    214|                                           needle.size());
 2043|    214|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 60, False: 154]
  ------------------
 2044|     60|            return it;
 2045|     60|        }
 2046|    154|        static_assert(
 2047|    154|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    154|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 154, False: 0]
  ------------------
 2049|    154|            return it;
 2050|    154|        }
 2051|      0|        it = *r;
 2052|      0|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1856|    214|{
 1857|    214|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    214|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    214|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    214|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    214|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    214|        if (sz < count) {
 1862|    214|            return unexpected(eof_error::eof);
 1863|    214|        }
 1864|       |
 1865|    214|        return ranges::next(range.begin(), count);
 1866|    214|    }
 1867|    214|    else {
 1868|    214|        auto it = range.begin();
 1869|    214|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 214]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|    844|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 690, False: 154]
  ------------------
 1874|    690|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 60, False: 630]
  ------------------
 1875|     60|                return unexpected(eof_error::eof);
 1876|     60|            }
 1877|    690|        }
 1878|       |
 1879|    154|        return it;
 1880|    214|    }
 1881|    214|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1094|    214|{
 1095|    214|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    214|        return r.size();
 1097|    214|    }
 1098|    214|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    214|                           ranges::const_iterator_t<Range>,
 1100|    214|                           typename detail::basic_scan_buffer<
 1101|    214|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    214|        if constexpr (ranges::common_range<Range>) {
 1103|    214|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    214|        }
 1105|    214|        else {
 1106|    214|            if (r.begin().stores_parent()) {
 1107|    214|                return static_cast<size_t>(
 1108|    214|                    r.begin().parent()->chars_available() -
 1109|    214|                    r.begin().position());
 1110|    214|            }
 1111|    214|            return r.begin().contiguous_segment().size();
 1112|    214|        }
 1113|    214|    }
 1114|    214|    else {
 1115|    214|        return 0;
 1116|    214|    }
 1117|    214|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  1.88k|    {
  268|  1.88k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.88k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.88k|    {
  161|  1.88k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.88k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.88k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.88k|        else {
  169|  1.88k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.88k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.88k|        }
  173|  1.88k|    }
_ZN3scn2v34impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2530|  5.79k|    {
 2531|  5.79k|        return !(a == b);
 2532|  5.79k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2522|  5.79k|    {
 2523|  5.79k|        return a.m_current == b.m_current;
 2524|  5.79k|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  2.84k|    {
 2832|  2.84k|        return take_width_view{r, n};
 2833|  2.84k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2800|  2.84k|    {
 2801|  2.84k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2713|  2.84k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.88k|{
 2951|  1.88k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.88k, False: 0]
  ------------------
 2952|  1.88k|        auto it = read_while_classic_space(range);
 2953|  1.88k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.88k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 1.71k]
  |  |  ------------------
  ------------------
 2955|    174|            return unexpected(e);
 2956|    174|        }
 2957|       |
 2958|  1.71k|        return it;
 2959|  1.88k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.88k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.88k|{
 2117|  1.88k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.88k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.88k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.88k|        auto buf = make_contiguous_buffer(range);
 2121|  1.88k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.88k|        return ranges::next(range.begin(),
 2123|  1.88k|                            ranges::distance(buf.view().begin(), it));
 2124|  1.88k|    }
 2125|  1.88k|    else {
 2126|  1.88k|        auto it = range.begin();
 2127|       |
 2128|  1.88k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.88k|            auto seg = get_contiguous_beginning(range);
 2130|  1.88k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.88k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 1.88k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  1.88k|            ranges::advance(it, seg.size());
 2135|  1.88k|        }
 2136|       |
 2137|  1.88k|        return read_while_code_point(
 2138|  1.88k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.88k|    }
 2140|  1.88k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1038|  1.88k|{
 1039|  1.88k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  1.88k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  1.88k|        return r;
 1042|  1.88k|    }
 1043|  1.88k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  1.88k|                           ranges::const_iterator_t<Range>,
 1045|  1.88k|                           typename detail::basic_scan_buffer<
 1046|  1.88k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  1.88k|        if constexpr (ranges::common_range<Range>) {
 1048|  1.88k|            auto seg = r.begin().contiguous_segment();
 1049|  1.88k|            auto dist =
 1050|  1.88k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  1.88k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  1.88k|        }
 1053|  1.88k|        else {
 1054|  1.88k|            return r.begin().contiguous_segment();
 1055|  1.88k|        }
 1056|  1.88k|    }
 1057|  1.88k|    else {
 1058|  1.88k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.88k|    }
 1060|  1.88k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.88k|{
 2082|  1.88k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.88k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.88k|{
 2061|  1.88k|    auto it = range.begin();
 2062|  3.14k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 2.97k, False: 174]
  ------------------
 2063|  2.97k|        const auto val =
 2064|  2.97k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  2.97k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.97k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.97k, False: 0]
  |  |  ------------------
  ------------------
 2066|  2.97k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  2.97k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  2.97k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.71k, False: 1.26k]
  ------------------
 2069|  1.71k|                return it;
 2070|  1.71k|            }
 2071|  2.97k|        }
 2072|  1.26k|        it = val.iterator;
 2073|  1.26k|    }
 2074|       |
 2075|    174|    return it;
 2076|  1.88k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  2.97k|{
 1899|  2.97k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  2.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  2.97k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  2.97k|    auto it = range.begin();
 1903|  2.97k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  2.97k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.97k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  2.97k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 2.24k, False: 726]
  ------------------
 1912|  2.24k|        ++it;
 1913|  2.24k|        return {it, string_type(1, *range.begin())};
 1914|  2.24k|    }
 1915|       |
 1916|    726|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|    726|    return {it, string_type{range.begin(), it}};
 1918|  2.97k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  4.85k|{
  944|  4.85k|    return is_range_eof(r.begin(), r.end());
  945|  4.85k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  4.85k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  4.85k|    {
  937|  4.85k|        return begin == end;
  938|  4.85k|    }
  939|  4.85k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    726|    {
  283|    726|        return n - fn::impl_i_n_s(i, n, bound);
  284|    726|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    726|    {
  227|    726|        constexpr iter_difference_t<I> zero{0};
  228|    726|        iter_difference_t<I> counter{0};
  229|       |
  230|    726|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 726]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    726|        else {
  237|  2.81k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 2.09k, False: 726]
  |  Branch (237:34): [True: 2.09k, False: 0]
  ------------------
  238|  2.09k|                ++i;
  239|  2.09k|                ++counter;
  240|  2.09k|            }
  241|    726|        }
  242|       |
  243|    726|        return counter;
  244|    726|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1889|  2.97k|    {
 1890|  2.97k|        return !codepoint.empty();
 1891|  2.97k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  1.88k|    {
  754|  1.88k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  2.97k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.97k|              cvref<T> obj = *get<T>(fn);
  745|  2.97k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.97k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.97k|              }
  748|  2.97k|              else {
  749|  2.97k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.97k|              }
  751|  2.97k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.97k|    {
  684|  2.97k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.97k|            return static_cast<T*>(s.m_cp);
  686|  2.97k|        }
  687|  2.97k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.97k|            return static_cast<T*>(s.m_p);
  689|  2.97k|        }
  690|  2.97k|        else {
  691|  2.97k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.97k|        }
  693|  2.97k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  2.97k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  1.88k|        {
  662|  1.88k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.88k|{
  950|  1.88k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 1.71k]
  |  |  ------------------
  ------------------
  951|    174|        return eof_error::eof;
  952|    174|    }
  953|  1.71k|    return eof_error::good;
  954|  1.88k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  14.3k|    {
 2413|  14.3k|        return m_current;
 2414|  14.3k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  14.7k|    {
 2417|  14.7k|        return m_count;
 2418|  14.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  15.4k|    {
 6037|  15.4k|        const bool need_skipped_width =
 6038|  15.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 1.71k, False: 13.6k]
  |  Branch (6038:33): [True: 0, False: 13.6k]
  ------------------
 6039|  15.4k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  15.4k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 140, False: 15.2k]
  ------------------
 6043|  15.4k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 1.30k, False: 13.9k]
  ------------------
 6044|  1.44k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  1.44k|                             need_skipped_width);
 6046|  1.44k|        }
 6047|  13.9k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 13.4k, False: 498]
  |  Branch (6047:56): [True: 1.58k, False: 11.8k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.58k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.58k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.16k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.58k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.16k|                            make_eof_scan_error));
 6058|       |
 6059|  3.16k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.00k, False: 582]
  ------------------
 6060|  1.00k|                return result_type{
 6061|  1.00k|                    it,
 6062|  1.00k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.00k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.00k|                                             .view())};
 6065|  1.00k|            }
 6066|    582|            return result_type{it, 0};
 6067|  3.16k|        }
 6068|       |
 6069|  12.3k|        return result_type{rng.begin(), 0};
 6070|  13.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  4.09k|    {
 6079|  4.09k|        const bool need_skipped_width =
 6080|  4.09k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 404, False: 3.68k]
  |  Branch (6080:33): [True: 1.05k, False: 2.63k]
  ------------------
 6081|  4.09k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  4.09k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 214, False: 3.87k]
  ------------------
 6084|  4.09k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 314, False: 3.56k]
  ------------------
 6085|    528|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 214, False: 314]
  ------------------
 6086|    528|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 84, False: 130]
  ------------------
 6087|     84|                return result_type{rng.begin(), 0};
 6088|     84|            }
 6089|    444|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    444|                             specs.fill, need_skipped_width);
 6091|    528|        }
 6092|  3.56k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 3.43k, False: 128]
  ------------------
 6093|  3.56k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 3.13k, False: 300]
  ------------------
 6094|  3.56k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 182, False: 2.95k]
  |  Branch (6094:35): [True: 158, False: 24]
  ------------------
 6095|  3.13k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 566, False: 2.41k]
  ------------------
 6096|  2.97k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 454, False: 112]
  ------------------
 6097|    612|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 454, False: 158]
  ------------------
 6098|    454|                const auto initial_width =
 6099|    454|                    specs.precision - prefix_width - value_width;
 6100|    454|                auto max_width_view = take_width(rng, initial_width);
 6101|    454|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    454|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    454|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    454|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    454|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 454]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    454|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    454|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    454|                                  .transform_error(make_eof_scan_error));
 6103|    454|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    454|            }
 6105|    316|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 158]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    158|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    158|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|    316|                            make_eof_scan_error));
 6107|       |
 6108|    316|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 158, False: 0]
  ------------------
 6109|    158|                return result_type{
 6110|    158|                    it,
 6111|    158|                    calculate_text_width(make_contiguous_buffer(
 6112|    158|                                             ranges::subrange{rng.begin(), it})
 6113|    158|                                             .view())};
 6114|    158|            }
 6115|      0|            return result_type{it, 0};
 6116|    316|        }
 6117|  2.95k|        return result_type{rng.begin(), 0};
 6118|  3.56k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6192|  5.44k|    {
 6193|  5.44k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.44k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.44k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.44k|            auto rd = make_reader<T, char_type>();
 6198|  5.44k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.89k, False: 552]
  |  |  ------------------
  ------------------
 6199|  4.89k|                return unexpected(e);
 6200|  4.89k|            }
 6201|       |
 6202|    552|            return impl(rd, range, value);
 6203|  5.44k|        }
 6204|  5.44k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.44k|            auto rd = make_reader<T, char_type>();
 6206|  5.44k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.44k|                return unexpected(e);
 6208|  5.44k|            }
 6209|       |
 6210|  5.44k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.44k|                specs.width != 0) {
 6212|  5.44k|                return impl(rd, range, value);
 6213|  5.44k|            }
 6214|       |
 6215|  5.44k|            auto crange = get_as_contiguous(range);
 6216|  5.44k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.44k|            return ranges::next(range.begin(),
 6218|  5.44k|                                ranges::distance(crange.begin(), it));
 6219|  5.44k|        }
 6220|  5.44k|        else {
 6221|  5.44k|            SCN_EXPECT(false);
 6222|  5.44k|            SCN_UNREACHABLE;
 6223|  5.44k|        }
 6224|  5.44k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    552|    {
 6124|    552|        const bool need_skipped_width =
 6125|    552|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 172, False: 380]
  |  Branch (6125:33): [True: 296, False: 84]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    552|        auto it = rng.begin();
 6129|    552|        std::ptrdiff_t prefix_width = 0;
 6130|    552|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 298, False: 254]
  ------------------
 6131|    298|            auto max_width_view = take_width(rng, specs.precision);
 6132|    298|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     24|    }                                                  \
  |  |  |  | 3671|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    274|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    274|            it = prefix_result.first.base();
 6135|    274|            prefix_width = prefix_result.second;
 6136|    274|        }
 6137|    254|        else {
 6138|    254|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    254|            std::tie(it, prefix_width) = prefix_result;
 6140|    254|        }
 6141|    528|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    528|        std::ptrdiff_t value_width = 0;
 6145|    528|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 274, False: 254]
  ------------------
 6146|    274|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 268]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    268|            const auto initial_width = specs.precision - prefix_width;
 6154|    268|            auto max_width_view =
 6155|    268|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    268|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 268, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    268|    }                                                  \
  |  |  |  | 3671|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    254|        else {
 6161|    254|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 254, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    254|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    254|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    254|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    254|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    254|    }                                                  \
  |  | 3671|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6192|  5.44k|    {
 6193|  5.44k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.44k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.44k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.44k|            auto rd = make_reader<T, char_type>();
 6198|  5.44k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.89k, False: 552]
  |  |  ------------------
  ------------------
 6199|  4.89k|                return unexpected(e);
 6200|  4.89k|            }
 6201|       |
 6202|    552|            return impl(rd, range, value);
 6203|  5.44k|        }
 6204|  5.44k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.44k|            auto rd = make_reader<T, char_type>();
 6206|  5.44k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.44k|                return unexpected(e);
 6208|  5.44k|            }
 6209|       |
 6210|  5.44k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.44k|                specs.width != 0) {
 6212|  5.44k|                return impl(rd, range, value);
 6213|  5.44k|            }
 6214|       |
 6215|  5.44k|            auto crange = get_as_contiguous(range);
 6216|  5.44k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.44k|            return ranges::next(range.begin(),
 6218|  5.44k|                                ranges::distance(crange.begin(), it));
 6219|  5.44k|        }
 6220|  5.44k|        else {
 6221|  5.44k|            SCN_EXPECT(false);
 6222|  5.44k|            SCN_UNREACHABLE;
 6223|  5.44k|        }
 6224|  5.44k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    552|    {
 6124|    552|        const bool need_skipped_width =
 6125|    552|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 172, False: 380]
  |  Branch (6125:33): [True: 296, False: 84]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    552|        auto it = rng.begin();
 6129|    552|        std::ptrdiff_t prefix_width = 0;
 6130|    552|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 298, False: 254]
  ------------------
 6131|    298|            auto max_width_view = take_width(rng, specs.precision);
 6132|    298|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     24|    }                                                  \
  |  |  |  | 3671|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    274|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    274|            it = prefix_result.first.base();
 6135|    274|            prefix_width = prefix_result.second;
 6136|    274|        }
 6137|    254|        else {
 6138|    254|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    254|            std::tie(it, prefix_width) = prefix_result;
 6140|    254|        }
 6141|    528|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    528|        std::ptrdiff_t value_width = 0;
 6145|    528|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 274, False: 254]
  ------------------
 6146|    274|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 268]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    268|            const auto initial_width = specs.precision - prefix_width;
 6154|    268|            auto max_width_view =
 6155|    268|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    268|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 268, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    268|    }                                                  \
  |  |  |  | 3671|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    254|        else {
 6161|    254|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 254, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    254|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    254|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    254|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    254|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    254|    }                                                  \
  |  | 3671|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6192|  5.40k|    {
 6193|  5.40k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.40k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.40k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.40k|            auto rd = make_reader<T, char_type>();
 6198|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.93k, False: 478]
  |  |  ------------------
  ------------------
 6199|  4.93k|                return unexpected(e);
 6200|  4.93k|            }
 6201|       |
 6202|    478|            return impl(rd, range, value);
 6203|  5.40k|        }
 6204|  5.40k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.40k|            auto rd = make_reader<T, char_type>();
 6206|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.40k|                return unexpected(e);
 6208|  5.40k|            }
 6209|       |
 6210|  5.40k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.40k|                specs.width != 0) {
 6212|  5.40k|                return impl(rd, range, value);
 6213|  5.40k|            }
 6214|       |
 6215|  5.40k|            auto crange = get_as_contiguous(range);
 6216|  5.40k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.40k|            return ranges::next(range.begin(),
 6218|  5.40k|                                ranges::distance(crange.begin(), it));
 6219|  5.40k|        }
 6220|  5.40k|        else {
 6221|  5.40k|            SCN_EXPECT(false);
 6222|  5.40k|            SCN_UNREACHABLE;
 6223|  5.40k|        }
 6224|  5.40k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5752|  5.40k|    {
 5753|  5.40k|        reader_error_handler eh{};
 5754|  5.40k|        detail::check_pointer_type_specs(specs, eh);
 5755|  5.40k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.93k, False: 478]
  |  |  ------------------
  ------------------
 5756|  4.93k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  4.93k|        }
 5758|    478|        return {};
 5759|  5.40k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    478|    {
 6124|    478|        const bool need_skipped_width =
 6125|    478|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 166, False: 312]
  |  Branch (6125:33): [True: 252, False: 60]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    478|        auto it = rng.begin();
 6129|    478|        std::ptrdiff_t prefix_width = 0;
 6130|    478|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 254, False: 224]
  ------------------
 6131|    254|            auto max_width_view = take_width(rng, specs.precision);
 6132|    254|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 238]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    238|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    238|            it = prefix_result.first.base();
 6135|    238|            prefix_width = prefix_result.second;
 6136|    238|        }
 6137|    224|        else {
 6138|    224|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    224|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    224|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    224|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 224]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    224|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    224|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    224|            std::tie(it, prefix_width) = prefix_result;
 6140|    224|        }
 6141|    462|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    462|        std::ptrdiff_t value_width = 0;
 6145|    462|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 238, False: 224]
  ------------------
 6146|    238|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 234]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    234|            const auto initial_width = specs.precision - prefix_width;
 6154|    234|            auto max_width_view =
 6155|    234|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    234|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    234|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 234, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    234|    }                                                  \
  |  |  |  | 3671|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    224|        else {
 6161|    224|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    224|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    224|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 224, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    224|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    224|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    224|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    224|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    224|    }                                                  \
  |  | 3671|    224|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    224|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    234|    {
 5782|    234|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    234|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    234|        return read_default(range, value, loc);
 5784|    234|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    234|    {
 5765|    234|        detail::format_specs specs{};
 5766|    234|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    234|        std::uintptr_t intvalue{};
 5769|    234|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    234|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 234, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    234|    }                                                  \
  |  |  |  | 3671|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    234|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    224|    {
 5782|    224|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    224|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    224|        return read_default(range, value, loc);
 5784|    224|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6192|  5.44k|    {
 6193|  5.44k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.44k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.44k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.44k|            auto rd = make_reader<T, char_type>();
 6198|  5.44k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.70k, False: 734]
  |  |  ------------------
  ------------------
 6199|  4.70k|                return unexpected(e);
 6200|  4.70k|            }
 6201|       |
 6202|    734|            return impl(rd, range, value);
 6203|  5.44k|        }
 6204|  5.44k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.44k|            auto rd = make_reader<T, char_type>();
 6206|  5.44k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.44k|                return unexpected(e);
 6208|  5.44k|            }
 6209|       |
 6210|  5.44k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.44k|                specs.width != 0) {
 6212|  5.44k|                return impl(rd, range, value);
 6213|  5.44k|            }
 6214|       |
 6215|  5.44k|            auto crange = get_as_contiguous(range);
 6216|  5.44k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.44k|            return ranges::next(range.begin(),
 6218|  5.44k|                                ranges::distance(crange.begin(), it));
 6219|  5.44k|        }
 6220|  5.44k|        else {
 6221|  5.44k|            SCN_EXPECT(false);
 6222|  5.44k|            SCN_UNREACHABLE;
 6223|  5.44k|        }
 6224|  5.44k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  5.44k|    {
 3040|  5.44k|        reader_error_handler eh{};
 3041|  5.44k|        get_derived().check_specs_impl(specs, eh);
 3042|  5.44k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.70k, False: 734]
  |  |  ------------------
  ------------------
 3043|  4.70k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.70k|        }
 3045|    734|        return {};
 3046|  5.44k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  5.44k|    {
 3051|  5.44k|        return static_cast<Derived&>(*this);
 3052|  5.44k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  5.44k|    {
 5497|  5.44k|        detail::check_bool_type_specs(specs, eh);
 5498|  5.44k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    734|    {
 6124|    734|        const bool need_skipped_width =
 6125|    734|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 182, False: 552]
  |  Branch (6125:33): [True: 362, False: 190]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    734|        auto it = rng.begin();
 6129|    734|        std::ptrdiff_t prefix_width = 0;
 6130|    734|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 366, False: 368]
  ------------------
 6131|    366|            auto max_width_view = take_width(rng, specs.precision);
 6132|    366|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    366|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    366|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    366|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 338]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     28|    }                                                  \
  |  |  |  | 3671|    366|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    338|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    338|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    338|            it = prefix_result.first.base();
 6135|    338|            prefix_width = prefix_result.second;
 6136|    338|        }
 6137|    368|        else {
 6138|    368|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    368|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    368|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    368|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    368|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    368|            std::tie(it, prefix_width) = prefix_result;
 6140|    368|        }
 6141|    706|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    706|        std::ptrdiff_t value_width = 0;
 6145|    706|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 338, False: 368]
  ------------------
 6146|    338|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 332]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    332|            const auto initial_width = specs.precision - prefix_width;
 6154|    332|            auto max_width_view =
 6155|    332|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    332|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    332|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    332|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    332|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    332|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 332, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    332|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    332|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    332|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    332|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    332|    }                                                  \
  |  |  |  | 3671|    332|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    368|        else {
 6161|    368|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    368|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    368|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 368, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    368|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    368|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    368|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    368|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    368|    }                                                  \
  |  | 3671|    368|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    332|    {
 5516|    332|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    332|#if !SCN_DISABLE_LOCALE
 5519|    332|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 14, False: 318]
  ------------------
 5520|     14|            return rd.read_localized(range, loc, value);
 5521|     14|        }
 5522|    318|#endif
 5523|       |
 5524|    318|        return rd.read_classic(range, value);
 5525|    332|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5528|    700|    {
 5529|    700|        SCN_GCC_COMPAT_PUSH
 5530|    700|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    700|        switch (specs.type) {
 5533|    176|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 176, False: 524]
  ------------------
 5534|    176|                return bool_reader_base::allow_text;
 5535|       |
 5536|     10|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 10, False: 690]
  ------------------
 5537|     18|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 8, False: 692]
  ------------------
 5538|     24|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 694]
  ------------------
 5539|     38|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 14, False: 686]
  ------------------
 5540|     54|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 16, False: 684]
  ------------------
 5541|     58|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 4, False: 696]
  ------------------
 5542|     58|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    466|            default:
  ------------------
  |  Branch (5544:13): [True: 466, False: 234]
  ------------------
 5545|    466|                return bool_reader_base::allow_text |
 5546|    466|                       bool_reader_base::allow_numeric;
 5547|    700|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    700|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     14|    {
 5428|     14|        scan_error err{scan_error::invalid_scanned_value,
 5429|     14|                       "Failed to read boolean"};
 5430|       |
 5431|     14|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 12, False: 2]
  ------------------
 5432|     12|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 12]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     12|            else {
 5436|     12|                err = r.error();
 5437|     12|            }
 5438|     12|        }
 5439|       |
 5440|     14|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 10, False: 4]
  ------------------
 5441|     10|            auto stdloc = loc.get<std::locale>();
 5442|     10|            const auto& numpunct =
 5443|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     10|            const auto truename = numpunct.truename();
 5445|     10|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     10|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 10]
  ------------------
 5448|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     10|            else {
 5452|     10|                err = r.error();
 5453|     10|            }
 5454|     10|        }
 5455|       |
 5456|     14|        return unexpected(err);
 5457|     14|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    268|    {
 5384|    268|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 268]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    268|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 268]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    268|        return unexpected_scan_error(
 5394|    268|            scan_error::invalid_scanned_value,
 5395|    268|            "Failed to read numeric boolean value: No match");
 5396|    268|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    536|{
 2146|    536|    auto it = read_code_unit(range);
 2147|    536|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    536|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 536]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    536|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    536|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 536, False: 0]
  |  |  ------------------
  ------------------
 2152|    536|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    536|        return unexpected(parse_error::error);
 2154|    536|    }
 2155|       |
 2156|      0|    return *it;
 2157|    536|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5467|     10|    {
 5468|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     10|        const auto shorter = std::pair{
 5470|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 10, False: 0]
  ------------------
 5471|     10|        const auto longer = std::pair{
 5472|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 10]
  ------------------
 5473|       |
 5474|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 10]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 10]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     10|                                     "read_textual: No match");
 5485|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     10|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2185|     10|        return unexpected(parse_error::error);
 2186|     10|    }
 2187|      0|    return it;
 2188|     10|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    608|{
 1857|    608|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    608|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    608|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    608|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    608|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    608|        if (sz < count) {
 1862|    608|            return unexpected(eof_error::eof);
 1863|    608|        }
 1864|       |
 1865|    608|        return ranges::next(range.begin(), count);
 1866|    608|    }
 1867|    608|    else {
 1868|    608|        auto it = range.begin();
 1869|    608|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 608]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  3.01k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.53k, False: 478]
  ------------------
 1874|  2.53k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 130, False: 2.40k]
  ------------------
 1875|    130|                return unexpected(eof_error::eof);
 1876|    130|            }
 1877|  2.53k|        }
 1878|       |
 1879|    478|        return it;
 1880|    608|    }
 1881|    608|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|    608|{
 1095|    608|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    608|        return r.size();
 1097|    608|    }
 1098|    608|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    608|                           ranges::const_iterator_t<Range>,
 1100|    608|                           typename detail::basic_scan_buffer<
 1101|    608|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    608|        if constexpr (ranges::common_range<Range>) {
 1103|    608|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    608|        }
 1105|    608|        else {
 1106|    608|            if (r.begin().stores_parent()) {
 1107|    608|                return static_cast<size_t>(
 1108|    608|                    r.begin().parent()->chars_available() -
 1109|    608|                    r.begin().position());
 1110|    608|            }
 1111|    608|            return r.begin().contiguous_segment().size();
 1112|    608|        }
 1113|    608|    }
 1114|    608|    else {
 1115|    608|        return 0;
 1116|    608|    }
 1117|    608|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    318|    {
 5355|    318|        scan_error err{scan_error::invalid_scanned_value,
 5356|    318|                       "Failed to read boolean"};
 5357|       |
 5358|    318|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 256, False: 62]
  ------------------
 5359|    256|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 256]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    256|            else {
 5363|    256|                err = r.error();
 5364|    256|            }
 5365|    256|        }
 5366|       |
 5367|    318|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 294, False: 24]
  ------------------
 5368|    294|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 294]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    294|            else {
 5372|    294|                err = r.error();
 5373|    294|            }
 5374|    294|        }
 5375|       |
 5376|    318|        return unexpected(err);
 5377|    318|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    294|    {
 5402|    294|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 294]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    294|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 294]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    294|        return unexpected_scan_error(
 5412|    294|            scan_error::invalid_scanned_value,
 5413|    294|            "Failed to read textual boolean value: No match");
 5414|    294|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    588|{
 2194|    588|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    588|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    588|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    588|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    588|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 120, False: 468]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    120|    }                                                  \
  |  |  |  | 3671|    588|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    468|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    468|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    468|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    468|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    468|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    468|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 468, False: 0]
  |  |  ------------------
  ------------------
 2201|    468|            return unexpected(parse_error::error);
 2202|    468|        }
 2203|      0|        return it;
 2204|    468|    }
 2205|    468|    else {
 2206|    468|        auto range_it = range.begin();
 2207|    468|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|    468|            if (SCN_UNLIKELY(*range_it !=
 2209|    468|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    468|                return unexpected(parse_error::error);
 2211|    468|            }
 2212|    468|        }
 2213|    468|        return it;
 2214|    468|    }
 2215|    468|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    368|    {
 5516|    368|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    368|#if !SCN_DISABLE_LOCALE
 5519|    368|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 18, False: 350]
  ------------------
 5520|     18|            return rd.read_localized(range, loc, value);
 5521|     18|        }
 5522|    350|#endif
 5523|       |
 5524|    350|        return rd.read_classic(range, value);
 5525|    368|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     18|    {
 5428|     18|        scan_error err{scan_error::invalid_scanned_value,
 5429|     18|                       "Failed to read boolean"};
 5430|       |
 5431|     18|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 14, False: 4]
  ------------------
 5432|     14|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 14]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     14|            else {
 5436|     14|                err = r.error();
 5437|     14|            }
 5438|     14|        }
 5439|       |
 5440|     18|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 10, False: 8]
  ------------------
 5441|     10|            auto stdloc = loc.get<std::locale>();
 5442|     10|            const auto& numpunct =
 5443|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     10|            const auto truename = numpunct.truename();
 5445|     10|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     10|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 10]
  ------------------
 5448|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     10|            else {
 5452|     10|                err = r.error();
 5453|     10|            }
 5454|     10|        }
 5455|       |
 5456|     18|        return unexpected(err);
 5457|     18|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5467|     10|    {
 5468|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     10|        const auto shorter = std::pair{
 5470|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 10, False: 0]
  ------------------
 5471|     10|        const auto longer = std::pair{
 5472|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 10]
  ------------------
 5473|       |
 5474|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 10]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 10]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     10|                                     "read_textual: No match");
 5485|     10|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     18|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     18|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     18|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     18|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 2185|     18|        return unexpected(parse_error::error);
 2186|     18|    }
 2187|      0|    return it;
 2188|     18|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6192|  5.40k|    {
 6193|  5.40k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.40k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.40k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.40k|            auto rd = make_reader<T, char_type>();
 6198|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.88k, False: 528]
  |  |  ------------------
  ------------------
 6199|  4.88k|                return unexpected(e);
 6200|  4.88k|            }
 6201|       |
 6202|    528|            return impl(rd, range, value);
 6203|  5.40k|        }
 6204|  5.40k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.40k|            auto rd = make_reader<T, char_type>();
 6206|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.40k|                return unexpected(e);
 6208|  5.40k|            }
 6209|       |
 6210|  5.40k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.40k|                specs.width != 0) {
 6212|  5.40k|                return impl(rd, range, value);
 6213|  5.40k|            }
 6214|       |
 6215|  5.40k|            auto crange = get_as_contiguous(range);
 6216|  5.40k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.40k|            return ranges::next(range.begin(),
 6218|  5.40k|                                ranges::distance(crange.begin(), it));
 6219|  5.40k|        }
 6220|  5.40k|        else {
 6221|  5.40k|            SCN_EXPECT(false);
 6222|  5.40k|            SCN_UNREACHABLE;
 6223|  5.40k|        }
 6224|  5.40k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    528|    {
 6124|    528|        const bool need_skipped_width =
 6125|    528|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 168, False: 360]
  |  Branch (6125:33): [True: 284, False: 76]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    528|        auto it = rng.begin();
 6129|    528|        std::ptrdiff_t prefix_width = 0;
 6130|    528|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 286, False: 242]
  ------------------
 6131|    286|            auto max_width_view = take_width(rng, specs.precision);
 6132|    286|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    286|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    286|            it = prefix_result.first.base();
 6135|    286|            prefix_width = prefix_result.second;
 6136|    286|        }
 6137|    242|        else {
 6138|    242|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    242|            std::tie(it, prefix_width) = prefix_result;
 6140|    242|        }
 6141|    528|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    528|        std::ptrdiff_t value_width = 0;
 6145|    528|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 286, False: 242]
  ------------------
 6146|    286|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 280]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    280|            const auto initial_width = specs.precision - prefix_width;
 6154|    280|            auto max_width_view =
 6155|    280|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    280|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 248]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    248|            it = w_it.base();
 6158|    248|            value_width = initial_width - w_it.count();
 6159|    248|        }
 6160|    242|        else {
 6161|    242|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22, False: 220]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     22|    }                                                  \
  |  | 3671|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    220|                                             specs, value, loc));
 6163|       |
 6164|    220|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 162, False: 58]
  ------------------
 6165|    162|                value_width = calculate_text_width(
 6166|    162|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    162|                        .view());
 6168|    162|            }
 6169|    220|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    468|        std::ptrdiff_t postfix_width = 0;
 6173|    468|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 468, False: 0]
  ------------------
 6174|    468|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    468|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    468|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    468|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 468]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    468|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    468|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    468|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    468|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    468|                                 value_width));
 6178|    468|            std::tie(it, postfix_width) = postfix_result;
 6179|    468|        }
 6180|       |
 6181|    468|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    468|                                                 value_width, postfix_width);
 6183|    468|            !e) {
  ------------------
  |  Branch (6183:13): [True: 144, False: 324]
  ------------------
 6184|    144|            return unexpected(e);
 6185|    144|        }
 6186|       |
 6187|    324|        return it;
 6188|    468|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|  5.44k|    {
 6193|  5.44k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.44k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.44k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.44k|            auto rd = make_reader<T, char_type>();
 6198|  5.44k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.89k, False: 552]
  |  |  ------------------
  ------------------
 6199|  4.89k|                return unexpected(e);
 6200|  4.89k|            }
 6201|       |
 6202|    552|            return impl(rd, range, value);
 6203|  5.44k|        }
 6204|  5.44k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.44k|            auto rd = make_reader<T, char_type>();
 6206|  5.44k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.44k|                return unexpected(e);
 6208|  5.44k|            }
 6209|       |
 6210|  5.44k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.44k|                specs.width != 0) {
 6212|  5.44k|                return impl(rd, range, value);
 6213|  5.44k|            }
 6214|       |
 6215|  5.44k|            auto crange = get_as_contiguous(range);
 6216|  5.44k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.44k|            return ranges::next(range.begin(),
 6218|  5.44k|                                ranges::distance(crange.begin(), it));
 6219|  5.44k|        }
 6220|  5.44k|        else {
 6221|  5.44k|            SCN_EXPECT(false);
 6222|  5.44k|            SCN_UNREACHABLE;
 6223|  5.44k|        }
 6224|  5.44k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    552|    {
 6124|    552|        const bool need_skipped_width =
 6125|    552|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 176, False: 376]
  |  Branch (6125:33): [True: 290, False: 86]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    552|        auto it = rng.begin();
 6129|    552|        std::ptrdiff_t prefix_width = 0;
 6130|    552|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 294, False: 258]
  ------------------
 6131|    294|            auto max_width_view = take_width(rng, specs.precision);
 6132|    294|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    272|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    272|            it = prefix_result.first.base();
 6135|    272|            prefix_width = prefix_result.second;
 6136|    272|        }
 6137|    258|        else {
 6138|    258|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    258|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    258|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    258|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 258]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    258|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    258|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    258|            std::tie(it, prefix_width) = prefix_result;
 6140|    258|        }
 6141|    530|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    530|        std::ptrdiff_t value_width = 0;
 6145|    530|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 272, False: 258]
  ------------------
 6146|    272|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 8, False: 264]
  ------------------
 6147|      8|                return unexpected_scan_error(
 6148|      8|                    scan_error::invalid_scanned_value,
 6149|      8|                    "Too many fill characters before value, "
 6150|      8|                    "precision exceeded before reading value");
 6151|      8|            }
 6152|       |
 6153|    264|            const auto initial_width = specs.precision - prefix_width;
 6154|    264|            auto max_width_view =
 6155|    264|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    264|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 264, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    264|    }                                                  \
  |  |  |  | 3671|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    258|        else {
 6161|    258|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    258|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    258|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 258, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    258|    }                                                  \
  |  | 3671|    258|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    258|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  5.40k|    {
 6193|  5.40k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.40k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.40k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.40k|            auto rd = make_reader<T, char_type>();
 6198|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 5.28k]
  |  |  ------------------
  ------------------
 6199|    128|                return unexpected(e);
 6200|    128|            }
 6201|       |
 6202|  5.28k|            return impl(rd, range, value);
 6203|  5.40k|        }
 6204|  5.40k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.40k|            auto rd = make_reader<T, char_type>();
 6206|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.40k|                return unexpected(e);
 6208|  5.40k|            }
 6209|       |
 6210|  5.40k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.40k|                specs.width != 0) {
 6212|  5.40k|                return impl(rd, range, value);
 6213|  5.40k|            }
 6214|       |
 6215|  5.40k|            auto crange = get_as_contiguous(range);
 6216|  5.40k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.40k|            return ranges::next(range.begin(),
 6218|  5.40k|                                ranges::distance(crange.begin(), it));
 6219|  5.40k|        }
 6220|  5.40k|        else {
 6221|  5.40k|            SCN_EXPECT(false);
 6222|  5.40k|            SCN_UNREACHABLE;
 6223|  5.40k|        }
 6224|  5.40k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  5.28k|    {
 6124|  5.28k|        const bool need_skipped_width =
 6125|  5.28k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 242, False: 5.03k]
  |  Branch (6125:33): [True: 670, False: 4.36k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  5.28k|        auto it = rng.begin();
 6129|  5.28k|        std::ptrdiff_t prefix_width = 0;
 6130|  5.28k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 680, False: 4.60k]
  ------------------
 6131|    680|            auto max_width_view = take_width(rng, specs.precision);
 6132|    680|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    680|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    680|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    680|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    680|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 660]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    680|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    660|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    660|            it = prefix_result.first.base();
 6135|    660|            prefix_width = prefix_result.second;
 6136|    660|        }
 6137|  4.60k|        else {
 6138|  4.60k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  4.60k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  4.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  4.60k|            std::tie(it, prefix_width) = prefix_result;
 6140|  4.60k|        }
 6141|  5.26k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  5.26k|        std::ptrdiff_t value_width = 0;
 6145|  5.26k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 660, False: 4.60k]
  ------------------
 6146|    660|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 654]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    654|            const auto initial_width = specs.precision - prefix_width;
 6154|    654|            auto max_width_view =
 6155|    654|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    654|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 282, False: 372]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    282|    }                                                  \
  |  |  |  | 3671|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    372|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    372|            it = w_it.base();
 6158|    372|            value_width = initial_width - w_it.count();
 6159|    372|        }
 6160|  4.60k|        else {
 6161|  4.60k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  4.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  4.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.36k, False: 1.23k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.36k|    }                                                  \
  |  | 3671|  4.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.23k|                                             specs, value, loc));
 6163|       |
 6164|  1.23k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 198, False: 1.04k]
  ------------------
 6165|    198|                value_width = calculate_text_width(
 6166|    198|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    198|                        .view());
 6168|    198|            }
 6169|  1.23k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.61k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.61k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.20k, False: 402]
  ------------------
 6174|  1.20k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.20k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.20k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.20k|                                 value_width));
 6178|  1.20k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.20k|        }
 6180|       |
 6181|  1.61k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.61k|                                                 value_width, postfix_width);
 6183|  1.61k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 108, False: 1.50k]
  ------------------
 6184|    108|            return unexpected(e);
 6185|    108|        }
 6186|       |
 6187|  1.50k|        return it;
 6188|  1.61k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  5.40k|    {
 6193|  5.40k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.40k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.40k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.40k|            auto rd = make_reader<T, char_type>();
 6198|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 5.28k]
  |  |  ------------------
  ------------------
 6199|    128|                return unexpected(e);
 6200|    128|            }
 6201|       |
 6202|  5.28k|            return impl(rd, range, value);
 6203|  5.40k|        }
 6204|  5.40k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.40k|            auto rd = make_reader<T, char_type>();
 6206|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.40k|                return unexpected(e);
 6208|  5.40k|            }
 6209|       |
 6210|  5.40k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.40k|                specs.width != 0) {
 6212|  5.40k|                return impl(rd, range, value);
 6213|  5.40k|            }
 6214|       |
 6215|  5.40k|            auto crange = get_as_contiguous(range);
 6216|  5.40k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.40k|            return ranges::next(range.begin(),
 6218|  5.40k|                                ranges::distance(crange.begin(), it));
 6219|  5.40k|        }
 6220|  5.40k|        else {
 6221|  5.40k|            SCN_EXPECT(false);
 6222|  5.40k|            SCN_UNREACHABLE;
 6223|  5.40k|        }
 6224|  5.40k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  5.28k|    {
 6124|  5.28k|        const bool need_skipped_width =
 6125|  5.28k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 242, False: 5.03k]
  |  Branch (6125:33): [True: 670, False: 4.36k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  5.28k|        auto it = rng.begin();
 6129|  5.28k|        std::ptrdiff_t prefix_width = 0;
 6130|  5.28k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 680, False: 4.60k]
  ------------------
 6131|    680|            auto max_width_view = take_width(rng, specs.precision);
 6132|    680|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    680|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    680|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    680|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    680|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 660]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    680|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    660|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    660|            it = prefix_result.first.base();
 6135|    660|            prefix_width = prefix_result.second;
 6136|    660|        }
 6137|  4.60k|        else {
 6138|  4.60k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  4.60k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  4.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  4.60k|            std::tie(it, prefix_width) = prefix_result;
 6140|  4.60k|        }
 6141|  5.26k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  5.26k|        std::ptrdiff_t value_width = 0;
 6145|  5.26k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 660, False: 4.60k]
  ------------------
 6146|    660|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 654]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    654|            const auto initial_width = specs.precision - prefix_width;
 6154|    654|            auto max_width_view =
 6155|    654|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    654|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 282, False: 372]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    282|    }                                                  \
  |  |  |  | 3671|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    372|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    372|            it = w_it.base();
 6158|    372|            value_width = initial_width - w_it.count();
 6159|    372|        }
 6160|  4.60k|        else {
 6161|  4.60k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  4.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  4.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.36k, False: 1.23k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.36k|    }                                                  \
  |  | 3671|  4.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.23k|                                             specs, value, loc));
 6163|       |
 6164|  1.23k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 198, False: 1.04k]
  ------------------
 6165|    198|                value_width = calculate_text_width(
 6166|    198|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    198|                        .view());
 6168|    198|            }
 6169|  1.23k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.61k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.61k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.20k, False: 402]
  ------------------
 6174|  1.20k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.20k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.20k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.20k|                                 value_width));
 6178|  1.20k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.20k|        }
 6180|       |
 6181|  1.61k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.61k|                                                 value_width, postfix_width);
 6183|  1.61k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 108, False: 1.50k]
  ------------------
 6184|    108|            return unexpected(e);
 6185|    108|        }
 6186|       |
 6187|  1.50k|        return it;
 6188|  1.61k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  5.40k|    {
 6193|  5.40k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  5.40k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  5.40k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  5.40k|            auto rd = make_reader<T, char_type>();
 6198|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 5.28k]
  |  |  ------------------
  ------------------
 6199|    128|                return unexpected(e);
 6200|    128|            }
 6201|       |
 6202|  5.28k|            return impl(rd, range, value);
 6203|  5.40k|        }
 6204|  5.40k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  5.40k|            auto rd = make_reader<T, char_type>();
 6206|  5.40k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  5.40k|                return unexpected(e);
 6208|  5.40k|            }
 6209|       |
 6210|  5.40k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  5.40k|                specs.width != 0) {
 6212|  5.40k|                return impl(rd, range, value);
 6213|  5.40k|            }
 6214|       |
 6215|  5.40k|            auto crange = get_as_contiguous(range);
 6216|  5.40k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  5.40k|            return ranges::next(range.begin(),
 6218|  5.40k|                                ranges::distance(crange.begin(), it));
 6219|  5.40k|        }
 6220|  5.40k|        else {
 6221|  5.40k|            SCN_EXPECT(false);
 6222|  5.40k|            SCN_UNREACHABLE;
 6223|  5.40k|        }
 6224|  5.40k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  5.28k|    {
 6124|  5.28k|        const bool need_skipped_width =
 6125|  5.28k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 242, False: 5.03k]
  |  Branch (6125:33): [True: 670, False: 4.36k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  5.28k|        auto it = rng.begin();
 6129|  5.28k|        std::ptrdiff_t prefix_width = 0;
 6130|  5.28k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 680, False: 4.60k]
  ------------------
 6131|    680|            auto max_width_view = take_width(rng, specs.precision);
 6132|    680|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    680|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    680|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    680|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    680|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 660]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    680|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    660|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    660|            it = prefix_result.first.base();
 6135|    660|            prefix_width = prefix_result.second;
 6136|    660|        }
 6137|  4.60k|        else {
 6138|  4.60k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  4.60k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  4.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  4.60k|            std::tie(it, prefix_width) = prefix_result;
 6140|  4.60k|        }
 6141|  5.26k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  5.26k|        std::ptrdiff_t value_width = 0;
 6145|  5.26k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 660, False: 4.60k]
  ------------------
 6146|    660|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 654]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    654|            const auto initial_width = specs.precision - prefix_width;
 6154|    654|            auto max_width_view =
 6155|    654|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    654|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    654|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    654|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    654|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 282, False: 372]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    282|    }                                                  \
  |  |  |  | 3671|    654|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    372|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    372|            it = w_it.base();
 6158|    372|            value_width = initial_width - w_it.count();
 6159|    372|        }
 6160|  4.60k|        else {
 6161|  4.60k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  4.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  4.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.36k, False: 1.23k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  3.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  3.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  3.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  3.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  3.36k|    }                                                  \
  |  | 3671|  4.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.23k|                                             specs, value, loc));
 6163|       |
 6164|  1.23k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 198, False: 1.04k]
  ------------------
 6165|    198|                value_width = calculate_text_width(
 6166|    198|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    198|                        .view());
 6168|    198|            }
 6169|  1.23k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.61k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.61k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.20k, False: 402]
  ------------------
 6174|  1.20k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.20k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.20k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.20k|                                 value_width));
 6178|  1.20k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.20k|        }
 6180|       |
 6181|  1.61k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.61k|                                                 value_width, postfix_width);
 6183|  1.61k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 108, False: 1.50k]
  ------------------
 6184|    108|            return unexpected(e);
 6185|    108|        }
 6186|       |
 6187|  1.50k|        return it;
 6188|  1.61k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  4.26k|{
 5795|  4.26k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.26k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  4.26k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 474, False: 3.79k]
  ------------------
 5800|    474|        return range.begin();
 5801|    474|    }
 5802|       |
 5803|  3.79k|    return skip_classic_whitespace(range);
 5804|  4.26k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5870|    474|    {
 5871|    474|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    474|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    474|                          basic_contiguous_scan_context<char_type>>) {
 5875|    474|            auto rd = make_reader<T, char_type>();
 5876|    474|            return impl(rd, range, value);
 5877|    474|        }
 5878|    474|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    474|            auto rd = make_reader<T, char_type>();
 5880|    474|            if (!is_segment_contiguous(range)) {
 5881|    474|                return impl(rd, range, value);
 5882|    474|            }
 5883|    474|            auto crange = get_as_contiguous(range);
 5884|    474|            SCN_TRY(it, impl(rd, crange, value));
 5885|    474|            return ranges::next(range.begin(),
 5886|    474|                                ranges::distance(crange.begin(), it));
 5887|    474|        }
 5888|    474|        else {
 5889|    474|            SCN_EXPECT(false);
 5890|    474|            SCN_UNREACHABLE;
 5891|    474|        }
 5892|    474|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    474|    {
 5863|    474|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    474|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    474|                        .transform_error(make_eof_scan_error));
 5865|    474|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    474|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    474|    {
 3528|    474|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    474|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    474|        return read_default_with_base(range, value, 10);
 3530|    474|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    474|    {
 3492|    474|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    474|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    474|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    474|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    474|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    474|                return unexpected_scan_error(
 3498|    474|                    scan_error::invalid_scanned_value,
 3499|    474|                    "Unexpected '-' sign when parsing an "
 3500|    474|                    "unsigned value");
 3501|    474|            }
 3502|    474|        }
 3503|       |
 3504|    474|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 474]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|    948|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    474|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|    948|                parse_integer_digits_without_thsep(
 3511|    948|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|    948|                    prefix_result.parsed_base));
 3513|       |
 3514|    948|        auto buf = make_contiguous_buffer(
 3515|    948|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|    948|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 474, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    474|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    474|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    474|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    474|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    474|    }                                                  \
  |  |  |  | 3671|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|    948|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5870|    474|    {
 5871|    474|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    474|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    474|                          basic_contiguous_scan_context<char_type>>) {
 5875|    474|            auto rd = make_reader<T, char_type>();
 5876|    474|            return impl(rd, range, value);
 5877|    474|        }
 5878|    474|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    474|            auto rd = make_reader<T, char_type>();
 5880|    474|            if (!is_segment_contiguous(range)) {
 5881|    474|                return impl(rd, range, value);
 5882|    474|            }
 5883|    474|            auto crange = get_as_contiguous(range);
 5884|    474|            SCN_TRY(it, impl(rd, crange, value));
 5885|    474|            return ranges::next(range.begin(),
 5886|    474|                                ranges::distance(crange.begin(), it));
 5887|    474|        }
 5888|    474|        else {
 5889|    474|            SCN_EXPECT(false);
 5890|    474|            SCN_UNREACHABLE;
 5891|    474|        }
 5892|    474|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    474|    {
 5863|    474|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    474|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    474|                        .transform_error(make_eof_scan_error));
 5865|    474|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    474|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    474|    {
 3528|    474|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    474|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    474|        return read_default_with_base(range, value, 10);
 3530|    474|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    474|    {
 3492|    474|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    474|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    474|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    474|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    474|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 474]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    474|        }
 3503|       |
 3504|    474|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 474]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|    948|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    474|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|    948|                parse_integer_digits_without_thsep(
 3511|    948|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|    948|                    prefix_result.parsed_base));
 3513|       |
 3514|    948|        auto buf = make_contiguous_buffer(
 3515|    948|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|    948|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 474, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    474|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    474|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    474|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    474|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    474|    }                                                  \
  |  |  |  | 3671|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|    948|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5870|    474|    {
 5871|    474|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    474|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    474|                          basic_contiguous_scan_context<char_type>>) {
 5875|    474|            auto rd = make_reader<T, char_type>();
 5876|    474|            return impl(rd, range, value);
 5877|    474|        }
 5878|    474|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    474|            auto rd = make_reader<T, char_type>();
 5880|    474|            if (!is_segment_contiguous(range)) {
 5881|    474|                return impl(rd, range, value);
 5882|    474|            }
 5883|    474|            auto crange = get_as_contiguous(range);
 5884|    474|            SCN_TRY(it, impl(rd, crange, value));
 5885|    474|            return ranges::next(range.begin(),
 5886|    474|                                ranges::distance(crange.begin(), it));
 5887|    474|        }
 5888|    474|        else {
 5889|    474|            SCN_EXPECT(false);
 5890|    474|            SCN_UNREACHABLE;
 5891|    474|        }
 5892|    474|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    474|    {
 5863|    474|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    474|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    474|                        .transform_error(make_eof_scan_error));
 5865|    474|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    474|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5747|    886|    {
 5748|    886|        return true;
 5749|    886|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    790|    {
 5765|    790|        detail::format_specs specs{};
 5766|    790|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    790|        std::uintptr_t intvalue{};
 5769|    790|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    790|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    790|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    790|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    790|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 790, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    790|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    790|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    790|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    790|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    790|    }                                                  \
  |  |  |  | 3671|    790|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    790|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5870|    474|    {
 5871|    474|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    474|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    474|                          basic_contiguous_scan_context<char_type>>) {
 5875|    474|            auto rd = make_reader<T, char_type>();
 5876|    474|            return impl(rd, range, value);
 5877|    474|        }
 5878|    474|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    474|            auto rd = make_reader<T, char_type>();
 5880|    474|            if (!is_segment_contiguous(range)) {
 5881|    474|                return impl(rd, range, value);
 5882|    474|            }
 5883|    474|            auto crange = get_as_contiguous(range);
 5884|    474|            SCN_TRY(it, impl(rd, crange, value));
 5885|    474|            return ranges::next(range.begin(),
 5886|    474|                                ranges::distance(crange.begin(), it));
 5887|    474|        }
 5888|    474|        else {
 5889|    474|            SCN_EXPECT(false);
 5890|    474|            SCN_UNREACHABLE;
 5891|    474|        }
 5892|    474|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    474|    {
 5863|    474|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    474|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    474|                        .transform_error(make_eof_scan_error));
 5865|    474|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    474|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|  1.04k|    {
 3035|  1.04k|        return true;
 3036|  1.04k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    474|    {
 5504|    474|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    474|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    474|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    474|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|    866|    {
 5355|    866|        scan_error err{scan_error::invalid_scanned_value,
 5356|    866|                       "Failed to read boolean"};
 5357|       |
 5358|    866|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 808, False: 58]
  ------------------
 5359|    808|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 808]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    808|            else {
 5363|    808|                err = r.error();
 5364|    808|            }
 5365|    808|        }
 5366|       |
 5367|    866|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 846, False: 20]
  ------------------
 5368|    846|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 846]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    846|            else {
 5372|    846|                err = r.error();
 5373|    846|            }
 5374|    846|        }
 5375|       |
 5376|    866|        return unexpected(err);
 5377|    866|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    824|    {
 5384|    824|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 824]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    824|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 824]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    824|        return unexpected_scan_error(
 5394|    824|            scan_error::invalid_scanned_value,
 5395|    824|            "Failed to read numeric boolean value: No match");
 5396|    824|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|    846|    {
 5402|    846|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 846]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    846|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 846]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    846|        return unexpected_scan_error(
 5412|    846|            scan_error::invalid_scanned_value,
 5413|    846|            "Failed to read textual boolean value: No match");
 5414|    846|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  1.69k|{
 2194|  1.69k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.69k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.69k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.69k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 112, False: 1.58k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    112|    }                                                  \
  |  |  |  | 3671|  1.69k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.58k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.58k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.58k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.58k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.58k|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|  1.58k|            return unexpected(parse_error::error);
 2202|  1.58k|        }
 2203|  1.58k|        return it;
 2204|  1.58k|    }
 2205|  1.58k|    else {
 2206|  1.58k|        auto range_it = range.begin();
 2207|  1.58k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 1.58k, False: 0]
  ------------------
 2208|  1.58k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  1.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.58k, False: 0]
  |  |  ------------------
  ------------------
 2209|  1.58k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.58k|                return unexpected(parse_error::error);
 2211|  1.58k|            }
 2212|  1.58k|        }
 2213|      0|        return it;
 2214|  1.58k|    }
 2215|  1.58k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5870|    474|    {
 5871|    474|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    474|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    474|                          basic_contiguous_scan_context<char_type>>) {
 5875|    474|            auto rd = make_reader<T, char_type>();
 5876|    474|            return impl(rd, range, value);
 5877|    474|        }
 5878|    474|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    474|            auto rd = make_reader<T, char_type>();
 5880|    474|            if (!is_segment_contiguous(range)) {
 5881|    474|                return impl(rd, range, value);
 5882|    474|            }
 5883|    474|            auto crange = get_as_contiguous(range);
 5884|    474|            SCN_TRY(it, impl(rd, crange, value));
 5885|    474|            return ranges::next(range.begin(),
 5886|    474|                                ranges::distance(crange.begin(), it));
 5887|    474|        }
 5888|    474|        else {
 5889|    474|            SCN_EXPECT(false);
 5890|    474|            SCN_UNREACHABLE;
 5891|    474|        }
 5892|    474|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    474|    {
 5863|    474|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    474|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    474|                        .transform_error(make_eof_scan_error));
 5865|    474|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    474|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|    474|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|    474|    {
 5871|    474|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    474|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    474|                          basic_contiguous_scan_context<char_type>>) {
 5875|    474|            auto rd = make_reader<T, char_type>();
 5876|    474|            return impl(rd, range, value);
 5877|    474|        }
 5878|    474|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    474|            auto rd = make_reader<T, char_type>();
 5880|    474|            if (!is_segment_contiguous(range)) {
 5881|    474|                return impl(rd, range, value);
 5882|    474|            }
 5883|    474|            auto crange = get_as_contiguous(range);
 5884|    474|            SCN_TRY(it, impl(rd, crange, value));
 5885|    474|            return ranges::next(range.begin(),
 5886|    474|                                ranges::distance(crange.begin(), it));
 5887|    474|        }
 5888|    474|        else {
 5889|    474|            SCN_EXPECT(false);
 5890|    474|            SCN_UNREACHABLE;
 5891|    474|        }
 5892|    474|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    474|    {
 5863|    474|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    474|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    474|                        .transform_error(make_eof_scan_error));
 5865|    474|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    474|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    474|    {
 4152|    474|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    474|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    474|        float_reader<CharT> rd{};
 4155|    474|        return read_impl<Range>(
 4156|    474|            range, rd,
 4157|    474|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    474|                return r.read_source(SCN_FWD(args)...);
 4159|    474|            },
 4160|    474|            value);
 4161|    474|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    474|    {
  754|    474|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    474|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    474|              cvref<T> obj = *get<T>(fn);
  745|    474|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    474|                  obj(static_cast<decltype(args)>(args)...);
  747|    474|              }
  748|    474|              else {
  749|    474|                  return obj(static_cast<decltype(args)>(args)...);
  750|    474|              }
  751|    474|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    474|    {
  684|    474|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    474|            return static_cast<T*>(s.m_cp);
  686|    474|        }
  687|    474|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    474|            return static_cast<T*>(s.m_p);
  689|    474|        }
  690|    474|        else {
  691|    474|            return reinterpret_cast<T*>(s.m_fp);
  692|    474|        }
  693|    474|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    474|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    474|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    474|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    474|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    474|        {
  662|    474|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    474|    {
 5871|    474|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    474|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    474|                          basic_contiguous_scan_context<char_type>>) {
 5875|    474|            auto rd = make_reader<T, char_type>();
 5876|    474|            return impl(rd, range, value);
 5877|    474|        }
 5878|    474|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    474|            auto rd = make_reader<T, char_type>();
 5880|    474|            if (!is_segment_contiguous(range)) {
 5881|    474|                return impl(rd, range, value);
 5882|    474|            }
 5883|    474|            auto crange = get_as_contiguous(range);
 5884|    474|            SCN_TRY(it, impl(rd, crange, value));
 5885|    474|            return ranges::next(range.begin(),
 5886|    474|                                ranges::distance(crange.begin(), it));
 5887|    474|        }
 5888|    474|        else {
 5889|    474|            SCN_EXPECT(false);
 5890|    474|            SCN_UNREACHABLE;
 5891|    474|        }
 5892|    474|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    474|    {
 5863|    474|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    474|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    474|                        .transform_error(make_eof_scan_error));
 5865|    474|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    474|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    474|    {
 5266|    474|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    474|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    474|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    474|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    474|    {
 5871|    474|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    474|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    474|                          basic_contiguous_scan_context<char_type>>) {
 5875|    474|            auto rd = make_reader<T, char_type>();
 5876|    474|            return impl(rd, range, value);
 5877|    474|        }
 5878|    474|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    474|            auto rd = make_reader<T, char_type>();
 5880|    474|            if (!is_segment_contiguous(range)) {
 5881|    474|                return impl(rd, range, value);
 5882|    474|            }
 5883|    474|            auto crange = get_as_contiguous(range);
 5884|    474|            SCN_TRY(it, impl(rd, crange, value));
 5885|    474|            return ranges::next(range.begin(),
 5886|    474|                                ranges::distance(crange.begin(), it));
 5887|    474|        }
 5888|    474|        else {
 5889|    474|            SCN_EXPECT(false);
 5890|    474|            SCN_UNREACHABLE;
 5891|    474|        }
 5892|    474|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    474|    {
 5863|    474|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    474|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    474|                        .transform_error(make_eof_scan_error));
 5865|    474|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    474|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    474|    {
 5266|    474|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    474|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    474|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    474|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    474|    {
 5871|    474|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    474|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    474|                          basic_contiguous_scan_context<char_type>>) {
 5875|    474|            auto rd = make_reader<T, char_type>();
 5876|    474|            return impl(rd, range, value);
 5877|    474|        }
 5878|    474|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    474|            auto rd = make_reader<T, char_type>();
 5880|    474|            if (!is_segment_contiguous(range)) {
 5881|    474|                return impl(rd, range, value);
 5882|    474|            }
 5883|    474|            auto crange = get_as_contiguous(range);
 5884|    474|            SCN_TRY(it, impl(rd, crange, value));
 5885|    474|            return ranges::next(range.begin(),
 5886|    474|                                ranges::distance(crange.begin(), it));
 5887|    474|        }
 5888|    474|        else {
 5889|    474|            SCN_EXPECT(false);
 5890|    474|            SCN_UNREACHABLE;
 5891|    474|        }
 5892|    474|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    474|    {
 5863|    474|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    474|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    474|                        .transform_error(make_eof_scan_error));
 5865|    474|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    474|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    474|    {
 5266|    474|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    474|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    474|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    474|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   178k|    {
 2879|   178k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   433k|    {
 2883|   433k|        return m_current;
 2884|   433k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   418k|    {
 2888|   418k|        return m_range.end();
 2889|   418k|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   222k|{
 1221|       |    // TODO: optimize
 1222|   222k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   222k|    auto res = get_next_code_point(str);
 1224|   222k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   222k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   164k|    {
 2903|   164k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   164k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   164k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   164k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 164k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   164k|        }
 2909|   164k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   164k|    static_cast<    \
  |  |  929|   164k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   164k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  30.5k|    {
 2893|  30.5k|        return ranges::subrange{begin(), end()};
 2894|  30.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  1.17k|    {
 6037|  1.17k|        const bool need_skipped_width =
 6038|  1.17k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 34, False: 1.14k]
  |  Branch (6038:33): [True: 1.14k, False: 0]
  ------------------
 6039|  1.17k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.17k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 36, False: 1.14k]
  ------------------
 6043|  1.17k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 198, False: 942]
  ------------------
 6044|    234|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    234|                             need_skipped_width);
 6046|    234|        }
 6047|    942|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 890, False: 52]
  |  Branch (6047:56): [True: 732, False: 158]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|    732|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 732, False: 0]
  ------------------
 6051|    732|                auto max_width_view = take_width(rng, specs.precision);
 6052|    732|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|    732|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    732|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    732|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    732|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 732]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    732|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    732|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|    732|                                  .transform_error(make_eof_scan_error));
 6054|    732|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|    732|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|    210|        return result_type{rng.begin(), 0};
 6070|    942|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|    234|{
 5951|    234|    using char_type = detail::char_t<Range>;
 5952|    234|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    234|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 234, False: 0]
  ------------------
 5955|    234|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    234|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    234|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 234]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    234|        auto max_width_view = take_width(range, max_width);
 5972|    234|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    234|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 234, False: 0]
  ------------------
 5975|    234|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    234|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    234|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_:
  753|    234|    {
  754|    234|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|    280|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    280|              cvref<T> obj = *get<T>(fn);
  745|    280|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    280|                  obj(static_cast<decltype(args)>(args)...);
  747|    280|              }
  748|    280|              else {
  749|    280|                  return obj(static_cast<decltype(args)>(args)...);
  750|    280|              }
  751|    280|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    280|    {
  684|    280|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    280|            return static_cast<T*>(s.m_cp);
  686|    280|        }
  687|    280|        else if constexpr (std::is_object_v<T>) {
  688|    280|            return static_cast<T*>(s.m_p);
  689|    280|        }
  690|    280|        else {
  691|    280|            return reinterpret_cast<T*>(s.m_fp);
  692|    280|        }
  693|    280|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    280|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSJ_:
  666|    234|        {
  667|    234|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    234|{
 1976|    234|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    234|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    234|{
 1957|    234|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    234|        return std::find_if(range.begin(), range.end(), pred);
 1959|    234|    }
 1960|    234|    else {
 1961|    234|        auto first = range.begin();
 1962|    314|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 280, False: 34]
  ------------------
 1963|    280|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 200, False: 80]
  ------------------
 1964|    200|                return first;
 1965|    200|            }
 1966|    280|        }
 1967|     34|        return first;
 1968|    234|    }
 1969|    234|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2809|  1.69k|    {
 2810|  1.69k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  1.69k|                                      m_count};
 2812|  1.69k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2716|  5.90k|    {
 2717|  5.90k|        return view;
 2718|  5.90k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  1.69k|    {
 2382|  1.69k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  1.04k|        {
 2781|  1.04k|            return !(y == x);
 2782|  1.04k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  2.51k|        {
 2770|  2.51k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 34, False: 2.47k]
  |  Branch (2770:39): [True: 34, False: 0]
  ------------------
 2771|  2.51k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 2.47k]
  ------------------
 2772|  2.51k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|     34|    {
 2421|     34|        return m_multibyte_left;
 2422|     34|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2815|  2.51k|    {
 2816|  2.51k|        return sentinel<true>{m_base.get().end()};
 2817|  2.51k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  2.51k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  1.74k|    {
 2426|  1.74k|        return *m_current;
 2427|  1.74k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|    812|    {
 2435|    812|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|    812|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    812|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|    812|        _increment_current();
 2437|    812|        return *this;
 2438|    812|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|    812|    {
 2668|    812|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 812, False: 0]
  ------------------
 2669|    812|            auto cplen = _get_cp_length_at_current();
 2670|    812|            m_multibyte_left = cplen - 1;
 2671|    812|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|    812|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|    812|        ++m_current;
 2678|    812|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|    812|    {
 2639|    812|        return static_cast<difference_type>(
 2640|    812|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|    812|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|    812|    {
 2645|    812|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|    812|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 812]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|    812|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 812, False: 0]
  ------------------
 2650|    812|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|    812|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    812|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|    812|            auto cp = static_cast<char32_t>(*m_current);
 2652|    812|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|    812|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|    966|    {
 2832|    966|        return take_width_view{r, n};
 2833|    966|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2800|    966|    {
 2801|    966|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2713|    966|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|    732|{
 2951|    732|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 732, False: 0]
  ------------------
 2952|    732|        auto it = read_while_classic_space(range);
 2953|    732|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|    732|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    732|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 732]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|    732|        return it;
 2959|    732|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|    732|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|    732|{
 2117|    732|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    732|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    732|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    732|        auto buf = make_contiguous_buffer(range);
 2121|    732|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    732|        return ranges::next(range.begin(),
 2123|    732|                            ranges::distance(buf.view().begin(), it));
 2124|    732|    }
 2125|    732|    else {
 2126|    732|        auto it = range.begin();
 2127|       |
 2128|    732|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    732|            auto seg = get_contiguous_beginning(range);
 2130|    732|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    732|                seg_it != seg.end()) {
 2132|    732|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|    732|            }
 2134|    732|            ranges::advance(it, seg.size());
 2135|    732|        }
 2136|       |
 2137|    732|        return read_while_code_point(
 2138|    732|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    732|    }
 2140|    732|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|    732|{
 2082|    732|    return read_until_code_point(range, std::not_fn(pred));
 2083|    732|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|    732|{
 2061|    732|    auto it = range.begin();
 2062|    732|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 732, False: 0]
  ------------------
 2063|    732|        const auto val =
 2064|    732|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|    732|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|    732|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 732, False: 0]
  |  |  ------------------
  ------------------
 2066|    732|            const auto cp = detail::decode_code_point_exhaustive(
 2067|    732|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|    732|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 732, False: 0]
  ------------------
 2069|    732|                return it;
 2070|    732|            }
 2071|    732|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|    732|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|    732|{
 1899|    732|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|    732|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    732|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|    732|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|    732|    auto it = range.begin();
 1903|    732|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|    732|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|    732|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 732]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|    732|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 732, False: 0]
  ------------------
 1912|    732|        ++it;
 1913|    732|        return {it, string_type(1, *range.begin())};
 1914|    732|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|    732|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  1.46k|{
  944|  1.46k|    return is_range_eof(r.begin(), r.end());
  945|  1.46k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  1.46k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.46k|    {
  937|  1.46k|        return begin == end;
  938|  1.46k|    }
  939|  1.46k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1889|    732|    {
 1890|    732|        return !codepoint.empty();
 1891|    732|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|    732|    {
  754|    732|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|    732|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    732|              cvref<T> obj = *get<T>(fn);
  745|    732|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    732|                  obj(static_cast<decltype(args)>(args)...);
  747|    732|              }
  748|    732|              else {
  749|    732|                  return obj(static_cast<decltype(args)>(args)...);
  750|    732|              }
  751|    732|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|    732|    {
  684|    732|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    732|            return static_cast<T*>(s.m_cp);
  686|    732|        }
  687|    732|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    732|            return static_cast<T*>(s.m_p);
  689|    732|        }
  690|    732|        else {
  691|    732|            return reinterpret_cast<T*>(s.m_fp);
  692|    732|        }
  693|    732|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|    732|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|    732|        {
  662|    732|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|    732|{
  950|    732|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|    732|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 732]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|    732|    return eof_error::good;
  954|    732|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  3.44k|    {
 2413|  3.44k|        return m_current;
 2414|  3.44k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  3.47k|    {
 2417|  3.47k|        return m_count;
 2418|  3.47k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  9.07k|    {
 6037|  9.07k|        const bool need_skipped_width =
 6038|  9.07k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 4.68k, False: 4.39k]
  |  Branch (6038:33): [True: 0, False: 4.39k]
  ------------------
 6039|  9.07k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  9.07k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 54, False: 9.02k]
  ------------------
 6043|  9.07k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 286, False: 8.73k]
  ------------------
 6044|    340|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    340|                             need_skipped_width);
 6046|    340|        }
 6047|  8.73k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 8.36k, False: 376]
  |  Branch (6047:56): [True: 2.42k, False: 5.94k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.42k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 2.42k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  4.84k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  2.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.42k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  4.84k|                            make_eof_scan_error));
 6058|       |
 6059|  4.84k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.92k, False: 492]
  ------------------
 6060|  1.92k|                return result_type{
 6061|  1.92k|                    it,
 6062|  1.92k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.92k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.92k|                                             .view())};
 6065|  1.92k|            }
 6066|    492|            return result_type{it, 0};
 6067|  4.84k|        }
 6068|       |
 6069|  6.31k|        return result_type{rng.begin(), 0};
 6070|  8.73k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  1.66k|    {
 6079|  1.66k|        const bool need_skipped_width =
 6080|  1.66k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 660, False: 1.00k]
  |  Branch (6080:33): [True: 198, False: 808]
  ------------------
 6081|  1.66k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.66k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 80, False: 1.58k]
  ------------------
 6084|  1.66k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 160, False: 1.42k]
  ------------------
 6085|    240|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 66, False: 174]
  ------------------
 6086|    240|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 44, False: 22]
  ------------------
 6087|     44|                return result_type{rng.begin(), 0};
 6088|     44|            }
 6089|    196|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    196|                             specs.fill, need_skipped_width);
 6091|    240|        }
 6092|  1.42k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 1.40k, False: 18]
  ------------------
 6093|  1.42k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 1.19k, False: 210]
  ------------------
 6094|  1.42k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 468, False: 730]
  |  Branch (6094:35): [True: 452, False: 16]
  ------------------
 6095|  1.19k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 96, False: 650]
  ------------------
 6096|    746|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 76, False: 20]
  ------------------
 6097|    528|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 76, False: 452]
  ------------------
 6098|     76|                const auto initial_width =
 6099|     76|                    specs.precision - prefix_width - value_width;
 6100|     76|                auto max_width_view = take_width(rng, initial_width);
 6101|     76|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|     76|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     76|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     76|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     76|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|     76|                                  .transform_error(make_eof_scan_error));
 6103|     76|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|     76|            }
 6105|    904|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|    452|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    452|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    452|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    452|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 452]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    452|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    452|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|    904|                            make_eof_scan_error));
 6107|       |
 6108|    904|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 452, False: 0]
  ------------------
 6109|    452|                return result_type{
 6110|    452|                    it,
 6111|    452|                    calculate_text_width(make_contiguous_buffer(
 6112|    452|                                             ranges::subrange{rng.begin(), it})
 6113|    452|                                             .view())};
 6114|    452|            }
 6115|      0|            return result_type{it, 0};
 6116|    904|        }
 6117|    898|        return result_type{rng.begin(), 0};
 6118|  1.42k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6192|  2.59k|    {
 6193|  2.59k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.59k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.59k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.59k|            auto rd = make_reader<T, char_type>();
 6198|  2.59k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.11k, False: 476]
  |  |  ------------------
  ------------------
 6199|  2.11k|                return unexpected(e);
 6200|  2.11k|            }
 6201|       |
 6202|    476|            return impl(rd, range, value);
 6203|  2.59k|        }
 6204|  2.59k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.59k|            auto rd = make_reader<T, char_type>();
 6206|  2.59k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.59k|                return unexpected(e);
 6208|  2.59k|            }
 6209|       |
 6210|  2.59k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.59k|                specs.width != 0) {
 6212|  2.59k|                return impl(rd, range, value);
 6213|  2.59k|            }
 6214|       |
 6215|  2.59k|            auto crange = get_as_contiguous(range);
 6216|  2.59k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.59k|            return ranges::next(range.begin(),
 6218|  2.59k|                                ranges::distance(crange.begin(), it));
 6219|  2.59k|        }
 6220|  2.59k|        else {
 6221|  2.59k|            SCN_EXPECT(false);
 6222|  2.59k|            SCN_UNREACHABLE;
 6223|  2.59k|        }
 6224|  2.59k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    476|    {
 6124|    476|        const bool need_skipped_width =
 6125|    476|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 248, False: 228]
  |  Branch (6125:33): [True: 126, False: 102]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    476|        auto it = rng.begin();
 6129|    476|        std::ptrdiff_t prefix_width = 0;
 6130|    476|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 128, False: 348]
  ------------------
 6131|    128|            auto max_width_view = take_width(rng, specs.precision);
 6132|    128|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    128|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    128|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    128|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 128]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    128|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    128|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    128|            it = prefix_result.first.base();
 6135|    128|            prefix_width = prefix_result.second;
 6136|    128|        }
 6137|    348|        else {
 6138|    348|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    348|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    348|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    348|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 348]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    348|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    348|            std::tie(it, prefix_width) = prefix_result;
 6140|    348|        }
 6141|    476|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    476|        std::ptrdiff_t value_width = 0;
 6145|    476|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 128, False: 348]
  ------------------
 6146|    128|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 126]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    126|            const auto initial_width = specs.precision - prefix_width;
 6154|    126|            auto max_width_view =
 6155|    126|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    126|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 126, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    126|    }                                                  \
  |  |  |  | 3671|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    348|        else {
 6161|    348|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    348|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    348|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 348, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    348|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    348|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    348|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    348|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    348|    }                                                  \
  |  | 3671|    348|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6192|  2.59k|    {
 6193|  2.59k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.59k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.59k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.59k|            auto rd = make_reader<T, char_type>();
 6198|  2.59k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.11k, False: 476]
  |  |  ------------------
  ------------------
 6199|  2.11k|                return unexpected(e);
 6200|  2.11k|            }
 6201|       |
 6202|    476|            return impl(rd, range, value);
 6203|  2.59k|        }
 6204|  2.59k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.59k|            auto rd = make_reader<T, char_type>();
 6206|  2.59k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.59k|                return unexpected(e);
 6208|  2.59k|            }
 6209|       |
 6210|  2.59k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.59k|                specs.width != 0) {
 6212|  2.59k|                return impl(rd, range, value);
 6213|  2.59k|            }
 6214|       |
 6215|  2.59k|            auto crange = get_as_contiguous(range);
 6216|  2.59k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.59k|            return ranges::next(range.begin(),
 6218|  2.59k|                                ranges::distance(crange.begin(), it));
 6219|  2.59k|        }
 6220|  2.59k|        else {
 6221|  2.59k|            SCN_EXPECT(false);
 6222|  2.59k|            SCN_UNREACHABLE;
 6223|  2.59k|        }
 6224|  2.59k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    476|    {
 6124|    476|        const bool need_skipped_width =
 6125|    476|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 248, False: 228]
  |  Branch (6125:33): [True: 126, False: 102]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    476|        auto it = rng.begin();
 6129|    476|        std::ptrdiff_t prefix_width = 0;
 6130|    476|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 128, False: 348]
  ------------------
 6131|    128|            auto max_width_view = take_width(rng, specs.precision);
 6132|    128|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    128|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    128|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    128|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 128]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    128|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    128|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    128|            it = prefix_result.first.base();
 6135|    128|            prefix_width = prefix_result.second;
 6136|    128|        }
 6137|    348|        else {
 6138|    348|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    348|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    348|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    348|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 348]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    348|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    348|            std::tie(it, prefix_width) = prefix_result;
 6140|    348|        }
 6141|    476|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    476|        std::ptrdiff_t value_width = 0;
 6145|    476|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 128, False: 348]
  ------------------
 6146|    128|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 126]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    126|            const auto initial_width = specs.precision - prefix_width;
 6154|    126|            auto max_width_view =
 6155|    126|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    126|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 126, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    126|    }                                                  \
  |  |  |  | 3671|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    348|        else {
 6161|    348|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    348|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    348|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 348, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    348|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    348|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    348|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    348|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    348|    }                                                  \
  |  | 3671|    348|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6192|  2.55k|    {
 6193|  2.55k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.55k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.55k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.55k|            auto rd = make_reader<T, char_type>();
 6198|  2.55k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.14k, False: 412]
  |  |  ------------------
  ------------------
 6199|  2.14k|                return unexpected(e);
 6200|  2.14k|            }
 6201|       |
 6202|    412|            return impl(rd, range, value);
 6203|  2.55k|        }
 6204|  2.55k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.55k|            auto rd = make_reader<T, char_type>();
 6206|  2.55k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.55k|                return unexpected(e);
 6208|  2.55k|            }
 6209|       |
 6210|  2.55k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.55k|                specs.width != 0) {
 6212|  2.55k|                return impl(rd, range, value);
 6213|  2.55k|            }
 6214|       |
 6215|  2.55k|            auto crange = get_as_contiguous(range);
 6216|  2.55k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.55k|            return ranges::next(range.begin(),
 6218|  2.55k|                                ranges::distance(crange.begin(), it));
 6219|  2.55k|        }
 6220|  2.55k|        else {
 6221|  2.55k|            SCN_EXPECT(false);
 6222|  2.55k|            SCN_UNREACHABLE;
 6223|  2.55k|        }
 6224|  2.55k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5752|  2.55k|    {
 5753|  2.55k|        reader_error_handler eh{};
 5754|  2.55k|        detail::check_pointer_type_specs(specs, eh);
 5755|  2.55k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.14k, False: 412]
  |  |  ------------------
  ------------------
 5756|  2.14k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  2.14k|        }
 5758|    412|        return {};
 5759|  2.55k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    412|    {
 6124|    412|        const bool need_skipped_width =
 6125|    412|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 246, False: 166]
  |  Branch (6125:33): [True: 94, False: 72]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    412|        auto it = rng.begin();
 6129|    412|        std::ptrdiff_t prefix_width = 0;
 6130|    412|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 96, False: 316]
  ------------------
 6131|     96|            auto max_width_view = take_width(rng, specs.precision);
 6132|     96|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|     96|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     96|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     96|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     96|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 96]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     96|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     96|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|     96|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|     96|            it = prefix_result.first.base();
 6135|     96|            prefix_width = prefix_result.second;
 6136|     96|        }
 6137|    316|        else {
 6138|    316|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    316|            std::tie(it, prefix_width) = prefix_result;
 6140|    316|        }
 6141|    412|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    412|        std::ptrdiff_t value_width = 0;
 6145|    412|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 96, False: 316]
  ------------------
 6146|     96|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 94]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|     94|            const auto initial_width = specs.precision - prefix_width;
 6154|     94|            auto max_width_view =
 6155|     94|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|     94|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|     94|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     94|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     94|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 94, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     94|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     94|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     94|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     94|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     94|    }                                                  \
  |  |  |  | 3671|     94|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    316|        else {
 6161|    316|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 316, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    316|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    316|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    316|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    316|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    316|    }                                                  \
  |  | 3671|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|     94|    {
 5782|     94|        SCN_UNUSED(specs);
  ------------------
  |  |  909|     94|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|     94|        return read_default(range, value, loc);
 5784|     94|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|     94|    {
 5765|     94|        detail::format_specs specs{};
 5766|     94|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|     94|        std::uintptr_t intvalue{};
 5769|     94|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|     94|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     94|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     94|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 94, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     94|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     94|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     94|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     94|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     94|    }                                                  \
  |  |  |  | 3671|     94|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|     94|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    316|    {
 5782|    316|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    316|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    316|        return read_default(range, value, loc);
 5784|    316|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6192|  2.59k|    {
 6193|  2.59k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.59k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.59k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.59k|            auto rd = make_reader<T, char_type>();
 6198|  2.59k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.02k, False: 566]
  |  |  ------------------
  ------------------
 6199|  2.02k|                return unexpected(e);
 6200|  2.02k|            }
 6201|       |
 6202|    566|            return impl(rd, range, value);
 6203|  2.59k|        }
 6204|  2.59k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.59k|            auto rd = make_reader<T, char_type>();
 6206|  2.59k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.59k|                return unexpected(e);
 6208|  2.59k|            }
 6209|       |
 6210|  2.59k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.59k|                specs.width != 0) {
 6212|  2.59k|                return impl(rd, range, value);
 6213|  2.59k|            }
 6214|       |
 6215|  2.59k|            auto crange = get_as_contiguous(range);
 6216|  2.59k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.59k|            return ranges::next(range.begin(),
 6218|  2.59k|                                ranges::distance(crange.begin(), it));
 6219|  2.59k|        }
 6220|  2.59k|        else {
 6221|  2.59k|            SCN_EXPECT(false);
 6222|  2.59k|            SCN_UNREACHABLE;
 6223|  2.59k|        }
 6224|  2.59k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  2.59k|    {
 3040|  2.59k|        reader_error_handler eh{};
 3041|  2.59k|        get_derived().check_specs_impl(specs, eh);
 3042|  2.59k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.02k, False: 566]
  |  |  ------------------
  ------------------
 3043|  2.02k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  2.02k|        }
 3045|    566|        return {};
 3046|  2.59k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|  2.59k|    {
 3051|  2.59k|        return static_cast<Derived&>(*this);
 3052|  2.59k|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  2.59k|    {
 5497|  2.59k|        detail::check_bool_type_specs(specs, eh);
 5498|  2.59k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    566|    {
 6124|    566|        const bool need_skipped_width =
 6125|    566|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 274, False: 292]
  |  Branch (6125:33): [True: 152, False: 140]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    566|        auto it = rng.begin();
 6129|    566|        std::ptrdiff_t prefix_width = 0;
 6130|    566|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 156, False: 410]
  ------------------
 6131|    156|            auto max_width_view = take_width(rng, specs.precision);
 6132|    156|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    156|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    156|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    156|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 156]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    156|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    156|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    156|            it = prefix_result.first.base();
 6135|    156|            prefix_width = prefix_result.second;
 6136|    156|        }
 6137|    410|        else {
 6138|    410|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    410|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 410]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    410|            std::tie(it, prefix_width) = prefix_result;
 6140|    410|        }
 6141|    566|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    566|        std::ptrdiff_t value_width = 0;
 6145|    566|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 156, False: 410]
  ------------------
 6146|    156|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 152]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    152|            const auto initial_width = specs.precision - prefix_width;
 6154|    152|            auto max_width_view =
 6155|    152|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    152|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    152|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    152|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    152|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 152, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    152|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    152|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    152|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    152|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    152|    }                                                  \
  |  |  |  | 3671|    152|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    410|        else {
 6161|    410|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 410, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    410|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    410|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    410|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    410|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    410|    }                                                  \
  |  | 3671|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    152|    {
 5516|    152|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    152|#if !SCN_DISABLE_LOCALE
 5519|    152|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 16, False: 136]
  ------------------
 5520|     16|            return rd.read_localized(range, loc, value);
 5521|     16|        }
 5522|    136|#endif
 5523|       |
 5524|    136|        return rd.read_classic(range, value);
 5525|    152|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5528|    562|    {
 5529|    562|        SCN_GCC_COMPAT_PUSH
 5530|    562|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    562|        switch (specs.type) {
 5533|     86|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 86, False: 476]
  ------------------
 5534|     86|                return bool_reader_base::allow_text;
 5535|       |
 5536|     14|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 14, False: 548]
  ------------------
 5537|     22|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 8, False: 554]
  ------------------
 5538|     30|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 8, False: 554]
  ------------------
 5539|     40|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 10, False: 552]
  ------------------
 5540|     48|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 8, False: 554]
  ------------------
 5541|     60|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 12, False: 550]
  ------------------
 5542|     60|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    416|            default:
  ------------------
  |  Branch (5544:13): [True: 416, False: 146]
  ------------------
 5545|    416|                return bool_reader_base::allow_text |
 5546|    416|                       bool_reader_base::allow_numeric;
 5547|    562|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    562|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     16|    {
 5428|     16|        scan_error err{scan_error::invalid_scanned_value,
 5429|     16|                       "Failed to read boolean"};
 5430|       |
 5431|     16|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 14, False: 2]
  ------------------
 5432|     14|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 14]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     14|            else {
 5436|     14|                err = r.error();
 5437|     14|            }
 5438|     14|        }
 5439|       |
 5440|     16|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 8, False: 8]
  ------------------
 5441|      8|            auto stdloc = loc.get<std::locale>();
 5442|      8|            const auto& numpunct =
 5443|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|      8|            const auto truename = numpunct.truename();
 5445|      8|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|      8|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 8]
  ------------------
 5448|      8|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|      8|            else {
 5452|      8|                err = r.error();
 5453|      8|            }
 5454|      8|        }
 5455|       |
 5456|     16|        return unexpected(err);
 5457|     16|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    126|    {
 5384|    126|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 126]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    126|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 126]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    126|        return unexpected_scan_error(
 5394|    126|            scan_error::invalid_scanned_value,
 5395|    126|            "Failed to read numeric boolean value: No match");
 5396|    126|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    252|{
 2146|    252|    auto it = read_code_unit(range);
 2147|    252|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    252|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 252, False: 0]
  |  |  ------------------
  ------------------
 2152|    252|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    252|        return unexpected(parse_error::error);
 2154|    252|    }
 2155|       |
 2156|      0|    return *it;
 2157|    252|}
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5467|      8|    {
 5468|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|      8|        const auto shorter = std::pair{
 5470|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 8, False: 0]
  ------------------
 5471|      8|        const auto longer = std::pair{
 5472|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 8]
  ------------------
 5473|       |
 5474|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 8]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 8]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|      8|                                     "read_textual: No match");
 5485|      8|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     16|{
 2179|     16|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      6|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      6|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      6|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      6|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 2185|      6|        return unexpected(parse_error::error);
 2186|      6|    }
 2187|      0|    return it;
 2188|      6|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    248|{
 1857|    248|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    248|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    248|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    248|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    248|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    248|        if (sz < count) {
 1862|    248|            return unexpected(eof_error::eof);
 1863|    248|        }
 1864|       |
 1865|    248|        return ranges::next(range.begin(), count);
 1866|    248|    }
 1867|    248|    else {
 1868|    248|        auto it = range.begin();
 1869|    248|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 248]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  1.22k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.03k, False: 190]
  ------------------
 1874|  1.03k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 58, False: 972]
  ------------------
 1875|     58|                return unexpected(eof_error::eof);
 1876|     58|            }
 1877|  1.03k|        }
 1878|       |
 1879|    190|        return it;
 1880|    248|    }
 1881|    248|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    248|{
 1095|    248|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    248|        return r.size();
 1097|    248|    }
 1098|    248|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    248|                           ranges::const_iterator_t<Range>,
 1100|    248|                           typename detail::basic_scan_buffer<
 1101|    248|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    248|        if constexpr (ranges::common_range<Range>) {
 1103|    248|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    248|        }
 1105|    248|        else {
 1106|    248|            if (r.begin().stores_parent()) {
 1107|    248|                return static_cast<size_t>(
 1108|    248|                    r.begin().parent()->chars_available() -
 1109|    248|                    r.begin().position());
 1110|    248|            }
 1111|    248|            return r.begin().contiguous_segment().size();
 1112|    248|        }
 1113|    248|    }
 1114|    248|    else {
 1115|    248|        return 0;
 1116|    248|    }
 1117|    248|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    136|    {
 5355|    136|        scan_error err{scan_error::invalid_scanned_value,
 5356|    136|                       "Failed to read boolean"};
 5357|       |
 5358|    136|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 112, False: 24]
  ------------------
 5359|    112|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 112]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    112|            else {
 5363|    112|                err = r.error();
 5364|    112|            }
 5365|    112|        }
 5366|       |
 5367|    136|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 116, False: 20]
  ------------------
 5368|    116|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 116]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    116|            else {
 5372|    116|                err = r.error();
 5373|    116|            }
 5374|    116|        }
 5375|       |
 5376|    136|        return unexpected(err);
 5377|    136|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    116|    {
 5402|    116|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 116]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    116|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 116]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    116|        return unexpected_scan_error(
 5412|    116|            scan_error::invalid_scanned_value,
 5413|    116|            "Failed to read textual boolean value: No match");
 5414|    116|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    232|{
 2194|    232|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    232|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    232|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    232|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    232|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48, False: 184]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     48|    }                                                  \
  |  |  |  | 3671|    232|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    184|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    184|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    184|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    184|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    184|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    184|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|    184|            return unexpected(parse_error::error);
 2202|    184|        }
 2203|    184|        return it;
 2204|    184|    }
 2205|    184|    else {
 2206|    184|        auto range_it = range.begin();
 2207|    184|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 184, False: 0]
  ------------------
 2208|    184|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    184|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 184, False: 0]
  |  |  ------------------
  ------------------
 2209|    184|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    184|                return unexpected(parse_error::error);
 2211|    184|            }
 2212|    184|        }
 2213|      0|        return it;
 2214|    184|    }
 2215|    184|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    410|    {
 5516|    410|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    410|#if !SCN_DISABLE_LOCALE
 5519|    410|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 18, False: 392]
  ------------------
 5520|     18|            return rd.read_localized(range, loc, value);
 5521|     18|        }
 5522|    392|#endif
 5523|       |
 5524|    392|        return rd.read_classic(range, value);
 5525|    410|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     18|    {
 5428|     18|        scan_error err{scan_error::invalid_scanned_value,
 5429|     18|                       "Failed to read boolean"};
 5430|       |
 5431|     18|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 16, False: 2]
  ------------------
 5432|     16|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 16]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     16|            else {
 5436|     16|                err = r.error();
 5437|     16|            }
 5438|     16|        }
 5439|       |
 5440|     18|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 6, False: 12]
  ------------------
 5441|      6|            auto stdloc = loc.get<std::locale>();
 5442|      6|            const auto& numpunct =
 5443|      6|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|      6|            const auto truename = numpunct.truename();
 5445|      6|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|      6|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 6]
  ------------------
 5448|      6|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|      6|            else {
 5452|      6|                err = r.error();
 5453|      6|            }
 5454|      6|        }
 5455|       |
 5456|     18|        return unexpected(err);
 5457|     18|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5467|      6|    {
 5468|      6|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|      6|        const auto shorter = std::pair{
 5470|      6|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 6, False: 0]
  ------------------
 5471|      6|        const auto longer = std::pair{
 5472|      6|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 6]
  ------------------
 5473|       |
 5474|      6|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 6]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|      6|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 6]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|      6|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|      6|                                     "read_textual: No match");
 5485|      6|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     12|{
 2179|     12|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     10|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2185|     10|        return unexpected(parse_error::error);
 2186|     10|    }
 2187|      0|    return it;
 2188|     10|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6192|  2.55k|    {
 6193|  2.55k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.55k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.55k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.55k|            auto rd = make_reader<T, char_type>();
 6198|  2.55k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.10k, False: 448]
  |  |  ------------------
  ------------------
 6199|  2.10k|                return unexpected(e);
 6200|  2.10k|            }
 6201|       |
 6202|    448|            return impl(rd, range, value);
 6203|  2.55k|        }
 6204|  2.55k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.55k|            auto rd = make_reader<T, char_type>();
 6206|  2.55k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.55k|                return unexpected(e);
 6208|  2.55k|            }
 6209|       |
 6210|  2.55k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.55k|                specs.width != 0) {
 6212|  2.55k|                return impl(rd, range, value);
 6213|  2.55k|            }
 6214|       |
 6215|  2.55k|            auto crange = get_as_contiguous(range);
 6216|  2.55k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.55k|            return ranges::next(range.begin(),
 6218|  2.55k|                                ranges::distance(crange.begin(), it));
 6219|  2.55k|        }
 6220|  2.55k|        else {
 6221|  2.55k|            SCN_EXPECT(false);
 6222|  2.55k|            SCN_UNREACHABLE;
 6223|  2.55k|        }
 6224|  2.55k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    448|    {
 6124|    448|        const bool need_skipped_width =
 6125|    448|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 248, False: 200]
  |  Branch (6125:33): [True: 112, False: 88]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    448|        auto it = rng.begin();
 6129|    448|        std::ptrdiff_t prefix_width = 0;
 6130|    448|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 114, False: 334]
  ------------------
 6131|    114|            auto max_width_view = take_width(rng, specs.precision);
 6132|    114|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    114|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    114|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    114|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    114|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 114]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    114|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    114|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    114|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    114|            it = prefix_result.first.base();
 6135|    114|            prefix_width = prefix_result.second;
 6136|    114|        }
 6137|    334|        else {
 6138|    334|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 334]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    334|            std::tie(it, prefix_width) = prefix_result;
 6140|    334|        }
 6141|    448|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    448|        std::ptrdiff_t value_width = 0;
 6145|    448|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 114, False: 334]
  ------------------
 6146|    114|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 112]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    112|            const auto initial_width = specs.precision - prefix_width;
 6154|    112|            auto max_width_view =
 6155|    112|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    112|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    112|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    112|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    112|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 92]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    112|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     92|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|     92|            it = w_it.base();
 6158|     92|            value_width = initial_width - w_it.count();
 6159|     92|        }
 6160|    334|        else {
 6161|    334|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20, False: 314]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     20|    }                                                  \
  |  | 3671|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    314|                                             specs, value, loc));
 6163|       |
 6164|    314|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 244, False: 70]
  ------------------
 6165|    244|                value_width = calculate_text_width(
 6166|    244|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    244|                        .view());
 6168|    244|            }
 6169|    314|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    406|        std::ptrdiff_t postfix_width = 0;
 6173|    406|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 406, False: 0]
  ------------------
 6174|    406|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    406|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 406]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    406|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    406|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    406|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    406|                                 value_width));
 6178|    406|            std::tie(it, postfix_width) = postfix_result;
 6179|    406|        }
 6180|       |
 6181|    406|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    406|                                                 value_width, postfix_width);
 6183|    406|            !e) {
  ------------------
  |  Branch (6183:13): [True: 242, False: 164]
  ------------------
 6184|    242|            return unexpected(e);
 6185|    242|        }
 6186|       |
 6187|    164|        return it;
 6188|    406|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|  2.59k|    {
 6193|  2.59k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.59k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.59k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.59k|            auto rd = make_reader<T, char_type>();
 6198|  2.59k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.13k, False: 454]
  |  |  ------------------
  ------------------
 6199|  2.13k|                return unexpected(e);
 6200|  2.13k|            }
 6201|       |
 6202|    454|            return impl(rd, range, value);
 6203|  2.59k|        }
 6204|  2.59k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.59k|            auto rd = make_reader<T, char_type>();
 6206|  2.59k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.59k|                return unexpected(e);
 6208|  2.59k|            }
 6209|       |
 6210|  2.59k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.59k|                specs.width != 0) {
 6212|  2.59k|                return impl(rd, range, value);
 6213|  2.59k|            }
 6214|       |
 6215|  2.59k|            auto crange = get_as_contiguous(range);
 6216|  2.59k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.59k|            return ranges::next(range.begin(),
 6218|  2.59k|                                ranges::distance(crange.begin(), it));
 6219|  2.59k|        }
 6220|  2.59k|        else {
 6221|  2.59k|            SCN_EXPECT(false);
 6222|  2.59k|            SCN_UNREACHABLE;
 6223|  2.59k|        }
 6224|  2.59k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    454|    {
 6124|    454|        const bool need_skipped_width =
 6125|    454|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 252, False: 202]
  |  Branch (6125:33): [True: 112, False: 90]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    454|        auto it = rng.begin();
 6129|    454|        std::ptrdiff_t prefix_width = 0;
 6130|    454|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 116, False: 338]
  ------------------
 6131|    116|            auto max_width_view = take_width(rng, specs.precision);
 6132|    116|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    116|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    116|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    116|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    116|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 116]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    116|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    116|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    116|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    116|            it = prefix_result.first.base();
 6135|    116|            prefix_width = prefix_result.second;
 6136|    116|        }
 6137|    338|        else {
 6138|    338|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    338|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 338]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    338|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    338|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    338|            std::tie(it, prefix_width) = prefix_result;
 6140|    338|        }
 6141|    454|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    454|        std::ptrdiff_t value_width = 0;
 6145|    454|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 116, False: 338]
  ------------------
 6146|    116|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 112]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    112|            const auto initial_width = specs.precision - prefix_width;
 6154|    112|            auto max_width_view =
 6155|    112|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    112|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    112|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    112|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    112|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 112, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    112|    }                                                  \
  |  |  |  | 3671|    112|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    338|        else {
 6161|    338|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 338, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    338|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    338|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    338|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    338|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    338|    }                                                  \
  |  | 3671|    338|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    338|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  2.55k|    {
 6193|  2.55k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.55k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.55k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.55k|            auto rd = make_reader<T, char_type>();
 6198|  2.55k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 2.47k]
  |  |  ------------------
  ------------------
 6199|     78|                return unexpected(e);
 6200|     78|            }
 6201|       |
 6202|  2.47k|            return impl(rd, range, value);
 6203|  2.55k|        }
 6204|  2.55k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.55k|            auto rd = make_reader<T, char_type>();
 6206|  2.55k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.55k|                return unexpected(e);
 6208|  2.55k|            }
 6209|       |
 6210|  2.55k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.55k|                specs.width != 0) {
 6212|  2.55k|                return impl(rd, range, value);
 6213|  2.55k|            }
 6214|       |
 6215|  2.55k|            auto crange = get_as_contiguous(range);
 6216|  2.55k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.55k|            return ranges::next(range.begin(),
 6218|  2.55k|                                ranges::distance(crange.begin(), it));
 6219|  2.55k|        }
 6220|  2.55k|        else {
 6221|  2.55k|            SCN_EXPECT(false);
 6222|  2.55k|            SCN_UNREACHABLE;
 6223|  2.55k|        }
 6224|  2.55k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  2.47k|    {
 6124|  2.47k|        const bool need_skipped_width =
 6125|  2.47k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 1.06k, False: 1.40k]
  |  Branch (6125:33): [True: 140, False: 1.26k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  2.47k|        auto it = rng.begin();
 6129|  2.47k|        std::ptrdiff_t prefix_width = 0;
 6130|  2.47k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 146, False: 2.32k]
  ------------------
 6131|    146|            auto max_width_view = take_width(rng, specs.precision);
 6132|    146|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    146|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    146|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    146|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 146]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    146|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    146|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    146|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    146|            it = prefix_result.first.base();
 6135|    146|            prefix_width = prefix_result.second;
 6136|    146|        }
 6137|  2.32k|        else {
 6138|  2.32k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  2.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  2.32k|            std::tie(it, prefix_width) = prefix_result;
 6140|  2.32k|        }
 6141|  2.47k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  2.47k|        std::ptrdiff_t value_width = 0;
 6145|  2.47k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 146, False: 2.32k]
  ------------------
 6146|    146|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 140]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    140|            const auto initial_width = specs.precision - prefix_width;
 6154|    140|            auto max_width_view =
 6155|    140|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    140|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    140|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    140|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    140|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 66, False: 74]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     66|    }                                                  \
  |  |  |  | 3671|    140|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     74|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|     74|            it = w_it.base();
 6158|     74|            value_width = initial_width - w_it.count();
 6159|     74|        }
 6160|  2.32k|        else {
 6161|  2.32k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  2.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.69k, False: 632]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  1.69k|    }                                                  \
  |  | 3671|  2.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    632|                                             specs, value, loc));
 6163|       |
 6164|    632|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 336, False: 296]
  ------------------
 6165|    336|                value_width = calculate_text_width(
 6166|    336|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    336|                        .view());
 6168|    336|            }
 6169|    632|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    706|        std::ptrdiff_t postfix_width = 0;
 6173|    706|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 420, False: 286]
  ------------------
 6174|    420|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    420|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    420|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    420|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    420|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 420]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    420|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    420|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    420|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    420|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    420|                                 value_width));
 6178|    420|            std::tie(it, postfix_width) = postfix_result;
 6179|    420|        }
 6180|       |
 6181|    706|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    706|                                                 value_width, postfix_width);
 6183|    706|            !e) {
  ------------------
  |  Branch (6183:13): [True: 106, False: 600]
  ------------------
 6184|    106|            return unexpected(e);
 6185|    106|        }
 6186|       |
 6187|    600|        return it;
 6188|    706|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  2.55k|    {
 6193|  2.55k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.55k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.55k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.55k|            auto rd = make_reader<T, char_type>();
 6198|  2.55k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 2.47k]
  |  |  ------------------
  ------------------
 6199|     78|                return unexpected(e);
 6200|     78|            }
 6201|       |
 6202|  2.47k|            return impl(rd, range, value);
 6203|  2.55k|        }
 6204|  2.55k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.55k|            auto rd = make_reader<T, char_type>();
 6206|  2.55k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.55k|                return unexpected(e);
 6208|  2.55k|            }
 6209|       |
 6210|  2.55k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.55k|                specs.width != 0) {
 6212|  2.55k|                return impl(rd, range, value);
 6213|  2.55k|            }
 6214|       |
 6215|  2.55k|            auto crange = get_as_contiguous(range);
 6216|  2.55k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.55k|            return ranges::next(range.begin(),
 6218|  2.55k|                                ranges::distance(crange.begin(), it));
 6219|  2.55k|        }
 6220|  2.55k|        else {
 6221|  2.55k|            SCN_EXPECT(false);
 6222|  2.55k|            SCN_UNREACHABLE;
 6223|  2.55k|        }
 6224|  2.55k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  2.47k|    {
 6124|  2.47k|        const bool need_skipped_width =
 6125|  2.47k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 1.06k, False: 1.40k]
  |  Branch (6125:33): [True: 140, False: 1.26k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  2.47k|        auto it = rng.begin();
 6129|  2.47k|        std::ptrdiff_t prefix_width = 0;
 6130|  2.47k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 146, False: 2.32k]
  ------------------
 6131|    146|            auto max_width_view = take_width(rng, specs.precision);
 6132|    146|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    146|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    146|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    146|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 146]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    146|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    146|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    146|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    146|            it = prefix_result.first.base();
 6135|    146|            prefix_width = prefix_result.second;
 6136|    146|        }
 6137|  2.32k|        else {
 6138|  2.32k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  2.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  2.32k|            std::tie(it, prefix_width) = prefix_result;
 6140|  2.32k|        }
 6141|  2.47k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  2.47k|        std::ptrdiff_t value_width = 0;
 6145|  2.47k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 146, False: 2.32k]
  ------------------
 6146|    146|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 140]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    140|            const auto initial_width = specs.precision - prefix_width;
 6154|    140|            auto max_width_view =
 6155|    140|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    140|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    140|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    140|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    140|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 66, False: 74]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     66|    }                                                  \
  |  |  |  | 3671|    140|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     74|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|     74|            it = w_it.base();
 6158|     74|            value_width = initial_width - w_it.count();
 6159|     74|        }
 6160|  2.32k|        else {
 6161|  2.32k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  2.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.69k, False: 632]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  1.69k|    }                                                  \
  |  | 3671|  2.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    632|                                             specs, value, loc));
 6163|       |
 6164|    632|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 336, False: 296]
  ------------------
 6165|    336|                value_width = calculate_text_width(
 6166|    336|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    336|                        .view());
 6168|    336|            }
 6169|    632|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    706|        std::ptrdiff_t postfix_width = 0;
 6173|    706|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 420, False: 286]
  ------------------
 6174|    420|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    420|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    420|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    420|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    420|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 420]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    420|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    420|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    420|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    420|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    420|                                 value_width));
 6178|    420|            std::tie(it, postfix_width) = postfix_result;
 6179|    420|        }
 6180|       |
 6181|    706|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    706|                                                 value_width, postfix_width);
 6183|    706|            !e) {
  ------------------
  |  Branch (6183:13): [True: 106, False: 600]
  ------------------
 6184|    106|            return unexpected(e);
 6185|    106|        }
 6186|       |
 6187|    600|        return it;
 6188|    706|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  2.55k|    {
 6193|  2.55k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.55k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.55k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.55k|            auto rd = make_reader<T, char_type>();
 6198|  2.55k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 2.47k]
  |  |  ------------------
  ------------------
 6199|     78|                return unexpected(e);
 6200|     78|            }
 6201|       |
 6202|  2.47k|            return impl(rd, range, value);
 6203|  2.55k|        }
 6204|  2.55k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.55k|            auto rd = make_reader<T, char_type>();
 6206|  2.55k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.55k|                return unexpected(e);
 6208|  2.55k|            }
 6209|       |
 6210|  2.55k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.55k|                specs.width != 0) {
 6212|  2.55k|                return impl(rd, range, value);
 6213|  2.55k|            }
 6214|       |
 6215|  2.55k|            auto crange = get_as_contiguous(range);
 6216|  2.55k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.55k|            return ranges::next(range.begin(),
 6218|  2.55k|                                ranges::distance(crange.begin(), it));
 6219|  2.55k|        }
 6220|  2.55k|        else {
 6221|  2.55k|            SCN_EXPECT(false);
 6222|  2.55k|            SCN_UNREACHABLE;
 6223|  2.55k|        }
 6224|  2.55k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  2.47k|    {
 6124|  2.47k|        const bool need_skipped_width =
 6125|  2.47k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 1.06k, False: 1.40k]
  |  Branch (6125:33): [True: 140, False: 1.26k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  2.47k|        auto it = rng.begin();
 6129|  2.47k|        std::ptrdiff_t prefix_width = 0;
 6130|  2.47k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 146, False: 2.32k]
  ------------------
 6131|    146|            auto max_width_view = take_width(rng, specs.precision);
 6132|    146|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    146|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    146|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    146|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 146]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    146|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    146|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    146|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    146|            it = prefix_result.first.base();
 6135|    146|            prefix_width = prefix_result.second;
 6136|    146|        }
 6137|  2.32k|        else {
 6138|  2.32k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  2.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  2.32k|            std::tie(it, prefix_width) = prefix_result;
 6140|  2.32k|        }
 6141|  2.47k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  2.47k|        std::ptrdiff_t value_width = 0;
 6145|  2.47k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 146, False: 2.32k]
  ------------------
 6146|    146|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 140]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    140|            const auto initial_width = specs.precision - prefix_width;
 6154|    140|            auto max_width_view =
 6155|    140|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    140|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    140|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    140|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    140|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 66, False: 74]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     66|    }                                                  \
  |  |  |  | 3671|    140|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     74|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|     74|            it = w_it.base();
 6158|     74|            value_width = initial_width - w_it.count();
 6159|     74|        }
 6160|  2.32k|        else {
 6161|  2.32k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  2.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.69k, False: 632]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  1.69k|    }                                                  \
  |  | 3671|  2.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    632|                                             specs, value, loc));
 6163|       |
 6164|    632|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 336, False: 296]
  ------------------
 6165|    336|                value_width = calculate_text_width(
 6166|    336|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    336|                        .view());
 6168|    336|            }
 6169|    632|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    706|        std::ptrdiff_t postfix_width = 0;
 6173|    706|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 420, False: 286]
  ------------------
 6174|    420|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    420|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    420|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    420|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    420|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 420]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    420|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    420|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    420|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    420|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    420|                                 value_width));
 6178|    420|            std::tie(it, postfix_width) = postfix_result;
 6179|    420|        }
 6180|       |
 6181|    706|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    706|                                                 value_width, postfix_width);
 6183|    706|            !e) {
  ------------------
  |  Branch (6183:13): [True: 106, False: 600]
  ------------------
 6184|    106|            return unexpected(e);
 6185|    106|        }
 6186|       |
 6187|    600|        return it;
 6188|    706|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    626|    {
 3492|    626|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    626|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    626|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    626|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    626|                return unexpected_scan_error(
 3498|    626|                    scan_error::invalid_scanned_value,
 3499|    626|                    "Unexpected '-' sign when parsing an "
 3500|    626|                    "unsigned value");
 3501|    626|            }
 3502|    626|        }
 3503|       |
 3504|    626|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 626]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.25k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.25k|                parse_integer_digits_without_thsep(
 3511|  1.25k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.25k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.25k|        auto buf = make_contiguous_buffer(
 3515|  1.25k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.25k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 626, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    626|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    626|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    626|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    626|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    626|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.25k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    626|    {
 3492|    626|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    626|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    626|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    626|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 626]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    626|        }
 3503|       |
 3504|    626|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 626]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.25k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.25k|                parse_integer_digits_without_thsep(
 3511|  1.25k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.25k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.25k|        auto buf = make_contiguous_buffer(
 3515|  1.25k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.25k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 626, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    626|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    626|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    626|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    626|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    626|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.25k|    }

LLVMFuzzerTestOneInput:
   68|  4.96k|{
   69|  4.96k|    scn::fuzz::run(data, size);
   70|  4.96k|    return 0;
   71|  4.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  4.96k|{
   52|  4.96k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 4.96k]
  |  Branch (52:35): [True: 0, False: 4.96k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  4.96k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  4.96k|    run_for_source(sv);
   59|  4.96k|    run_for_source(wsv_reinterpret);
   60|  4.96k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 4.96k, False: 0]
  ------------------
   61|  4.96k|        run_for_source(wsv_transcode);
   62|  4.96k|    }
   63|  4.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  4.96k|{
   37|  4.96k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  4.96k|    run_for_type<char_type>(source);
   40|  4.96k|    run_for_type<int>(source);
   41|  4.96k|    run_for_type<unsigned>(source);
   42|  4.96k|    run_for_type<double>(source);
   43|  4.96k|    run_for_type<bool>(source);
   44|  4.96k|    run_for_type<void*>(source);
   45|  4.96k|    run_for_type<std::string>(source);
   46|  4.96k|    run_for_type<std::wstring>(source);
   47|  4.96k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  4.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.96k|{
   25|  4.96k|    {
   26|  4.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.96k|    }
   28|  4.96k|    {
   29|  4.96k|        auto _ =
   30|  4.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.96k|    }
   32|  4.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.96k|{
   25|  4.96k|    {
   26|  4.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.96k|    }
   28|  4.96k|    {
   29|  4.96k|        auto _ =
   30|  4.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.96k|    }
   32|  4.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.96k|{
   25|  4.96k|    {
   26|  4.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.96k|    }
   28|  4.96k|    {
   29|  4.96k|        auto _ =
   30|  4.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.96k|    }
   32|  4.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.96k|{
   25|  4.96k|    {
   26|  4.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.96k|    }
   28|  4.96k|    {
   29|  4.96k|        auto _ =
   30|  4.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.96k|    }
   32|  4.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.96k|{
   25|  4.96k|    {
   26|  4.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.96k|    }
   28|  4.96k|    {
   29|  4.96k|        auto _ =
   30|  4.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.96k|    }
   32|  4.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  4.96k|{
   25|  4.96k|    {
   26|  4.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.96k|    }
   28|  4.96k|    {
   29|  4.96k|        auto _ =
   30|  4.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.96k|    }
   32|  4.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  4.96k|{
   25|  4.96k|    {
   26|  4.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.96k|    }
   28|  4.96k|    {
   29|  4.96k|        auto _ =
   30|  4.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.96k|    }
   32|  4.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  4.96k|{
   25|  4.96k|    {
   26|  4.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.96k|    }
   28|  4.96k|    {
   29|  4.96k|        auto _ =
   30|  4.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.96k|    }
   32|  4.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  4.96k|{
   25|  4.96k|    {
   26|  4.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.96k|    }
   28|  4.96k|    {
   29|  4.96k|        auto _ =
   30|  4.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.96k|    }
   32|  4.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  9.93k|{
   37|  9.93k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  9.93k|    run_for_type<char_type>(source);
   40|  9.93k|    run_for_type<int>(source);
   41|  9.93k|    run_for_type<unsigned>(source);
   42|  9.93k|    run_for_type<double>(source);
   43|  9.93k|    run_for_type<bool>(source);
   44|  9.93k|    run_for_type<void*>(source);
   45|  9.93k|    run_for_type<std::string>(source);
   46|  9.93k|    run_for_type<std::wstring>(source);
   47|  9.93k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  9.93k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  9.93k|{
   25|  9.93k|    {
   26|  9.93k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.93k|    }
   28|  9.93k|    {
   29|  9.93k|        auto _ =
   30|  9.93k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.93k|    }
   32|  9.93k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  9.93k|{
   25|  9.93k|    {
   26|  9.93k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.93k|    }
   28|  9.93k|    {
   29|  9.93k|        auto _ =
   30|  9.93k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.93k|    }
   32|  9.93k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  9.93k|{
   25|  9.93k|    {
   26|  9.93k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.93k|    }
   28|  9.93k|    {
   29|  9.93k|        auto _ =
   30|  9.93k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.93k|    }
   32|  9.93k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  9.93k|{
   25|  9.93k|    {
   26|  9.93k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.93k|    }
   28|  9.93k|    {
   29|  9.93k|        auto _ =
   30|  9.93k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.93k|    }
   32|  9.93k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  9.93k|{
   25|  9.93k|    {
   26|  9.93k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.93k|    }
   28|  9.93k|    {
   29|  9.93k|        auto _ =
   30|  9.93k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.93k|    }
   32|  9.93k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  9.93k|{
   25|  9.93k|    {
   26|  9.93k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.93k|    }
   28|  9.93k|    {
   29|  9.93k|        auto _ =
   30|  9.93k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.93k|    }
   32|  9.93k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  9.93k|{
   25|  9.93k|    {
   26|  9.93k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.93k|    }
   28|  9.93k|    {
   29|  9.93k|        auto _ =
   30|  9.93k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.93k|    }
   32|  9.93k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  9.93k|{
   25|  9.93k|    {
   26|  9.93k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.93k|    }
   28|  9.93k|    {
   29|  9.93k|        auto _ =
   30|  9.93k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.93k|    }
   32|  9.93k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  9.93k|{
   25|  9.93k|    {
   26|  9.93k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.93k|    }
   28|  9.93k|    {
   29|  9.93k|        auto _ =
   30|  9.93k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.93k|    }
   32|  9.93k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  4.96k|{
   52|  4.96k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  4.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  4.96k|    string_buffer.resize(size);
   56|  4.96k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  4.96k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  4.96k|    const auto wsv_reinterpret_size =
   61|  4.96k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 89, False: 4.87k]
  ------------------
   62|  4.96k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  4.96k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  4.96k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  4.96k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  4.96k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  4.96k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  4.96k|}

