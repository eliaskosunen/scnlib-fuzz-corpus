_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|  2.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  3.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3777|  14.9M|{
 3778|  14.9M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|  14.9M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|  14.9M|    }
 3781|  14.9M|    else if constexpr (sizeof(U) == 2) {
 3782|  14.9M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|  14.9M|    }
 3784|  14.9M|    else {
 3785|       |        // utf-32
 3786|  14.9M|        static_assert(sizeof(U) == 4);
 3787|  14.9M|        SCN_UNUSED(ch);
 3788|  14.9M|        return 1;
 3789|  14.9M|    }
 3790|  14.9M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3741|  14.9M|{
 3742|  14.9M|    static_assert(sizeof(U8) == 1);
 3743|       |
 3744|  14.9M|    SCN_GCC_COMPAT_PUSH
 3745|  14.9M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3746|  14.9M|    constexpr char lengths[] =
 3747|  14.9M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3748|  14.9M|        "\1\1\1\1\1\1\1\1"
 3749|  14.9M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3750|       |                            // byte
 3751|  14.9M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3752|  14.9M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3753|  14.9M|        "\4";               // highest bits 11110 -> 4-byte cp
 3754|  14.9M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3755|  14.9M|    SCN_GCC_COMPAT_POP
 3756|  14.9M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|  13.6M|{
 3984|  13.6M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|  13.6M|        return decode_utf8_code_point_exhaustive(input);
 3986|  13.6M|    }
 3987|  13.6M|    else if constexpr (sizeof(CharT) == 2) {
 3988|  13.6M|        return decode_utf16_code_point_exhaustive(input);
 3989|  13.6M|    }
 3990|  13.6M|    else {
 3991|  13.6M|        SCN_EXPECT(input.size() == 1);
 3992|  13.6M|        auto cp = static_cast<char32_t>(input.front());
 3993|  13.6M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 3994|  13.6M|            return invalid_code_point;
 3995|  13.6M|        }
 3996|  13.6M|        return cp;
 3997|  13.6M|    }
 3998|  13.6M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3796|  13.6M|{
 3797|  13.6M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  13.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3798|       |
 3799|  13.6M|    const auto is_trailing_code_unit = [](char ch) {
 3800|  13.6M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|  13.6M|    };
 3802|       |
 3803|  13.6M|    if (input.size() == 1) {
  ------------------
  |  Branch (3803:9): [True: 12.4M, False: 1.22M]
  ------------------
 3804|  12.4M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3804:13): [True: 102, False: 12.4M]
  ------------------
 3805|    102|            SCN_UNLIKELY_ATTR
 3806|    102|            return invalid_code_point;
 3807|    102|        }
 3808|  12.4M|        return static_cast<char32_t>(input[0]);
 3809|  12.4M|    }
 3810|       |
 3811|  1.22M|    if (input.size() == 2) {
  ------------------
  |  Branch (3811:9): [True: 1.15M, False: 71.4k]
  ------------------
 3812|  1.15M|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3812:13): [True: 30, False: 1.15M]
  ------------------
 3813|     30|            SCN_UNLIKELY_ATTR
 3814|     30|            return invalid_code_point;
 3815|     30|        }
 3816|  1.15M|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3816:13): [True: 16.8k, False: 1.13M]
  ------------------
 3817|  16.8k|            SCN_UNLIKELY_ATTR
 3818|  16.8k|            return invalid_code_point;
 3819|  16.8k|        }
 3820|       |
 3821|  1.13M|        char32_t cp{};
 3822|  1.13M|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3823|  1.13M|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3824|  1.13M|        return cp;
 3825|  1.15M|    }
 3826|       |
 3827|  71.4k|    if (input.size() == 3) {
  ------------------
  |  Branch (3827:9): [True: 44.1k, False: 27.2k]
  ------------------
 3828|  44.1k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3828:13): [True: 24, False: 44.0k]
  ------------------
 3829|     24|            SCN_UNLIKELY_ATTR
 3830|     24|            return invalid_code_point;
 3831|     24|        }
 3832|  44.0k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3832:13): [True: 10.6k, False: 33.4k]
  ------------------
 3833|  44.0k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3833:13): [True: 929, False: 32.5k]
  ------------------
 3834|  11.5k|            SCN_UNLIKELY_ATTR
 3835|  11.5k|            return invalid_code_point;
 3836|  11.5k|        }
 3837|       |
 3838|  32.5k|        char32_t cp{};
 3839|  32.5k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3840|  32.5k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3841|  32.5k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3842|  32.5k|        return cp;
 3843|  44.0k|    }
 3844|       |
 3845|  27.2k|    if (input.size() == 4) {
  ------------------
  |  Branch (3845:9): [True: 27.2k, False: 0]
  ------------------
 3846|  27.2k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 27.2k]
  ------------------
 3847|      0|            SCN_UNLIKELY_ATTR
 3848|      0|            return invalid_code_point;
 3849|      0|        }
 3850|  27.2k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3850:13): [True: 2.34k, False: 24.9k]
  ------------------
 3851|  2.34k|            SCN_UNLIKELY_ATTR
 3852|  2.34k|            return invalid_code_point;
 3853|  2.34k|        }
 3854|  24.9k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3854:13): [True: 2.41k, False: 22.5k]
  ------------------
 3855|  24.9k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3855:13): [True: 703, False: 21.8k]
  ------------------
 3856|  24.9k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3856:13): [True: 1.37k, False: 20.4k]
  ------------------
 3857|  4.49k|            SCN_UNLIKELY_ATTR
 3858|  4.49k|            return invalid_code_point;
 3859|  4.49k|        }
 3860|       |
 3861|  20.4k|        char32_t cp{};
 3862|  20.4k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3863|  20.4k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3864|  20.4k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3865|  20.4k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3866|  20.4k|        return cp;
 3867|  24.9k|    }
 3868|       |
 3869|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3870|       |    // gcc 7 thinks we'll get here, even when we won't
 3871|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3872|      0|#endif
 3873|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3874|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3799|  1.30M|    const auto is_trailing_code_unit = [](char ch) {
 3800|  1.30M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|  1.30M|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3669|  5.13M|{
 3670|  5.13M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3670:19): [Folded - Ignored]
  |  Branch (3670:19): [Folded - Ignored]
  ------------------
 3671|  5.13M|                                          decltype(first), decltype(last)> &&
 3672|  5.13M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3672:19): [Folded - Ignored]
  ------------------
 3673|  5.13M|        return {first, last};
 3674|  5.13M|    }
 3675|  5.13M|    else {
 3676|  5.13M|        return {to_address(first), static_cast<size_t>(std::distance(
 3677|  5.13M|                                       to_address(first), to_address(last)))};
 3678|  5.13M|    }
 3679|  5.13M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  15.4M|{
  322|  15.4M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  15.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  15.4M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  15.6M|{
  302|  15.6M|    return p;
  303|  15.6M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3700|  2.60M|{
 3701|  2.60M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  2.60M|                      typename std::basic_string_view<CharT>::iterator,
 3703|  2.60M|                      decltype(it)> &&
 3704|  2.60M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3704:19): [Folded - Ignored]
  ------------------
 3705|  2.60M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  2.60M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3706|  2.60M|        return it;
 3707|  2.60M|    }
 3708|  2.60M|    else {
 3709|  2.60M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3710|  2.60M|    }
 3711|  2.60M|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  7.34k|{
 8828|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  7.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  7.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5356|  14.6k|{
 5357|  14.6k|    detail::check_scan_arg_types<Args...>();
 5358|  14.6k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  14.6k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5095|  14.6k|{
 5096|  14.6k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  14.6k|                  "Scan argument types must be default constructible");
 5098|  14.6k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  14.6k|                  "Scan argument types must be Destructible");
 5100|  14.6k|    static_assert(
 5101|  14.6k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  14.6k|        "Scan argument types must not be references");
 5103|  14.6k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5309|  14.6k|    {
 5310|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  14.6k|    {
 5321|  14.6k|        return {detail::make_arg<
 5322|  14.6k|            kind, Context,
 5323|  14.6k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  14.6k|                                 typename Context::char_type>::value>(args)...};
 5325|  14.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5130|  14.6k|{
 5131|  14.6k|    return make_value<Context>(value).ref_value;
 5132|  14.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5080|  14.6k|{
 5081|  14.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  14.6k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  14.6k|                                  needs_context_tag>) {
 5085|  14.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  14.6k|    }
 5087|  14.6k|    else {
 5088|  14.6k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  14.6k|            value, context_tag<Context>{}));
 5090|  14.6k|    }
 5091|  14.6k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4948|  14.6k|    {
 4949|  14.6k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (4949:23): [Folded - Ignored]
  |  Branch (4949:23): [Folded - Ignored]
  ------------------
 4950|  14.6k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (4950:23): [Folded - Ignored]
  ------------------
 4951|  14.6k|            return val;
 4952|  14.6k|        }
 4953|  14.6k|        else if constexpr (is_type_disabled<char_type>) {
 4954|  14.6k|            return unscannable_disabled{val};
 4955|  14.6k|        }
 4956|  14.6k|        else {
 4957|  14.6k|            SCN_UNUSED(val);
 4958|  14.6k|            return unscannable_char{};
 4959|  14.6k|        }
 4960|  14.6k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5049|  14.6k|{
 5050|  14.6k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  14.6k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  14.6k|    constexpr bool scannable_char =
 5054|  14.6k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  14.6k|    static_assert(scannable_char,
 5056|  14.6k|                  "Cannot scan an argument of an unsupported character "
 5057|  14.6k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  14.6k|    constexpr bool scannable_const =
 5060|  14.6k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  14.6k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  14.6k|    constexpr bool scannable_disabled =
 5064|  14.6k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  14.6k|    static_assert(scannable_disabled,
 5066|  14.6k|                  "Cannot scan an argument that has been disabled by "
 5067|  14.6k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  14.6k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  14.6k|    static_assert(
 5071|  14.6k|        scannable,
 5072|  14.6k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  14.6k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  14.6k|    return arg_value{arg};
 5076|  14.6k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4862|  14.6k|    {
 4863|  14.6k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8614|  66.1k|{
 8615|  66.1k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  66.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8616|  66.1k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8551|  66.1k|{
 8552|  66.1k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  66.1k|    auto result = vscan_impl(buffer, format, args);
 8555|  66.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  66.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.3k, False: 1.74k]
  |  |  ------------------
  ------------------
 8556|  64.3k|        return unexpected(result.error());
 8557|  64.3k|    }
 8558|  1.74k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  66.1k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4680|   132k|{
 4681|   132k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|   132k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|   132k|                  "\n"
 4685|   132k|                  "Unsupported range type given as input to a scanning "
 4686|   132k|                  "function.\n"
 4687|   132k|                  "A range needs to have a character type (value type) "
 4688|   132k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|   132k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|   132k|                  "to be included.\n"
 4691|   132k|                  "See the scnlib documentation for more details.");
 4692|   132k|    static_assert(
 4693|   132k|        !std::is_same_v<T, custom_char_traits>,
 4694|   132k|        "\n"
 4695|   132k|        "Unsupported range type given as input to a scanning "
 4696|   132k|        "function.\n"
 4697|   132k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|   132k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|   132k|        "not supported.");
 4700|   132k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|   132k|                  "\n"
 4702|   132k|                  "Unsupported range type given as input to a scanning "
 4703|   132k|                  "function.\n"
 4704|   132k|                  "file_marker_found cannot be used as an "
 4705|   132k|                  "source range type to scn::scan.\n"
 4706|   132k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|   132k|                  "and do not provide an explicit source range, "
 4708|   132k|                  "or use scn::scan with a FILE* directly.");
 4709|   132k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|   132k|                  "\n"
 4711|   132k|                  "Unsupported range type given as input to a scanning "
 4712|   132k|                  "function.\n"
 4713|   132k|                  "In order to be scannable, a range needs to satisfy "
 4714|   132k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|   132k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|   132k|                  "\n"
 4717|   132k|                  "Unsupported range type given as input to a scanning "
 4718|   132k|                  "function.\n"
 4719|   132k|                  "A range needs to model forward_range and have a valid "
 4720|   132k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|   132k|                  "Examples of scannable ranges are std::string, "
 4722|   132k|                  "std::string_view, "
 4723|   132k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|   132k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|   132k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|   132k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4572|   132k|{
 4573|   132k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4573:19): [Folded - Ignored]
  ------------------
 4574|   132k|        return r;
 4575|       |        // return make_string_scan_buffer(r);
 4576|   132k|    }
 4577|   132k|    else {
 4578|   132k|        return invalid_char_type{};
 4579|   132k|    }
 4580|   132k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1568|   402k|    {
 1569|   402k|        return has_value();
 1570|   402k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|   805k|    {
  481|   805k|        return m_has_value;
  482|   805k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1574|   399k|    {
 1575|   399k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   399k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   399k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   399k|        return this->get_unexpected().error();
 1577|   399k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   399k|    {
  464|   399k|        return m_unexpected;
  465|   399k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|  2.35M|    {
  357|  2.35M|        return m_unexpected;
  358|  2.35M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|  1.32M|    {
  343|  1.32M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.32M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  1.32M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|   128k|    {
 1447|   128k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   128k|    {
  443|   128k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|  1.37M|    {
  352|  1.37M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.37M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  1.37M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   132k|    {
 1148|   132k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5883|  3.48k|{
 5884|  3.48k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  3.48k|                      ranges::iterator_t<SourceRange>>) {
 5886|  3.48k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  3.48k|    }
 5888|  3.48k|    else {
 5889|  3.48k|        auto it = ranges::begin(source);
 5890|  3.48k|        while (n > 0) {
 5891|  3.48k|            --n;
 5892|  3.48k|            ++it;
 5893|  3.48k|        }
 5894|  3.48k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  3.48k|    }
 5896|  3.48k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  3.48k|    {
 2695|  3.48k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  3.48k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  3.48k|    {
 2676|  3.48k|        return decay_copy(t.begin());
 2677|  3.48k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1919|   232k|{
 1920|   232k|    return SCN_FWD(t);
  ------------------
  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|   232k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5870|  3.48k|{
 5871|  3.48k|    return ranges::end(source);
 5872|  3.48k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  3.48k|    {
 2752|  3.48k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  3.48k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  3.48k|    {
 2734|  3.48k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  3.48k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3286|  2.06M|    {
 3287|  2.06M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1623|  3.56k|    {
 1624|  3.56k|        return value();
 1625|  3.56k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1597|  3.56k|    {
 1598|  3.56k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  3.56k|        return this->get_value();
 1600|  3.56k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  3.56k|    {
  447|  3.56k|        return m_value;
  448|  3.56k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  3.48k|    {
 1401|  3.48k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  3.48k|    {
  433|  3.48k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7935|  14.6k|    {
 7936|  14.6k|        return m_str;
 7937|  14.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  14.6k|    {
 5387|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5339|  14.6k|    {
 5340|  14.6k|        return m_argptrs;
 5341|  14.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5438|   132k|    {
 5439|   132k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  14.6k|{
 8781|  14.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.4k, False: 204]
  |  |  ------------------
  ------------------
 8782|  14.4k|        return unexpected(result.error());
 8783|  14.4k|    }
 8784|    204|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    204|    static_cast<    \
  |  |  929|    204|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    204|    static_cast<    \
  |  |  929|    204|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  14.6k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1568|   132k|    {
 1569|   132k|        return has_value();
 1570|   132k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   264k|    {
  481|   264k|        return m_has_value;
  482|   264k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1574|   128k|    {
 1575|   128k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   128k|        return this->get_unexpected().error();
 1577|   128k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   128k|    {
  464|   128k|        return m_unexpected;
  465|   128k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  14.4k|    {
 1447|  14.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  14.4k|    {
  443|  14.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.6k|    {
 1148|  14.6k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|  3.48k|    {
 1624|  3.48k|        return value();
 1625|  3.48k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  3.48k|    {
 1598|  3.48k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  3.48k|        return this->get_value();
 1600|  3.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.48k|    {
  447|  3.48k|        return m_value;
  448|  3.48k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5790|    204|    {
 5791|    204|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5641|  3.48k|    {
 5642|  3.48k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5576|    204|    {
 5577|    204|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|    204|    {
 1401|    204|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|    204|    {
  433|    204|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5334|  14.6k|    {
 5335|  14.6k|        return m_args;
 5336|  14.6k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7651|   132k|{
 7652|   132k|    return s;
 7653|   132k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7628|   132k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  14.6k|    {
 7932|  14.6k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  7.34k|{
 8895|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  7.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  7.34k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8632|  66.1k|{
 8633|  66.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  66.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  66.1k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8567|  66.1k|{
 8568|  66.1k|#if !SCN_DISABLE_LOCALE
 8569|  66.1k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  66.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  66.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  66.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  66.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  66.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.3k, False: 1.74k]
  |  |  ------------------
  ------------------
 8576|  64.3k|        return unexpected(result.error());
 8577|  64.3k|    }
 8578|  1.74k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  66.1k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  7.34k|{
 8828|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  7.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  7.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5356|  14.6k|{
 5357|  14.6k|    detail::check_scan_arg_types<Args...>();
 5358|  14.6k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  14.6k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5095|  44.0k|{
 5096|  44.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  44.0k|                  "Scan argument types must be default constructible");
 5098|  44.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  44.0k|                  "Scan argument types must be Destructible");
 5100|  44.0k|    static_assert(
 5101|  44.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  44.0k|        "Scan argument types must not be references");
 5103|  44.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5309|  14.6k|    {
 5310|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  14.6k|    {
 5321|  14.6k|        return {detail::make_arg<
 5322|  14.6k|            kind, Context,
 5323|  14.6k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  14.6k|                                 typename Context::char_type>::value>(args)...};
 5325|  14.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5130|  14.6k|{
 5131|  14.6k|    return make_value<Context>(value).ref_value;
 5132|  14.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5080|  14.6k|{
 5081|  14.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  14.6k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  14.6k|                                  needs_context_tag>) {
 5085|  14.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  14.6k|    }
 5087|  14.6k|    else {
 5088|  14.6k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  14.6k|            value, context_tag<Context>{}));
 5090|  14.6k|    }
 5091|  14.6k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4919|  14.6k|    {                                                                        \
 4920|  14.6k|        return val;                                                          \
 4921|  14.6k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5049|  44.0k|{
 5050|  44.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  44.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  44.0k|    constexpr bool scannable_char =
 5054|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  44.0k|    static_assert(scannable_char,
 5056|  44.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  44.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  44.0k|    constexpr bool scannable_const =
 5060|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  44.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  44.0k|    constexpr bool scannable_disabled =
 5064|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  44.0k|    static_assert(scannable_disabled,
 5066|  44.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  44.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  44.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  44.0k|    static_assert(
 5071|  44.0k|        scannable,
 5072|  44.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  44.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  44.0k|    return arg_value{arg};
 5076|  44.0k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4862|  44.0k|    {
 4863|  44.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7935|  14.6k|    {
 7936|  14.6k|        return m_str;
 7937|  14.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  14.6k|    {
 5387|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5339|  14.6k|    {
 5340|  14.6k|        return m_argptrs;
 5341|  14.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  14.6k|{
 8781|  14.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 0]
  |  |  ------------------
  ------------------
 8782|  14.6k|        return unexpected(result.error());
 8783|  14.6k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  14.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  14.6k|    {
 1447|  14.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  14.6k|    {
  443|  14.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.6k|    {
 1148|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5334|  14.6k|    {
 5335|  14.6k|        return m_args;
 5336|  14.6k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  14.6k|    {
 7932|  14.6k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  7.34k|{
 8895|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  7.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  7.34k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  7.34k|{
 8828|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  7.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  7.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5356|  14.6k|{
 5357|  14.6k|    detail::check_scan_arg_types<Args...>();
 5358|  14.6k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  14.6k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5095|  44.0k|{
 5096|  44.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  44.0k|                  "Scan argument types must be default constructible");
 5098|  44.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  44.0k|                  "Scan argument types must be Destructible");
 5100|  44.0k|    static_assert(
 5101|  44.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  44.0k|        "Scan argument types must not be references");
 5103|  44.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5309|  14.6k|    {
 5310|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  14.6k|    {
 5321|  14.6k|        return {detail::make_arg<
 5322|  14.6k|            kind, Context,
 5323|  14.6k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  14.6k|                                 typename Context::char_type>::value>(args)...};
 5325|  14.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5130|  14.6k|{
 5131|  14.6k|    return make_value<Context>(value).ref_value;
 5132|  14.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5080|  14.6k|{
 5081|  14.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  14.6k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  14.6k|                                  needs_context_tag>) {
 5085|  14.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  14.6k|    }
 5087|  14.6k|    else {
 5088|  14.6k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  14.6k|            value, context_tag<Context>{}));
 5090|  14.6k|    }
 5091|  14.6k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4919|  14.6k|    {                                                                        \
 4920|  14.6k|        return val;                                                          \
 4921|  14.6k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5049|  44.0k|{
 5050|  44.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  44.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  44.0k|    constexpr bool scannable_char =
 5054|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  44.0k|    static_assert(scannable_char,
 5056|  44.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  44.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  44.0k|    constexpr bool scannable_const =
 5060|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  44.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  44.0k|    constexpr bool scannable_disabled =
 5064|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  44.0k|    static_assert(scannable_disabled,
 5066|  44.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  44.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  44.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  44.0k|    static_assert(
 5071|  44.0k|        scannable,
 5072|  44.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  44.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  44.0k|    return arg_value{arg};
 5076|  44.0k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4862|  44.0k|    {
 4863|  44.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7935|  14.6k|    {
 7936|  14.6k|        return m_str;
 7937|  14.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  14.6k|    {
 5387|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5339|  14.6k|    {
 5340|  14.6k|        return m_argptrs;
 5341|  14.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  14.6k|{
 8781|  14.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 0]
  |  |  ------------------
  ------------------
 8782|  14.6k|        return unexpected(result.error());
 8783|  14.6k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  14.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  14.6k|    {
 1447|  14.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  14.6k|    {
  443|  14.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.6k|    {
 1148|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5334|  14.6k|    {
 5335|  14.6k|        return m_args;
 5336|  14.6k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  14.6k|    {
 7932|  14.6k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  7.34k|{
 8895|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  7.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  7.34k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  7.34k|{
 8828|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  7.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  7.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5356|  14.6k|{
 5357|  14.6k|    detail::check_scan_arg_types<Args...>();
 5358|  14.6k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  14.6k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5095|  44.0k|{
 5096|  44.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  44.0k|                  "Scan argument types must be default constructible");
 5098|  44.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  44.0k|                  "Scan argument types must be Destructible");
 5100|  44.0k|    static_assert(
 5101|  44.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  44.0k|        "Scan argument types must not be references");
 5103|  44.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5309|  14.6k|    {
 5310|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  14.6k|    {
 5321|  14.6k|        return {detail::make_arg<
 5322|  14.6k|            kind, Context,
 5323|  14.6k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  14.6k|                                 typename Context::char_type>::value>(args)...};
 5325|  14.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5130|  14.6k|{
 5131|  14.6k|    return make_value<Context>(value).ref_value;
 5132|  14.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5080|  14.6k|{
 5081|  14.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  14.6k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  14.6k|                                  needs_context_tag>) {
 5085|  14.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  14.6k|    }
 5087|  14.6k|    else {
 5088|  14.6k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  14.6k|            value, context_tag<Context>{}));
 5090|  14.6k|    }
 5091|  14.6k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4919|  14.6k|    {                                                                        \
 4920|  14.6k|        return val;                                                          \
 4921|  14.6k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5049|  44.0k|{
 5050|  44.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  44.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  44.0k|    constexpr bool scannable_char =
 5054|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  44.0k|    static_assert(scannable_char,
 5056|  44.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  44.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  44.0k|    constexpr bool scannable_const =
 5060|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  44.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  44.0k|    constexpr bool scannable_disabled =
 5064|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  44.0k|    static_assert(scannable_disabled,
 5066|  44.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  44.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  44.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  44.0k|    static_assert(
 5071|  44.0k|        scannable,
 5072|  44.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  44.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  44.0k|    return arg_value{arg};
 5076|  44.0k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4862|  44.0k|    {
 4863|  44.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7935|  14.6k|    {
 7936|  14.6k|        return m_str;
 7937|  14.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  14.6k|    {
 5387|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5339|  14.6k|    {
 5340|  14.6k|        return m_argptrs;
 5341|  14.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  14.6k|{
 8781|  14.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 0]
  |  |  ------------------
  ------------------
 8782|  14.6k|        return unexpected(result.error());
 8783|  14.6k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  14.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  14.6k|    {
 1447|  14.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  14.6k|    {
  443|  14.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.6k|    {
 1148|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5334|  14.6k|    {
 5335|  14.6k|        return m_args;
 5336|  14.6k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  14.6k|    {
 7932|  14.6k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  7.34k|{
 8895|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  7.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  7.34k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  7.34k|{
 8828|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  7.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  7.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5356|  14.6k|{
 5357|  14.6k|    detail::check_scan_arg_types<Args...>();
 5358|  14.6k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  14.6k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5095|  44.0k|{
 5096|  44.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  44.0k|                  "Scan argument types must be default constructible");
 5098|  44.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  44.0k|                  "Scan argument types must be Destructible");
 5100|  44.0k|    static_assert(
 5101|  44.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  44.0k|        "Scan argument types must not be references");
 5103|  44.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5309|  14.6k|    {
 5310|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  14.6k|    {
 5321|  14.6k|        return {detail::make_arg<
 5322|  14.6k|            kind, Context,
 5323|  14.6k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  14.6k|                                 typename Context::char_type>::value>(args)...};
 5325|  14.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5130|  14.6k|{
 5131|  14.6k|    return make_value<Context>(value).ref_value;
 5132|  14.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5080|  14.6k|{
 5081|  14.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  14.6k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  14.6k|                                  needs_context_tag>) {
 5085|  14.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  14.6k|    }
 5087|  14.6k|    else {
 5088|  14.6k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  14.6k|            value, context_tag<Context>{}));
 5090|  14.6k|    }
 5091|  14.6k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4919|  14.6k|    {                                                                        \
 4920|  14.6k|        return val;                                                          \
 4921|  14.6k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5049|  44.0k|{
 5050|  44.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  44.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  44.0k|    constexpr bool scannable_char =
 5054|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  44.0k|    static_assert(scannable_char,
 5056|  44.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  44.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  44.0k|    constexpr bool scannable_const =
 5060|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  44.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  44.0k|    constexpr bool scannable_disabled =
 5064|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  44.0k|    static_assert(scannable_disabled,
 5066|  44.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  44.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  44.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  44.0k|    static_assert(
 5071|  44.0k|        scannable,
 5072|  44.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  44.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  44.0k|    return arg_value{arg};
 5076|  44.0k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4862|  44.0k|    {
 4863|  44.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7935|  14.6k|    {
 7936|  14.6k|        return m_str;
 7937|  14.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  14.6k|    {
 5387|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5339|  14.6k|    {
 5340|  14.6k|        return m_argptrs;
 5341|  14.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  14.6k|{
 8781|  14.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 0]
  |  |  ------------------
  ------------------
 8782|  14.6k|        return unexpected(result.error());
 8783|  14.6k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  14.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  14.6k|    {
 1447|  14.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  14.6k|    {
  443|  14.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.6k|    {
 1148|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5334|  14.6k|    {
 5335|  14.6k|        return m_args;
 5336|  14.6k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  14.6k|    {
 7932|  14.6k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  7.34k|{
 8895|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  7.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  7.34k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8827|  7.34k|{
 8828|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  7.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  7.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5356|  14.6k|{
 5357|  14.6k|    detail::check_scan_arg_types<Args...>();
 5358|  14.6k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  14.6k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5095|  44.0k|{
 5096|  44.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  44.0k|                  "Scan argument types must be default constructible");
 5098|  44.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  44.0k|                  "Scan argument types must be Destructible");
 5100|  44.0k|    static_assert(
 5101|  44.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  44.0k|        "Scan argument types must not be references");
 5103|  44.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5309|  14.6k|    {
 5310|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5320|  14.6k|    {
 5321|  14.6k|        return {detail::make_arg<
 5322|  14.6k|            kind, Context,
 5323|  14.6k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  14.6k|                                 typename Context::char_type>::value>(args)...};
 5325|  14.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5130|  14.6k|{
 5131|  14.6k|    return make_value<Context>(value).ref_value;
 5132|  14.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5080|  14.6k|{
 5081|  14.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  14.6k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  14.6k|                                  needs_context_tag>) {
 5085|  14.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  14.6k|    }
 5087|  14.6k|    else {
 5088|  14.6k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  14.6k|            value, context_tag<Context>{}));
 5090|  14.6k|    }
 5091|  14.6k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4919|  14.6k|    {                                                                        \
 4920|  14.6k|        return val;                                                          \
 4921|  14.6k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5049|  44.0k|{
 5050|  44.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  44.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  44.0k|    constexpr bool scannable_char =
 5054|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  44.0k|    static_assert(scannable_char,
 5056|  44.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  44.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  44.0k|    constexpr bool scannable_const =
 5060|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  44.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  44.0k|    constexpr bool scannable_disabled =
 5064|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  44.0k|    static_assert(scannable_disabled,
 5066|  44.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  44.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  44.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  44.0k|    static_assert(
 5071|  44.0k|        scannable,
 5072|  44.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  44.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  44.0k|    return arg_value{arg};
 5076|  44.0k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4862|  44.0k|    {
 4863|  44.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7935|  14.6k|    {
 7936|  14.6k|        return m_str;
 7937|  14.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  14.6k|    {
 5387|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5339|  14.6k|    {
 5340|  14.6k|        return m_argptrs;
 5341|  14.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8780|  14.6k|{
 8781|  14.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 0]
  |  |  ------------------
  ------------------
 8782|  14.6k|        return unexpected(result.error());
 8783|  14.6k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  14.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  14.6k|    {
 1447|  14.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  442|  14.6k|    {
  443|  14.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.6k|    {
 1148|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5334|  14.6k|    {
 5335|  14.6k|        return m_args;
 5336|  14.6k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  14.6k|    {
 7932|  14.6k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8894|  7.34k|{
 8895|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  7.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  7.34k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8827|  7.34k|{
 8828|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  7.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  7.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5356|  14.6k|{
 5357|  14.6k|    detail::check_scan_arg_types<Args...>();
 5358|  14.6k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  14.6k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5095|  44.0k|{
 5096|  44.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  44.0k|                  "Scan argument types must be default constructible");
 5098|  44.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  44.0k|                  "Scan argument types must be Destructible");
 5100|  44.0k|    static_assert(
 5101|  44.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  44.0k|        "Scan argument types must not be references");
 5103|  44.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5309|  14.6k|    {
 5310|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  14.6k|    {
 5321|  14.6k|        return {detail::make_arg<
 5322|  14.6k|            kind, Context,
 5323|  14.6k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  14.6k|                                 typename Context::char_type>::value>(args)...};
 5325|  14.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5130|  14.6k|{
 5131|  14.6k|    return make_value<Context>(value).ref_value;
 5132|  14.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5080|  14.6k|{
 5081|  14.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  14.6k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  14.6k|                                  needs_context_tag>) {
 5085|  14.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  14.6k|    }
 5087|  14.6k|    else {
 5088|  14.6k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  14.6k|            value, context_tag<Context>{}));
 5090|  14.6k|    }
 5091|  14.6k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4919|  14.6k|    {                                                                        \
 4920|  14.6k|        return val;                                                          \
 4921|  14.6k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5049|  44.0k|{
 5050|  44.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  44.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  44.0k|    constexpr bool scannable_char =
 5054|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  44.0k|    static_assert(scannable_char,
 5056|  44.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  44.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  44.0k|    constexpr bool scannable_const =
 5060|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  44.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  44.0k|    constexpr bool scannable_disabled =
 5064|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  44.0k|    static_assert(scannable_disabled,
 5066|  44.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  44.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  44.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  44.0k|    static_assert(
 5071|  44.0k|        scannable,
 5072|  44.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  44.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  44.0k|    return arg_value{arg};
 5076|  44.0k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4862|  44.0k|    {
 4863|  44.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7935|  14.6k|    {
 7936|  14.6k|        return m_str;
 7937|  14.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  14.6k|    {
 5387|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5339|  14.6k|    {
 5340|  14.6k|        return m_argptrs;
 5341|  14.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  14.6k|{
 8781|  14.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.6k, False: 1.09k]
  |  |  ------------------
  ------------------
 8782|  13.6k|        return unexpected(result.error());
 8783|  13.6k|    }
 8784|  1.09k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.09k|    static_cast<    \
  |  |  929|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.09k|    static_cast<    \
  |  |  929|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  14.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  13.6k|    {
 1447|  13.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  13.6k|    {
  622|  13.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  13.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  13.6k|    {
  685|  13.6k|        scn::detail::construct_at(unexpected_ptr(),
  686|  13.6k|                                  std::forward<Args>(args)...);
  687|  13.6k|        m_has_value = false;
  688|  13.6k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  387|  86.0k|{
  388|  86.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  86.0k|        T(std::forward<Args>(args)...);
  390|  86.0k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  27.2k|    {
  714|  27.2k|        return reinterpret_cast<unexpected<E>*>(
  715|  27.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  27.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  27.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.6k|    {
 1148|  14.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|  1.09k|    {
 5791|  1.09k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5576|  1.11k|    {
 5577|  1.11k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|  1.09k|    {
 1401|  1.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|  1.09k|    {
  612|  1.09k|        construct(std::forward<Args>(args)...);
  613|  1.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|  1.09k|    {
  678|  1.09k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|  1.09k|        m_has_value = true;
  680|  1.09k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|  1.09k|{
  388|  1.09k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  1.09k|        T(std::forward<Args>(args)...);
  390|  1.09k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5782|  1.09k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  2.18k|    {
  702|  2.18k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.18k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  2.18k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5786|  2.18k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5334|  14.6k|    {
 5335|  14.6k|        return m_args;
 5336|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5331|  14.6k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  14.6k|    {
 7932|  14.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  14.6k|    {
  627|  14.6k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 1.09k, False: 13.6k]
  ------------------
  628|  1.09k|            destroy_value();
  629|  1.09k|        }
  630|  13.6k|        else {
  631|  13.6k|            destroy_unexpected();
  632|  13.6k|        }
  633|  14.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  14.6k|    {
  671|  14.6k|        return m_has_value;
  672|  14.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|  1.09k|    {
  692|  1.09k|        scn::detail::destroy_at(value_ptr());
  693|  1.09k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  393|  1.09k|{
  394|  1.09k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  1.09k|        for (auto& elem : *p) {
  396|  1.09k|            scn::detail::destroy_at(&elem);
  397|  1.09k|        }
  398|  1.09k|    }
  399|  1.09k|    else {
  400|  1.09k|        p->~T();
  401|  1.09k|    }
  402|  1.09k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  13.6k|    {
  696|  13.6k|        scn::detail::destroy_at(unexpected_ptr());
  697|  13.6k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  393|  86.0k|{
  394|  86.0k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  86.0k|        for (auto& elem : *p) {
  396|  86.0k|            scn::detail::destroy_at(&elem);
  397|  86.0k|        }
  398|  86.0k|    }
  399|  86.0k|    else {
  400|  86.0k|        p->~T();
  401|  86.0k|    }
  402|  86.0k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8894|  7.34k|{
 8895|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  7.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  7.34k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8827|  7.34k|{
 8828|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  7.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  7.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5356|  14.6k|{
 5357|  14.6k|    detail::check_scan_arg_types<Args...>();
 5358|  14.6k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  14.6k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5095|  44.0k|{
 5096|  44.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  44.0k|                  "Scan argument types must be default constructible");
 5098|  44.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  44.0k|                  "Scan argument types must be Destructible");
 5100|  44.0k|    static_assert(
 5101|  44.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  44.0k|        "Scan argument types must not be references");
 5103|  44.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5309|  14.6k|    {
 5310|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  14.6k|    {
 5321|  14.6k|        return {detail::make_arg<
 5322|  14.6k|            kind, Context,
 5323|  14.6k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  14.6k|                                 typename Context::char_type>::value>(args)...};
 5325|  14.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5130|  14.6k|{
 5131|  14.6k|    return make_value<Context>(value).ref_value;
 5132|  14.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5080|  14.6k|{
 5081|  14.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  14.6k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  14.6k|                                  needs_context_tag>) {
 5085|  14.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  14.6k|    }
 5087|  14.6k|    else {
 5088|  14.6k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  14.6k|            value, context_tag<Context>{}));
 5090|  14.6k|    }
 5091|  14.6k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4919|  14.6k|    {                                                                        \
 4920|  14.6k|        return val;                                                          \
 4921|  14.6k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5049|  44.0k|{
 5050|  44.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  44.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  44.0k|    constexpr bool scannable_char =
 5054|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  44.0k|    static_assert(scannable_char,
 5056|  44.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  44.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  44.0k|    constexpr bool scannable_const =
 5060|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  44.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  44.0k|    constexpr bool scannable_disabled =
 5064|  44.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  44.0k|    static_assert(scannable_disabled,
 5066|  44.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  44.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  44.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  44.0k|    static_assert(
 5071|  44.0k|        scannable,
 5072|  44.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  44.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  44.0k|    return arg_value{arg};
 5076|  44.0k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4862|  44.0k|    {
 4863|  44.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7935|  14.6k|    {
 7936|  14.6k|        return m_str;
 7937|  14.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  14.6k|    {
 5387|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5339|  14.6k|    {
 5340|  14.6k|        return m_argptrs;
 5341|  14.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  14.6k|{
 8781|  14.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.6k, False: 1.09k]
  |  |  ------------------
  ------------------
 8782|  13.6k|        return unexpected(result.error());
 8783|  13.6k|    }
 8784|  1.09k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.09k|    static_cast<    \
  |  |  929|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.09k|    static_cast<    \
  |  |  929|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  14.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  13.6k|    {
 1447|  13.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  13.6k|    {
  622|  13.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  13.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  13.6k|    {
  685|  13.6k|        scn::detail::construct_at(unexpected_ptr(),
  686|  13.6k|                                  std::forward<Args>(args)...);
  687|  13.6k|        m_has_value = false;
  688|  13.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  27.2k|    {
  714|  27.2k|        return reinterpret_cast<unexpected<E>*>(
  715|  27.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  27.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  27.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.6k|    {
 1148|  14.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|  1.09k|    {
 5791|  1.09k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5576|  1.11k|    {
 5577|  1.11k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|  1.09k|    {
 1401|  1.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|  1.09k|    {
  612|  1.09k|        construct(std::forward<Args>(args)...);
  613|  1.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|  1.09k|    {
  678|  1.09k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|  1.09k|        m_has_value = true;
  680|  1.09k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|  1.09k|{
  388|  1.09k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  1.09k|        T(std::forward<Args>(args)...);
  390|  1.09k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5782|  1.09k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  2.18k|    {
  702|  2.18k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.18k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  2.18k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5786|  2.18k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5334|  14.6k|    {
 5335|  14.6k|        return m_args;
 5336|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5331|  14.6k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  14.6k|    {
 7932|  14.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  14.6k|    {
  627|  14.6k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 1.09k, False: 13.6k]
  ------------------
  628|  1.09k|            destroy_value();
  629|  1.09k|        }
  630|  13.6k|        else {
  631|  13.6k|            destroy_unexpected();
  632|  13.6k|        }
  633|  14.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  14.6k|    {
  671|  14.6k|        return m_has_value;
  672|  14.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|  1.09k|    {
  692|  1.09k|        scn::detail::destroy_at(value_ptr());
  693|  1.09k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  393|  1.09k|{
  394|  1.09k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  1.09k|        for (auto& elem : *p) {
  396|  1.09k|            scn::detail::destroy_at(&elem);
  397|  1.09k|        }
  398|  1.09k|    }
  399|  1.09k|    else {
  400|  1.09k|        p->~T();
  401|  1.09k|    }
  402|  1.09k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  13.6k|    {
  696|  13.6k|        scn::detail::destroy_at(unexpected_ptr());
  697|  13.6k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8894|  7.34k|{
 8895|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  7.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  7.34k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  7.34k|{
 8828|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  7.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  7.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5356|  14.6k|{
 5357|  14.6k|    detail::check_scan_arg_types<Args...>();
 5358|  14.6k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  14.6k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5095|  14.6k|{
 5096|  14.6k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  14.6k|                  "Scan argument types must be default constructible");
 5098|  14.6k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  14.6k|                  "Scan argument types must be Destructible");
 5100|  14.6k|    static_assert(
 5101|  14.6k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  14.6k|        "Scan argument types must not be references");
 5103|  14.6k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5309|  14.6k|    {
 5310|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  14.6k|    {
 5321|  14.6k|        return {detail::make_arg<
 5322|  14.6k|            kind, Context,
 5323|  14.6k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  14.6k|                                 typename Context::char_type>::value>(args)...};
 5325|  14.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5130|  14.6k|{
 5131|  14.6k|    return make_value<Context>(value).ref_value;
 5132|  14.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5080|  14.6k|{
 5081|  14.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  14.6k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  14.6k|                                  needs_context_tag>) {
 5085|  14.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  14.6k|    }
 5087|  14.6k|    else {
 5088|  14.6k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  14.6k|            value, context_tag<Context>{}));
 5090|  14.6k|    }
 5091|  14.6k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4919|  14.6k|    {                                                                        \
 4920|  14.6k|        return val;                                                          \
 4921|  14.6k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5049|  14.6k|{
 5050|  14.6k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  14.6k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  14.6k|    constexpr bool scannable_char =
 5054|  14.6k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  14.6k|    static_assert(scannable_char,
 5056|  14.6k|                  "Cannot scan an argument of an unsupported character "
 5057|  14.6k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  14.6k|    constexpr bool scannable_const =
 5060|  14.6k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  14.6k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  14.6k|    constexpr bool scannable_disabled =
 5064|  14.6k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  14.6k|    static_assert(scannable_disabled,
 5066|  14.6k|                  "Cannot scan an argument that has been disabled by "
 5067|  14.6k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  14.6k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  14.6k|    static_assert(
 5071|  14.6k|        scannable,
 5072|  14.6k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  14.6k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  14.6k|    return arg_value{arg};
 5076|  14.6k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4862|  14.6k|    {
 4863|  14.6k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7935|  14.6k|    {
 7936|  14.6k|        return m_str;
 7937|  14.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  14.6k|    {
 5387|  14.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5339|  14.6k|    {
 5340|  14.6k|        return m_argptrs;
 5341|  14.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8780|  14.6k|{
 8781|  14.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.6k, False: 1.09k]
  |  |  ------------------
  ------------------
 8782|  13.6k|        return unexpected(result.error());
 8783|  13.6k|    }
 8784|  1.09k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.09k|    static_cast<    \
  |  |  929|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.09k|    static_cast<    \
  |  |  929|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  14.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1446|  13.6k|    {
 1447|  13.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  13.6k|    {
  443|  13.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.6k|    {
 1148|  14.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5790|  1.09k|    {
 5791|  1.09k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5576|  1.09k|    {
 5577|  1.09k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1400|  1.09k|    {
 1401|  1.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|  1.09k|    {
  433|  1.09k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5334|  14.6k|    {
 5335|  14.6k|        return m_args;
 5336|  14.6k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  14.6k|    {
 7932|  14.6k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  7.34k|{
 8895|  7.34k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  7.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  7.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.34k|    static_cast<    \
  |  |  929|  7.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  7.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5356|  29.3k|{
 5357|  29.3k|    detail::check_scan_arg_types<Args...>();
 5358|  29.3k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  29.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5095|  29.3k|{
 5096|  29.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  29.3k|                  "Scan argument types must be default constructible");
 5098|  29.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  29.3k|                  "Scan argument types must be Destructible");
 5100|  29.3k|    static_assert(
 5101|  29.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  29.3k|        "Scan argument types must not be references");
 5103|  29.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5309|  29.3k|    {
 5310|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  29.3k|    {
 5321|  29.3k|        return {detail::make_arg<
 5322|  29.3k|            kind, Context,
 5323|  29.3k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  29.3k|                                 typename Context::char_type>::value>(args)...};
 5325|  29.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5130|  29.3k|{
 5131|  29.3k|    return make_value<Context>(value).ref_value;
 5132|  29.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5080|  29.3k|{
 5081|  29.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  29.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  29.3k|                                  needs_context_tag>) {
 5085|  29.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  29.3k|    }
 5087|  29.3k|    else {
 5088|  29.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  29.3k|            value, context_tag<Context>{}));
 5090|  29.3k|    }
 5091|  29.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4919|  29.3k|    {                                                                        \
 4920|  29.3k|        return val;                                                          \
 4921|  29.3k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5049|  29.3k|{
 5050|  29.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  29.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  29.3k|    constexpr bool scannable_char =
 5054|  29.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  29.3k|    static_assert(scannable_char,
 5056|  29.3k|                  "Cannot scan an argument of an unsupported character "
 5057|  29.3k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  29.3k|    constexpr bool scannable_const =
 5060|  29.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  29.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  29.3k|    constexpr bool scannable_disabled =
 5064|  29.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  29.3k|    static_assert(scannable_disabled,
 5066|  29.3k|                  "Cannot scan an argument that has been disabled by "
 5067|  29.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  29.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  29.3k|    static_assert(
 5071|  29.3k|        scannable,
 5072|  29.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  29.3k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  29.3k|    return arg_value{arg};
 5076|  29.3k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4862|  29.3k|    {
 4863|  29.3k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8551|   132k|{
 8552|   132k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|   132k|    auto result = vscan_impl(buffer, format, args);
 8555|   132k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 132k, False: 39]
  |  |  ------------------
  ------------------
 8556|   132k|        return unexpected(result.error());
 8557|   132k|    }
 8558|     39|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|     39|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|   132k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4680|   264k|{
 4681|   264k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|   264k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|   264k|                  "\n"
 4685|   264k|                  "Unsupported range type given as input to a scanning "
 4686|   264k|                  "function.\n"
 4687|   264k|                  "A range needs to have a character type (value type) "
 4688|   264k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|   264k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|   264k|                  "to be included.\n"
 4691|   264k|                  "See the scnlib documentation for more details.");
 4692|   264k|    static_assert(
 4693|   264k|        !std::is_same_v<T, custom_char_traits>,
 4694|   264k|        "\n"
 4695|   264k|        "Unsupported range type given as input to a scanning "
 4696|   264k|        "function.\n"
 4697|   264k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|   264k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|   264k|        "not supported.");
 4700|   264k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|   264k|                  "\n"
 4702|   264k|                  "Unsupported range type given as input to a scanning "
 4703|   264k|                  "function.\n"
 4704|   264k|                  "file_marker_found cannot be used as an "
 4705|   264k|                  "source range type to scn::scan.\n"
 4706|   264k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|   264k|                  "and do not provide an explicit source range, "
 4708|   264k|                  "or use scn::scan with a FILE* directly.");
 4709|   264k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|   264k|                  "\n"
 4711|   264k|                  "Unsupported range type given as input to a scanning "
 4712|   264k|                  "function.\n"
 4713|   264k|                  "In order to be scannable, a range needs to satisfy "
 4714|   264k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|   264k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|   264k|                  "\n"
 4717|   264k|                  "Unsupported range type given as input to a scanning "
 4718|   264k|                  "function.\n"
 4719|   264k|                  "A range needs to model forward_range and have a valid "
 4720|   264k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|   264k|                  "Examples of scannable ranges are std::string, "
 4722|   264k|                  "std::string_view, "
 4723|   264k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|   264k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|   264k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|   264k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4572|   264k|{
 4573|   264k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4573:19): [Folded - Ignored]
  ------------------
 4574|   264k|        return r;
 4575|       |        // return make_string_scan_buffer(r);
 4576|   264k|    }
 4577|   264k|    else {
 4578|   264k|        return invalid_char_type{};
 4579|   264k|    }
 4580|   264k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|   264k|    {
 1447|   264k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   264k|    {
  443|   264k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   264k|    {
 1148|   264k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5883|     78|{
 5884|     78|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|     78|                      ranges::iterator_t<SourceRange>>) {
 5886|     78|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|     78|    }
 5888|     78|    else {
 5889|     78|        auto it = ranges::begin(source);
 5890|     78|        while (n > 0) {
 5891|     78|            --n;
 5892|     78|            ++it;
 5893|     78|        }
 5894|     78|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|     78|    }
 5896|     78|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|     78|    {
 2695|     78|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|     78|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|     78|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|     78|    {
 2676|     78|        return decay_copy(t.begin());
 2677|     78|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1919|  6.99k|{
 1920|  6.99k|    return SCN_FWD(t);
  ------------------
  |  |  930|  6.99k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  6.99k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5870|     78|{
 5871|     78|    return ranges::end(source);
 5872|     78|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|     78|    {
 2752|     78|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|     78|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|     78|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|     78|    {
 2734|     78|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|     78|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|     78|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3286|   367k|    {
 3287|   367k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|     78|    {
 1401|     78|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|     78|    {
  433|     78|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7935|  29.3k|    {
 7936|  29.3k|        return m_str;
 7937|  29.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  29.3k|    {
 5387|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5339|  29.3k|    {
 5340|  29.3k|        return m_argptrs;
 5341|  29.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5438|   264k|    {
 5439|   264k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  29.3k|{
 8781|  29.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.3k, False: 12]
  |  |  ------------------
  ------------------
 8782|  29.3k|        return unexpected(result.error());
 8783|  29.3k|    }
 8784|     12|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     12|    static_cast<    \
  |  |  929|     12|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     12|    static_cast<    \
  |  |  929|     12|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  29.3k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1568|   264k|    {
 1569|   264k|        return has_value();
 1570|   264k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   529k|    {
  481|   529k|        return m_has_value;
  482|   529k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1574|   264k|    {
 1575|   264k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   264k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   264k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   264k|        return this->get_unexpected().error();
 1577|   264k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   264k|    {
  464|   264k|        return m_unexpected;
  465|   264k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  29.3k|    {
 1447|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  29.3k|    {
  443|  29.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  29.3k|    {
 1148|  29.3k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|     78|    {
 1624|     78|        return value();
 1625|     78|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|     78|    {
 1598|     78|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|     78|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     78|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|     78|        return this->get_value();
 1600|     78|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|     78|    {
  447|     78|        return m_value;
  448|     78|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5790|     12|    {
 5791|     12|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5641|     78|    {
 5642|     78|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5576|     12|    {
 5577|     12|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|     12|    {
 1401|     12|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|     12|    {
  433|     12|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5334|  29.3k|    {
 5335|  29.3k|        return m_args;
 5336|  29.3k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7656|   264k|{
 7657|   264k|    return s;
 7658|   264k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7628|   264k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  29.3k|    {
 7932|  29.3k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8567|   132k|{
 8568|   132k|#if !SCN_DISABLE_LOCALE
 8569|   132k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|   132k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|   132k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|   132k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|   132k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 132k, False: 39]
  |  |  ------------------
  ------------------
 8576|   132k|        return unexpected(result.error());
 8577|   132k|    }
 8578|     39|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|     39|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|   132k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5356|  29.3k|{
 5357|  29.3k|    detail::check_scan_arg_types<Args...>();
 5358|  29.3k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  29.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5309|  29.3k|    {
 5310|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  29.3k|    {
 5321|  29.3k|        return {detail::make_arg<
 5322|  29.3k|            kind, Context,
 5323|  29.3k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  29.3k|                                 typename Context::char_type>::value>(args)...};
 5325|  29.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5130|  29.3k|{
 5131|  29.3k|    return make_value<Context>(value).ref_value;
 5132|  29.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5080|  29.3k|{
 5081|  29.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  29.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  29.3k|                                  needs_context_tag>) {
 5085|  29.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  29.3k|    }
 5087|  29.3k|    else {
 5088|  29.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  29.3k|            value, context_tag<Context>{}));
 5090|  29.3k|    }
 5091|  29.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4919|  29.3k|    {                                                                        \
 4920|  29.3k|        return val;                                                          \
 4921|  29.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7935|  29.3k|    {
 7936|  29.3k|        return m_str;
 7937|  29.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  29.3k|    {
 5387|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5339|  29.3k|    {
 5340|  29.3k|        return m_argptrs;
 5341|  29.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  29.3k|{
 8781|  29.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.3k, False: 0]
  |  |  ------------------
  ------------------
 8782|  29.3k|        return unexpected(result.error());
 8783|  29.3k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  29.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  29.3k|    {
 1447|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  29.3k|    {
  443|  29.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  29.3k|    {
 1148|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5334|  29.3k|    {
 5335|  29.3k|        return m_args;
 5336|  29.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  29.3k|    {
 7932|  29.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5356|  29.3k|{
 5357|  29.3k|    detail::check_scan_arg_types<Args...>();
 5358|  29.3k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  29.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5309|  29.3k|    {
 5310|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  29.3k|    {
 5321|  29.3k|        return {detail::make_arg<
 5322|  29.3k|            kind, Context,
 5323|  29.3k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  29.3k|                                 typename Context::char_type>::value>(args)...};
 5325|  29.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5130|  29.3k|{
 5131|  29.3k|    return make_value<Context>(value).ref_value;
 5132|  29.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5080|  29.3k|{
 5081|  29.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  29.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  29.3k|                                  needs_context_tag>) {
 5085|  29.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  29.3k|    }
 5087|  29.3k|    else {
 5088|  29.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  29.3k|            value, context_tag<Context>{}));
 5090|  29.3k|    }
 5091|  29.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4919|  29.3k|    {                                                                        \
 4920|  29.3k|        return val;                                                          \
 4921|  29.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7935|  29.3k|    {
 7936|  29.3k|        return m_str;
 7937|  29.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  29.3k|    {
 5387|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5339|  29.3k|    {
 5340|  29.3k|        return m_argptrs;
 5341|  29.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  29.3k|{
 8781|  29.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.3k, False: 0]
  |  |  ------------------
  ------------------
 8782|  29.3k|        return unexpected(result.error());
 8783|  29.3k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  29.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  29.3k|    {
 1447|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  29.3k|    {
  443|  29.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  29.3k|    {
 1148|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5334|  29.3k|    {
 5335|  29.3k|        return m_args;
 5336|  29.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  29.3k|    {
 7932|  29.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5356|  29.3k|{
 5357|  29.3k|    detail::check_scan_arg_types<Args...>();
 5358|  29.3k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  29.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5309|  29.3k|    {
 5310|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  29.3k|    {
 5321|  29.3k|        return {detail::make_arg<
 5322|  29.3k|            kind, Context,
 5323|  29.3k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  29.3k|                                 typename Context::char_type>::value>(args)...};
 5325|  29.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5130|  29.3k|{
 5131|  29.3k|    return make_value<Context>(value).ref_value;
 5132|  29.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5080|  29.3k|{
 5081|  29.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  29.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  29.3k|                                  needs_context_tag>) {
 5085|  29.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  29.3k|    }
 5087|  29.3k|    else {
 5088|  29.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  29.3k|            value, context_tag<Context>{}));
 5090|  29.3k|    }
 5091|  29.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4919|  29.3k|    {                                                                        \
 4920|  29.3k|        return val;                                                          \
 4921|  29.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7935|  29.3k|    {
 7936|  29.3k|        return m_str;
 7937|  29.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  29.3k|    {
 5387|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5339|  29.3k|    {
 5340|  29.3k|        return m_argptrs;
 5341|  29.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  29.3k|{
 8781|  29.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.3k, False: 0]
  |  |  ------------------
  ------------------
 8782|  29.3k|        return unexpected(result.error());
 8783|  29.3k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  29.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  29.3k|    {
 1447|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  29.3k|    {
  443|  29.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  29.3k|    {
 1148|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5334|  29.3k|    {
 5335|  29.3k|        return m_args;
 5336|  29.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  29.3k|    {
 7932|  29.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5356|  29.3k|{
 5357|  29.3k|    detail::check_scan_arg_types<Args...>();
 5358|  29.3k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  29.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5309|  29.3k|    {
 5310|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  29.3k|    {
 5321|  29.3k|        return {detail::make_arg<
 5322|  29.3k|            kind, Context,
 5323|  29.3k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  29.3k|                                 typename Context::char_type>::value>(args)...};
 5325|  29.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5130|  29.3k|{
 5131|  29.3k|    return make_value<Context>(value).ref_value;
 5132|  29.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5080|  29.3k|{
 5081|  29.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  29.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  29.3k|                                  needs_context_tag>) {
 5085|  29.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  29.3k|    }
 5087|  29.3k|    else {
 5088|  29.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  29.3k|            value, context_tag<Context>{}));
 5090|  29.3k|    }
 5091|  29.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4919|  29.3k|    {                                                                        \
 4920|  29.3k|        return val;                                                          \
 4921|  29.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7935|  29.3k|    {
 7936|  29.3k|        return m_str;
 7937|  29.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  29.3k|    {
 5387|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5339|  29.3k|    {
 5340|  29.3k|        return m_argptrs;
 5341|  29.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  29.3k|{
 8781|  29.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.3k, False: 0]
  |  |  ------------------
  ------------------
 8782|  29.3k|        return unexpected(result.error());
 8783|  29.3k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  29.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  29.3k|    {
 1447|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  29.3k|    {
  443|  29.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  29.3k|    {
 1148|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5334|  29.3k|    {
 5335|  29.3k|        return m_args;
 5336|  29.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  29.3k|    {
 7932|  29.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5356|  29.3k|{
 5357|  29.3k|    detail::check_scan_arg_types<Args...>();
 5358|  29.3k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  29.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5309|  29.3k|    {
 5310|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5320|  29.3k|    {
 5321|  29.3k|        return {detail::make_arg<
 5322|  29.3k|            kind, Context,
 5323|  29.3k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  29.3k|                                 typename Context::char_type>::value>(args)...};
 5325|  29.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5130|  29.3k|{
 5131|  29.3k|    return make_value<Context>(value).ref_value;
 5132|  29.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5080|  29.3k|{
 5081|  29.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  29.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  29.3k|                                  needs_context_tag>) {
 5085|  29.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  29.3k|    }
 5087|  29.3k|    else {
 5088|  29.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  29.3k|            value, context_tag<Context>{}));
 5090|  29.3k|    }
 5091|  29.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4919|  29.3k|    {                                                                        \
 4920|  29.3k|        return val;                                                          \
 4921|  29.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7935|  29.3k|    {
 7936|  29.3k|        return m_str;
 7937|  29.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  29.3k|    {
 5387|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5339|  29.3k|    {
 5340|  29.3k|        return m_argptrs;
 5341|  29.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8780|  29.3k|{
 8781|  29.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.3k, False: 0]
  |  |  ------------------
  ------------------
 8782|  29.3k|        return unexpected(result.error());
 8783|  29.3k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  29.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  29.3k|    {
 1447|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  442|  29.3k|    {
  443|  29.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  29.3k|    {
 1148|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5334|  29.3k|    {
 5335|  29.3k|        return m_args;
 5336|  29.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  29.3k|    {
 7932|  29.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5356|  29.3k|{
 5357|  29.3k|    detail::check_scan_arg_types<Args...>();
 5358|  29.3k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  29.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5309|  29.3k|    {
 5310|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  29.3k|    {
 5321|  29.3k|        return {detail::make_arg<
 5322|  29.3k|            kind, Context,
 5323|  29.3k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  29.3k|                                 typename Context::char_type>::value>(args)...};
 5325|  29.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5130|  29.3k|{
 5131|  29.3k|    return make_value<Context>(value).ref_value;
 5132|  29.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5080|  29.3k|{
 5081|  29.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  29.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  29.3k|                                  needs_context_tag>) {
 5085|  29.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  29.3k|    }
 5087|  29.3k|    else {
 5088|  29.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  29.3k|            value, context_tag<Context>{}));
 5090|  29.3k|    }
 5091|  29.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4919|  29.3k|    {                                                                        \
 4920|  29.3k|        return val;                                                          \
 4921|  29.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7935|  29.3k|    {
 7936|  29.3k|        return m_str;
 7937|  29.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  29.3k|    {
 5387|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5339|  29.3k|    {
 5340|  29.3k|        return m_argptrs;
 5341|  29.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  29.3k|{
 8781|  29.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.3k, False: 22]
  |  |  ------------------
  ------------------
 8782|  29.3k|        return unexpected(result.error());
 8783|  29.3k|    }
 8784|     22|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     22|    static_cast<    \
  |  |  929|     22|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     22|    static_cast<    \
  |  |  929|     22|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  29.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  29.3k|    {
 1447|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  29.3k|    {
  622|  29.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  29.3k|    {
  685|  29.3k|        scn::detail::construct_at(unexpected_ptr(),
  686|  29.3k|                                  std::forward<Args>(args)...);
  687|  29.3k|        m_has_value = false;
  688|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  58.7k|    {
  714|  58.7k|        return reinterpret_cast<unexpected<E>*>(
  715|  58.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  58.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  58.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  29.3k|    {
 1148|  29.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|     22|    {
 5791|     22|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|     22|    {
 1401|     22|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|     22|    {
  612|     22|        construct(std::forward<Args>(args)...);
  613|     22|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|     22|    {
  678|     22|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|     22|        m_has_value = true;
  680|     22|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|     22|{
  388|     22|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|     22|        T(std::forward<Args>(args)...);
  390|     22|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5782|     22|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|     44|    {
  702|     44|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|     44|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|     44|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5786|     44|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5334|  29.3k|    {
 5335|  29.3k|        return m_args;
 5336|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5331|  29.3k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  29.3k|    {
 7932|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  29.3k|    {
  627|  29.3k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 22, False: 29.3k]
  ------------------
  628|     22|            destroy_value();
  629|     22|        }
  630|  29.3k|        else {
  631|  29.3k|            destroy_unexpected();
  632|  29.3k|        }
  633|  29.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  29.3k|    {
  671|  29.3k|        return m_has_value;
  672|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|     22|    {
  692|     22|        scn::detail::destroy_at(value_ptr());
  693|     22|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  393|     22|{
  394|     22|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|     22|        for (auto& elem : *p) {
  396|     22|            scn::detail::destroy_at(&elem);
  397|     22|        }
  398|     22|    }
  399|     22|    else {
  400|     22|        p->~T();
  401|     22|    }
  402|     22|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  29.3k|    {
  696|  29.3k|        scn::detail::destroy_at(unexpected_ptr());
  697|  29.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5356|  29.3k|{
 5357|  29.3k|    detail::check_scan_arg_types<Args...>();
 5358|  29.3k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  29.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5309|  29.3k|    {
 5310|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  29.3k|    {
 5321|  29.3k|        return {detail::make_arg<
 5322|  29.3k|            kind, Context,
 5323|  29.3k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  29.3k|                                 typename Context::char_type>::value>(args)...};
 5325|  29.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5130|  29.3k|{
 5131|  29.3k|    return make_value<Context>(value).ref_value;
 5132|  29.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5080|  29.3k|{
 5081|  29.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  29.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  29.3k|                                  needs_context_tag>) {
 5085|  29.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  29.3k|    }
 5087|  29.3k|    else {
 5088|  29.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  29.3k|            value, context_tag<Context>{}));
 5090|  29.3k|    }
 5091|  29.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4919|  29.3k|    {                                                                        \
 4920|  29.3k|        return val;                                                          \
 4921|  29.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7935|  29.3k|    {
 7936|  29.3k|        return m_str;
 7937|  29.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  29.3k|    {
 5387|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5339|  29.3k|    {
 5340|  29.3k|        return m_argptrs;
 5341|  29.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  29.3k|{
 8781|  29.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.3k, False: 22]
  |  |  ------------------
  ------------------
 8782|  29.3k|        return unexpected(result.error());
 8783|  29.3k|    }
 8784|     22|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     22|    static_cast<    \
  |  |  929|     22|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     22|    static_cast<    \
  |  |  929|     22|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  29.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  29.3k|    {
 1447|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  29.3k|    {
  622|  29.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  29.3k|    {
  685|  29.3k|        scn::detail::construct_at(unexpected_ptr(),
  686|  29.3k|                                  std::forward<Args>(args)...);
  687|  29.3k|        m_has_value = false;
  688|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  58.7k|    {
  714|  58.7k|        return reinterpret_cast<unexpected<E>*>(
  715|  58.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  58.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  58.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  29.3k|    {
 1148|  29.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|     22|    {
 5791|     22|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|     22|    {
 1401|     22|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|     22|    {
  612|     22|        construct(std::forward<Args>(args)...);
  613|     22|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|     22|    {
  678|     22|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|     22|        m_has_value = true;
  680|     22|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|     22|{
  388|     22|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|     22|        T(std::forward<Args>(args)...);
  390|     22|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5782|     22|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|     44|    {
  702|     44|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|     44|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|     44|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5786|     44|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5334|  29.3k|    {
 5335|  29.3k|        return m_args;
 5336|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5331|  29.3k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  29.3k|    {
 7932|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  29.3k|    {
  627|  29.3k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 22, False: 29.3k]
  ------------------
  628|     22|            destroy_value();
  629|     22|        }
  630|  29.3k|        else {
  631|  29.3k|            destroy_unexpected();
  632|  29.3k|        }
  633|  29.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  29.3k|    {
  671|  29.3k|        return m_has_value;
  672|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|     22|    {
  692|     22|        scn::detail::destroy_at(value_ptr());
  693|     22|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  393|     22|{
  394|     22|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|     22|        for (auto& elem : *p) {
  396|     22|            scn::detail::destroy_at(&elem);
  397|     22|        }
  398|     22|    }
  399|     22|    else {
  400|     22|        p->~T();
  401|     22|    }
  402|     22|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  29.3k|    {
  696|  29.3k|        scn::detail::destroy_at(unexpected_ptr());
  697|  29.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5356|  29.3k|{
 5357|  29.3k|    detail::check_scan_arg_types<Args...>();
 5358|  29.3k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  29.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5095|  29.3k|{
 5096|  29.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  29.3k|                  "Scan argument types must be default constructible");
 5098|  29.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  29.3k|                  "Scan argument types must be Destructible");
 5100|  29.3k|    static_assert(
 5101|  29.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  29.3k|        "Scan argument types must not be references");
 5103|  29.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5309|  29.3k|    {
 5310|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  29.3k|    {
 5321|  29.3k|        return {detail::make_arg<
 5322|  29.3k|            kind, Context,
 5323|  29.3k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  29.3k|                                 typename Context::char_type>::value>(args)...};
 5325|  29.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5130|  29.3k|{
 5131|  29.3k|    return make_value<Context>(value).ref_value;
 5132|  29.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5080|  29.3k|{
 5081|  29.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  29.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  29.3k|                                  needs_context_tag>) {
 5085|  29.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  29.3k|    }
 5087|  29.3k|    else {
 5088|  29.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  29.3k|            value, context_tag<Context>{}));
 5090|  29.3k|    }
 5091|  29.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4919|  29.3k|    {                                                                        \
 4920|  29.3k|        return val;                                                          \
 4921|  29.3k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5049|  29.3k|{
 5050|  29.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  29.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  29.3k|    constexpr bool scannable_char =
 5054|  29.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  29.3k|    static_assert(scannable_char,
 5056|  29.3k|                  "Cannot scan an argument of an unsupported character "
 5057|  29.3k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  29.3k|    constexpr bool scannable_const =
 5060|  29.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  29.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  29.3k|    constexpr bool scannable_disabled =
 5064|  29.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  29.3k|    static_assert(scannable_disabled,
 5066|  29.3k|                  "Cannot scan an argument that has been disabled by "
 5067|  29.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  29.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  29.3k|    static_assert(
 5071|  29.3k|        scannable,
 5072|  29.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  29.3k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  29.3k|    return arg_value{arg};
 5076|  29.3k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4862|  29.3k|    {
 4863|  29.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7935|  29.3k|    {
 7936|  29.3k|        return m_str;
 7937|  29.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  29.3k|    {
 5387|  29.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5339|  29.3k|    {
 5340|  29.3k|        return m_argptrs;
 5341|  29.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8780|  29.3k|{
 8781|  29.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.3k, False: 22]
  |  |  ------------------
  ------------------
 8782|  29.3k|        return unexpected(result.error());
 8783|  29.3k|    }
 8784|     22|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     22|    static_cast<    \
  |  |  929|     22|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     22|    static_cast<    \
  |  |  929|     22|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  29.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1446|  29.3k|    {
 1447|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  29.3k|    {
  443|  29.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  29.3k|    {
 1148|  29.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5790|     22|    {
 5791|     22|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5576|     22|    {
 5577|     22|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1400|     22|    {
 1401|     22|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|     22|    {
  433|     22|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5334|  29.3k|    {
 5335|  29.3k|        return m_args;
 5336|  29.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  29.3k|    {
 7932|  29.3k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3538|   728k|    {
 3539|   728k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   728k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3540|   728k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3544|  8.26M|    {
 3545|  8.26M|        return m_code == good;
 3546|  8.26M|    }
_ZNK3scn2v310scan_error4codeEv:
 3555|   101k|    {
 3556|   101k|        return m_code;
 3557|   101k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6141|  5.84k|    {
 6142|  5.84k|        return m_size;
 6143|  5.84k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6182|  7.40k|    {
 6183|  7.40k|        SCN_GCC_COMPAT_PUSH
 6184|  7.40k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6185|  7.40k|        switch (type) {
 6186|  3.23k|            case presentation_type::none:
  ------------------
  |  Branch (6186:13): [True: 3.23k, False: 4.17k]
  ------------------
 6187|  3.23k|                return 10;
 6188|    110|            case presentation_type::int_generic:
  ------------------
  |  Branch (6188:13): [True: 110, False: 7.29k]
  ------------------
 6189|    110|                return 0;
 6190|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6190:13): [True: 0, False: 7.40k]
  ------------------
 6191|      0|                return arbitrary_base;
 6192|       |
 6193|    132|            case presentation_type::int_binary:
  ------------------
  |  Branch (6193:13): [True: 132, False: 7.27k]
  ------------------
 6194|    132|                return 2;
 6195|     40|            case presentation_type::int_octal:
  ------------------
  |  Branch (6195:13): [True: 40, False: 7.36k]
  ------------------
 6196|     40|                return 8;
 6197|    104|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6197:13): [True: 104, False: 7.30k]
  ------------------
 6198|    168|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6198:13): [True: 64, False: 7.34k]
  ------------------
 6199|    168|                return 10;
 6200|  3.72k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6200:13): [True: 3.72k, False: 3.68k]
  ------------------
 6201|  3.72k|                return 16;
 6202|       |
 6203|      0|            default:
  ------------------
  |  Branch (6203:13): [True: 0, False: 7.40k]
  ------------------
 6204|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6205|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6206|  7.40k|        }
 6207|  7.40k|        SCN_GCC_COMPAT_POP
 6208|  7.40k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6220|   111k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6223|  14.8k|    {
 6224|  14.8k|        m_specs.align = align;
 6225|  14.8k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6232|    416|    {
 6233|    416|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|    416|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6233:23): [Folded - Ignored]
  ------------------
 6234|    416|            m_specs.localized = true;
 6235|    416|        }
 6236|      0|        else {
 6237|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6238|      0|        }
 6239|    416|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6242|  15.0k|    {
 6243|  15.0k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6243:13): [True: 0, False: 15.0k]
  |  Branch (6243:39): [True: 0, False: 0]
  ------------------
 6244|       |            // clang-format off
 6245|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6246|       |            // clang-format on
 6247|      0|        }
 6248|       |
 6249|  15.0k|        m_specs.width = width;
 6250|  15.0k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6252|  10.1k|    {
 6253|  10.1k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6253:13): [True: 150, False: 9.96k]
  ------------------
 6254|       |            // clang-format off
 6255|    150|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6256|       |            // clang-format on
 6257|    150|        }
 6258|       |
 6259|  9.96k|        m_specs.precision = prec;
 6260|  9.96k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6263|   117k|    {
 6264|   117k|        m_specs.type = type;
 6265|   117k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6268|  5.47M|    {
 6269|  5.47M|        const auto cp_value = static_cast<unsigned>(cp);
 6270|  5.47M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  5.47M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.94M, False: 527k]
  |  |  ------------------
  ------------------
 6271|  4.94M|            m_specs.charset_literals[cp_value / 8] |=
 6272|  4.94M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6273|  4.94M|        }
 6274|   527k|        else {
 6275|   527k|            m_specs.charset_has_nonascii = true;
 6276|   527k|        }
 6277|  5.47M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6280|  19.1k|    {
 6281|  19.1k|        const auto begin_value = static_cast<unsigned>(begin);
 6282|  19.1k|        const auto end_value = static_cast<unsigned>(end);
 6283|  19.1k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6284|       |
 6285|  19.1k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  19.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.5k, False: 7.62k]
  |  |  ------------------
  ------------------
 6286|       |            // No need to bit-twiddle with a mask, because with the
 6287|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6288|  11.5k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  11.5k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6289|   756k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6289:40): [True: 744k, False: 11.5k]
  ------------------
 6290|   744k|                m_specs.charset_literals[v / 8] |=
 6291|   744k|                    static_cast<unsigned char>(1ul << (v % 8));
 6292|   744k|            }
 6293|  11.5k|        }
 6294|  7.62k|        else {
 6295|  7.62k|            m_specs.charset_has_nonascii = true;
 6296|  7.62k|        }
 6297|  19.1k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6300|  8.06k|    {
 6301|  8.06k|        m_specs.charset_is_inverted = true;
 6302|  8.06k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6319|  52.5k|    {
 6320|  52.5k|        m_specs.regexp_flags = flags;
 6321|  52.5k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6325|  18.3k|    {
 6326|  18.3k|        SCN_UNLIKELY_ATTR
 6327|  18.3k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6328|  18.3k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6336|  5.62M|    {
 6337|  5.62M|        return static_cast<bool>(m_error);
 6338|  5.62M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3579|   101k|{
 3580|   101k|    return a.code() == b;
 3581|   101k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3583|   101k|{
 3584|   101k|    return !(a == b);
 3585|   101k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3878|   604k|{
 3879|   604k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   604k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   604k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3880|       |
 3881|   604k|    const auto is_trailing_code_unit = [](char ch) {
 3882|   604k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3883|   604k|    };
 3884|       |
 3885|   604k|    if (input.size() == 1) {
  ------------------
  |  Branch (3885:9): [True: 552k, False: 52.0k]
  ------------------
 3886|   552k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   552k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   552k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3887|   552k|        return static_cast<char32_t>(input[0]);
 3888|   552k|    }
 3889|       |
 3890|  52.0k|    if (input.size() == 2) {
  ------------------
  |  Branch (3890:9): [True: 49.3k, False: 2.63k]
  ------------------
 3891|  49.3k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  49.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3892|  49.3k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  49.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3893|       |
 3894|  49.3k|        char32_t cp{};
 3895|  49.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3896|  49.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3897|  49.3k|        return cp;
 3898|  49.3k|    }
 3899|       |
 3900|  2.63k|    if (input.size() == 3) {
  ------------------
  |  Branch (3900:9): [True: 1.68k, False: 956]
  ------------------
 3901|  1.68k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|  1.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3902|  1.68k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  1.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3903|  1.68k|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|  1.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3904|       |
 3905|  1.68k|        char32_t cp{};
 3906|  1.68k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3907|  1.68k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3908|  1.68k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3909|  1.68k|        return cp;
 3910|  1.68k|    }
 3911|       |
 3912|    956|    if (input.size() == 4) {
  ------------------
  |  Branch (3912:9): [True: 956, False: 0]
  ------------------
 3913|    956|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    956|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    956|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3914|    956|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    956|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    956|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3915|    956|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    956|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    956|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3916|    956|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    956|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    956|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3917|    956|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    956|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    956|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3918|       |
 3919|    956|        char32_t cp{};
 3920|    956|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3921|    956|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3922|    956|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3923|    956|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3924|    956|        return cp;
 3925|    956|    }
 3926|       |
 3927|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3928|       |    // gcc 7 thinks we'll get here, even when we won't
 3929|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3930|      0|#endif
 3931|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3932|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6071|  81.7k|{
 6072|  81.7k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6073|  81.7k|                                    static_cast<unsigned>(b));
 6074|  81.7k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6076|  12.1k|{
 6077|  12.1k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6078|  12.1k|                                    static_cast<unsigned>(b));
 6079|  12.1k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6091|  12.1k|{
 6092|  12.1k|    return a = a | b;
 6093|  12.1k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7023|  1.03k|{
 7024|  1.03k|    switch (type) {
 7025|     94|        case arg_type::none_type:
  ------------------
  |  Branch (7025:9): [True: 94, False: 936]
  ------------------
 7026|     94|            return arg_type_category::none;
 7027|       |
 7028|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7028:9): [True: 0, False: 1.03k]
  ------------------
 7029|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7029:9): [True: 0, False: 1.03k]
  ------------------
 7030|    104|        case arg_type::int_type:
  ------------------
  |  Branch (7030:9): [True: 104, False: 926]
  ------------------
 7031|    104|        case arg_type::long_type:
  ------------------
  |  Branch (7031:9): [True: 0, False: 1.03k]
  ------------------
 7032|    104|        case arg_type::llong_type:
  ------------------
  |  Branch (7032:9): [True: 0, False: 1.03k]
  ------------------
 7033|    104|            return arg_type_category::integer;
 7034|       |
 7035|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7035:9): [True: 0, False: 1.03k]
  ------------------
 7036|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7036:9): [True: 0, False: 1.03k]
  ------------------
 7037|    104|        case arg_type::uint_type:
  ------------------
  |  Branch (7037:9): [True: 104, False: 926]
  ------------------
 7038|    104|        case arg_type::ulong_type:
  ------------------
  |  Branch (7038:9): [True: 0, False: 1.03k]
  ------------------
 7039|    104|        case arg_type::ullong_type:
  ------------------
  |  Branch (7039:9): [True: 0, False: 1.03k]
  ------------------
 7040|    104|            return arg_type_category::unsigned_integer;
 7041|       |
 7042|    104|        case arg_type::pointer_type:
  ------------------
  |  Branch (7042:9): [True: 104, False: 926]
  ------------------
 7043|    104|            return arg_type_category::pointer;
 7044|    104|        case arg_type::bool_type:
  ------------------
  |  Branch (7044:9): [True: 104, False: 926]
  ------------------
 7045|    104|            return arg_type_category::boolean;
 7046|     84|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7046:9): [True: 84, False: 946]
  ------------------
 7047|    104|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7047:9): [True: 20, False: 1.01k]
  ------------------
 7048|    104|        case arg_type::code_point_type:
  ------------------
  |  Branch (7048:9): [True: 0, False: 1.03k]
  ------------------
 7049|    104|            return arg_type_category::character;
 7050|       |
 7051|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7051:9): [True: 0, False: 1.03k]
  ------------------
 7052|    104|        case arg_type::double_type:
  ------------------
  |  Branch (7052:9): [True: 104, False: 926]
  ------------------
 7053|    104|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7053:9): [True: 0, False: 1.03k]
  ------------------
 7054|    104|            return arg_type_category::floating;
 7055|       |
 7056|     84|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7056:9): [True: 84, False: 946]
  ------------------
 7057|    188|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7057:9): [True: 104, False: 926]
  ------------------
 7058|    208|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7058:9): [True: 20, False: 1.01k]
  ------------------
 7059|    312|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7059:9): [True: 104, False: 926]
  ------------------
 7060|    312|            return arg_type_category::string;
 7061|       |
 7062|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7062:9): [True: 0, False: 1.03k]
  ------------------
 7063|      0|            return arg_type_category::custom;
 7064|       |
 7065|      0|            SCN_CLANG_PUSH
 7066|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7067|      0|        default:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.03k]
  ------------------
 7068|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7069|  1.03k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7070|  1.03k|            SCN_CLANG_POP
 7071|  1.03k|    }
 7072|       |
 7073|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7074|  1.03k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3624|  1.75k|{
 3625|  1.75k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  1.75k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7109|  22.1k|{
 7110|  22.1k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  22.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.5k, False: 3.60k]
  |  |  ------------------
  ------------------
 7111|  18.5k|        return handler.on_error("Invalid type specifier for integer type");
 7112|  18.5k|    }
 7113|  3.60k|    if (specs.localized) {
  ------------------
  |  Branch (7113:9): [True: 120, False: 3.48k]
  ------------------
 7114|    120|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 108]
  |  |  ------------------
  ------------------
 7115|       |            // clang-format off
 7116|     12|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7117|       |            // clang-format on
 7118|     12|            return;
 7119|     12|        }
 7120|    108|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 108]
  |  |  ------------------
  ------------------
 7121|       |            // clang-format off
 7122|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7123|       |            // clang-format on
 7124|      0|        }
 7125|    108|    }
 7126|  3.60k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1919|    372|{
 1920|    372|    return SCN_FWD(t);
  ------------------
  |  |  930|    372|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|    372|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3624|  4.45k|{
 3625|  4.45k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  4.45k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7153|  11.0k|{
 7154|  11.0k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7154:9): [True: 9.47k, False: 1.61k]
  ------------------
 7155|  11.0k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7155:10): [True: 184, False: 9.29k]
  ------------------
 7156|  9.47k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7156:10): [True: 9.12k, False: 166]
  ------------------
 7157|  9.31k|        SCN_UNLIKELY_ATTR
 7158|  9.31k|        return handler.on_error("Invalid type specifier for float type");
 7159|  9.31k|    }
 7160|  11.0k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  480|  34.7k|    {
  481|  34.7k|        return m_has_value;
  482|  34.7k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1568|  17.3k|    {
 1569|  17.3k|        return has_value();
 1570|  17.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  446|  17.3k|    {
  447|  17.3k|        return m_value;
  448|  17.3k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1597|  17.3k|    {
 1598|  17.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  17.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  17.3k|        return this->get_value();
 1600|  17.3k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1633|  17.3k|    {
 1634|  17.3k|        return std::move(value());
 1635|  17.3k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3624|  10.6k|{
 3625|  10.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  10.6k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3624|  4.12k|{
 3625|  4.12k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  4.12k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3624|    288|{
 3625|    288|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|    288|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3624|     54|{
 3625|     54|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     54|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|     54|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3624|  2.22k|{
 3625|  2.22k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  2.22k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7165|  33.0k|{
 7166|  33.0k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7166:9): [True: 4.73k, False: 28.3k]
  ------------------
 7167|  33.0k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7167:9): [True: 522, False: 27.7k]
  ------------------
 7168|  33.0k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7168:9): [True: 8.74k, False: 19.0k]
  ------------------
 7169|  33.0k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7169:9): [True: 15.2k, False: 3.77k]
  ------------------
 7170|  33.0k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7170:9): [True: 2.18k, False: 1.59k]
  ------------------
 7171|  31.4k|        return;
 7172|  31.4k|    }
 7173|  1.59k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7173:9): [True: 630, False: 960]
  ------------------
 7174|    630|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 414, False: 216]
  |  |  ------------------
  ------------------
 7175|       |            // clang-format off
 7176|    414|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7177|       |            // clang-format on
 7178|    414|        }
 7179|    216|        return;
 7180|    630|    }
 7181|    960|    SCN_UNLIKELY_ATTR
 7182|    960|    handler.on_error("Invalid type specifier for string");
 7183|    960|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3624|  7.69k|{
 3625|  7.69k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  7.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  7.69k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3624|     44|{
 3625|     44|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|     44|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7199|  11.0k|{
 7200|  11.0k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7200:9): [True: 9.47k, False: 1.61k]
  ------------------
 7201|  11.0k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7201:9): [True: 9.30k, False: 178]
  ------------------
 7202|  11.0k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7202:9): [True: 9.26k, False: 38]
  ------------------
 7203|  11.0k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7203:9): [True: 9.24k, False: 22]
  ------------------
 7204|  11.0k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7204:9): [True: 9.19k, False: 50]
  ------------------
 7205|  11.0k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7205:9): [True: 9.16k, False: 22]
  ------------------
 7206|  11.0k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7206:9): [True: 9.15k, False: 14]
  ------------------
 7207|  11.0k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7207:9): [True: 9.11k, False: 36]
  ------------------
 7208|  9.11k|        SCN_UNLIKELY_ATTR
 7209|  9.11k|        return handler.on_error("Invalid type specifier for boolean");
 7210|  9.11k|    }
 7211|  11.0k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7131|  11.0k|{
 7132|  11.0k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7132:9): [True: 9.27k, False: 1.74k]
  ------------------
 7133|  11.0k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7133:9): [True: 0, False: 1.74k]
  ------------------
 7134|  9.27k|        SCN_UNLIKELY_ATTR
 7135|  9.27k|        return handler.on_error("Invalid type specifier for character type");
 7136|  9.27k|    }
 7137|  11.0k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7188|  11.0k|{
 7189|  11.0k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7189:9): [True: 9.43k, False: 1.57k]
  ------------------
 7190|  11.0k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7190:9): [True: 9.42k, False: 8]
  ------------------
 7191|  9.42k|        SCN_UNLIKELY_ATTR
 7192|  9.42k|        return handler.on_error("Invalid type specifier for pointer");
 7193|  9.42k|    }
 7194|  11.0k|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|   295k|{
 3686|   295k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|   295k|                                          const CharT*, const CharT*>) {
 3688|   295k|        return {first, last};
 3689|   295k|    }
 3690|   295k|    else {
 3691|   295k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|   295k|    }
 3693|   295k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|   285k|{
 3686|   285k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|   285k|                                          const CharT*, const CharT*>) {
 3688|   285k|        return {first, last};
 3689|   285k|    }
 3690|   285k|    else {
 3691|   285k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|   285k|    }
 3693|   285k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3300|  5.30M|    {
 3301|  5.30M|        return m_iterator;
 3302|  5.30M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3304|  6.08M|    {
 3305|  6.08M|        return m_sentinel;
 3306|  6.08M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3300|   533k|    {
 3301|   533k|        return m_iterator;
 3302|   533k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3304|   695k|    {
 3305|   695k|        return m_sentinel;
 3306|   695k|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7951|   211k|    constexpr locale_ref() = default;
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|  1.18k|    {
  357|  1.18k|        return m_unexpected;
  358|  1.18k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3624|  9.26k|{
 3625|  9.26k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  9.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  9.26k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|  43.5k|    {
  343|  43.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  43.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  43.5k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|   162k|    {
 1447|   162k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|   164k|    {
  443|   164k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   231k|    {
 1148|   231k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|  50.1k|    {
 1401|  50.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  50.1k|    {
  433|  50.1k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1568|   233k|    {
 1569|   233k|        return has_value();
 1570|   233k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|   460k|    {
  481|   460k|        return m_has_value;
  482|   460k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1574|   162k|    {
 1575|   162k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   162k|        return this->get_unexpected().error();
 1577|   162k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   162k|    {
  464|   162k|        return m_unexpected;
  465|   162k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|  43.9k|    {
 1634|  43.9k|        return std::move(value());
 1635|  43.9k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|  64.9k|    {
 1598|  64.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  64.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  64.9k|        return this->get_value();
 1600|  64.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|  64.9k|    {
  447|  64.9k|        return m_value;
  448|  64.9k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|  14.0k|    {
 1447|  14.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  14.9k|    {
  443|  14.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  30.9k|    {
 1148|  30.9k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|  15.6k|    {
 1401|  15.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  15.6k|    {
  433|  15.6k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1568|  31.8k|    {
 1569|  31.8k|        return has_value();
 1570|  31.8k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|  60.9k|    {
  481|  60.9k|        return m_has_value;
  482|  60.9k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1574|  14.0k|    {
 1575|  14.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  14.0k|        return this->get_unexpected().error();
 1577|  14.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  14.0k|    {
  464|  14.0k|        return m_unexpected;
  465|  14.0k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|  13.1k|    {
 1634|  13.1k|        return std::move(value());
 1635|  13.1k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|  15.0k|    {
 1598|  15.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  15.0k|        return this->get_value();
 1600|  15.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|  15.0k|    {
  447|  15.0k|        return m_value;
  448|  15.0k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  20.2k|    {
 1808|  20.2k|        return detail::transform_error_impl(std::move(*this),
 1809|  20.2k|                                            std::forward<F>(f));
 1810|  20.2k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  20.2k|{
 1294|  20.2k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  20.2k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  20.2k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  20.2k|            return result(*std::forward<Exp>(exp));
 1298|  20.2k|        }
 1299|       |
 1300|  20.2k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  20.2k|        return result(unexpect, monostate{});
 1302|  20.2k|    }
 1303|  20.2k|    else {
 1304|  20.2k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  20.2k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  20.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 20.2k, False: 0]
  |  |  ------------------
  ------------------
 1306|  20.2k|                   ? result(*std::forward<Exp>(exp))
 1307|  20.2k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  20.2k|    }
 1311|  20.2k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|   152k|    {
  481|   152k|        return m_has_value;
  482|   152k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|  24.5k|    {
 1634|  24.5k|        return std::move(value());
 1635|  24.5k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|  69.4k|    {
 1598|  69.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  69.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  69.4k|        return this->get_value();
 1600|  69.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  69.4k|    {
  447|  69.4k|        return m_value;
  448|  69.4k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1584|    172|    {
 1585|    172|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    172|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    172|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|    172|        return std::move(this->get_unexpected().error());
 1587|    172|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|    172|    {
  464|    172|        return m_unexpected;
  465|    172|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|  2.26k|    {
 1457|  2.26k|    }
_ZN3scn2v310scan_errorC2Ev:
 3533|   588k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6147|  4.79k|    {
 6148|  4.79k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  4.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6149|  4.79k|        CharT r{};
 6150|  4.79k|        std::memcpy(&r, m_data, m_size);
 6151|  4.79k|        return r;
 6152|  4.79k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  342|    662|    {
  343|    662|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    662|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|    662|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|    662|    {
  352|    662|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    662|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|    662|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6156|    774|    {
 6157|    774|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6158|    774|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2932|    372|    {
 2933|    372|        return fn::impl(std::forward<T>(t));
 2934|    372|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2923|    372|    {
 2924|    372|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2925|    372|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2900|    372|    {
 2901|    372|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|    372|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2866|    372|    {
 2867|    372|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|    372|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|    372|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  342|      8|    {
  343|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  356|  31.0k|    {
  357|  31.0k|        return m_unexpected;
  358|  31.0k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  4.91k|    {
  352|  4.91k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.91k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  4.91k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  342|  49.3k|    {
  343|  49.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  49.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  49.3k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  356|  49.3k|    {
  357|  49.3k|        return m_unexpected;
  358|  49.3k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  351|  49.3k|    {
  352|  49.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  49.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  49.3k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1181|    524|{
 1182|    524|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|    524|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  342|  4.38k|    {
  343|  4.38k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.38k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  4.38k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1181|  2.17k|{
 1182|  2.17k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|  2.17k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|   169k|{
  322|   169k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   169k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3316|   270k|    {
 3317|   270k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|   270k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|    238|    {
 1447|    238|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|    238|    {
  443|    238|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  82.8k|    {
 1148|  82.8k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|  82.6k|    {
 1401|  82.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  82.6k|    {
  433|  82.6k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1568|  58.1k|    {
 1569|  58.1k|        return has_value();
 1570|  58.1k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1623|  44.9k|    {
 1624|  44.9k|        return value();
 1625|  44.9k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1400|  15.8k|    {
 1401|  15.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  15.8k|    {
  433|  15.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.1k|    {
 1148|  16.1k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1446|    350|    {
 1447|    350|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    350|    {
  443|    350|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1568|  4.83k|    {
 1569|  4.83k|        return has_value();
 1570|  4.83k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  480|  27.9k|    {
  481|  27.9k|        return m_has_value;
  482|  27.9k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEERT_v:
 1623|    374|    {
 1624|    374|        return value();
 1625|    374|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1597|  11.4k|    {
 1598|  11.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  11.4k|        return this->get_value();
 1600|  11.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  446|  11.4k|    {
  447|  11.4k|        return m_value;
  448|  11.4k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1807|  6.97k|    {
 1808|  6.97k|        return detail::transform_error_impl(std::move(*this),
 1809|  6.97k|                                            std::forward<F>(f));
 1810|  6.97k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1293|  6.97k|{
 1294|  6.97k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  6.97k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  6.97k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  6.97k|            return result(*std::forward<Exp>(exp));
 1298|  6.97k|        }
 1299|       |
 1300|  6.97k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  6.97k|        return result(unexpect, monostate{});
 1302|  6.97k|    }
 1303|  6.97k|    else {
 1304|  6.97k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  6.97k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  6.97k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.97k, False: 0]
  |  |  ------------------
  ------------------
 1306|  6.97k|                   ? result(*std::forward<Exp>(exp))
 1307|  6.97k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  6.97k|    }
 1311|  6.97k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1633|  11.0k|    {
 1634|  11.0k|        return std::move(value());
 1635|  11.0k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1400|  8.42k|    {
 1401|  8.42k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  8.42k|    {
  433|  8.42k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  21.4k|    {
 1148|  21.4k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1584|    278|    {
 1585|    278|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    278|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    278|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|    278|        return std::move(this->get_unexpected().error());
 1587|    278|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  463|    278|    {
  464|    278|        return m_unexpected;
  465|    278|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1456|  3.66k|    {
 1457|  3.66k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  12.5k|    {
  443|  12.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  50.2k|    {
 1148|  50.2k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  50.2k|    {
 1401|  50.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  50.2k|    {
  433|  50.2k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1568|  50.2k|    {
 1569|  50.2k|        return has_value();
 1570|  50.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|   100k|    {
  481|   100k|        return m_has_value;
  482|   100k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  50.2k|    {
 1634|  50.2k|        return std::move(value());
 1635|  50.2k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  50.2k|    {
 1598|  50.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  50.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  50.2k|        return this->get_value();
 1600|  50.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|  50.2k|    {
  447|  50.2k|        return m_value;
  448|  50.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1446|  8.87k|    {
 1447|  8.87k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1446|  1.02k|    {
 1447|  1.02k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  1.30k|    {
  443|  1.30k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.9k|    {
 1148|  16.9k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  11.5k|    {
 1447|  11.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  11.5k|    {
  443|  11.5k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1568|  15.4k|    {
 1569|  15.4k|        return has_value();
 1570|  15.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  480|  30.8k|    {
  481|  30.8k|        return m_has_value;
  482|  30.8k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1574|  5.46k|    {
 1575|  5.46k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  5.46k|        return this->get_unexpected().error();
 1577|  5.46k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  463|  7.63k|    {
  464|  7.63k|        return m_unexpected;
  465|  7.63k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1400|  2.95k|    {
 1401|  2.95k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|  2.95k|    {
  433|  2.95k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.95k|    {
 1148|  2.95k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1597|  4.10k|    {
 1598|  4.10k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  4.10k|        return this->get_value();
 1600|  4.10k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  446|  4.10k|    {
  447|  4.10k|        return m_value;
  448|  4.10k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1568|  2.20k|    {
 1569|  2.20k|        return has_value();
 1570|  2.20k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  480|  5.90k|    {
  481|  5.90k|        return m_has_value;
  482|  5.90k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.20k|    {
 1148|  2.20k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1633|  2.95k|    {
 1634|  2.95k|        return std::move(value());
 1635|  2.95k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1597|  2.95k|    {
 1598|  2.95k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.95k|        return this->get_value();
 1600|  2.95k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  446|  2.95k|    {
  447|  2.95k|        return m_value;
  448|  2.95k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3304|   739k|    {
 3305|   739k|        return m_sentinel;
 3306|   739k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1807|  4.38k|    {
 1808|  4.38k|        return detail::transform_error_impl(std::move(*this),
 1809|  4.38k|                                            std::forward<F>(f));
 1810|  4.38k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1293|  4.38k|{
 1294|  4.38k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  4.38k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  4.38k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  4.38k|            return result(*std::forward<Exp>(exp));
 1298|  4.38k|        }
 1299|       |
 1300|  4.38k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  4.38k|        return result(unexpect, monostate{});
 1302|  4.38k|    }
 1303|  4.38k|    else {
 1304|  4.38k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  4.38k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  4.38k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.10k, False: 278]
  |  |  ------------------
  ------------------
 1306|  4.38k|                   ? result(*std::forward<Exp>(exp))
 1307|  4.38k|                   : result(unexpect,
 1308|    278|                            trivial_invoke(std::forward<F>(f),
 1309|    278|                                           std::forward<Exp>(exp).error()));
 1310|  4.38k|    }
 1311|  4.38k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1400|  4.10k|    {
 1401|  4.10k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  4.10k|    {
  433|  4.10k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1456|    278|    {
 1457|    278|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1633|  4.10k|    {
 1634|  4.10k|        return std::move(value());
 1635|  4.10k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3300|  1.04M|    {
 3301|  1.04M|        return m_iterator;
 3302|  1.04M|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1400|  2.20k|    {
 1401|  2.20k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|  2.20k|    {
  433|  2.20k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1807|  2.20k|    {
 1808|  2.20k|        return detail::transform_error_impl(std::move(*this),
 1809|  2.20k|                                            std::forward<F>(f));
 1810|  2.20k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1293|  2.20k|{
 1294|  2.20k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.20k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.20k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.20k|            return result(*std::forward<Exp>(exp));
 1298|  2.20k|        }
 1299|       |
 1300|  2.20k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.20k|        return result(unexpect, monostate{});
 1302|  2.20k|    }
 1303|  2.20k|    else {
 1304|  2.20k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.20k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.20k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.20k, False: 0]
  |  |  ------------------
  ------------------
 1306|  2.20k|                   ? result(*std::forward<Exp>(exp))
 1307|  2.20k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  2.20k|    }
 1311|  2.20k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  480|  4.41k|    {
  481|  4.41k|        return m_has_value;
  482|  4.41k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1633|  2.20k|    {
 1634|  2.20k|        return std::move(value());
 1635|  2.20k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1597|  2.20k|    {
 1598|  2.20k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.20k|        return this->get_value();
 1600|  2.20k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  446|  2.20k|    {
  447|  2.20k|        return m_value;
  448|  2.20k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1400|  2.20k|    {
 1401|  2.20k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|  2.20k|    {
  433|  2.20k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.20k|    {
 1148|  2.20k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1568|  2.20k|    {
 1569|  2.20k|        return has_value();
 1570|  2.20k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.41k|    {
  481|  4.41k|        return m_has_value;
  482|  4.41k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1633|  2.20k|    {
 1634|  2.20k|        return std::move(value());
 1635|  2.20k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1597|  2.20k|    {
 1598|  2.20k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.20k|        return this->get_value();
 1600|  2.20k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.20k|    {
  447|  2.20k|        return m_value;
  448|  2.20k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1807|  2.17k|    {
 1808|  2.17k|        return detail::transform_error_impl(std::move(*this),
 1809|  2.17k|                                            std::forward<F>(f));
 1810|  2.17k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1293|  2.17k|{
 1294|  2.17k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.17k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.17k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.17k|            return result(*std::forward<Exp>(exp));
 1298|  2.17k|        }
 1299|       |
 1300|  2.17k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.17k|        return result(unexpect, monostate{});
 1302|  2.17k|    }
 1303|  2.17k|    else {
 1304|  2.17k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.17k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.17k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.17k]
  |  |  ------------------
  ------------------
 1306|  2.17k|                   ? result(*std::forward<Exp>(exp))
 1307|  2.17k|                   : result(unexpect,
 1308|  2.17k|                            trivial_invoke(std::forward<F>(f),
 1309|  2.17k|                                           std::forward<Exp>(exp).error()));
 1310|  2.17k|    }
 1311|  2.17k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1584|  2.17k|    {
 1585|  2.17k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  2.17k|        return std::move(this->get_unexpected().error());
 1587|  2.17k|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3618|  3.66k|    {
 3619|  3.66k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3286|   366k|    {
 3287|   366k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  3.19k|    {
 2695|  3.19k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  3.19k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  3.19k|    {
 2676|  3.19k|        return decay_copy(t.begin());
 2677|  3.19k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1919|  7.12k|{
 1920|  7.12k|    return SCN_FWD(t);
  ------------------
  |  |  930|  7.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  7.12k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3300|  3.19k|    {
 3301|  3.19k|        return m_iterator;
 3302|  3.19k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  3.19k|    {
 2752|  3.19k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  3.19k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  3.19k|    {
 2734|  3.19k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  3.19k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3304|  3.19k|    {
 3305|  3.19k|        return m_sentinel;
 3306|  3.19k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_LPv0EEET_SA_:
 3286|  3.19k|    {
 3287|  3.19k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|     28|    {
 1447|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  621|     28|    {
  622|     28|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  684|     28|    {
  685|     28|        scn::detail::construct_at(unexpected_ptr(),
  686|     28|                                  std::forward<Args>(args)...);
  687|     28|        m_has_value = false;
  688|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|     84|    {
  714|     84|        return reinterpret_cast<unexpected<E>*>(
  715|     84|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     84|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|     84|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|     28|    {
 1148|     28|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1568|     28|    {
 1569|     28|        return has_value();
 1570|     28|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  670|     84|    {
  671|     84|        return m_has_value;
  672|     84|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1574|     28|    {
 1575|     28|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     28|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     28|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|     28|        return this->get_unexpected().error();
 1577|     28|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     28|    {
  654|     28|        return *unexpected_ptr();
  655|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  626|     28|    {
  627|     28|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 28]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     28|        else {
  631|     28|            destroy_unexpected();
  632|     28|        }
  633|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     28|    {
  696|     28|        scn::detail::destroy_at(unexpected_ptr());
  697|     28|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1568|  22.2k|    {
 1569|  22.2k|        return has_value();
 1570|  22.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  42.9k|    {
  481|  42.9k|        return m_has_value;
  482|  42.9k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1574|  11.7k|    {
 1575|  11.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  11.7k|        return this->get_unexpected().error();
 1577|  11.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  11.7k|    {
  464|  11.7k|        return m_unexpected;
  465|  11.7k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1633|  8.42k|    {
 1634|  8.42k|        return std::move(value());
 1635|  8.42k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1597|  8.95k|    {
 1598|  8.95k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  8.95k|        return this->get_value();
 1600|  8.95k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  8.95k|    {
  447|  8.95k|        return m_value;
  448|  8.95k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  2.36k|    {
 1447|  2.36k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  2.53k|    {
  443|  2.53k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  33.4k|    {
 1148|  33.4k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  26.6k|    {
 1447|  26.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  26.6k|    {
  443|  26.6k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1568|  35.6k|    {
 1569|  35.6k|        return has_value();
 1570|  35.6k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  55.5k|    {
  481|  55.5k|        return m_has_value;
  482|  55.5k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1574|  13.3k|    {
 1575|  13.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  13.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  13.3k|        return this->get_unexpected().error();
 1577|  13.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  13.3k|    {
  464|  13.3k|        return m_unexpected;
  465|  13.3k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1400|  8.67k|    {
 1401|  8.67k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  8.67k|    {
  433|  8.67k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.67k|    {
 1148|  8.67k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1597|  4.30k|    {
 1598|  4.30k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  4.30k|        return this->get_value();
 1600|  4.30k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  4.30k|    {
  447|  4.30k|        return m_value;
  448|  4.30k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1568|  6.49k|    {
 1569|  6.49k|        return has_value();
 1570|  6.49k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  17.3k|    {
  481|  17.3k|        return m_has_value;
  482|  17.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  6.49k|    {
 1148|  6.49k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1633|  8.67k|    {
 1634|  8.67k|        return std::move(value());
 1635|  8.67k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1597|  8.67k|    {
 1598|  8.67k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  8.67k|        return this->get_value();
 1600|  8.67k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  8.67k|    {
  447|  8.67k|        return m_value;
  448|  8.67k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3191|   230k|    {
 3192|   230k|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 4.30k, False: 225k]
  ------------------
 3193|   230k|                   ? nullptr
 3194|   230k|                   : std::addressof(*ranges::begin(derived()));
 3195|   230k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|   230k|    {
 2976|   230k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|   230k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|   230k|    {
 2949|   230k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|   230k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3309|   230k|    {
 3310|   230k|        return m_iterator == m_sentinel;
 3311|   230k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3150|   455k|    {
 3151|   455k|        return static_cast<D&>(*this);
 3152|   455k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   225k|    {
 2695|   225k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   225k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   225k|    {
 2676|   225k|        return decay_copy(t.begin());
 2677|   225k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1400|  4.30k|    {
 1401|  4.30k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  4.30k|    {
  433|  4.30k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1400|  6.49k|    {
 1401|  6.49k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  6.49k|    {
  433|  6.49k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|  6.49k|    {
 1808|  6.49k|        return detail::transform_error_impl(std::move(*this),
 1809|  6.49k|                                            std::forward<F>(f));
 1810|  6.49k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1293|  6.49k|{
 1294|  6.49k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  6.49k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  6.49k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  6.49k|            return result(*std::forward<Exp>(exp));
 1298|  6.49k|        }
 1299|       |
 1300|  6.49k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  6.49k|        return result(unexpect, monostate{});
 1302|  6.49k|    }
 1303|  6.49k|    else {
 1304|  6.49k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  6.49k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  6.49k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.49k, False: 0]
  |  |  ------------------
  ------------------
 1306|  6.49k|                   ? result(*std::forward<Exp>(exp))
 1307|  6.49k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  6.49k|    }
 1311|  6.49k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  480|  12.9k|    {
  481|  12.9k|        return m_has_value;
  482|  12.9k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1633|  6.49k|    {
 1634|  6.49k|        return std::move(value());
 1635|  6.49k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1597|  6.49k|    {
 1598|  6.49k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  6.49k|        return this->get_value();
 1600|  6.49k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  446|  6.49k|    {
  447|  6.49k|        return m_value;
  448|  6.49k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  6.49k|    {
 1401|  6.49k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  6.49k|    {
  433|  6.49k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  6.49k|    {
 1148|  6.49k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1568|  6.49k|    {
 1569|  6.49k|        return has_value();
 1570|  6.49k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  480|  12.9k|    {
  481|  12.9k|        return m_has_value;
  482|  12.9k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  6.49k|    {
 1634|  6.49k|        return std::move(value());
 1635|  6.49k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  6.49k|    {
 1598|  6.49k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  6.49k|        return this->get_value();
 1600|  6.49k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  446|  6.49k|    {
  447|  6.49k|        return m_value;
  448|  6.49k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1446|     60|    {
 1447|     60|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  621|     60|    {
  622|     60|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     60|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  684|     60|    {
  685|     60|        scn::detail::construct_at(unexpected_ptr(),
  686|     60|                                  std::forward<Args>(args)...);
  687|     60|        m_has_value = false;
  688|     60|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|    180|    {
  714|    180|        return reinterpret_cast<unexpected<E>*>(
  715|    180|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    180|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|    180|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|     60|    {
 1148|     60|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1568|     60|    {
 1569|     60|        return has_value();
 1570|     60|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  670|    180|    {
  671|    180|        return m_has_value;
  672|    180|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1574|     60|    {
 1575|     60|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     60|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     60|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|     60|        return this->get_unexpected().error();
 1577|     60|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     60|    {
  654|     60|        return *unexpected_ptr();
  655|     60|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  626|     60|    {
  627|     60|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 60]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     60|        else {
  631|     60|            destroy_unexpected();
  632|     60|        }
  633|     60|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     60|    {
  696|     60|        scn::detail::destroy_at(unexpected_ptr());
  697|     60|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|   205k|    {
 2826|   205k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|   205k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|   205k|    {
 2807|   205k|        return t.data();
 2808|   205k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|  10.2k|    {
 1401|  10.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  10.2k|    {
  433|  10.2k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1446|   399k|    {
 1447|   399k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|   399k|    {
  443|   399k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   402k|    {
 1148|   402k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1400|  3.56k|    {
 1401|  3.56k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  3.56k|    {
  433|  3.56k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1181|  4.68k|{
 1182|  4.68k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|  4.68k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1807|    744|    {
 1808|    744|        return detail::transform_error_impl(std::move(*this),
 1809|    744|                                            std::forward<F>(f));
 1810|    744|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1293|    744|{
 1294|    744|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    744|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    744|        if (SCN_LIKELY(exp.has_value())) {
 1297|    744|            return result(*std::forward<Exp>(exp));
 1298|    744|        }
 1299|       |
 1300|    744|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    744|        return result(unexpect, monostate{});
 1302|    744|    }
 1303|    744|    else {
 1304|    744|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    744|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    744|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 744, False: 0]
  |  |  ------------------
  ------------------
 1306|    744|                   ? result(*std::forward<Exp>(exp))
 1307|    744|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|    744|    }
 1311|    744|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1400|    744|    {
 1401|    744|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|    744|    {
  433|    744|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    744|    {
 1148|    744|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|    744|    {
 1569|    744|        return has_value();
 1570|    744|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.48k|    {
  481|  1.48k|        return m_has_value;
  482|  1.48k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1633|    744|    {
 1634|    744|        return std::move(value());
 1635|    744|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1597|    744|    {
 1598|    744|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    744|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    744|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|    744|        return this->get_value();
 1600|    744|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    744|    {
  447|    744|        return m_value;
  448|    744|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1793|  1.48k|    {
 1794|  1.48k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|  1.48k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1293|  1.48k|{
 1294|  1.48k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  1.48k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  1.48k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  1.48k|            return result(*std::forward<Exp>(exp));
 1298|  1.48k|        }
 1299|       |
 1300|  1.48k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  1.48k|        return result(unexpect, monostate{});
 1302|  1.48k|    }
 1303|  1.48k|    else {
 1304|  1.48k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  1.48k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.48k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.48k]
  |  |  ------------------
  ------------------
 1306|  1.48k|                   ? result(*std::forward<Exp>(exp))
 1307|  1.48k|                   : result(unexpect,
 1308|  1.48k|                            trivial_invoke(std::forward<F>(f),
 1309|  1.48k|                                           std::forward<Exp>(exp).error()));
 1310|  1.48k|    }
 1311|  1.48k|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1623|    528|    {
 1624|    528|        return value();
 1625|    528|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3638|     18|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|    726|    {
 2695|    726|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    726|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|    726|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|    726|    {
 2676|    726|        return decay_copy(t.begin());
 2677|    726|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3638|    702|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1807|  2.18k|    {
 1808|  2.18k|        return detail::transform_error_impl(std::move(*this),
 1809|  2.18k|                                            std::forward<F>(f));
 1810|  2.18k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1293|  2.18k|{
 1294|  2.18k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.18k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.18k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.18k|            return result(*std::forward<Exp>(exp));
 1298|  2.18k|        }
 1299|       |
 1300|  2.18k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.18k|        return result(unexpect, monostate{});
 1302|  2.18k|    }
 1303|  2.18k|    else {
 1304|  2.18k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.18k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.18k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.18k, False: 0]
  |  |  ------------------
  ------------------
 1306|  2.18k|                   ? result(*std::forward<Exp>(exp))
 1307|  2.18k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  2.18k|    }
 1311|  2.18k|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  2.18k|    {
 1401|  2.18k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.18k|    {
  433|  2.18k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.18k|    {
 1148|  2.18k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|  2.18k|    {
 1569|  2.18k|        return has_value();
 1570|  2.18k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.36k|    {
  481|  4.36k|        return m_has_value;
  482|  4.36k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  2.18k|    {
 1634|  2.18k|        return std::move(value());
 1635|  2.18k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  2.18k|    {
 1598|  2.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.18k|        return this->get_value();
 1600|  2.18k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.18k|    {
  447|  2.18k|        return m_value;
  448|  2.18k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1793|  2.26k|    {
 1794|  2.26k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|  2.26k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1293|  2.26k|{
 1294|  2.26k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.26k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.26k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.26k|            return result(*std::forward<Exp>(exp));
 1298|  2.26k|        }
 1299|       |
 1300|  2.26k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.26k|        return result(unexpect, monostate{});
 1302|  2.26k|    }
 1303|  2.26k|    else {
 1304|  2.26k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.26k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.26k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.26k]
  |  |  ------------------
  ------------------
 1306|  2.26k|                   ? result(*std::forward<Exp>(exp))
 1307|  2.26k|                   : result(unexpect,
 1308|  2.26k|                            trivial_invoke(std::forward<F>(f),
 1309|  2.26k|                                           std::forward<Exp>(exp).error()));
 1310|  2.26k|    }
 1311|  2.26k|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3618|  2.26k|    {
 3619|  2.26k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|  21.0k|    {
 1624|  21.0k|        return value();
 1625|  21.0k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6657|  7.75k|{
 6658|  7.75k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|  7.75k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  7.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|  7.75k|    auto start = begin;
 6662|  7.75k|    ++begin;
 6663|       |
 6664|  7.75k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.75k]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|      0|        return {};
 6669|      0|    }
 6670|  7.75k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 1.98k, False: 5.77k]
  ------------------
 6671|  1.98k|        handler.on_charset_inverted();
 6672|  1.98k|        ++begin;
 6673|  1.98k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.98k]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|      0|            return {};
 6678|      0|        }
 6679|  1.98k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 12, False: 1.96k]
  ------------------
 6680|     12|            handler.on_charset_single(char32_t{']'});
 6681|     12|            ++begin;
 6682|     12|        }
 6683|  1.98k|    }
 6684|  5.77k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 0, False: 5.77k]
  ------------------
 6685|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|      0|    }
 6687|       |
 6688|  1.82M|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 1.82M, False: 0]
  ------------------
 6689|  1.82M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.82M]
  |  |  ------------------
  ------------------
 6690|      0|            break;
 6691|      0|        }
 6692|       |
 6693|  1.82M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 7.75k, False: 1.82M]
  ------------------
 6694|  7.75k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|  7.75k|        }
 6696|       |
 6697|  1.82M|        parse_presentation_set_literal(begin, end, handler);
 6698|  1.82M|    }
 6699|       |
 6700|      0|    SCN_UNLIKELY_ATTR
 6701|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6702|      0|    return {};
 6703|  7.75k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6621|  1.82M|{
 6622|  1.82M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|  1.82M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|  1.82M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.82M]
  |  |  ------------------
  ------------------
 6626|      0|        return;
 6627|      0|    }
 6628|       |
 6629|  1.82M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 1.82M, False: 0]
  |  Branch (6629:25): [True: 5.94k, False: 1.81M]
  |  Branch (6629:49): [True: 5.94k, False: 0]
  ------------------
 6630|  1.82M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 5.84k, False: 102]
  ------------------
 6631|  5.84k|        ++begin;
 6632|       |
 6633|  5.84k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|  5.84k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  5.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.84k]
  |  |  ------------------
  ------------------
 6635|      0|            return;
 6636|      0|        }
 6637|       |
 6638|  5.84k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  5.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.84k]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|      0|            return;
 6643|      0|        }
 6644|       |
 6645|  5.84k|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|  5.84k|        return;
 6647|  5.84k|    }
 6648|       |
 6649|  1.81M|    handler.on_charset_single(cp_first);
 6650|  1.81M|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6597|  1.82M|{
 6598|  1.82M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|  1.82M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|  1.82M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  3.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.82M]
  |  |  |  Branch (859:45): [True: 0, False: 1.82M]
  |  |  |  Branch (859:45): [True: 0, False: 1.82M]
  |  |  ------------------
  ------------------
 6602|      0|        handler.on_error("Invalid encoding in format string");
 6603|      0|        return invalid_code_point;
 6604|      0|    }
 6605|       |
 6606|  1.82M|    const auto cp =
 6607|  1.82M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|  1.82M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.82M]
  |  |  ------------------
  ------------------
 6609|      0|        handler.on_error("Invalid encoding in format string");
 6610|      0|        return invalid_code_point;
 6611|      0|    }
 6612|       |
 6613|  1.82M|    begin += len;
 6614|  1.82M|    return cp;
 6615|  1.82M|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  17.3k|    {
 1148|  17.3k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1400|  17.3k|    {
 1401|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  432|  17.3k|    {
  433|  17.3k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6212|  25.2k|    {
 6213|  25.2k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6214|  25.2k|                charset_string_size};
 6215|  25.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1400|    528|    {
 1401|    528|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  432|    528|    {
  433|    528|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1400|  6.57k|    {
 1401|  6.57k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  432|  6.57k|    {
  433|  6.57k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4003|   604k|{
 4004|   604k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4004:19): [Folded - Ignored]
  ------------------
 4005|   604k|        return decode_utf8_code_point_exhaustive_valid(input);
 4006|   604k|    }
 4007|   604k|    else if constexpr (sizeof(CharT) == 2) {
 4008|   604k|        return decode_utf16_code_point_exhaustive_valid(input);
 4009|   604k|    }
 4010|   604k|    else {
 4011|   604k|        SCN_EXPECT(input.size() == 1);
 4012|   604k|        return static_cast<char32_t>(input.front());
 4013|   604k|    }
 4014|   604k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3881|  55.6k|    const auto is_trailing_code_unit = [](char ch) {
 3882|  55.6k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3883|  55.6k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6147|    276|    {
 6148|    276|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|    276|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    276|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6149|    276|        CharT r{};
 6150|    276|        std::memcpy(&r, m_data, m_size);
 6151|    276|        return r;
 6152|    276|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3777|   384k|{
 3778|   384k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|   384k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|   384k|    }
 3781|   384k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3781:24): [Folded - Ignored]
  ------------------
 3782|   384k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|   384k|    }
 3784|   384k|    else {
 3785|       |        // utf-32
 3786|   384k|        static_assert(sizeof(U) == 4);
 3787|   384k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   384k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3788|   384k|        return 1;
 3789|   384k|    }
 3790|   384k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|   384k|{
 3984|   384k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|   384k|        return decode_utf8_code_point_exhaustive(input);
 3986|   384k|    }
 3987|   384k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (3987:24): [Folded - Ignored]
  ------------------
 3988|   384k|        return decode_utf16_code_point_exhaustive(input);
 3989|   384k|    }
 3990|   384k|    else {
 3991|   384k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   384k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   384k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3992|   384k|        auto cp = static_cast<char32_t>(input.front());
 3993|   384k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 136k, False: 247k]
  |  |  ------------------
  ------------------
 3994|   136k|            return invalid_code_point;
 3995|   136k|        }
 3996|   247k|        return cp;
 3997|   384k|    }
 3998|   384k|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3669|  32.3k|{
 3670|  32.3k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3670:19): [Folded - Ignored]
  |  Branch (3670:19): [Folded - Ignored]
  ------------------
 3671|  32.3k|                                          decltype(first), decltype(last)> &&
 3672|  32.3k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3672:19): [Folded - Ignored]
  ------------------
 3673|  32.3k|        return {first, last};
 3674|  32.3k|    }
 3675|  32.3k|    else {
 3676|  32.3k|        return {to_address(first), static_cast<size_t>(std::distance(
 3677|  32.3k|                                       to_address(first), to_address(last)))};
 3678|  32.3k|    }
 3679|  32.3k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  96.9k|{
  322|  96.9k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  96.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  96.9k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  98.6k|{
  302|  98.6k|    return p;
  303|  98.6k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3700|  1.79k|{
 3701|  1.79k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  1.79k|                      typename std::basic_string_view<CharT>::iterator,
 3703|  1.79k|                      decltype(it)> &&
 3704|  1.79k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3704:19): [Folded - Ignored]
  ------------------
 3705|  1.79k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  1.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3706|  1.79k|        return it;
 3707|  1.79k|    }
 3708|  1.79k|    else {
 3709|  1.79k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3710|  1.79k|    }
 3711|  1.79k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  1.70k|{
  322|  1.70k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  1.70k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3316|  13.5k|    {
 3317|  13.5k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|  13.5k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|     74|    {
 1447|     74|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|     74|    {
  443|     74|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  20.1k|    {
 1148|  20.1k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|  20.0k|    {
 1401|  20.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  20.0k|    {
  433|  20.0k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1568|  5.68k|    {
 1569|  5.68k|        return has_value();
 1570|  5.68k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  34.6k|    {
  481|  34.6k|        return m_has_value;
  482|  34.6k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|  14.4k|    {
 1598|  14.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  14.4k|        return this->get_value();
 1600|  14.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  14.4k|    {
  447|  14.4k|        return m_value;
  448|  14.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.30k|    {
 1148|  2.30k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  2.30k|    {
 1401|  2.30k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  2.30k|    {
  433|  2.30k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  8.89k|    {
 1808|  8.89k|        return detail::transform_error_impl(std::move(*this),
 1809|  8.89k|                                            std::forward<F>(f));
 1810|  8.89k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  8.89k|{
 1294|  8.89k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  8.89k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  8.89k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  8.89k|            return result(*std::forward<Exp>(exp));
 1298|  8.89k|        }
 1299|       |
 1300|  8.89k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  8.89k|        return result(unexpect, monostate{});
 1302|  8.89k|    }
 1303|  8.89k|    else {
 1304|  8.89k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  8.89k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.89k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.89k, False: 0]
  |  |  ------------------
  ------------------
 1306|  8.89k|                   ? result(*std::forward<Exp>(exp))
 1307|  8.89k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  8.89k|    }
 1311|  8.89k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|  14.4k|    {
 1634|  14.4k|        return std::move(value());
 1635|  14.4k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1584|     74|    {
 1585|     74|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     74|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     74|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|     74|        return std::move(this->get_unexpected().error());
 1587|     74|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|     74|    {
  464|     74|        return m_unexpected;
  465|     74|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|    932|    {
 1457|    932|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1568|  2.30k|    {
 1569|  2.30k|        return has_value();
 1570|  2.30k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.61k|    {
  481|  4.61k|        return m_has_value;
  482|  4.61k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  2.30k|    {
 1634|  2.30k|        return std::move(value());
 1635|  2.30k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  2.30k|    {
 1598|  2.30k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.30k|        return this->get_value();
 1600|  2.30k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.30k|    {
  447|  2.30k|        return m_value;
  448|  2.30k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  1.00k|    {
 1447|  1.00k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.07k|    {
  443|  1.07k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  17.7k|    {
 1148|  17.7k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  11.2k|    {
 1447|  11.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  11.2k|    {
  443|  11.2k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1568|  18.7k|    {
 1569|  18.7k|        return has_value();
 1570|  18.7k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  30.8k|    {
  481|  30.8k|        return m_has_value;
  482|  30.8k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1574|  5.71k|    {
 1575|  5.71k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  5.71k|        return this->get_unexpected().error();
 1577|  5.71k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  5.71k|    {
  464|  5.71k|        return m_unexpected;
  465|  5.71k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1400|  3.78k|    {
 1401|  3.78k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  3.78k|    {
  433|  3.78k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  3.78k|    {
 1148|  3.78k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1597|  5.51k|    {
 1598|  5.51k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  5.51k|        return this->get_value();
 1600|  5.51k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  5.51k|    {
  447|  5.51k|        return m_value;
  448|  5.51k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1568|  2.85k|    {
 1569|  2.85k|        return has_value();
 1570|  2.85k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  7.56k|    {
  481|  7.56k|        return m_has_value;
  482|  7.56k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.85k|    {
 1148|  2.85k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1633|  3.78k|    {
 1634|  3.78k|        return std::move(value());
 1635|  3.78k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1597|  3.78k|    {
 1598|  3.78k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  3.78k|        return this->get_value();
 1600|  3.78k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  3.78k|    {
  447|  3.78k|        return m_value;
  448|  3.78k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  5.58k|    {
 1808|  5.58k|        return detail::transform_error_impl(std::move(*this),
 1809|  5.58k|                                            std::forward<F>(f));
 1810|  5.58k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  5.58k|{
 1294|  5.58k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  5.58k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  5.58k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  5.58k|            return result(*std::forward<Exp>(exp));
 1298|  5.58k|        }
 1299|       |
 1300|  5.58k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  5.58k|        return result(unexpect, monostate{});
 1302|  5.58k|    }
 1303|  5.58k|    else {
 1304|  5.58k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  5.58k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  5.58k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.51k, False: 74]
  |  |  ------------------
  ------------------
 1306|  5.58k|                   ? result(*std::forward<Exp>(exp))
 1307|  5.58k|                   : result(unexpect,
 1308|     74|                            trivial_invoke(std::forward<F>(f),
 1309|     74|                                           std::forward<Exp>(exp).error()));
 1310|  5.58k|    }
 1311|  5.58k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1400|  5.51k|    {
 1401|  5.51k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  5.51k|    {
  433|  5.51k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1456|     74|    {
 1457|     74|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1633|  5.51k|    {
 1634|  5.51k|        return std::move(value());
 1635|  5.51k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1400|  2.85k|    {
 1401|  2.85k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.85k|    {
  433|  2.85k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|  2.85k|    {
 1808|  2.85k|        return detail::transform_error_impl(std::move(*this),
 1809|  2.85k|                                            std::forward<F>(f));
 1810|  2.85k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1293|  2.85k|{
 1294|  2.85k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.85k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.85k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.85k|            return result(*std::forward<Exp>(exp));
 1298|  2.85k|        }
 1299|       |
 1300|  2.85k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.85k|        return result(unexpect, monostate{});
 1302|  2.85k|    }
 1303|  2.85k|    else {
 1304|  2.85k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.85k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.85k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.85k, False: 0]
  |  |  ------------------
  ------------------
 1306|  2.85k|                   ? result(*std::forward<Exp>(exp))
 1307|  2.85k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  2.85k|    }
 1311|  2.85k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  480|  5.70k|    {
  481|  5.70k|        return m_has_value;
  482|  5.70k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1633|  2.85k|    {
 1634|  2.85k|        return std::move(value());
 1635|  2.85k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1597|  2.85k|    {
 1598|  2.85k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.85k|        return this->get_value();
 1600|  2.85k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  446|  2.85k|    {
  447|  2.85k|        return m_value;
  448|  2.85k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  2.85k|    {
 1401|  2.85k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.85k|    {
  433|  2.85k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.85k|    {
 1148|  2.85k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1568|  2.85k|    {
 1569|  2.85k|        return has_value();
 1570|  2.85k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.70k|    {
  481|  5.70k|        return m_has_value;
  482|  5.70k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  2.85k|    {
 1634|  2.85k|        return std::move(value());
 1635|  2.85k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  2.85k|    {
 1598|  2.85k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.85k|        return this->get_value();
 1600|  2.85k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.85k|    {
  447|  2.85k|        return m_value;
  448|  2.85k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1446|     20|    {
 1447|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  621|     20|    {
  622|     20|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  684|     20|    {
  685|     20|        scn::detail::construct_at(unexpected_ptr(),
  686|     20|                                  std::forward<Args>(args)...);
  687|     20|        m_has_value = false;
  688|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|     60|    {
  714|     60|        return reinterpret_cast<unexpected<E>*>(
  715|     60|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     60|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|     60|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|     20|    {
 1148|     20|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1568|     20|    {
 1569|     20|        return has_value();
 1570|     20|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|     60|    {
  671|     60|        return m_has_value;
  672|     60|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1574|     20|    {
 1575|     20|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|     20|        return this->get_unexpected().error();
 1577|     20|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     20|    {
  654|     20|        return *unexpected_ptr();
  655|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|     20|    {
  627|     20|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 20]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     20|        else {
  631|     20|            destroy_unexpected();
  632|     20|        }
  633|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     20|    {
  696|     20|        scn::detail::destroy_at(unexpected_ptr());
  697|     20|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  7.98k|    {
 2826|  7.98k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  7.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  7.98k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  7.98k|    {
 2807|  7.98k|        return t.data();
 2808|  7.98k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3191|  7.98k|    {
 3192|  7.98k|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 1.15k, False: 6.83k]
  ------------------
 3193|  7.98k|                   ? nullptr
 3194|  7.98k|                   : std::addressof(*ranges::begin(derived()));
 3195|  7.98k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|  7.98k|    {
 2976|  7.98k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  7.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|  7.98k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|  7.98k|    {
 2949|  7.98k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  7.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|  7.98k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3309|  7.98k|    {
 3310|  7.98k|        return m_iterator == m_sentinel;
 3311|  7.98k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3150|  14.8k|    {
 3151|  14.8k|        return static_cast<D&>(*this);
 3152|  14.8k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  6.84k|    {
 2695|  6.84k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  6.84k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  6.84k|    {
 2676|  6.84k|        return decay_copy(t.begin());
 2677|  6.84k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|    302|    {
 1401|    302|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|    302|    {
  433|    302|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1807|    928|    {
 1808|    928|        return detail::transform_error_impl(std::move(*this),
 1809|    928|                                            std::forward<F>(f));
 1810|    928|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1293|    928|{
 1294|    928|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    928|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    928|        if (SCN_LIKELY(exp.has_value())) {
 1297|    928|            return result(*std::forward<Exp>(exp));
 1298|    928|        }
 1299|       |
 1300|    928|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    928|        return result(unexpect, monostate{});
 1302|    928|    }
 1303|    928|    else {
 1304|    928|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    928|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    928|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 928, False: 0]
  |  |  ------------------
  ------------------
 1306|    928|                   ? result(*std::forward<Exp>(exp))
 1307|    928|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|    928|    }
 1311|    928|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|    928|    {
 1401|    928|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|    928|    {
  433|    928|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    928|    {
 1148|    928|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|    928|    {
 1569|    928|        return has_value();
 1570|    928|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.85k|    {
  481|  1.85k|        return m_has_value;
  482|  1.85k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|    928|    {
 1634|    928|        return std::move(value());
 1635|    928|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|    928|    {
 1598|    928|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    928|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    928|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|    928|        return this->get_value();
 1600|    928|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    928|    {
  447|    928|        return m_value;
  448|    928|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1793|    932|    {
 1794|    932|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|    932|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1293|    932|{
 1294|    932|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    932|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    932|        if (SCN_LIKELY(exp.has_value())) {
 1297|    932|            return result(*std::forward<Exp>(exp));
 1298|    932|        }
 1299|       |
 1300|    932|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    932|        return result(unexpect, monostate{});
 1302|    932|    }
 1303|    932|    else {
 1304|    932|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    932|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    932|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 932]
  |  |  ------------------
  ------------------
 1306|    932|                   ? result(*std::forward<Exp>(exp))
 1307|    932|                   : result(unexpect,
 1308|    932|                            trivial_invoke(std::forward<F>(f),
 1309|    932|                                           std::forward<Exp>(exp).error()));
 1310|    932|    }
 1311|    932|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3618|    932|    {
 3619|    932|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|  1.92k|    {
 1624|  1.92k|        return value();
 1625|  1.92k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3624|  3.02k|{
 3625|  3.02k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  3.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  3.02k|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5426|   132k|    {
 5427|   132k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 132k]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|   132k|        return static_cast<std::size_t>(m_desc &
 5432|   132k|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|   132k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5451|   249k|    {
 5452|   249k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|   249k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5394|   117k|    {
 5395|   117k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 117k]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|   117k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108, False: 117k]
  |  |  ------------------
  ------------------
 5403|    108|            return {};
 5404|    108|        }
 5405|       |
 5406|   117k|        const auto t = type(id);
 5407|   117k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.81k, False: 114k]
  |  |  ------------------
  ------------------
 5408|  2.81k|            return {};
 5409|  2.81k|        }
 5410|       |
 5411|   114k|        basic_scan_arg<Context> arg;
 5412|   114k|        arg.m_type = t;
 5413|   114k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 114k, False: 0]
  ------------------
 5414|   114k|            arg.m_value.ref_value = m_builtin_values[id];
 5415|   114k|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|   114k|        return arg;
 5420|   117k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5201|   117k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4858|   131k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5460|   117k|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|   117k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|   117k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|   117k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|   117k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5455|   114k|    {
 5456|   114k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|   114k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5207|   226k|    {
 5208|   226k|        return m_type != detail::arg_type::none_type;
 5209|   226k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  12.3k|{
 8378|  12.3k|#define SCN_VISIT(Type)                                         \
 8379|  12.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  12.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  12.3k|    }                                                           \
 8382|  12.3k|    else {                                                      \
 8383|  12.3k|        return vis(monostate_val);                              \
 8384|  12.3k|    }
 8385|       |
 8386|  12.3k|    monostate monostate_val{};
 8387|       |
 8388|  12.3k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 12.3k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 12.3k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|  1.36k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 1.36k, False: 10.9k]
  ------------------
 8394|  1.36k|            SCN_VISIT(int);
  ------------------
  |  | 8379|  1.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.36k|    }                                                           \
  |  | 8382|  1.36k|    else {                                                      \
  |  | 8383|  1.36k|        return vis(monostate_val);                              \
  |  | 8384|  1.36k|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 12.3k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 12.3k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 12.3k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 12.3k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|  1.36k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 1.36k, False: 10.9k]
  ------------------
 8404|  1.36k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|  1.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.36k|    }                                                           \
  |  | 8382|  1.36k|    else {                                                      \
  |  | 8383|  1.36k|        return vis(monostate_val);                              \
  |  | 8384|  1.36k|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 12.3k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 12.3k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|  1.36k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 1.36k, False: 10.9k]
  ------------------
 8410|  1.36k|            SCN_VISIT(void*);
  ------------------
  |  | 8379|  1.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.36k|    }                                                           \
  |  | 8382|  1.36k|    else {                                                      \
  |  | 8383|  1.36k|        return vis(monostate_val);                              \
  |  | 8384|  1.36k|    }
  ------------------
 8411|  1.36k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 1.36k, False: 10.9k]
  ------------------
 8412|  1.36k|            SCN_VISIT(bool);
  ------------------
  |  | 8379|  1.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.36k|    }                                                           \
  |  | 8382|  1.36k|    else {                                                      \
  |  | 8383|  1.36k|        return vis(monostate_val);                              \
  |  | 8384|  1.36k|    }
  ------------------
 8413|  1.36k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 1.36k, False: 10.9k]
  ------------------
 8414|  1.36k|            SCN_VISIT(char);
  ------------------
  |  | 8379|  1.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.36k|    }                                                           \
  |  | 8382|  1.36k|    else {                                                      \
  |  | 8383|  1.36k|        return vis(monostate_val);                              \
  |  | 8384|  1.36k|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 12.3k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 12.3k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 12.3k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|  1.36k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 1.36k, False: 10.9k]
  ------------------
 8422|  1.36k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  1.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.36k|    }                                                           \
  |  | 8382|  1.36k|    else {                                                      \
  |  | 8383|  1.36k|        return vis(monostate_val);                              \
  |  | 8384|  1.36k|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 12.3k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|  1.36k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 1.36k, False: 10.9k]
  ------------------
 8426|  1.36k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|  1.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.36k|    }                                                           \
  |  | 8382|  1.36k|    else {                                                      \
  |  | 8383|  1.36k|        return vis(monostate_val);                              \
  |  | 8384|  1.36k|    }
  ------------------
 8427|  1.36k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 1.36k, False: 10.9k]
  ------------------
 8428|  1.36k|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|  1.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.36k|    }                                                           \
  |  | 8382|  1.36k|    else {                                                      \
  |  | 8383|  1.36k|        return vis(monostate_val);                              \
  |  | 8384|  1.36k|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 12.3k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|  1.36k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 1.36k, False: 10.9k]
  ------------------
 8432|  1.36k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|  1.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.36k|    }                                                           \
  |  | 8382|  1.36k|    else {                                                      \
  |  | 8383|  1.36k|        return vis(monostate_val);                              \
  |  | 8384|  1.36k|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 12.3k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 12.3k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 12.3k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 12.3k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 12.3k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  12.3k|            SCN_CLANG_POP
 8456|  12.3k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  4.48k|    {
 1808|  4.48k|        return detail::transform_error_impl(std::move(*this),
 1809|  4.48k|                                            std::forward<F>(f));
 1810|  4.48k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  4.48k|{
 1294|  4.48k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  4.48k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  4.48k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  4.48k|            return result(*std::forward<Exp>(exp));
 1298|  4.48k|        }
 1299|       |
 1300|  4.48k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  4.48k|        return result(unexpect, monostate{});
 1302|  4.48k|    }
 1303|  4.48k|    else {
 1304|  4.48k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  4.48k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  4.48k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.30k, False: 172]
  |  |  ------------------
  ------------------
 1306|  4.48k|                   ? result(*std::forward<Exp>(exp))
 1307|  4.48k|                   : result(unexpect,
 1308|    172|                            trivial_invoke(std::forward<F>(f),
 1309|    172|                                           std::forward<Exp>(exp).error()));
 1310|  4.48k|    }
 1311|  4.48k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1456|    172|    {
 1457|    172|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1633|  4.30k|    {
 1634|  4.30k|        return std::move(value());
 1635|  4.30k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5505|   132k|    {
 5506|   132k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8016|   132k|    {
 8017|   132k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|   132k|{
 7005|   132k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|   132k|    handler.check_args_exhausted();
 7007|   132k|    return handler.get_error();
 7008|   132k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|   132k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|   132k|    auto begin = format.data();
 6974|   132k|    auto it = begin;
 6975|   132k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   548k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 537k, False: 10.8k]
  ------------------
 6978|   537k|        const auto ch = *it++;
 6979|   537k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 141k, False: 395k]
  ------------------
 6980|   141k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|   141k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|   141k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 118k, False: 23.3k]
  ------------------
 6984|   118k|                return;
 6985|   118k|            }
 6986|   141k|        }
 6987|   395k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 7.03k, False: 388k]
  ------------------
 6988|  7.03k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.21k, False: 3.82k]
  |  |  |  Branch (859:45): [True: 676, False: 6.35k]
  |  |  |  Branch (859:45): [True: 2.53k, False: 3.82k]
  |  |  ------------------
  ------------------
 6989|  3.21k|                handler.on_error("Unmatched '}' in format string");
 6990|  3.21k|                return;
 6991|  3.21k|            }
 6992|       |
 6993|  3.82k|            handler.on_literal_text(begin, it);
 6994|  3.82k|            begin = ++it;
 6995|  3.82k|        }
 6996|   537k|    }
 6997|       |
 6998|  10.8k|    handler.on_literal_text(begin, end);
 6999|  10.8k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6902|   141k|{
 6903|   141k|    struct id_adapter {
 6904|   141k|        constexpr void operator()()
 6905|   141k|        {
 6906|   141k|            arg_id = handler.on_arg_id();
 6907|   141k|        }
 6908|   141k|        constexpr void operator()(std::size_t id)
 6909|   141k|        {
 6910|   141k|            arg_id = handler.on_arg_id(id);
 6911|   141k|        }
 6912|       |
 6913|   141k|        constexpr void on_error(const char* msg)
 6914|   141k|        {
 6915|   141k|            SCN_UNLIKELY_ATTR
 6916|   141k|            handler.on_error(msg);
 6917|   141k|        }
 6918|       |
 6919|   141k|        Handler& handler;
 6920|   141k|        std::size_t arg_id;
 6921|   141k|    };
 6922|       |
 6923|   141k|    ++begin;
 6924|   141k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 141k]
  |  |  ------------------
  ------------------
 6925|     84|        handler.on_error("Unexpected end of replacement field");
 6926|     84|        return begin;
 6927|     84|    }
 6928|       |
 6929|   141k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 12.5k, False: 128k]
  ------------------
 6930|  12.5k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|  12.5k|    }
 6932|   128k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 9.85k, False: 119k]
  ------------------
 6933|  9.85k|        handler.on_literal_text(begin, begin + 1);
 6934|  9.85k|    }
 6935|   119k|    else {
 6936|   119k|        auto adapter = id_adapter{handler, 0};
 6937|   119k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|   119k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 122, False: 118k]
  |  |  ------------------
  ------------------
 6940|    122|            handler.on_error("Missing '}' in format string");
 6941|    122|            return begin;
 6942|    122|        }
 6943|       |
 6944|   118k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 320, False: 118k]
  ------------------
 6945|    320|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|    320|        }
 6947|   118k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 104k, False: 13.7k]
  ------------------
 6948|   104k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 104, False: 104k]
  |  |  ------------------
  ------------------
 6949|    104|                handler.on_error("Unexpected end of replacement field");
 6950|    104|                return begin;
 6951|    104|            }
 6952|   104k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|   104k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.63k, False: 98.1k]
  |  |  |  Branch (859:45): [True: 0, False: 104k]
  |  |  |  Branch (859:45): [True: 6.63k, False: 98.1k]
  |  |  ------------------
  ------------------
 6954|  6.63k|                handler.on_error("Unknown format specifier");
 6955|  6.63k|                return begin;
 6956|  6.63k|            }
 6957|   104k|        }
 6958|  13.7k|        else {
 6959|  13.7k|            SCN_UNLIKELY_ATTR
 6960|  13.7k|            handler.on_error("Missing '}' in format string");
 6961|  13.7k|            return begin;
 6962|  13.7k|        }
 6963|   118k|    }
 6964|   120k|    return begin + 1;
 6965|   141k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 7999|   117k|    {
 8000|   117k|        return m_args.get(id);
 8001|   117k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8004|  12.8k|    {
 8005|  12.8k|        return m_args;
 8006|  12.8k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8009|   110k|    {
 8010|   110k|        return m_locale;
 8011|   110k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5526|   112k|    {
 5527|   112k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62, False: 111k]
  |  |  ------------------
  ------------------
 5528|     62|            on_error(
 5529|     62|                "Cannot switch from manual to automatic argument indexing");
 5530|     62|            return 0;
 5531|     62|        }
 5532|       |
 5533|   111k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|   111k|        do_check_arg_id(id);
 5535|   111k|        return id;
 5536|   112k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5550|    186|    {
 5551|    186|        return detail::handle_error(
 5552|    186|            scan_error{scan_error::invalid_format_string, msg});
 5553|    186|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6014|   117k|{
 6015|   117k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|   117k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|   117k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|   119k|{
 6404|   119k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|   119k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 119k, False: 0]
  |  Branch (6405:26): [True: 19.5k, False: 99.4k]
  ------------------
 6406|  19.5k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|  19.5k|    }
 6408|       |
 6409|  99.4k|    handler();
 6410|  99.4k|    return begin;
 6411|   119k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6373|  19.5k|{
 6374|  19.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6375|       |
 6376|  19.5k|    CharT c = *begin;
 6377|  19.5k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6377:9): [True: 12.1k, False: 7.48k]
  |  Branch (6377:27): [True: 1.34k, False: 6.13k]
  ------------------
 6378|  13.4k|        handler.on_error("Invalid argument ID");
 6379|  13.4k|        return begin;
 6380|  13.4k|    }
 6381|       |
 6382|  6.13k|    int idx = 0;
 6383|  6.13k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6383:9): [True: 612, False: 5.52k]
  ------------------
 6384|    612|        idx = parse_simple_int(begin, end);
 6385|    612|    }
 6386|  5.52k|    else {
 6387|  5.52k|        ++begin;
 6388|  5.52k|    }
 6389|       |
 6390|  6.13k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6390:9): [True: 122, False: 6.01k]
  |  Branch (6390:26): [True: 5.69k, False: 320]
  |  Branch (6390:50): [True: 276, False: 5.42k]
  ------------------
 6391|    398|        handler.on_error("Invalid argument ID");
 6392|    398|        return begin;
 6393|    398|    }
 6394|  5.74k|    handler(idx);
 6395|       |
 6396|  5.74k|    return begin;
 6397|  6.13k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6914|  13.8k|        {
 6915|  13.8k|            SCN_UNLIKELY_ATTR
 6916|  13.8k|            handler.on_error(msg);
 6917|  13.8k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6352|  23.7k|{
 6353|  23.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  23.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6354|  23.7k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  23.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6355|       |
 6356|  23.7k|    unsigned long long value = 0;
 6357|  97.1k|    do {
 6358|  97.1k|        value *= 10;
 6359|  97.1k|        value += static_cast<unsigned long long>(*begin - '0');
 6360|  97.1k|        if (value >
  ------------------
  |  Branch (6360:13): [True: 378, False: 96.7k]
  ------------------
 6361|  97.1k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6362|    378|            return -1;
 6363|    378|        }
 6364|  96.7k|        ++begin;
 6365|  96.7k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6365:14): [True: 96.4k, False: 316]
  |  Branch (6365:30): [True: 92.7k, False: 3.64k]
  |  Branch (6365:47): [True: 73.3k, False: 19.4k]
  ------------------
 6366|  23.3k|    return static_cast<int>(value);
 6367|  23.7k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6909|  5.74k|        {
 6910|  5.74k|            arg_id = handler.on_arg_id(id);
 6911|  5.74k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5539|  5.74k|    {
 5540|  5.74k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  5.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124, False: 5.61k]
  |  |  ------------------
  ------------------
 5541|    124|            on_error(
 5542|    124|                "Cannot switch from manual to automatic argument indexing");
 5543|    124|            return;
 5544|    124|        }
 5545|  5.61k|        m_next_arg_id = -1;
 5546|  5.61k|        do_check_arg_id(id);
 5547|  5.61k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  99.4k|        {
 6906|  99.4k|            arg_id = handler.on_arg_id();
 6907|  99.4k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5212|   209k|    {
 5213|   209k|        return m_type;
 5214|   209k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5521|  97.5k|    {
 5522|  97.5k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|  97.5k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5510|   202k|    {
 5511|   202k|        return m_format.data();
 5512|   202k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|   104k|    {
 7083|   104k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|   104k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6818|   104k|{
 6819|   104k|    auto do_presentation = [&]() -> const CharT* {
 6820|   104k|        if (*begin == CharT{'['}) {
 6821|   104k|            auto set = parse_presentation_set(begin, end, handler);
 6822|   104k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|   104k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|   104k|                return begin;
 6827|   104k|            }
 6828|   104k|            handler.on_character_set_string(set);
 6829|   104k|            return begin;
 6830|   104k|        }
 6831|   104k|        if (*begin == CharT{'/'}) {
 6832|   104k|            return parse_presentation_regex(begin, end, handler);
 6833|   104k|        }
 6834|   104k|        presentation_type type = parse_presentation_type(*begin++);
 6835|   104k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|   104k|            handler.on_error("Invalid type specifier in format string");
 6837|   104k|            return begin;
 6838|   104k|        }
 6839|   104k|        handler.on_type(type);
 6840|   104k|        return begin;
 6841|   104k|    };
 6842|       |
 6843|   104k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 103k, False: 1.20k]
  |  Branch (6843:28): [True: 5.00k, False: 98.5k]
  ------------------
 6844|   104k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 1.93k, False: 3.07k]
  |  Branch (6844:36): [True: 1.82k, False: 108]
  ------------------
 6845|  1.82k|        return do_presentation();
 6846|  1.82k|    }
 6847|       |
 6848|   102k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 102k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|   102k|    begin = parse_align(begin, end, handler);
 6854|   102k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 156, False: 102k]
  |  |  ------------------
  ------------------
 6855|    156|        handler.on_error("Unexpected end of format string");
 6856|    156|        return begin;
 6857|    156|    }
 6858|       |
 6859|   102k|    begin = parse_width(begin, end, handler);
 6860|   102k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 144, False: 102k]
  |  |  ------------------
  ------------------
 6861|    144|        handler.on_error("Unexpected end of format string");
 6862|    144|        return begin;
 6863|    144|    }
 6864|       |
 6865|   102k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 10.8k, False: 91.8k]
  ------------------
 6866|  10.8k|        ++begin;
 6867|  10.8k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90, False: 10.7k]
  |  |  ------------------
  ------------------
 6868|     90|            handler.on_error("Unexpected end of format string");
 6869|     90|            return begin;
 6870|     90|        }
 6871|  10.7k|        begin = parse_precision(begin, end, handler);
 6872|  10.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 10.6k]
  |  |  ------------------
  ------------------
 6873|     84|            handler.on_error("Unexpected end of format string");
 6874|     84|            return begin;
 6875|     84|        }
 6876|  10.7k|    }
 6877|       |
 6878|   102k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 848, False: 101k]
  ------------------
 6879|    848|        handler.on_localized();
 6880|    848|        ++begin;
 6881|    848|    }
 6882|   102k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 102k]
  |  |  ------------------
  ------------------
 6883|     72|        handler.on_error("Unexpected end of format string");
 6884|     72|        return begin;
 6885|     72|    }
 6886|       |
 6887|   102k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 102k, False: 0]
  |  Branch (6887:25): [True: 89.5k, False: 12.9k]
  ------------------
 6888|  89.5k|        do_presentation();
 6889|  89.5k|    }
 6890|   102k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.61k, False: 99.8k]
  |  |  ------------------
  ------------------
 6891|  2.61k|        handler.on_error("Unexpected end of format string");
 6892|  2.61k|        return begin;
 6893|  2.61k|    }
 6894|       |
 6895|  99.8k|    return begin;
 6896|   102k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6467|  5.00k|{
 6468|  5.00k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 2.20k, False: 2.80k]
  |  Branch (6468:33): [True: 1.71k, False: 492]
  ------------------
 6469|  5.00k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 782, False: 2.51k]
  |  Branch (6469:33): [True: 216, False: 566]
  ------------------
 6470|  5.00k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|  91.3k|    auto do_presentation = [&]() -> const CharT* {
 6820|  91.3k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 28.3k, False: 63.0k]
  ------------------
 6821|  28.3k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  28.3k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  28.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.90k, False: 26.4k]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|  1.90k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  1.90k|                return begin;
 6827|  1.90k|            }
 6828|  26.4k|            handler.on_character_set_string(set);
 6829|  26.4k|            return begin;
 6830|  28.3k|        }
 6831|  63.0k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 53.9k, False: 9.10k]
  ------------------
 6832|  53.9k|            return parse_presentation_regex(begin, end, handler);
 6833|  53.9k|        }
 6834|  9.10k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  9.10k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  9.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.82k, False: 7.27k]
  |  |  ------------------
  ------------------
 6836|  1.82k|            handler.on_error("Invalid type specifier in format string");
 6837|  1.82k|            return begin;
 6838|  1.82k|        }
 6839|  7.27k|        handler.on_type(type);
 6840|  7.27k|        return begin;
 6841|  9.10k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6657|  28.3k|{
 6658|  28.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  28.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|  28.3k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  28.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|  28.3k|    auto start = begin;
 6662|  28.3k|    ++begin;
 6663|       |
 6664|  28.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  28.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 28.2k]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|     44|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|     44|        return {};
 6669|     44|    }
 6670|  28.2k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 7.94k, False: 20.3k]
  ------------------
 6671|  7.94k|        handler.on_charset_inverted();
 6672|  7.94k|        ++begin;
 6673|  7.94k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 7.90k]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|     36|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|     36|            return {};
 6678|     36|        }
 6679|  7.90k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 72, False: 7.83k]
  ------------------
 6680|     72|            handler.on_charset_single(char32_t{']'});
 6681|     72|            ++begin;
 6682|     72|        }
 6683|  7.90k|    }
 6684|  20.3k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 36, False: 20.2k]
  ------------------
 6685|     36|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|     36|    }
 6687|       |
 6688|  5.51M|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 5.51M, False: 774]
  ------------------
 6689|  5.51M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  5.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.01k, False: 5.51M]
  |  |  ------------------
  ------------------
 6690|  1.01k|            break;
 6691|  1.01k|        }
 6692|       |
 6693|  5.51M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 26.4k, False: 5.48M]
  ------------------
 6694|  26.4k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|  26.4k|        }
 6696|       |
 6697|  5.48M|        parse_presentation_set_literal(begin, end, handler);
 6698|  5.48M|    }
 6699|       |
 6700|  1.78k|    SCN_UNLIKELY_ATTR
 6701|  1.78k|    handler.on_error("Invalid [character set] specifier in format string");
 6702|  1.78k|    return {};
 6703|  28.1k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6621|  5.48M|{
 6622|  5.48M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|  5.48M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|  5.48M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  5.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 848, False: 5.48M]
  |  |  ------------------
  ------------------
 6626|    848|        return;
 6627|    848|    }
 6628|       |
 6629|  5.48M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 5.48M, False: 472]
  |  Branch (6629:25): [True: 19.0k, False: 5.46M]
  |  Branch (6629:49): [True: 19.0k, False: 36]
  ------------------
 6630|  5.48M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 18.7k, False: 342]
  ------------------
 6631|  18.7k|        ++begin;
 6632|       |
 6633|  18.7k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|  18.7k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  18.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 18.6k]
  |  |  ------------------
  ------------------
 6635|     70|            return;
 6636|     70|        }
 6637|       |
 6638|  18.6k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 18.5k]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|     78|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|     78|            return;
 6643|     78|        }
 6644|       |
 6645|  18.5k|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|  18.5k|        return;
 6647|  18.6k|    }
 6648|       |
 6649|  5.46M|    handler.on_charset_single(cp_first);
 6650|  5.46M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6597|  5.50M|{
 6598|  5.50M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|  5.50M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|  5.50M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  11.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 310, False: 5.50M]
  |  |  |  Branch (859:45): [True: 270, False: 5.50M]
  |  |  |  Branch (859:45): [True: 40, False: 5.50M]
  |  |  ------------------
  ------------------
 6602|    310|        handler.on_error("Invalid encoding in format string");
 6603|    310|        return invalid_code_point;
 6604|    310|    }
 6605|       |
 6606|  5.50M|    const auto cp =
 6607|  5.50M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|  5.50M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  5.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 608, False: 5.50M]
  |  |  ------------------
  ------------------
 6609|    608|        handler.on_error("Invalid encoding in format string");
 6610|    608|        return invalid_code_point;
 6611|    608|    }
 6612|       |
 6613|  5.50M|    begin += len;
 6614|  5.50M|    return cp;
 6615|  5.50M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6306|  26.4k|    {
 6307|  26.4k|        m_specs.charset_string_data = fmt.data();
 6308|  26.4k|        m_specs.charset_string_size = fmt.size();
 6309|  26.4k|        on_type(presentation_type::string_set);
 6310|  26.4k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6709|  53.9k|{
 6710|  53.9k|#if !SCN_DISABLE_REGEX
 6711|  53.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  53.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6712|  53.9k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  53.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6713|       |
 6714|  53.9k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|   107k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6714:19): [Folded - Ignored]
  |  Branch (6714:19): [Folded - Ignored]
  ------------------
 6715|  53.9k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6715:19): [Folded - Ignored]
  ------------------
 6716|  53.9k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6717|  53.9k|        return begin;
 6718|  53.9k|    }
 6719|       |
 6720|  53.9k|    auto start = begin;
 6721|  53.9k|    ++begin;
 6722|       |
 6723|  53.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  53.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 53.8k]
  |  |  ------------------
  ------------------
 6724|     42|        handler.on_error("Unexpected end of regex in format string");
 6725|     42|        return begin;
 6726|     42|    }
 6727|       |
 6728|  53.8k|    handler.on_type(presentation_type::regex);
 6729|  17.4M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6729:12): [True: 17.4M, False: 460]
  ------------------
 6730|  17.4M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6730:13): [True: 80.8k, False: 17.3M]
  ------------------
 6731|  80.8k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6731:17): [True: 53.4k, False: 27.4k]
  ------------------
 6732|  53.4k|                break;
 6733|  53.4k|            }
 6734|  27.4k|            else {
 6735|  27.4k|                handler.on_type(presentation_type::regex_escaped);
 6736|  27.4k|            }
 6737|  80.8k|        }
 6738|  17.4M|    }
 6739|  53.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  53.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 460, False: 53.4k]
  |  |  ------------------
  ------------------
 6740|    460|        handler.on_error("Unexpected end of regex in format string");
 6741|    460|        return begin;
 6742|    460|    }
 6743|       |
 6744|  53.4k|    auto regex_end = begin;
 6745|  53.4k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6746|  53.4k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  53.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 144, False: 53.2k]
  |  |  ------------------
  ------------------
 6747|    144|        handler.on_error("Invalid (empty) regex in format string");
 6748|    144|        return begin;
 6749|    144|    }
 6750|  53.2k|    handler.on_regex_pattern(regex_pattern);
 6751|  53.2k|    ++begin;
 6752|       |
 6753|  53.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 53.2k]
  |  |  ------------------
  ------------------
 6754|     50|        handler.on_error("Unexpected end of regex in format string");
 6755|     50|        return begin;
 6756|     50|    }
 6757|       |
 6758|  53.2k|    regex_flags flags{regex_flags::none};
 6759|  53.2k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6760|  53.2k|        {{'m', regex_flags::multiline},
 6761|  53.2k|         {'s', regex_flags::singleline},
 6762|  53.2k|         {'i', regex_flags::nocase},
 6763|  53.2k|         {'n', regex_flags::nocapture}}};
 6764|  65.3k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6764:12): [True: 65.3k, False: 62]
  ------------------
 6765|  65.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6765:13): [True: 52.5k, False: 12.7k]
  ------------------
 6766|  52.5k|            break;
 6767|  52.5k|        }
 6768|  12.7k|        bool found_flag = false;
 6769|  35.0k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6769:24): [True: 35.0k, False: 610]
  ------------------
 6770|  35.0k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6770:17): [True: 22.8k, False: 12.1k]
  ------------------
 6771|  22.8k|                continue;
 6772|  22.8k|            }
 6773|  12.1k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6773:17): [True: 36, False: 12.1k]
  ------------------
 6774|     36|                handler.on_error("Flag set multiple times in regex");
 6775|     36|                return begin;
 6776|     36|            }
 6777|  12.1k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6778|  12.1k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6778:17): [True: 54, False: 12.0k]
  ------------------
 6779|       |                // clang-format off
 6780|     54|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6781|       |                // clang-format on
 6782|     54|            }
 6783|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6784|       |            if (*begin == CharT{'m'}) {
 6785|       |                // clang-format off
 6786|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6787|       |                // clang-format on
 6788|       |            }
 6789|       |#endif
 6790|  12.1k|#endif
 6791|  12.1k|            flags |= flag.second;
 6792|  12.1k|            found_flag = true;
 6793|  12.1k|            break;
 6794|  12.1k|        }
 6795|  12.7k|        if (!found_flag) {
  ------------------
  |  Branch (6795:13): [True: 610, False: 12.1k]
  ------------------
 6796|    610|            handler.on_error("Invalid flag in regex");
 6797|    610|            return begin;
 6798|    610|        }
 6799|  12.7k|    }
 6800|  52.5k|    handler.on_regex_flags(flags);
 6801|       |
 6802|  52.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  52.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62, False: 52.5k]
  |  |  ------------------
  ------------------
 6803|     62|        handler.on_error("Unexpected end of regex in format string");
 6804|     62|        return begin;
 6805|     62|    }
 6806|       |
 6807|  52.5k|    return begin;
 6808|       |#else
 6809|       |    handler.on_error("Regular expression support is disabled");
 6810|       |    return {};
 6811|       |#endif
 6812|  52.5k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6314|  53.2k|    {
 6315|  53.2k|        m_specs.charset_string_data = pattern.data();
 6316|  53.2k|        m_specs.charset_string_size = pattern.size();
 6317|  53.2k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6415|  9.10k|{
 6416|  9.10k|    switch (type) {
 6417|    318|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 318, False: 8.78k]
  ------------------
 6418|    390|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 72, False: 9.03k]
  ------------------
 6419|    390|            return presentation_type::int_binary;
 6420|    358|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 358, False: 8.74k]
  ------------------
 6421|    358|            return presentation_type::int_decimal;
 6422|    432|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 432, False: 8.67k]
  ------------------
 6423|    432|            return presentation_type::int_generic;
 6424|    108|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 108, False: 8.99k]
  ------------------
 6425|    108|            return presentation_type::int_unsigned_decimal;
 6426|    168|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 168, False: 8.93k]
  ------------------
 6427|    168|            return presentation_type::int_octal;
 6428|    220|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 220, False: 8.88k]
  ------------------
 6429|    272|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 52, False: 9.05k]
  ------------------
 6430|    272|            return presentation_type::int_hex;
 6431|     44|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 44, False: 9.05k]
  ------------------
 6432|     98|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 54, False: 9.04k]
  ------------------
 6433|     98|            return presentation_type::int_arbitrary_base;
 6434|    180|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 180, False: 8.92k]
  ------------------
 6435|    540|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 360, False: 8.74k]
  ------------------
 6436|    540|            return presentation_type::float_hex;
 6437|    162|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 162, False: 8.94k]
  ------------------
 6438|    234|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 72, False: 9.03k]
  ------------------
 6439|    234|            return presentation_type::float_scientific;
 6440|    450|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 450, False: 8.65k]
  ------------------
 6441|    738|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 288, False: 8.81k]
  ------------------
 6442|    738|            return presentation_type::float_fixed;
 6443|    152|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 152, False: 8.95k]
  ------------------
 6444|    256|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 104, False: 8.99k]
  ------------------
 6445|    256|            return presentation_type::float_general;
 6446|  1.63k|        case 's':
  ------------------
  |  Branch (6446:9): [True: 1.63k, False: 7.46k]
  ------------------
 6447|  1.63k|            return presentation_type::string;
 6448|  1.90k|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 1.90k, False: 7.19k]
  ------------------
 6449|  1.90k|            return presentation_type::character;
 6450|     36|        case '?':
  ------------------
  |  Branch (6450:9): [True: 36, False: 9.06k]
  ------------------
 6451|     36|            return presentation_type::escaped_character;
 6452|     98|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 98, False: 9.00k]
  ------------------
 6453|     98|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 9.10k]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 9.10k]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|  1.82k|        default:
  ------------------
  |  Branch (6460:9): [True: 1.82k, False: 7.27k]
  ------------------
 6461|  1.82k|            return presentation_type::none;
 6462|  9.10k|    }
 6463|  9.10k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6492|   102k|{
 6493|   102k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|   102k|    auto check_align = [](wchar_t ch) {
 6496|   102k|        switch (ch) {
 6497|   102k|            case L'<':
 6498|   102k|                return align_type::left;
 6499|   102k|            case L'>':
 6500|   102k|                return align_type::right;
 6501|   102k|            case L'^':
 6502|   102k|                return align_type::center;
 6503|   102k|            default:
 6504|   102k|                return align_type::none;
 6505|   102k|        }
 6506|   102k|    };
 6507|       |
 6508|   102k|    auto potential_fill_len = code_point_length(begin, end);
 6509|   102k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 152, False: 102k]
  |  |  |  Branch (859:45): [True: 148, False: 102k]
  |  |  |  Branch (859:45): [True: 4, False: 102k]
  |  |  ------------------
  ------------------
 6510|   102k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|    152|        handler.on_error("Invalid encoding in fill character");
 6512|    152|        return begin;
 6513|    152|    }
 6514|       |
 6515|   102k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|   102k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|   102k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|   102k|    const auto begin_before_fill = begin;
 6520|   102k|    begin += potential_fill_len;
 6521|       |
 6522|   102k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 1.19k, False: 101k]
  ------------------
 6523|  1.19k|        return begin_before_fill;
 6524|  1.19k|    }
 6525|       |
 6526|   101k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|   101k|    const auto begin_after_fill = begin;
 6528|   101k|    ++begin;
 6529|       |
 6530|   101k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 100k, False: 1.32k]
  ------------------
 6531|   100k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 100k]
  |  |  ------------------
  ------------------
 6532|    134|            handler.on_error("Invalid fill character '{' in format string");
 6533|    134|            return begin;
 6534|    134|        }
 6535|   100k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 23.0k, False: 77.1k]
  ------------------
 6536|  23.0k|            return begin_before_fill;
 6537|  23.0k|        }
 6538|   100k|    }
 6539|       |
 6540|  78.4k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 69.0k, False: 9.40k]
  ------------------
 6541|  69.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 4.81k, False: 64.2k]
  ------------------
 6542|  4.81k|            handler.on_align(potential_align_on_fill);
 6543|  4.81k|            return begin_after_fill;
 6544|  4.81k|        }
 6545|  64.2k|        return begin_before_fill;
 6546|  69.0k|    }
 6547|       |
 6548|  9.40k|    handler.on_fill(potential_fill);
 6549|  9.40k|    handler.on_align(potential_align_after_fill);
 6550|  9.40k|    return begin;
 6551|  78.4k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6474|   102k|{
 6475|   102k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|   102k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|   102k|        return 1;
 6478|   102k|    }
 6479|   102k|    else {
 6480|   102k|        const auto lengths =
 6481|   102k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|   102k|            "\3\4";
 6483|   102k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|   102k|        return len;
 6485|   102k|    }
 6486|   102k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|   204k|    auto check_align = [](wchar_t ch) {
 6496|   204k|        switch (ch) {
 6497|  1.30k|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 1.30k, False: 203k]
  ------------------
 6498|  1.30k|                return align_type::left;
 6499|  2.88k|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 2.88k, False: 201k]
  ------------------
 6500|  2.88k|                return align_type::right;
 6501|  16.0k|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 16.0k, False: 188k]
  ------------------
 6502|  16.0k|                return align_type::center;
 6503|   184k|            default:
  ------------------
  |  Branch (6503:13): [True: 184k, False: 20.2k]
  ------------------
 6504|   184k|                return align_type::none;
 6505|   204k|        }
 6506|   204k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6228|  9.40k|    {
 6229|  9.40k|        m_specs.fill = fill;
 6230|  9.40k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6109|  9.40k|    {
 6110|  9.40k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  9.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6111|  9.40k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  9.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6112|  9.40k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6112:23): [Folded - Ignored]
  ------------------
 6113|  20.4k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6113:32): [True: 11.0k, False: 9.40k]
  ------------------
 6114|  11.0k|                SCN_GCC_PUSH
 6115|  11.0k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6116|  11.0k|                m_data[i] = s[i];
 6117|  11.0k|                SCN_GCC_POP
 6118|  11.0k|            }
 6119|  9.40k|            m_size = static_cast<unsigned char>(s.size());
 6120|  9.40k|        }
 6121|  9.40k|        else if constexpr (sizeof(CharT) == 2) {
 6122|  9.40k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6123|  9.40k|            m_data[1] =
 6124|  9.40k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6125|  9.40k|            if (s.size() == 1) {
 6126|  9.40k|                return;
 6127|  9.40k|            }
 6128|  9.40k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6129|  9.40k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6130|  9.40k|        }
 6131|  9.40k|        else {
 6132|  9.40k|            const auto front = static_cast<unsigned>(s.front());
 6133|  9.40k|            m_data[0] = static_cast<char>(front);
 6134|  9.40k|            m_data[1] = static_cast<char>(front >> 8);
 6135|  9.40k|            m_data[2] = static_cast<char>(front >> 16);
 6136|  9.40k|            m_data[3] = static_cast<char>(front >> 24);
 6137|  9.40k|        }
 6138|  9.40k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6557|   102k|{
 6558|   102k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|   102k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 40.8k, False: 61.9k]
  |  Branch (6560:33): [True: 12.7k, False: 28.1k]
  ------------------
 6561|  12.7k|        int width = parse_simple_int(begin, end);
 6562|  12.7k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  12.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 12.7k, False: 36]
  |  |  ------------------
  ------------------
 6563|  12.7k|            handler.on_width(width);
 6564|  12.7k|        }
 6565|     36|        else {
 6566|     36|            handler.on_error("Invalid field width");
 6567|     36|            return begin;
 6568|     36|        }
 6569|  12.7k|    }
 6570|   102k|    return begin;
 6571|   102k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6577|  10.7k|{
 6578|  10.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6579|       |
 6580|  10.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6580:9): [True: 10.5k, False: 138]
  |  Branch (6580:33): [True: 10.3k, False: 198]
  ------------------
 6581|  10.3k|        int prec = parse_simple_int(begin, end);
 6582|  10.3k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  10.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 10.0k, False: 306]
  |  |  ------------------
  ------------------
 6583|  10.0k|            handler.on_precision(prec);
 6584|  10.0k|        }
 6585|    306|        else {
 6586|    306|            handler.on_error("Invalid field precision");
 6587|    306|            return begin;
 6588|    306|        }
 6589|  10.3k|    }
 6590|  10.4k|    return begin;
 6591|  10.7k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7087|    848|    {
 7088|    848|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|    848|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 764, False: 84]
  ------------------
 7090|    848|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 680, False: 84]
  ------------------
 7091|    848|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 596, False: 84]
  ------------------
 7092|    848|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 512, False: 84]
  ------------------
 7093|    512|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|    512|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|    512|        }
 7098|       |
 7099|    336|        Handler::on_localized();
 7100|    336|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  97.0k|{
 8378|  97.0k|#define SCN_VISIT(Type)                                         \
 8379|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  97.0k|    }                                                           \
 8382|  97.0k|    else {                                                      \
 8383|  97.0k|        return vis(monostate_val);                              \
 8384|  97.0k|    }
 8385|       |
 8386|  97.0k|    monostate monostate_val{};
 8387|       |
 8388|  97.0k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 97.0k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 97.0k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|  10.8k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 10.8k, False: 86.2k]
  ------------------
 8394|  10.8k|            SCN_VISIT(int);
  ------------------
  |  | 8379|  10.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  10.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  10.8k|    }                                                           \
  |  | 8382|  10.8k|    else {                                                      \
  |  | 8383|  10.8k|        return vis(monostate_val);                              \
  |  | 8384|  10.8k|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 97.0k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 97.0k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 97.0k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 97.0k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|  10.8k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 10.8k, False: 86.2k]
  ------------------
 8404|  10.8k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|  10.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  10.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  10.8k|    }                                                           \
  |  | 8382|  10.8k|    else {                                                      \
  |  | 8383|  10.8k|        return vis(monostate_val);                              \
  |  | 8384|  10.8k|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 97.0k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 97.0k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|  10.7k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 10.7k, False: 86.2k]
  ------------------
 8410|  10.7k|            SCN_VISIT(void*);
  ------------------
  |  | 8379|  10.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  10.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  10.7k|    }                                                           \
  |  | 8382|  10.7k|    else {                                                      \
  |  | 8383|  10.7k|        return vis(monostate_val);                              \
  |  | 8384|  10.7k|    }
  ------------------
 8411|  10.8k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 10.8k, False: 86.2k]
  ------------------
 8412|  10.8k|            SCN_VISIT(bool);
  ------------------
  |  | 8379|  10.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  10.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  10.8k|    }                                                           \
  |  | 8382|  10.8k|    else {                                                      \
  |  | 8383|  10.8k|        return vis(monostate_val);                              \
  |  | 8384|  10.8k|    }
  ------------------
 8413|  10.7k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 10.7k, False: 86.2k]
  ------------------
 8414|  10.7k|            SCN_VISIT(char);
  ------------------
  |  | 8379|  10.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  10.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  10.7k|    }                                                           \
  |  | 8382|  10.7k|    else {                                                      \
  |  | 8383|  10.7k|        return vis(monostate_val);                              \
  |  | 8384|  10.7k|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 97.0k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 97.0k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 97.0k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|  10.8k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 10.8k, False: 86.2k]
  ------------------
 8422|  10.8k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  10.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  10.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  10.8k|    }                                                           \
  |  | 8382|  10.8k|    else {                                                      \
  |  | 8383|  10.8k|        return vis(monostate_val);                              \
  |  | 8384|  10.8k|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 97.0k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|  10.7k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 10.7k, False: 86.2k]
  ------------------
 8426|  10.7k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|  10.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  10.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  10.7k|    }                                                           \
  |  | 8382|  10.7k|    else {                                                      \
  |  | 8383|  10.7k|        return vis(monostate_val);                              \
  |  | 8384|  10.7k|    }
  ------------------
 8427|  10.7k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 10.7k, False: 86.2k]
  ------------------
 8428|  10.7k|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|  10.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  10.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  10.7k|    }                                                           \
  |  | 8382|  10.7k|    else {                                                      \
  |  | 8383|  10.7k|        return vis(monostate_val);                              \
  |  | 8384|  10.7k|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 97.0k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|  10.7k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 10.7k, False: 86.2k]
  ------------------
 8432|  10.7k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|  10.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  10.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  10.7k|    }                                                           \
  |  | 8382|  10.7k|    else {                                                      \
  |  | 8383|  10.7k|        return vis(monostate_val);                              \
  |  | 8384|  10.7k|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 97.0k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 97.0k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 97.0k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 97.0k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 97.0k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  97.0k|            SCN_CLANG_POP
 8456|  97.0k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5426|   264k|    {
 5427|   264k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 264k]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|   264k|        return static_cast<std::size_t>(m_desc &
 5432|   264k|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|   264k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5451|   278k|    {
 5452|   278k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|   278k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5394|  13.8k|    {
 5395|  13.8k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.8k]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|  13.8k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 13.8k]
  |  |  ------------------
  ------------------
 5403|     36|            return {};
 5404|     36|        }
 5405|       |
 5406|  13.8k|        const auto t = type(id);
 5407|  13.8k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 866, False: 12.9k]
  |  |  ------------------
  ------------------
 5408|    866|            return {};
 5409|    866|        }
 5410|       |
 5411|  12.9k|        basic_scan_arg<Context> arg;
 5412|  12.9k|        arg.m_type = t;
 5413|  12.9k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 12.9k, False: 0]
  ------------------
 5414|  12.9k|            arg.m_value.ref_value = m_builtin_values[id];
 5415|  12.9k|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|  12.9k|        return arg;
 5420|  13.8k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5201|  13.8k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5460|  13.8k|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|  13.8k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|  13.8k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|  13.8k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|  13.8k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5455|  12.9k|    {
 5456|  12.9k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|  12.9k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5207|  22.6k|    {
 5208|  22.6k|        return m_type != detail::arg_type::none_type;
 5209|  22.6k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  6.33k|{
 8378|  6.33k|#define SCN_VISIT(Type)                                         \
 8379|  6.33k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  6.33k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  6.33k|    }                                                           \
 8382|  6.33k|    else {                                                      \
 8383|  6.33k|        return vis(monostate_val);                              \
 8384|  6.33k|    }
 8385|       |
 8386|  6.33k|    monostate monostate_val{};
 8387|       |
 8388|  6.33k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 6.33k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 6.33k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|    704|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 704, False: 5.63k]
  ------------------
 8394|    704|            SCN_VISIT(int);
  ------------------
  |  | 8379|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    704|    }                                                           \
  |  | 8382|    704|    else {                                                      \
  |  | 8383|    704|        return vis(monostate_val);                              \
  |  | 8384|    704|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 6.33k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 6.33k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 6.33k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 6.33k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|    704|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 704, False: 5.63k]
  ------------------
 8404|    704|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    704|    }                                                           \
  |  | 8382|    704|    else {                                                      \
  |  | 8383|    704|        return vis(monostate_val);                              \
  |  | 8384|    704|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 6.33k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 6.33k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|    704|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 704, False: 5.63k]
  ------------------
 8410|    704|            SCN_VISIT(void*);
  ------------------
  |  | 8379|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    704|    }                                                           \
  |  | 8382|    704|    else {                                                      \
  |  | 8383|    704|        return vis(monostate_val);                              \
  |  | 8384|    704|    }
  ------------------
 8411|    704|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 704, False: 5.63k]
  ------------------
 8412|    704|            SCN_VISIT(bool);
  ------------------
  |  | 8379|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    704|    }                                                           \
  |  | 8382|    704|    else {                                                      \
  |  | 8383|    704|        return vis(monostate_val);                              \
  |  | 8384|    704|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 6.33k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|    704|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 704, False: 5.63k]
  ------------------
 8416|    704|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    704|    }                                                           \
  |  | 8382|    704|    else {                                                      \
  |  | 8383|    704|        return vis(monostate_val);                              \
  |  | 8384|    704|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 6.33k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 6.33k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|    704|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 704, False: 5.63k]
  ------------------
 8422|    704|            SCN_VISIT(double);
  ------------------
  |  | 8379|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    704|    }                                                           \
  |  | 8382|    704|    else {                                                      \
  |  | 8383|    704|        return vis(monostate_val);                              \
  |  | 8384|    704|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 6.33k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 6.33k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|    704|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 704, False: 5.63k]
  ------------------
 8428|    704|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    704|    }                                                           \
  |  | 8382|    704|    else {                                                      \
  |  | 8383|    704|        return vis(monostate_val);                              \
  |  | 8384|    704|    }
  ------------------
 8429|    704|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 704, False: 5.63k]
  ------------------
 8430|    704|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    704|    }                                                           \
  |  | 8382|    704|    else {                                                      \
  |  | 8383|    704|        return vis(monostate_val);                              \
  |  | 8384|    704|    }
  ------------------
 8431|    704|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 704, False: 5.63k]
  ------------------
 8432|    704|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|    704|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    704|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    704|    }                                                           \
  |  | 8382|    704|    else {                                                      \
  |  | 8383|    704|        return vis(monostate_val);                              \
  |  | 8384|    704|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 6.33k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 6.33k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 6.33k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 6.33k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 6.33k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  6.33k|            SCN_CLANG_POP
 8456|  6.33k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5505|   264k|    {
 5506|   264k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8016|   264k|    {
 8017|   264k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|   264k|{
 7005|   264k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|   264k|    handler.check_args_exhausted();
 7007|   264k|    return handler.get_error();
 7008|   264k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|   264k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|   264k|    auto begin = format.data();
 6974|   264k|    auto it = begin;
 6975|   264k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   549M|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 549M, False: 117k]
  ------------------
 6978|   549M|        const auto ch = *it++;
 6979|   549M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 15.2k, False: 549M]
  ------------------
 6980|  15.2k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  15.2k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  15.2k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 13.0k, False: 2.14k]
  ------------------
 6984|  13.0k|                return;
 6985|  13.0k|            }
 6986|  15.2k|        }
 6987|   549M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 134k, False: 549M]
  ------------------
 6988|   134k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 133k, False: 174]
  |  |  |  Branch (859:45): [True: 572, False: 133k]
  |  |  |  Branch (859:45): [True: 133k, False: 174]
  |  |  ------------------
  ------------------
 6989|   133k|                handler.on_error("Unmatched '}' in format string");
 6990|   133k|                return;
 6991|   133k|            }
 6992|       |
 6993|    174|            handler.on_literal_text(begin, it);
 6994|    174|            begin = ++it;
 6995|    174|        }
 6996|   549M|    }
 6997|       |
 6998|   117k|    handler.on_literal_text(begin, end);
 6999|   117k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6902|  15.2k|{
 6903|  15.2k|    struct id_adapter {
 6904|  15.2k|        constexpr void operator()()
 6905|  15.2k|        {
 6906|  15.2k|            arg_id = handler.on_arg_id();
 6907|  15.2k|        }
 6908|  15.2k|        constexpr void operator()(std::size_t id)
 6909|  15.2k|        {
 6910|  15.2k|            arg_id = handler.on_arg_id(id);
 6911|  15.2k|        }
 6912|       |
 6913|  15.2k|        constexpr void on_error(const char* msg)
 6914|  15.2k|        {
 6915|  15.2k|            SCN_UNLIKELY_ATTR
 6916|  15.2k|            handler.on_error(msg);
 6917|  15.2k|        }
 6918|       |
 6919|  15.2k|        Handler& handler;
 6920|  15.2k|        std::size_t arg_id;
 6921|  15.2k|    };
 6922|       |
 6923|  15.2k|    ++begin;
 6924|  15.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  15.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 15.1k]
  |  |  ------------------
  ------------------
 6925|     46|        handler.on_error("Unexpected end of replacement field");
 6926|     46|        return begin;
 6927|     46|    }
 6928|       |
 6929|  15.1k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 6.82k, False: 8.36k]
  ------------------
 6930|  6.82k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|  6.82k|    }
 6932|  8.36k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 432, False: 7.93k]
  ------------------
 6933|    432|        handler.on_literal_text(begin, begin + 1);
 6934|    432|    }
 6935|  7.93k|    else {
 6936|  7.93k|        auto adapter = id_adapter{handler, 0};
 6937|  7.93k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  7.93k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92, False: 7.84k]
  |  |  ------------------
  ------------------
 6940|     92|            handler.on_error("Missing '}' in format string");
 6941|     92|            return begin;
 6942|     92|        }
 6943|       |
 6944|  7.84k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 86, False: 7.75k]
  ------------------
 6945|     86|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|     86|        }
 6947|  7.75k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 7.01k, False: 744]
  ------------------
 6948|  7.01k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  7.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 6.94k]
  |  |  ------------------
  ------------------
 6949|     72|                handler.on_error("Unexpected end of replacement field");
 6950|     72|                return begin;
 6951|     72|            }
 6952|  6.94k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  6.94k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.42k, False: 3.51k]
  |  |  |  Branch (859:45): [True: 0, False: 6.94k]
  |  |  |  Branch (859:45): [True: 3.42k, False: 3.51k]
  |  |  ------------------
  ------------------
 6954|  3.42k|                handler.on_error("Unknown format specifier");
 6955|  3.42k|                return begin;
 6956|  3.42k|            }
 6957|  6.94k|        }
 6958|    744|        else {
 6959|    744|            SCN_UNLIKELY_ATTR
 6960|    744|            handler.on_error("Missing '}' in format string");
 6961|    744|            return begin;
 6962|    744|        }
 6963|  7.84k|    }
 6964|  10.8k|    return begin + 1;
 6965|  15.1k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 7999|  13.8k|    {
 8000|  13.8k|        return m_args.get(id);
 8001|  13.8k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8004|  6.91k|    {
 8005|  6.91k|        return m_args;
 8006|  6.91k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8009|  10.3k|    {
 8010|  10.3k|        return m_locale;
 8011|  10.3k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5526|  13.7k|    {
 5527|  13.7k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.7k]
  |  |  ------------------
  ------------------
 5528|      0|            on_error(
 5529|      0|                "Cannot switch from manual to automatic argument indexing");
 5530|      0|            return 0;
 5531|      0|        }
 5532|       |
 5533|  13.7k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|  13.7k|        do_check_arg_id(id);
 5535|  13.7k|        return id;
 5536|  13.7k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5550|     18|    {
 5551|     18|        return detail::handle_error(
 5552|     18|            scan_error{scan_error::invalid_format_string, msg});
 5553|     18|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6014|  13.9k|{
 6015|  13.9k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|  13.9k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|  13.9k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  7.93k|{
 6404|  7.93k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  7.93k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 7.93k, False: 0]
  |  Branch (6405:26): [True: 1.05k, False: 6.88k]
  ------------------
 6406|  1.05k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  1.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|  1.05k|    }
 6408|       |
 6409|  6.88k|    handler();
 6410|  6.88k|    return begin;
 6411|  7.93k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6373|  1.05k|{
 6374|  1.05k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6375|       |
 6376|  1.05k|    CharT c = *begin;
 6377|  1.05k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6377:9): [True: 136, False: 916]
  |  Branch (6377:27): [True: 334, False: 582]
  ------------------
 6378|    470|        handler.on_error("Invalid argument ID");
 6379|    470|        return begin;
 6380|    470|    }
 6381|       |
 6382|    582|    int idx = 0;
 6383|    582|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6383:9): [True: 388, False: 194]
  ------------------
 6384|    388|        idx = parse_simple_int(begin, end);
 6385|    388|    }
 6386|    194|    else {
 6387|    194|        ++begin;
 6388|    194|    }
 6389|       |
 6390|    582|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6390:9): [True: 92, False: 490]
  |  Branch (6390:26): [True: 404, False: 86]
  |  Branch (6390:50): [True: 274, False: 130]
  ------------------
 6391|    366|        handler.on_error("Invalid argument ID");
 6392|    366|        return begin;
 6393|    366|    }
 6394|    216|    handler(idx);
 6395|       |
 6396|    216|    return begin;
 6397|    582|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6914|    836|        {
 6915|    836|            SCN_UNLIKELY_ATTR
 6916|    836|            handler.on_error(msg);
 6917|    836|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6352|  2.74k|{
 6353|  2.74k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6354|  2.74k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  2.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6355|       |
 6356|  2.74k|    unsigned long long value = 0;
 6357|  2.85k|    do {
 6358|  2.85k|        value *= 10;
 6359|  2.85k|        value += static_cast<unsigned long long>(*begin - '0');
 6360|  2.85k|        if (value >
  ------------------
  |  Branch (6360:13): [True: 0, False: 2.85k]
  ------------------
 6361|  2.85k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6362|      0|            return -1;
 6363|      0|        }
 6364|  2.85k|        ++begin;
 6365|  2.85k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6365:14): [True: 2.76k, False: 92]
  |  Branch (6365:30): [True: 2.64k, False: 118]
  |  Branch (6365:47): [True: 110, False: 2.53k]
  ------------------
 6366|  2.74k|    return static_cast<int>(value);
 6367|  2.74k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6909|    216|        {
 6910|    216|            arg_id = handler.on_arg_id(id);
 6911|    216|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5539|    216|    {
 5540|    216|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 198]
  |  |  ------------------
  ------------------
 5541|     18|            on_error(
 5542|     18|                "Cannot switch from manual to automatic argument indexing");
 5543|     18|            return;
 5544|     18|        }
 5545|    198|        m_next_arg_id = -1;
 5546|    198|        do_check_arg_id(id);
 5547|    198|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  6.88k|        {
 6906|  6.88k|            arg_id = handler.on_arg_id();
 6907|  6.88k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5212|  13.8k|    {
 5213|  13.8k|        return m_type;
 5214|  13.8k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5521|  3.48k|    {
 5522|  3.48k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|  3.48k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5510|  10.4k|    {
 5511|  10.4k|        return m_format.data();
 5512|  10.4k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|  6.94k|    {
 7083|  6.94k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  6.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  6.94k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6818|  6.94k|{
 6819|  6.94k|    auto do_presentation = [&]() -> const CharT* {
 6820|  6.94k|        if (*begin == CharT{'['}) {
 6821|  6.94k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  6.94k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  6.94k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  6.94k|                return begin;
 6827|  6.94k|            }
 6828|  6.94k|            handler.on_character_set_string(set);
 6829|  6.94k|            return begin;
 6830|  6.94k|        }
 6831|  6.94k|        if (*begin == CharT{'/'}) {
 6832|  6.94k|            return parse_presentation_regex(begin, end, handler);
 6833|  6.94k|        }
 6834|  6.94k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  6.94k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  6.94k|            handler.on_error("Invalid type specifier in format string");
 6837|  6.94k|            return begin;
 6838|  6.94k|        }
 6839|  6.94k|        handler.on_type(type);
 6840|  6.94k|        return begin;
 6841|  6.94k|    };
 6842|       |
 6843|  6.94k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 6.36k, False: 582]
  |  Branch (6843:28): [True: 3.21k, False: 3.14k]
  ------------------
 6844|  6.94k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 656, False: 2.56k]
  |  Branch (6844:36): [True: 564, False: 92]
  ------------------
 6845|    564|        return do_presentation();
 6846|    564|    }
 6847|       |
 6848|  6.37k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.37k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  6.37k|    begin = parse_align(begin, end, handler);
 6854|  6.37k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 172, False: 6.20k]
  |  |  ------------------
  ------------------
 6855|    172|        handler.on_error("Unexpected end of format string");
 6856|    172|        return begin;
 6857|    172|    }
 6858|       |
 6859|  6.20k|    begin = parse_width(begin, end, handler);
 6860|  6.20k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 6.17k]
  |  |  ------------------
  ------------------
 6861|     36|        handler.on_error("Unexpected end of format string");
 6862|     36|        return begin;
 6863|     36|    }
 6864|       |
 6865|  6.17k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 434, False: 5.73k]
  ------------------
 6866|    434|        ++begin;
 6867|    434|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    434|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 408]
  |  |  ------------------
  ------------------
 6868|     26|            handler.on_error("Unexpected end of format string");
 6869|     26|            return begin;
 6870|     26|        }
 6871|    408|        begin = parse_precision(begin, end, handler);
 6872|    408|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 408]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|    408|    }
 6877|       |
 6878|  6.14k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 182, False: 5.96k]
  ------------------
 6879|    182|        handler.on_localized();
 6880|    182|        ++begin;
 6881|    182|    }
 6882|  6.14k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 6.12k]
  |  |  ------------------
  ------------------
 6883|     18|        handler.on_error("Unexpected end of format string");
 6884|     18|        return begin;
 6885|     18|    }
 6886|       |
 6887|  6.12k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 6.12k, False: 0]
  |  Branch (6887:25): [True: 3.32k, False: 2.80k]
  ------------------
 6888|  3.32k|        do_presentation();
 6889|  3.32k|    }
 6890|  6.12k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.44k, False: 4.67k]
  |  |  ------------------
  ------------------
 6891|  1.44k|        handler.on_error("Unexpected end of format string");
 6892|  1.44k|        return begin;
 6893|  1.44k|    }
 6894|       |
 6895|  4.67k|    return begin;
 6896|  6.12k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6467|  3.21k|{
 6468|  3.21k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 488, False: 2.72k]
  |  Branch (6468:33): [True: 402, False: 86]
  ------------------
 6469|  3.21k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 536, False: 2.27k]
  |  Branch (6469:33): [True: 254, False: 282]
  ------------------
 6470|  3.21k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|  3.88k|    auto do_presentation = [&]() -> const CharT* {
 6820|  3.88k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 1.09k, False: 2.78k]
  ------------------
 6821|  1.09k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  1.09k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.05k, False: 46]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|  1.05k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  1.05k|                return begin;
 6827|  1.05k|            }
 6828|     46|            handler.on_character_set_string(set);
 6829|     46|            return begin;
 6830|  1.09k|        }
 6831|  2.78k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 490, False: 2.29k]
  ------------------
 6832|    490|            return parse_presentation_regex(begin, end, handler);
 6833|    490|        }
 6834|  2.29k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  2.29k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  2.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 728, False: 1.57k]
  |  |  ------------------
  ------------------
 6836|    728|            handler.on_error("Invalid type specifier in format string");
 6837|    728|            return begin;
 6838|    728|        }
 6839|  1.57k|        handler.on_type(type);
 6840|  1.57k|        return begin;
 6841|  2.29k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6657|  1.09k|{
 6658|  1.09k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|  1.09k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  1.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|  1.09k|    auto start = begin;
 6662|  1.09k|    ++begin;
 6663|       |
 6664|  1.09k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 1.06k]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|     28|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|     28|        return {};
 6669|     28|    }
 6670|  1.06k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 118, False: 950]
  ------------------
 6671|    118|        handler.on_charset_inverted();
 6672|    118|        ++begin;
 6673|    118|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 92]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|     26|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|     26|            return {};
 6678|     26|        }
 6679|     92|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 0, False: 92]
  ------------------
 6680|      0|            handler.on_charset_single(char32_t{']'});
 6681|      0|            ++begin;
 6682|      0|        }
 6683|     92|    }
 6684|    950|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 0, False: 950]
  ------------------
 6685|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|      0|    }
 6687|       |
 6688|  9.21k|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 8.82k, False: 384]
  ------------------
 6689|  8.82k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  8.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 612, False: 8.21k]
  |  |  ------------------
  ------------------
 6690|    612|            break;
 6691|    612|        }
 6692|       |
 6693|  8.21k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 46, False: 8.17k]
  ------------------
 6694|     46|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|     46|        }
 6696|       |
 6697|  8.17k|        parse_presentation_set_literal(begin, end, handler);
 6698|  8.17k|    }
 6699|       |
 6700|    996|    SCN_UNLIKELY_ATTR
 6701|    996|    handler.on_error("Invalid [character set] specifier in format string");
 6702|    996|    return {};
 6703|  1.04k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6621|  8.17k|{
 6622|  8.17k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|  8.17k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|  8.17k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  8.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 462, False: 7.70k]
  |  |  ------------------
  ------------------
 6626|    462|        return;
 6627|    462|    }
 6628|       |
 6629|  7.70k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 7.38k, False: 322]
  |  Branch (6629:25): [True: 774, False: 6.61k]
  |  Branch (6629:49): [True: 710, False: 64]
  ------------------
 6630|  7.70k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 710, False: 0]
  ------------------
 6631|    710|        ++begin;
 6632|       |
 6633|    710|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|    710|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    710|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64, False: 646]
  |  |  ------------------
  ------------------
 6635|     64|            return;
 6636|     64|        }
 6637|       |
 6638|    646|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    646|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86, False: 560]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|     86|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|     86|            return;
 6643|     86|        }
 6644|       |
 6645|    560|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|    560|        return;
 6647|    646|    }
 6648|       |
 6649|  6.99k|    handler.on_charset_single(cp_first);
 6650|  6.99k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6597|  8.88k|{
 6598|  8.88k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|  8.88k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|  8.88k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.88k]
  |  |  |  Branch (859:45): [True: 0, False: 8.88k]
  |  |  |  Branch (859:45): [True: 0, False: 8.88k]
  |  |  ------------------
  ------------------
 6602|      0|        handler.on_error("Invalid encoding in format string");
 6603|      0|        return invalid_code_point;
 6604|      0|    }
 6605|       |
 6606|  8.88k|    const auto cp =
 6607|  8.88k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|  8.88k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  8.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 526, False: 8.35k]
  |  |  ------------------
  ------------------
 6609|    526|        handler.on_error("Invalid encoding in format string");
 6610|    526|        return invalid_code_point;
 6611|    526|    }
 6612|       |
 6613|  8.35k|    begin += len;
 6614|  8.35k|    return cp;
 6615|  8.88k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6306|     46|    {
 6307|     46|        m_specs.charset_string_data = fmt.data();
 6308|     46|        m_specs.charset_string_size = fmt.size();
 6309|     46|        on_type(presentation_type::string_set);
 6310|     46|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6709|    490|{
 6710|    490|#if !SCN_DISABLE_REGEX
 6711|    490|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    490|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    490|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6712|    490|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|    490|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    490|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6713|       |
 6714|    490|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|    980|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6714:19): [Folded - Ignored]
  |  Branch (6714:19): [Folded - Ignored]
  ------------------
 6715|    490|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6715:19): [Folded - Ignored]
  ------------------
 6716|    490|        handler.on_error("Regex backend doesn't support wide strings as input");
 6717|    490|        return begin;
 6718|    490|    }
 6719|       |
 6720|    490|    auto start = begin;
 6721|    490|    ++begin;
 6722|       |
 6723|    490|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    490|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 462]
  |  |  ------------------
  ------------------
 6724|     28|        handler.on_error("Unexpected end of regex in format string");
 6725|     28|        return begin;
 6726|     28|    }
 6727|       |
 6728|    462|    handler.on_type(presentation_type::regex);
 6729|  8.67k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6729:12): [True: 8.27k, False: 406]
  ------------------
 6730|  8.27k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6730:13): [True: 56, False: 8.21k]
  ------------------
 6731|     56|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6731:17): [True: 56, False: 0]
  ------------------
 6732|     56|                break;
 6733|     56|            }
 6734|      0|            else {
 6735|      0|                handler.on_type(presentation_type::regex_escaped);
 6736|      0|            }
 6737|     56|        }
 6738|  8.27k|    }
 6739|    462|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 406, False: 56]
  |  |  ------------------
  ------------------
 6740|    406|        handler.on_error("Unexpected end of regex in format string");
 6741|    406|        return begin;
 6742|    406|    }
 6743|       |
 6744|     56|    auto regex_end = begin;
 6745|     56|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6746|     56|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 38]
  |  |  ------------------
  ------------------
 6747|     18|        handler.on_error("Invalid (empty) regex in format string");
 6748|     18|        return begin;
 6749|     18|    }
 6750|     38|    handler.on_regex_pattern(regex_pattern);
 6751|     38|    ++begin;
 6752|       |
 6753|     38|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 20]
  |  |  ------------------
  ------------------
 6754|     18|        handler.on_error("Unexpected end of regex in format string");
 6755|     18|        return begin;
 6756|     18|    }
 6757|       |
 6758|     20|    regex_flags flags{regex_flags::none};
 6759|     20|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6760|     20|        {{'m', regex_flags::multiline},
 6761|     20|         {'s', regex_flags::singleline},
 6762|     20|         {'i', regex_flags::nocase},
 6763|     20|         {'n', regex_flags::nocapture}}};
 6764|     20|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6764:12): [True: 20, False: 0]
  ------------------
 6765|     20|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6765:13): [True: 0, False: 20]
  ------------------
 6766|      0|            break;
 6767|      0|        }
 6768|     20|        bool found_flag = false;
 6769|     80|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6769:24): [True: 80, False: 20]
  ------------------
 6770|     80|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6770:17): [True: 80, False: 0]
  ------------------
 6771|     80|                continue;
 6772|     80|            }
 6773|      0|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6773:17): [True: 0, False: 0]
  ------------------
 6774|      0|                handler.on_error("Flag set multiple times in regex");
 6775|      0|                return begin;
 6776|      0|            }
 6777|      0|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6778|      0|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6778:17): [True: 0, False: 0]
  ------------------
 6779|       |                // clang-format off
 6780|      0|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6781|       |                // clang-format on
 6782|      0|            }
 6783|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6784|       |            if (*begin == CharT{'m'}) {
 6785|       |                // clang-format off
 6786|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6787|       |                // clang-format on
 6788|       |            }
 6789|       |#endif
 6790|      0|#endif
 6791|      0|            flags |= flag.second;
 6792|      0|            found_flag = true;
 6793|      0|            break;
 6794|      0|        }
 6795|     20|        if (!found_flag) {
  ------------------
  |  Branch (6795:13): [True: 20, False: 0]
  ------------------
 6796|     20|            handler.on_error("Invalid flag in regex");
 6797|     20|            return begin;
 6798|     20|        }
 6799|     20|    }
 6800|      0|    handler.on_regex_flags(flags);
 6801|       |
 6802|      0|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6803|      0|        handler.on_error("Unexpected end of regex in format string");
 6804|      0|        return begin;
 6805|      0|    }
 6806|       |
 6807|      0|    return begin;
 6808|       |#else
 6809|       |    handler.on_error("Regular expression support is disabled");
 6810|       |    return {};
 6811|       |#endif
 6812|      0|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6314|     38|    {
 6315|     38|        m_specs.charset_string_data = pattern.data();
 6316|     38|        m_specs.charset_string_size = pattern.size();
 6317|     38|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6415|  2.29k|{
 6416|  2.29k|    switch (type) {
 6417|     76|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 76, False: 2.22k]
  ------------------
 6418|    202|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 126, False: 2.17k]
  ------------------
 6419|    202|            return presentation_type::int_binary;
 6420|     72|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 72, False: 2.22k]
  ------------------
 6421|     72|            return presentation_type::int_decimal;
 6422|     46|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 46, False: 2.25k]
  ------------------
 6423|     46|            return presentation_type::int_generic;
 6424|    172|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 172, False: 2.12k]
  ------------------
 6425|    172|            return presentation_type::int_unsigned_decimal;
 6426|     64|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 64, False: 2.23k]
  ------------------
 6427|     64|            return presentation_type::int_octal;
 6428|     72|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 72, False: 2.22k]
  ------------------
 6429|    108|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 36, False: 2.26k]
  ------------------
 6430|    108|            return presentation_type::int_hex;
 6431|     18|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 18, False: 2.28k]
  ------------------
 6432|     72|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 54, False: 2.24k]
  ------------------
 6433|     72|            return presentation_type::int_arbitrary_base;
 6434|     42|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 42, False: 2.25k]
  ------------------
 6435|     96|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 54, False: 2.24k]
  ------------------
 6436|     96|            return presentation_type::float_hex;
 6437|     54|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 54, False: 2.24k]
  ------------------
 6438|    154|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 100, False: 2.19k]
  ------------------
 6439|    154|            return presentation_type::float_scientific;
 6440|     46|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 46, False: 2.25k]
  ------------------
 6441|    100|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 54, False: 2.24k]
  ------------------
 6442|    100|            return presentation_type::float_fixed;
 6443|     94|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 94, False: 2.20k]
  ------------------
 6444|    166|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 72, False: 2.22k]
  ------------------
 6445|    166|            return presentation_type::float_general;
 6446|     48|        case 's':
  ------------------
  |  Branch (6446:9): [True: 48, False: 2.25k]
  ------------------
 6447|     48|            return presentation_type::string;
 6448|    216|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 216, False: 2.08k]
  ------------------
 6449|    216|            return presentation_type::character;
 6450|     18|        case '?':
  ------------------
  |  Branch (6450:9): [True: 18, False: 2.28k]
  ------------------
 6451|     18|            return presentation_type::escaped_character;
 6452|     36|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 36, False: 2.26k]
  ------------------
 6453|     36|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 2.29k]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 2.29k]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|    728|        default:
  ------------------
  |  Branch (6460:9): [True: 728, False: 1.57k]
  ------------------
 6461|    728|            return presentation_type::none;
 6462|  2.29k|    }
 6463|  2.29k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6492|  6.37k|{
 6493|  6.37k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  6.37k|    auto check_align = [](wchar_t ch) {
 6496|  6.37k|        switch (ch) {
 6497|  6.37k|            case L'<':
 6498|  6.37k|                return align_type::left;
 6499|  6.37k|            case L'>':
 6500|  6.37k|                return align_type::right;
 6501|  6.37k|            case L'^':
 6502|  6.37k|                return align_type::center;
 6503|  6.37k|            default:
 6504|  6.37k|                return align_type::none;
 6505|  6.37k|        }
 6506|  6.37k|    };
 6507|       |
 6508|  6.37k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  6.37k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.37k]
  |  |  |  Branch (859:45): [True: 0, False: 6.37k]
  |  |  |  Branch (859:45): [True: 0, False: 6.37k]
  |  |  ------------------
  ------------------
 6510|  6.37k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  6.37k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  6.37k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  6.37k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  6.37k|    const auto begin_before_fill = begin;
 6520|  6.37k|    begin += potential_fill_len;
 6521|       |
 6522|  6.37k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 582, False: 5.79k]
  ------------------
 6523|    582|        return begin_before_fill;
 6524|    582|    }
 6525|       |
 6526|  5.79k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  5.79k|    const auto begin_after_fill = begin;
 6528|  5.79k|    ++begin;
 6529|       |
 6530|  5.79k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 5.79k, False: 0]
  ------------------
 6531|  5.79k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 132, False: 5.66k]
  |  |  ------------------
  ------------------
 6532|    132|            handler.on_error("Invalid fill character '{' in format string");
 6533|    132|            return begin;
 6534|    132|        }
 6535|  5.66k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 1.03k, False: 4.63k]
  ------------------
 6536|  1.03k|            return begin_before_fill;
 6537|  1.03k|        }
 6538|  5.66k|    }
 6539|       |
 6540|  4.63k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 4.41k, False: 218]
  ------------------
 6541|  4.41k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 390, False: 4.02k]
  ------------------
 6542|    390|            handler.on_align(potential_align_on_fill);
 6543|    390|            return begin_after_fill;
 6544|    390|        }
 6545|  4.02k|        return begin_before_fill;
 6546|  4.41k|    }
 6547|       |
 6548|    218|    handler.on_fill(potential_fill);
 6549|    218|    handler.on_align(potential_align_after_fill);
 6550|    218|    return begin;
 6551|  4.63k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6474|  6.37k|{
 6475|  6.37k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|  6.37k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|  6.37k|        return 1;
 6478|  6.37k|    }
 6479|  6.37k|    else {
 6480|  6.37k|        const auto lengths =
 6481|  6.37k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|  6.37k|            "\3\4";
 6483|  6.37k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|  6.37k|        return len;
 6485|  6.37k|    }
 6486|  6.37k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|  12.1k|    auto check_align = [](wchar_t ch) {
 6496|  12.1k|        switch (ch) {
 6497|    198|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 198, False: 11.9k]
  ------------------
 6498|    198|                return align_type::left;
 6499|     82|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 82, False: 12.0k]
  ------------------
 6500|     82|                return align_type::right;
 6501|    462|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 462, False: 11.7k]
  ------------------
 6502|    462|                return align_type::center;
 6503|  11.4k|            default:
  ------------------
  |  Branch (6503:13): [True: 11.4k, False: 742]
  ------------------
 6504|  11.4k|                return align_type::none;
 6505|  12.1k|        }
 6506|  12.1k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6228|    218|    {
 6229|    218|        m_specs.fill = fill;
 6230|    218|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6109|    218|    {
 6110|    218|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|    218|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    218|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6111|    218|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|    218|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    218|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6112|    218|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6112:23): [Folded - Ignored]
  ------------------
 6113|    218|            for (size_t i = 0; i < s.size(); ++i) {
 6114|    218|                SCN_GCC_PUSH
 6115|    218|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6116|    218|                m_data[i] = s[i];
 6117|    218|                SCN_GCC_POP
 6118|    218|            }
 6119|    218|            m_size = static_cast<unsigned char>(s.size());
 6120|    218|        }
 6121|    218|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (6121:28): [Folded - Ignored]
  ------------------
 6122|    218|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6123|    218|            m_data[1] =
 6124|    218|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6125|    218|            if (s.size() == 1) {
 6126|    218|                return;
 6127|    218|            }
 6128|    218|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6129|    218|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6130|    218|        }
 6131|    218|        else {
 6132|    218|            const auto front = static_cast<unsigned>(s.front());
 6133|    218|            m_data[0] = static_cast<char>(front);
 6134|    218|            m_data[1] = static_cast<char>(front >> 8);
 6135|    218|            m_data[2] = static_cast<char>(front >> 16);
 6136|    218|            m_data[3] = static_cast<char>(front >> 24);
 6137|    218|        }
 6138|    218|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6557|  6.20k|{
 6558|  6.20k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  6.20k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 5.24k, False: 962]
  |  Branch (6560:33): [True: 2.34k, False: 2.90k]
  ------------------
 6561|  2.34k|        int width = parse_simple_int(begin, end);
 6562|  2.34k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  2.34k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.34k, False: 0]
  |  |  ------------------
  ------------------
 6563|  2.34k|            handler.on_width(width);
 6564|  2.34k|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|  2.34k|    }
 6570|  6.20k|    return begin;
 6571|  6.20k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6577|    408|{
 6578|    408|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    408|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    408|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6579|       |
 6580|    408|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6580:9): [True: 302, False: 106]
  |  Branch (6580:33): [True: 18, False: 284]
  ------------------
 6581|     18|        int prec = parse_simple_int(begin, end);
 6582|     18|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|     18|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 6583|     18|            handler.on_precision(prec);
 6584|     18|        }
 6585|      0|        else {
 6586|      0|            handler.on_error("Invalid field precision");
 6587|      0|            return begin;
 6588|      0|        }
 6589|     18|    }
 6590|    408|    return begin;
 6591|    408|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7087|    182|    {
 7088|    182|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|    182|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 162, False: 20]
  ------------------
 7090|    182|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 142, False: 20]
  ------------------
 7091|    182|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 122, False: 20]
  ------------------
 7092|    182|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 102, False: 20]
  ------------------
 7093|    102|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|    102|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|    102|        }
 7098|       |
 7099|     80|        Handler::on_localized();
 7100|     80|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  2.41k|{
 8378|  2.41k|#define SCN_VISIT(Type)                                         \
 8379|  2.41k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  2.41k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  2.41k|    }                                                           \
 8382|  2.41k|    else {                                                      \
 8383|  2.41k|        return vis(monostate_val);                              \
 8384|  2.41k|    }
 8385|       |
 8386|  2.41k|    monostate monostate_val{};
 8387|       |
 8388|  2.41k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 2.41k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 2.41k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|    274|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 274, False: 2.14k]
  ------------------
 8394|    274|            SCN_VISIT(int);
  ------------------
  |  | 8379|    274|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    274|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    274|    }                                                           \
  |  | 8382|    274|    else {                                                      \
  |  | 8383|    274|        return vis(monostate_val);                              \
  |  | 8384|    274|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 2.41k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 2.41k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 2.41k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 2.41k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|    274|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 274, False: 2.14k]
  ------------------
 8404|    274|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|    274|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    274|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    274|    }                                                           \
  |  | 8382|    274|    else {                                                      \
  |  | 8383|    274|        return vis(monostate_val);                              \
  |  | 8384|    274|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 2.41k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 2.41k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|    264|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 264, False: 2.15k]
  ------------------
 8410|    264|            SCN_VISIT(void*);
  ------------------
  |  | 8379|    264|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    264|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    264|    }                                                           \
  |  | 8382|    264|    else {                                                      \
  |  | 8383|    264|        return vis(monostate_val);                              \
  |  | 8384|    264|    }
  ------------------
 8411|    274|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 274, False: 2.14k]
  ------------------
 8412|    274|            SCN_VISIT(bool);
  ------------------
  |  | 8379|    274|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    274|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    274|    }                                                           \
  |  | 8382|    274|    else {                                                      \
  |  | 8383|    274|        return vis(monostate_val);                              \
  |  | 8384|    274|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 2.41k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|    264|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 264, False: 2.15k]
  ------------------
 8416|    264|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|    264|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    264|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    264|    }                                                           \
  |  | 8382|    264|    else {                                                      \
  |  | 8383|    264|        return vis(monostate_val);                              \
  |  | 8384|    264|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 2.41k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 2.41k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|    274|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 274, False: 2.14k]
  ------------------
 8422|    274|            SCN_VISIT(double);
  ------------------
  |  | 8379|    274|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    274|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    274|    }                                                           \
  |  | 8382|    274|    else {                                                      \
  |  | 8383|    274|        return vis(monostate_val);                              \
  |  | 8384|    274|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 2.41k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 2.41k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|    264|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 264, False: 2.15k]
  ------------------
 8428|    264|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|    264|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    264|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    264|    }                                                           \
  |  | 8382|    264|    else {                                                      \
  |  | 8383|    264|        return vis(monostate_val);                              \
  |  | 8384|    264|    }
  ------------------
 8429|    264|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 264, False: 2.15k]
  ------------------
 8430|    264|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|    264|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    264|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    264|    }                                                           \
  |  | 8382|    264|    else {                                                      \
  |  | 8383|    264|        return vis(monostate_val);                              \
  |  | 8384|    264|    }
  ------------------
 8431|    264|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 264, False: 2.15k]
  ------------------
 8432|    264|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|    264|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    264|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    264|    }                                                           \
  |  | 8382|    264|    else {                                                      \
  |  | 8383|    264|        return vis(monostate_val);                              \
  |  | 8384|    264|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 2.41k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 2.41k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 2.41k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 2.41k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 2.41k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  2.41k|            SCN_CLANG_POP
 8456|  2.41k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.6k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   132k|{
   44|   132k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   132k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  14.6k|{
  127|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.6k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   132k|{
   60|   132k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   132k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.6k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  14.6k|{
  127|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.6k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.6k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  14.6k|{
  127|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.6k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.6k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  14.6k|{
  127|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.6k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.6k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  14.6k|{
  127|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.6k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.6k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  14.6k|{
  127|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.6k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.6k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  14.6k|{
  127|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.6k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.6k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
  126|  14.6k|{
  127|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.6k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.6k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  14.6k|{
  127|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.6k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   198k|{
  653|   198k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   198k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    210|{
  659|    210|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    210|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 105, False: 105]
  ------------------
  661|    210|                    : std::locale{};
  662|    210|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  2.10k|{
 1221|  2.10k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  2.10k|                                  m_nan_payload_buffer, value);
 1223|  2.10k|    value = this->setsign(value);
 1224|  2.10k|    return n;
 1225|  2.10k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    924|{
 1221|    924|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    924|                                  m_nan_payload_buffer, value);
 1223|    924|    value = this->setsign(value);
 1224|    924|    return n;
 1225|    924|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     90|{
 1461|     90|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     90|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     90|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     90|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     90|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 90, False: 0]
  ------------------
 1467|     90|        SCN_UNLIKELY_ATTR
 1468|     90|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     90|                                     "Invalid integer value");
 1470|     90|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  2.14k|{
 1461|  2.14k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  2.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  2.14k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  2.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  2.14k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  2.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  2.14k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  2.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  2.14k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 2.14k, False: 0]
  ------------------
 1467|  2.14k|        SCN_UNLIKELY_ATTR
 1468|  2.14k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  2.14k|                                     "Invalid integer value");
 1470|  2.14k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    978|{
 1461|    978|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    978|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    978|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    978|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    978|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    978|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    978|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    978|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    978|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    978|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    978|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    978|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    978|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 978, False: 0]
  ------------------
 1467|    978|        SCN_UNLIKELY_ATTR
 1468|    978|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    978|                                     "Invalid integer value");
 1470|    978|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  2.14k|{
 1461|  2.14k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  2.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  2.14k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  2.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  2.14k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  2.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  2.14k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  2.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  2.14k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 2.14k, False: 0]
  ------------------
 1467|  2.14k|        SCN_UNLIKELY_ATTR
 1468|  2.14k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  2.14k|                                     "Invalid integer value");
 1470|  2.14k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    944|{
 1461|    944|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    944|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    944|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    944|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    944|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    944|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    944|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    944|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    944|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    944|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    944|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    944|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    944|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 944, False: 0]
  ------------------
 1467|    944|        SCN_UNLIKELY_ATTR
 1468|    944|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    944|                                     "Invalid integer value");
 1470|    944|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  2.06k|{
 1461|  2.06k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  2.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  2.06k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  2.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  2.06k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  2.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  2.06k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  2.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  2.06k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 2.06k, False: 0]
  ------------------
 1467|  2.06k|        SCN_UNLIKELY_ATTR
 1468|  2.06k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  2.06k|                                     "Invalid integer value");
 1470|  2.06k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    910|{
 1461|    910|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    910|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    910|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    910|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    910|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    910|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    910|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    910|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    910|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    910|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    910|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    910|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    910|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 910, False: 0]
  ------------------
 1467|    910|        SCN_UNLIKELY_ATTR
 1468|    910|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    910|                                     "Invalid integer value");
 1470|    910|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|  66.1k|{
 2176|  66.1k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|  66.1k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|   132k|{
 2200|   132k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|   132k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  8.51k|{
  194|  8.51k|    return find_classic_impl(
  195|  8.51k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  8.51k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  8.51k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   169k|{
  202|   169k|    return find_classic_impl(
  203|   169k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   169k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|   169k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    204|{
  673|    204|    return e;
  674|    204|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|  66.1k|{
 2133|  66.1k|    return vscan_internal(source, format, args);
 2134|  66.1k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|   132k|{
 2153|   132k|    return vscan_internal(source, format, args);
 2154|   132k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  8.51k|{
  118|  8.51k|    auto it = source.begin();
  119|       |
  120|  58.1k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 51.3k, False: 6.81k]
  ------------------
  121|  51.3k|        auto sv =
  122|  51.3k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  51.3k|                .substr(0, 8);
  124|       |
  125|  51.3k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 26.0k, False: 25.3k]
  ------------------
  126|  26.0k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  26.0k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  26.0k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 1.01k, False: 25.0k]
  ------------------
  129|  1.01k|                break;
  130|  1.01k|            }
  131|  25.0k|            continue;
  132|  26.0k|        }
  133|       |
  134|   107k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 82.5k, False: 24.6k]
  ------------------
  135|  82.5k|            auto tmp =
  136|  82.5k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  82.5k|            auto res = get_next_code_point(tmp);
  138|  82.5k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 690, False: 81.8k]
  ------------------
  139|    690|                return it;
  140|    690|            }
  141|  81.8k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  81.8k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  81.8k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  81.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  81.8k|        }
  145|  25.3k|    }
  146|       |
  147|  7.82k|    return detail::make_string_view_iterator(source, it);
  148|  8.51k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|   221k|{
  105|   221k|    static_assert(sizeof(*source.data()) == 1);
  106|   221k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|   221k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   221k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|   221k|    uint64_t word{};
  108|   221k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|   221k|    return has_byte_greater(word, 127) != 0;
  111|   221k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|   191k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  82.5k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   169k|{
  118|   169k|    auto it = source.begin();
  119|       |
  120|   177k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 170k, False: 7.31k]
  ------------------
  121|   170k|        auto sv =
  122|   170k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   170k|                .substr(0, 8);
  124|       |
  125|   170k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 126k, False: 43.8k]
  ------------------
  126|   126k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   126k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   126k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 121k, False: 4.30k]
  ------------------
  129|   121k|                break;
  130|   121k|            }
  131|  4.30k|            continue;
  132|   126k|        }
  133|       |
  134|  56.7k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 53.4k, False: 3.31k]
  ------------------
  135|  53.4k|            auto tmp =
  136|  53.4k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  53.4k|            auto res = get_next_code_point(tmp);
  138|  53.4k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 40.5k, False: 12.9k]
  ------------------
  139|  40.5k|                return it;
  140|  40.5k|            }
  141|  12.9k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  12.9k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  12.9k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  12.9k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  12.9k|        }
  145|  43.8k|    }
  146|       |
  147|   129k|    return detail::make_string_view_iterator(source, it);
  148|   169k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|   156k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  53.4k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  2.10k|{
 1138|  2.10k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 2.10k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  2.10k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 2.10k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  2.10k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 2.10k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  2.10k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 2.10k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  2.10k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  2.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  2.10k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 32, False: 2.06k]
  ------------------
 1185|     32|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 1186|     32|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     32|                                         "Invalid floating-point digit");
 1188|     32|        }
 1189|     32|    }
 1190|  2.06k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  2.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.06k, False: 0]
  |  |  ------------------
  ------------------
 1191|  2.06k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  2.06k|                                     "Invalid floating-point digit");
 1193|  2.06k|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    924|{
 1138|    924|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 924]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    924|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 924]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    924|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 924]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    924|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 924]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    924|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    924|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    924|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    924|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 4, False: 920]
  ------------------
 1185|      4|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 1186|      4|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|      4|                                         "Invalid floating-point digit");
 1188|      4|        }
 1189|      4|    }
 1190|    920|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    920|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 920, False: 0]
  |  |  ------------------
  ------------------
 1191|    920|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    920|                                     "Invalid floating-point digit");
 1193|    920|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   132k|{
 1625|   132k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 131k, False: 450]
  ------------------
 1626|   131k|        return false;
 1627|   131k|    }
 1628|    450|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 324]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   132k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   132k|    {
 1903|   132k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   396k|    {
 1722|   396k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   396k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 396k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   396k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   132k|    {
 1853|   132k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   132k|{
 2030|   132k|    const auto beg = handler.get_ctx().begin();
 2031|   132k|    detail::parse_format_string<false>(format, handler);
 2032|   132k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128k, False: 3.47k]
  |  |  ------------------
  ------------------
 2033|   128k|        return unexpected(handler.error);
 2034|   128k|    }
 2035|  3.47k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   132k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|  1.47M|    {
 2014|  1.47M|        return ctx.get();
 2015|  1.47M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  1.47M|    {
 1857|  1.47M|        return contiguous_ctx;
 1858|  1.47M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   166k|    {
 1907|   398k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 244k, False: 153k]
  ------------------
 1908|   244k|            auto it = get_ctx().begin();
 1909|   244k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 2.58k, False: 241k]
  ------------------
 1910|  2.58k|                SCN_UNLIKELY_ATTR
 1911|  2.58k|                return on_error("Unexpected end of source");
 1912|  2.58k|            }
 1913|       |
 1914|   241k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   241k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   241k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 4.13k, False: 237k]
  ------------------
 1917|  4.13k|                return on_error("Invalid encoding in format string");
 1918|  4.13k|            }
 1919|   237k|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 146k, False: 90.9k]
  ------------------
 1920|   146k|                get_ctx().advance_to(
 1921|   146k|                    impl::read_while_classic_space(get_ctx().range()));
 1922|   146k|                begin = detail::to_address(std::prev(after_space_it));
 1923|   146k|                continue;
 1924|   146k|            }
 1925|       |
 1926|  90.9k|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 5.64k, False: 85.3k]
  ------------------
 1927|  5.64k|                SCN_UNLIKELY_ATTR
 1928|  5.64k|                return on_error("Unexpected literal character in source");
 1929|  5.64k|            }
 1930|  85.3k|            get_ctx().advance_to(ranges::next(it));
 1931|  85.3k|        }
 1932|   166k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1963|  12.8k|    {
 1964|  12.8k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1965|  12.8k|        set_arg_as_visited(arg_id);
 1966|       |
 1967|  12.8k|        on_visit_scan_arg(
 1968|  12.8k|            impl::default_arg_reader<context_type>{
 1969|  12.8k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1970|  12.8k|            arg);
 1971|  12.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   117k|{
 1681|   117k|    auto arg = ctx.arg(id);
 1682|   117k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.92k, False: 114k]
  |  |  ------------------
  ------------------
 1683|  2.92k|        handler.on_error("Failed to find argument with ID");
 1684|  2.92k|    }
 1685|   117k|    return arg;
 1686|   117k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|   131k|    {
 1797|   131k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.82k, False: 127k]
  |  |  ------------------
  ------------------
 1798|  3.82k|            on_error("Invalid out-of-range argument ID");
 1799|  3.82k|            return;
 1800|  3.82k|        }
 1801|       |
 1802|   127k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108, False: 127k]
  |  |  ------------------
  ------------------
 1803|    108|            return on_error("Argument with this ID has already been scanned");
 1804|    108|        }
 1805|       |
 1806|   127k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   127k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 127k, False: 0]
  |  |  ------------------
  ------------------
 1807|   127k|            visited_args_lower64 |= (1ull << id);
 1808|   127k|            return;
 1809|   127k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|   127k|    {
 1782|   127k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 127k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|   127k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   127k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 127k, False: 0]
  |  |  ------------------
  ------------------
 1788|   127k|            return (visited_args_lower64 >> id) & 1ull;
 1789|   127k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|   127k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  12.8k|    {
 1948|  12.8k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 552, False: 12.2k]
  |  Branch (1948:23): [True: 0, False: 12.2k]
  ------------------
 1949|    552|            SCN_UNLIKELY_ATTR
 1950|    552|            return;
 1951|    552|        }
 1952|       |
 1953|  12.2k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  12.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  12.2k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.13k, False: 4.15k]
  |  |  ------------------
  ------------------
 1955|  8.13k|            on_error(r.error());
 1956|  8.13k|        }
 1957|  4.15k|        else {
 1958|  4.15k|            get_ctx().advance_to(*r);
 1959|  4.15k|        }
 1960|  12.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   101k|    {
 1766|   101k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 101k, False: 0]
  |  |  ------------------
  ------------------
 1767|   101k|            error = err;
 1768|   101k|        }
 1769|   101k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|   112k|    {
 1936|   112k|        return parse_ctx.next_arg_id();
 1937|   112k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1939|  5.74k|    {
 1940|  5.74k|        parse_ctx.check_arg_id(id);
 1941|  5.74k|        return id;
 1942|  5.74k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|   104k|    {
 1977|   104k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   104k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   104k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 104k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   104k|        auto specs = detail::format_specs{};
 1990|   104k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   104k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   104k|            arg.type()};
 1993|       |
 1994|   104k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   104k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 3.15k, False: 101k]
  |  Branch (1995:29): [True: 3.48k, False: 98.1k]
  ------------------
 1996|  6.64k|            SCN_UNLIKELY_ATTR
 1997|  6.64k|            on_error("Missing '}' in format string");
 1998|  6.64k|            return parse_ctx.begin();
 1999|  6.64k|        }
 2000|  98.1k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  98.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 626, False: 97.5k]
  |  |  ------------------
  ------------------
 2001|    626|            return parse_ctx.begin();
 2002|    626|        }
 2003|  97.5k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  97.5k|        on_visit_scan_arg(
 2006|  97.5k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  97.5k|                                           get_ctx().locale()},
 2008|  97.5k|            arg);
 2009|  97.5k|        return parse_ctx.begin();
 2010|  98.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   104k|    {
 1701|   104k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  97.5k|    {
 1948|  97.5k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 494, False: 97.0k]
  |  Branch (1948:23): [True: 0, False: 97.0k]
  ------------------
 1949|    494|            SCN_UNLIKELY_ATTR
 1950|    494|            return;
 1951|    494|        }
 1952|       |
 1953|  97.0k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  97.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  97.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  97.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86.7k, False: 10.2k]
  |  |  ------------------
  ------------------
 1955|  86.7k|            on_error(r.error());
 1956|  86.7k|        }
 1957|  10.2k|        else {
 1958|  10.2k|            get_ctx().advance_to(*r);
 1959|  10.2k|        }
 1960|  97.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   596k|    {
 1761|   596k|        SCN_UNLIKELY_ATTR
 1762|   596k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   596k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   396k|    {
 1729|   396k|        {
 1730|   396k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 396k]
  ------------------
 1731|   396k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 396k]
  ------------------
 1732|   396k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   396k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   396k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 269k, False: 127k]
  ------------------
 1736|   269k|                return on_error("Argument list not exhausted");
 1737|   269k|            }
 1738|   396k|        }
 1739|       |
 1740|   127k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 127k, False: 0]
  ------------------
 1741|   127k|            return;
 1742|   127k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   396k|    {
 1777|   396k|        return error;
 1778|   396k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|   674k|    {
 1773|   674k|        return static_cast<bool>(error);
 1774|   674k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   132k|{
 2045|   132k|    const auto argcount = args.size();
 2046|   132k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 18, False: 132k]
  |  Branch (2046:60): [True: 18, False: 0]
  ------------------
 2047|     18|        auto arg = args.get(0);
 2048|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|     18|    }
 2050|       |
 2051|   132k|    auto handler = format_handler<true, CharT>{
 2052|   132k|        ranges::subrange<const CharT*>{source.data(),
 2053|   132k|                                       source.data() + source.size()},
 2054|   132k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   132k|    static_cast<    \
  |  |  929|   132k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   132k|    static_cast<    \
  |  |  929|   132k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   132k|    return vscan_parse_format_string(format, handler);
 2056|   132k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     10|    }                                                  \
  |  |  |  | 3642|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   264k|{
 2045|   264k|    const auto argcount = args.size();
 2046|   264k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 18, False: 264k]
  |  Branch (2046:60): [True: 18, False: 0]
  ------------------
 2047|     18|        auto arg = args.get(0);
 2048|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|     18|    }
 2050|       |
 2051|   264k|    auto handler = format_handler<true, CharT>{
 2052|   264k|        ranges::subrange<const CharT*>{source.data(),
 2053|   264k|                                       source.data() + source.size()},
 2054|   264k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   264k|    static_cast<    \
  |  |  929|   264k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   264k|    static_cast<    \
  |  |  929|   264k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   264k|    return vscan_parse_format_string(format, handler);
 2056|   264k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   264k|{
 1625|   264k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 248k, False: 15.9k]
  ------------------
 1626|   248k|        return false;
 1627|   248k|    }
 1628|  15.9k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 15.8k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   264k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     10|    }                                                  \
  |  |  |  | 3642|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   264k|    {
 1903|   264k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   264k|    {
 1853|   264k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   264k|{
 2030|   264k|    const auto beg = handler.get_ctx().begin();
 2031|   264k|    detail::parse_format_string<false>(format, handler);
 2032|   264k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 264k, False: 70]
  |  |  ------------------
  ------------------
 2033|   264k|        return unexpected(handler.error);
 2034|   264k|    }
 2035|     70|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   264k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|  1.05M|    {
 2014|  1.05M|        return ctx.get();
 2015|  1.05M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.05M|    {
 1857|  1.05M|        return contiguous_ctx;
 1858|  1.05M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   133k|    {
 1907|   298k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 286k, False: 12.9k]
  ------------------
 1908|   286k|            auto it = get_ctx().begin();
 1909|   286k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 390, False: 285k]
  ------------------
 1910|    390|                SCN_UNLIKELY_ATTR
 1911|    390|                return on_error("Unexpected end of source");
 1912|    390|            }
 1913|       |
 1914|   285k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   285k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   285k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 119k, False: 166k]
  ------------------
 1917|   119k|                return on_error("Invalid encoding in format string");
 1918|   119k|            }
 1919|   166k|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 1.70k, False: 164k]
  ------------------
 1920|  1.70k|                get_ctx().advance_to(
 1921|  1.70k|                    impl::read_while_classic_space(get_ctx().range()));
 1922|  1.70k|                begin = detail::to_address(std::prev(after_space_it));
 1923|  1.70k|                continue;
 1924|  1.70k|            }
 1925|       |
 1926|   164k|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 456, False: 163k]
  ------------------
 1927|    456|                SCN_UNLIKELY_ATTR
 1928|    456|                return on_error("Unexpected literal character in source");
 1929|    456|            }
 1930|   163k|            get_ctx().advance_to(ranges::next(it));
 1931|   163k|        }
 1932|   133k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1963|  6.91k|    {
 1964|  6.91k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1965|  6.91k|        set_arg_as_visited(arg_id);
 1966|       |
 1967|  6.91k|        on_visit_scan_arg(
 1968|  6.91k|            impl::default_arg_reader<context_type>{
 1969|  6.91k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1970|  6.91k|            arg);
 1971|  6.91k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  13.8k|{
 1681|  13.8k|    auto arg = ctx.arg(id);
 1682|  13.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 902, False: 12.9k]
  |  |  ------------------
  ------------------
 1683|    902|        handler.on_error("Failed to find argument with ID");
 1684|    902|    }
 1685|  13.8k|    return arg;
 1686|  13.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|  6.91k|    {
 1948|  6.91k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 596, False: 6.31k]
  |  Branch (1948:23): [True: 0, False: 6.31k]
  ------------------
 1949|    596|            SCN_UNLIKELY_ATTR
 1950|    596|            return;
 1951|    596|        }
 1952|       |
 1953|  6.31k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  6.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  6.31k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  6.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.69k, False: 1.62k]
  |  |  ------------------
  ------------------
 1955|  4.69k|            on_error(r.error());
 1956|  4.69k|        }
 1957|  1.62k|        else {
 1958|  1.62k|            get_ctx().advance_to(*r);
 1959|  1.62k|        }
 1960|  6.31k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|  13.7k|    {
 1936|  13.7k|        return parse_ctx.next_arg_id();
 1937|  13.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1939|    216|    {
 1940|    216|        parse_ctx.check_arg_id(id);
 1941|    216|        return id;
 1942|    216|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|  6.94k|    {
 1977|  6.94k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  6.94k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  6.94k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 6.94k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  6.94k|        auto specs = detail::format_specs{};
 1990|  6.94k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  6.94k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  6.94k|            arg.type()};
 1993|       |
 1994|  6.94k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  6.94k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 1.70k, False: 5.24k]
  |  Branch (1995:29): [True: 1.59k, False: 3.64k]
  ------------------
 1996|  3.29k|            SCN_UNLIKELY_ATTR
 1997|  3.29k|            on_error("Missing '}' in format string");
 1998|  3.29k|            return parse_ctx.begin();
 1999|  3.29k|        }
 2000|  3.64k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  3.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 166, False: 3.48k]
  |  |  ------------------
  ------------------
 2001|    166|            return parse_ctx.begin();
 2002|    166|        }
 2003|  3.48k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  3.48k|        on_visit_scan_arg(
 2006|  3.48k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  3.48k|                                           get_ctx().locale()},
 2008|  3.48k|            arg);
 2009|  3.48k|        return parse_ctx.begin();
 2010|  3.64k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  6.94k|    {
 1701|  6.94k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|  3.48k|    {
 1948|  3.48k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 1.06k, False: 2.41k]
  |  Branch (1948:23): [True: 0, False: 2.41k]
  ------------------
 1949|  1.06k|            SCN_UNLIKELY_ATTR
 1950|  1.06k|            return;
 1951|  1.06k|        }
 1952|       |
 1953|  2.41k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  2.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  2.41k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.11k, False: 302]
  |  |  ------------------
  ------------------
 1955|  2.11k|            on_error(r.error());
 1956|  2.11k|        }
 1957|    302|        else {
 1958|    302|            get_ctx().advance_to(*r);
 1959|    302|        }
 1960|  2.41k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  7.34k|{
 1363|  7.34k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  7.34k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  7.34k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  7.34k|            std::u32string tmp;
 1368|  7.34k|            transcode_to_string_impl_to32(src, tmp);
 1369|  7.34k|            return transcode_to_string_impl_32to16<false>(
 1370|  7.34k|                std::u32string_view{tmp}, dest);
 1371|  7.34k|        }
 1372|  7.34k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  7.34k|            return transcode_to_string_impl_to32(src, dest);
 1374|  7.34k|        }
 1375|  7.34k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  7.34k|{
 1256|  7.34k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  7.34k|    auto it = src.begin();
 1259|  1.54M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 1.53M, False: 7.34k]
  ------------------
 1260|  1.53M|        auto res = get_next_code_point(
 1261|  1.53M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  1.53M|                                                                 src.end()));
 1263|  1.53M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.8k, False: 1.51M]
  |  |  ------------------
  ------------------
 1264|  17.8k|            dest.push_back(DestCharT{0xfffd});
 1265|  17.8k|        }
 1266|  1.51M|        else {
 1267|  1.51M|            dest.push_back(res.value);
 1268|  1.51M|        }
 1269|  1.53M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  1.53M|    }
 1271|  7.34k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.99M|{
 1169|  1.99M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.99M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.99M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.0k, False: 1.97M]
  |  |  ------------------
  ------------------
 1173|  21.0k|        return {get_start_for_next_code_point(input),
 1174|  21.0k|                detail::invalid_code_point};
 1175|  21.0k|    }
 1176|  1.97M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.96k, False: 1.97M]
  |  |  ------------------
  ------------------
 1177|  1.96k|        return {input.end(), detail::invalid_code_point};
 1178|  1.96k|    }
 1179|       |
 1180|  1.97M|    return {input.begin() + len,
 1181|  1.97M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.97M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  21.0k|{
 1155|  21.0k|    auto it = input.begin();
 1156|   118k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 115k, False: 2.95k]
  ------------------
 1157|   115k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 18.0k, False: 97.1k]
  ------------------
 1158|  18.0k|            break;
 1159|  18.0k|        }
 1160|   115k|    }
 1161|  21.0k|    return it;
 1162|  21.0k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  79.0k|    {
  809|  79.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  79.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  79.0k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  29.1k|    {
  823|  29.1k|        return a.m_code == b.m_code;
  824|  29.1k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  57.1k|    {
 2931|  57.1k|        SCN_UNLIKELY_ATTR
 2932|  57.1k|        m_msg = msg;
 2933|  57.1k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  99.4k|    {
 2936|  99.4k|        return m_msg == nullptr;
 2937|  99.4k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3645|  1.78k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4990|  1.81M|    {
 4991|  1.81M|        on_charset_range(cp, cp + 1);
 4992|  1.81M|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4995|  1.82M|    {
 4996|  1.82M|        if (end <= 127) {
  ------------------
  |  Branch (4996:13): [True: 1.07M, False: 745k]
  ------------------
 4997|  1.07M|            return;
 4998|  1.07M|        }
 4999|       |
 5000|   176M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (5000:25): [True: 176M, False: 744k]
  ------------------
 5001|       |            // TODO: check for overlap
 5002|   176M|            if (elem.first == end) {
  ------------------
  |  Branch (5002:17): [True: 144, False: 176M]
  ------------------
 5003|    144|                elem.first = begin;
 5004|    144|                return;
 5005|    144|            }
 5006|       |
 5007|   176M|            if (elem.second == begin) {
  ------------------
  |  Branch (5007:17): [True: 918, False: 176M]
  ------------------
 5008|    918|                elem.second = end;
 5009|    918|                return;
 5010|    918|            }
 5011|   176M|        }
 5012|       |
 5013|   744k|        extra_ranges.push_back(std::make_pair(begin, end));
 5014|   744k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5017|  1.98k|    {
 5018|       |        // no-op
 5019|  1.98k|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5032|  1.83M|    {
 5033|  1.83M|        return static_cast<bool>(err);
 5034|  1.83M|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5350|  1.97k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|   348k|{
  458|   348k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   348k|        static_cast<unsigned char>(ch))];
  460|   348k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  1.58M|{
  469|  1.58M|    return static_cast<unsigned char>(ch) <= 127;
  470|  1.58M|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|  1.70M|{
  483|  1.70M|    return cp <= 127;
  484|  1.70M|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|   221k|{
  539|   221k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   221k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  83.6k|{
  784|  83.6k|    return e != eof_error::good;
  785|  83.6k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    532|{
  845|    532|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    532|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    532|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    532|    return parse_error::eof;
  847|    532|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  6.86k|{
  854|  6.86k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 6.86k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  6.86k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 62, False: 6.80k]
  ------------------
  859|     62|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     62|    }
  861|       |
  862|  6.80k|    return scan_error{code, msg};
  863|  6.86k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  6.86k|{
  868|  6.86k|    return [code, msg](parse_error err) {
  869|  6.86k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  6.86k|    };
  871|  6.86k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   834k|{
 1200|       |    // Pattern_White_Space property
 1201|   834k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 546k, False: 288k]
  |  Branch (1201:27): [True: 129k, False: 417k]
  ------------------
 1202|   834k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 14.0k, False: 691k]
  ------------------
 1203|   834k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 17.0k, False: 674k]
  ------------------
 1204|   834k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 1.40k, False: 673k]
  ------------------
 1205|   834k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 2.20k, False: 671k]
  ------------------
 1206|   834k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 1.27k, False: 669k]
  ------------------
 1207|   834k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 34, False: 669k]
  ------------------
 1208|   834k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  8.96k|{
 2220|  8.96k|    unsigned char running_diff{0};
 2221|  31.2k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 22.2k, False: 8.96k]
  ------------------
 2222|  22.2k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  22.2k|    }
 2224|  8.96k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 8.96k]
  |  Branch (2224:33): [True: 0, False: 8.96k]
  ------------------
 2225|  8.96k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|   387k|{
 2303|   387k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 12.3k, False: 374k]
  ------------------
 2304|   387k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 90, False: 12.2k]
  ------------------
 2305|  12.3k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 18, False: 12.2k]
  ------------------
 2306|  12.3k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 54, False: 12.1k]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|  12.3k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 11.7k, False: 464]
  |  Branch (2308:27): [True: 450, False: 11.2k]
  |  Branch (2308:43): [True: 414, False: 36]
  ------------------
 2309|  12.3k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 11.2k, False: 500]
  |  Branch (2309:27): [True: 186, False: 11.0k]
  ------------------
 2310|  12.3k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 11.0k, False: 524]
  |  Branch (2310:27): [True: 18, False: 11.0k]
  ------------------
 2311|  12.3k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 11.0k, False: 524]
  |  Branch (2311:27): [True: 18, False: 11.0k]
  ------------------
 2312|  12.3k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 11.0k, False: 524]
  |  Branch (2312:27): [True: 42, False: 10.9k]
  ------------------
 2313|  12.3k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 10.9k, False: 524]
  |  Branch (2313:27): [True: 90, False: 10.8k]
  ------------------
 2314|  12.3k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 10.8k, False: 524]
  |  Branch (2314:27): [True: 90, False: 10.8k]
  ------------------
 2315|  12.3k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 10.7k, False: 602]
  |  Branch (2315:28): [True: 468, False: 10.2k]
  ------------------
 2316|  12.3k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 10.2k, False: 602]
  |  Branch (2316:28): [True: 620, False: 9.63k]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|  12.3k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 9.71k, False: 530]
  |  Branch (2318:28): [True: 66, False: 9.64k]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|  12.3k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 9.64k, False: 530]
  |  Branch (2320:28): [True: 6, False: 9.63k]
  ------------------
 2321|  2.18k|        return 2;
 2322|  2.18k|    }
 2323|   384k|    return 1;
 2324|   387k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|   298k|{
 2328|   298k|    return calculate_text_width_for_fmt_v10(cp);
 2329|   298k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|    302|{
 2343|    302|    return calculate_text_width_for_fmt_v10(cp);
 2344|    302|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  26.9k|{
 3123|  26.9k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  26.9k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  6.63k|{
 3127|  6.63k|#if WCHAR_MIN < 0
 3128|  6.63k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 6.63k, False: 0]
  |  Branch (3128:20): [True: 6.63k, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  6.63k|        return char_to_int(static_cast<char>(ch));
 3133|  6.63k|    }
 3134|      0|    return 255;
 3135|  6.63k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4271|  17.3k|{
 4272|  17.3k|    std::regex_constants::syntax_option_type result{};
 4273|  17.3k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4273:9): [True: 600, False: 16.7k]
  ------------------
 4274|    600|#if SCN_HAS_STD_REGEX_MULTILINE
 4275|    600|        result |= std::regex_constants::multiline;
 4276|       |#else
 4277|       |        return unexpected_scan_error(
 4278|       |            scan_error::invalid_format_string,
 4279|       |            "/m flag for regex isn't supported by regex backend");
 4280|       |#endif
 4281|    600|    }
 4282|  17.3k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4282:9): [True: 0, False: 17.3k]
  ------------------
 4283|  17.3k|        detail::regex_flags::none) {
 4284|      0|        return unexpected_scan_error(
 4285|      0|            scan_error::invalid_format_string,
 4286|      0|            "/s flag for regex isn't supported by regex backend");
 4287|      0|    }
 4288|  17.3k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4288:9): [True: 3.32k, False: 14.0k]
  ------------------
 4289|  3.32k|        result |= std::regex_constants::icase;
 4290|  3.32k|    }
 4291|  17.3k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4291:9): [True: 6, False: 17.3k]
  ------------------
 4292|      6|        result |= std::regex_constants::nosubs;
 4293|      6|    }
 4294|  17.3k|    return result;
 4295|  17.3k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4638|  2.18k|{
 4639|  2.18k|    std::string result{pattern};
 4640|  11.2k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4640:24): [True: 9.09k, False: 2.18k]
  ------------------
 4641|  9.09k|        result.replace(n, 2, "/");
 4642|  9.09k|        ++n;
 4643|  9.09k|    }
 4644|  2.18k|    return result;
 4645|  2.18k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6008|  12.3k|{
 6009|  12.3k|    if (specs.width != 0) {
  ------------------
  |  Branch (6009:9): [True: 2.44k, False: 9.86k]
  ------------------
 6010|  2.44k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6010:13): [True: 1.70k, False: 748]
  ------------------
 6011|  1.70k|            return {scan_error::invalid_scanned_value,
 6012|  1.70k|                    "Scanned value too narrow, width did not exceed what "
 6013|  1.70k|                    "was specified in the format string"};
 6014|  1.70k|        }
 6015|  2.44k|    }
 6016|  10.6k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6016:9): [True: 1.45k, False: 9.16k]
  ------------------
 6017|  1.45k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6017:13): [True: 12, False: 1.43k]
  ------------------
 6018|     12|            return {scan_error::invalid_scanned_value,
 6019|     12|                    "Scanned value too wide, width exceeded the specified "
 6020|     12|                    "precision"};
 6021|     12|        }
 6022|  1.45k|    }
 6023|  10.6k|    return {};
 6024|  10.6k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   221k|    {
  304|   221k|        ranges::advance(x, n);
  305|   221k|        return x;
  306|   221k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   221k|    {
  268|   221k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   221k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   364k|    {
  151|   364k|        i += n;
  152|   364k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   273k|    {
  108|   273k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   273k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   273k|    {
   87|   273k|        return s - i;
   88|   273k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  5.51k|    {
  304|  5.51k|        ranges::advance(x, n);
  305|  5.51k|        return x;
  306|  5.51k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  5.51k|    {
  268|  5.51k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  5.51k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  5.51k|    {
  151|  5.51k|        i += n;
  152|  5.51k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|     78|    {
  108|     78|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|     78|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|     78|    {
   87|     78|        return s - i;
   88|     78|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5624|  10.7k|    {
 5625|  10.7k|        reader_error_handler eh{};
 5626|  10.7k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5626:23): [Folded - Ignored]
  ------------------
 5627|  10.7k|            detail::check_code_point_type_specs(specs, eh);
 5628|  10.7k|        }
 5629|  10.7k|        else {
 5630|  10.7k|            detail::check_char_type_specs(specs, eh);
 5631|  10.7k|        }
 5632|  10.7k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.25k, False: 1.50k]
  |  |  ------------------
  ------------------
 5633|  9.25k|            return {scan_error::invalid_format_string, eh.m_msg};
 5634|  9.25k|        }
 5635|  1.50k|        return {};
 5636|  10.7k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  43.3k|    {
  763|  43.3k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  43.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  43.3k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  8.07k|    {
  754|  8.07k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  11.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.1k|              cvref<T> obj = *get<T>(fn);
  745|  11.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  11.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.1k|              }
  748|  11.1k|              else {
  749|  11.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.1k|              }
  751|  11.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  11.1k|    {
  684|  11.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  11.1k|            return static_cast<T*>(s.m_cp);
  686|  11.1k|        }
  687|  11.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  11.1k|            return static_cast<T*>(s.m_p);
  689|  11.1k|        }
  690|  11.1k|        else {
  691|  11.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  11.1k|        }
  693|  11.1k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  8.07k|        {
  662|  8.07k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  3.55M|    {
  763|  3.55M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  3.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  3.55M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  21.0k|    {
  754|  21.0k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  1.67M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.67M|              cvref<T> obj = *get<T>(fn);
  745|  1.67M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.67M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.67M|              }
  748|  1.67M|              else {
  749|  1.67M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.67M|              }
  751|  1.67M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  1.67M|    {
  684|  1.67M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.67M|            return static_cast<T*>(s.m_cp);
  686|  1.67M|        }
  687|  1.67M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.67M|            return static_cast<T*>(s.m_p);
  689|  1.67M|        }
  690|  1.67M|        else {
  691|  1.67M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.67M|        }
  693|  1.67M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  21.0k|        {
  662|  21.0k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5619|  4.24k|    {
 5620|  4.24k|        return false;
 5621|  4.24k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  6.86k|    return [code, msg](parse_error err) {
  869|  6.86k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  6.86k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|    136|    {
 1780|    136|        auto stdloc = loc.get<std::locale>();
 1781|    136|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|    136|        grouping = numpunct.grouping();
 1783|    136|        thousands_sep =
 1784|    136|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 136]
  ------------------
 1785|    136|        decimal_point = numpunct.decimal_point();
 1786|    136|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|    170|{
 1717|    170|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 170, False: 0]
  ------------------
 1718|    170|        return std::use_facet<Facet>(stdloc);
 1719|    170|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|    170|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  50.6k|{
 2349|  50.6k|    size_t count{0};
 2350|  50.6k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  50.6k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  50.6k|    });
 2353|  50.6k|    return count;
 2354|  50.6k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  50.6k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  50.6k|    auto it = input.begin();
 1448|   137k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 86.9k, False: 50.6k]
  ------------------
 1449|  86.9k|        auto res = get_next_code_point(
 1450|  86.9k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  86.9k|        cb(res.value);
 1452|  86.9k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  86.9k|    }
 1454|  50.6k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  88.7k|    {
  763|  88.7k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  88.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  88.7k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  50.6k|    {
  754|  50.6k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  86.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.9k|              cvref<T> obj = *get<T>(fn);
  745|  86.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  86.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  86.9k|              }
  748|  86.9k|              else {
  749|  86.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.9k|              }
  751|  86.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  86.9k|    {
  684|  86.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  86.9k|            return static_cast<T*>(s.m_cp);
  686|  86.9k|        }
  687|  86.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  86.9k|            return static_cast<T*>(s.m_p);
  689|  86.9k|        }
  690|  86.9k|        else {
  691|  86.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  86.9k|        }
  693|  86.9k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  86.9k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  86.9k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  86.9k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  50.6k|        {
  662|  50.6k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  7.65k|    {
 1582|  7.65k|        return m_view;
 1583|  7.65k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  9.05k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2381|  43.8k|    {
 2382|  43.8k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2420|  1.39k|    {
 2421|  1.39k|        return m_multibyte_left;
 2422|  1.39k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|  1.13M|    {
 2426|  1.13M|        return *m_current;
 2427|  1.13M|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|   895k|    {
 2435|   895k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   895k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   895k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|   895k|        _increment_current();
 2437|   895k|        return *this;
 2438|   895k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|   895k|    {
 2668|   895k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 345k, False: 549k]
  ------------------
 2669|   345k|            auto cplen = _get_cp_length_at_current();
 2670|   345k|            m_multibyte_left = cplen - 1;
 2671|   345k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|   345k|        }
 2673|   549k|        else {
 2674|   549k|            --m_multibyte_left;
 2675|   549k|        }
 2676|       |
 2677|   895k|        ++m_current;
 2678|   895k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|   345k|    {
 2639|   345k|        return static_cast<difference_type>(
 2640|   345k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|   345k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|   345k|    {
 2645|   345k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.84k, False: 342k]
  |  |  ------------------
  ------------------
 2646|  2.84k|            return 0;
 2647|  2.84k|        }
 2648|       |
 2649|   342k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 298k, False: 44.4k]
  ------------------
 2650|   298k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|   298k|            auto cp = static_cast<char32_t>(*m_current);
 2652|   298k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|   298k|        }
 2654|       |
 2655|  44.4k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  44.4k|                                           cplen);
 2657|  44.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  44.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66, False: 44.4k]
  |  |  ------------------
  ------------------
 2658|     66|            return 0;
 2659|     66|        }
 2660|       |
 2661|  44.4k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  44.4k|        return static_cast<difference_type>(
 2663|  44.4k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  44.4k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  49.4k|{
 1857|  49.4k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  49.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  49.4k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  49.4k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  49.4k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 238, False: 49.1k]
  ------------------
 1862|    238|            return unexpected(eof_error::eof);
 1863|    238|        }
 1864|       |
 1865|  49.1k|        return ranges::next(range.begin(), count);
 1866|  49.4k|    }
 1867|  49.4k|    else {
 1868|  49.4k|        auto it = range.begin();
 1869|  49.4k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  49.4k|            return ranges::next(it, count);
 1871|  49.4k|        }
 1872|       |
 1873|  49.4k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  49.4k|            if (it == range.end()) {
 1875|  49.4k|                return unexpected(eof_error::eof);
 1876|  49.4k|            }
 1877|  49.4k|        }
 1878|       |
 1879|  49.4k|        return it;
 1880|  49.4k|    }
 1881|  49.4k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  8.36k|    {
  268|  8.36k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  8.36k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  8.36k|    {
  161|  8.36k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  8.36k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 8.36k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  8.36k|        else {
  169|  8.36k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 8.36k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  8.36k|        }
  173|  8.36k|    }
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|   444k|    {
 2531|   444k|        return !(a == b);
 2532|   444k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|   448k|    {
 2523|   448k|        return a.m_current == b.m_current;
 2524|   448k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1889|   341k|    {
 1890|   341k|        return !codepoint.empty();
 1891|   341k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  14.5k|    {
 2832|  14.5k|        return take_width_view{r, n};
 2833|  14.5k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2800|  14.5k|    {
 2801|  14.5k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|  14.5k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5663|    726|    {
 5664|    726|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5664:13): [True: 688, False: 38]
  ------------------
 5665|    726|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5665:13): [True: 0, False: 38]
  ------------------
 5666|    688|            return read_default(range, value, loc);
 5667|    688|        }
 5668|       |
 5669|     38|        reader_impl_for_int<CharT> reader{};
 5670|     38|        signed char tmp_value{};
 5671|     38|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5672|     38|        value = static_cast<signed char>(value);
 5673|     38|        return ret;
 5674|    726|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5645|    688|    {
 5646|    688|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    688|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5647|    688|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5647:23): [Folded - Ignored]
  ------------------
 5648|    688|            return code_unit_reader<char>{}.read(range, value);
 5649|    688|        }
 5650|    688|        else {
 5651|    688|            SCN_UNUSED(range);
 5652|    688|            SCN_EXPECT(false);
 5653|    688|            SCN_UNREACHABLE;
 5654|    688|        }
 5655|    688|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5564|    688|    {
 5565|    688|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3643|    688|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    688|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    688|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    688|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 688]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    688|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    688|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5566|    688|        ch = *range.begin();
 5567|    688|        return it;
 5568|    688|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  5.12k|{
 1846|  5.12k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.12k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  5.12k|    return ranges::next(range.begin());
 1851|  5.12k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  5.12k|{
  950|  5.12k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  5.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.12k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  5.12k|    return eof_error::good;
  954|  5.12k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  5.12k|{
  944|  5.12k|    return is_range_eof(r.begin(), r.end());
  945|  5.12k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|   351k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   351k|    {
  937|   351k|        return begin == end;
  938|   351k|    }
  939|   351k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   880k|        {
 2770|   880k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 1.39k, False: 879k]
  |  Branch (2770:39): [True: 860, False: 534]
  ------------------
 2771|   880k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 1.61k, False: 878k]
  ------------------
 2772|   880k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|   474k|    {
 2816|   474k|        return sentinel<true>{m_base.get().end()};
 2817|   474k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|   561k|    {
 2717|   561k|        return view;
 2718|   561k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|   474k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  5.14k|    {
  296|  5.14k|        ++x;
  297|  5.14k|        return x;
  298|  5.14k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|  43.8k|    {
 2810|  43.8k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  43.8k|                                      m_count};
 2812|  43.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3539|     38|    {
 3540|     38|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|     38|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|     38|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 38]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|     38|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 38]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|     38|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     38|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 3566|     38|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     38|    }                                                  \
  |  |  |  | 3642|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|      0|                    parse_integer_digits_without_thsep(
 3568|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|      0|                        prefix_result.parsed_base));
 3570|       |
 3571|      0|            auto buf = make_contiguous_buffer(
 3572|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|      0|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|  2.20k|{
 3326|  2.20k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3643|  2.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.20k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.20k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.20k|        parse_integer_base_prefix(
 3331|  2.20k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.20k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.20k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it =
 3337|      0|                ranges::prev_backtrack(digits_begin_it, range.begin());
 3338|      0|        }
 3339|      0|        else {
 3340|      0|            parsed_zero = false;
 3341|      0|        }
 3342|      0|    }
 3343|  2.20k|    else {
 3344|  2.20k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3344:13): [True: 0, False: 2.20k]
  |  Branch (3344:13): [True: 2.20k, False: 0]
  ------------------
 3345|  2.20k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3345:13): [True: 2.20k, False: 0]
  ------------------
 3346|  2.20k|            digits_begin_it = base_prefix_begin_it;
 3347|  2.20k|        }
 3348|  2.20k|    }
 3349|       |
 3350|  2.20k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3350:9): [True: 2.20k, False: 0]
  ------------------
 3351|  2.20k|        sign = sign_type::plus_sign;
 3352|  2.20k|    }
 3353|  2.20k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3354|  2.20k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3355|  2.20k|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|  2.95k|{
 3141|  2.95k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.95k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 2.95k, False: 0]
  ------------------
 3143|  2.95k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 2.95k, False: 0]
  ------------------
 3144|  2.95k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  2.95k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  2.95k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|  2.95k|{
 2272|  2.95k|    auto it = read_code_unit(range);
 2273|  2.95k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.95k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  5.90k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 5.90k, False: 2.95k]
  ------------------
 2278|  5.90k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 5.90k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  5.90k|    }
 2282|       |
 2283|  2.95k|    return unexpected(parse_error::error);
 2284|  2.95k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|  2.20k|{
 3293|  2.20k|    switch (base) {
 3294|     12|        case 2:
  ------------------
  |  Branch (3294:9): [True: 12, False: 2.19k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     12|                    false};
 3298|       |
 3299|     12|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 12, False: 2.19k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     12|            bool zero_parsed = false;
 3302|     12|            auto it = apply_opt(
 3303|     12|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     12|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    700|        case 16:
  ------------------
  |  Branch (3307:9): [True: 700, False: 1.50k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    700|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    700|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 2.19k]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.47k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.47k, False: 736]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.47k|            return {range.begin(), base, false};
 3319|  2.20k|    }
 3320|  2.20k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    724|{
 2291|    724|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 724, False: 0]
  ------------------
 2292|    724|        return range.begin();
 2293|    724|    }
 2294|      0|    return *result;
 2295|    724|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     24|{
 3244|     24|    return read_matching_string_classic_nocase(range, "0b");
 3245|     24|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  2.96k|{
 2231|  2.96k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  2.96k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  2.96k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  2.96k|        if (range.size() < str.size()) {
 2236|  2.96k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  2.96k|        }
 2238|  2.96k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  2.96k|            return unexpected(parse_error::error);
 2240|  2.96k|        }
 2241|  2.96k|        return ranges::next(range.begin(), str.size());
 2242|  2.96k|    }
 2243|  2.96k|    else {
 2244|  2.96k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.96k|            if (ch < 'A' || ch > 'Z') {
 2246|  2.96k|                return ch;
 2247|  2.96k|            }
 2248|  2.96k|            return static_cast<char_type>(ch +
 2249|  2.96k|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.96k|        };
 2251|       |
 2252|  2.96k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  2.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 184, False: 2.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    184|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    184|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    184|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    184|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    184|    }                                                  \
  |  |  |  | 3642|  2.96k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  2.78k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  2.78k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  2.78k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  2.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.78k, False: 0]
  |  |  ------------------
  ------------------
 2257|  2.78k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  2.78k|                    return ascii_tolower(a) ==
 2259|  2.78k|                           static_cast<detail::char_t<Range>>(b);
 2260|  2.78k|                }))) {
 2261|  2.78k|            return unexpected(parse_error::error);
 2262|  2.78k|        }
 2263|       |
 2264|      0|        return it;
 2265|  2.78k|    }
 2266|  2.96k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  3.34k|{
 1857|  3.34k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  3.34k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  3.34k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  3.34k|        if (sz < count) {
 1862|  3.34k|            return unexpected(eof_error::eof);
 1863|  3.34k|        }
 1864|       |
 1865|  3.34k|        return ranges::next(range.begin(), count);
 1866|  3.34k|    }
 1867|  3.34k|    else {
 1868|  3.34k|        auto it = range.begin();
 1869|  3.34k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 3.34k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  11.3k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 8.28k, False: 3.09k]
  ------------------
 1874|  8.28k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 256, False: 8.03k]
  ------------------
 1875|    256|                return unexpected(eof_error::eof);
 1876|    256|            }
 1877|  8.28k|        }
 1878|       |
 1879|  3.09k|        return it;
 1880|  3.34k|    }
 1881|  3.34k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  3.34k|{
 1095|  3.34k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  3.34k|        return r.size();
 1097|  3.34k|    }
 1098|  3.34k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  3.34k|                           ranges::const_iterator_t<Range>,
 1100|  3.34k|                           typename detail::basic_scan_buffer<
 1101|  3.34k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  3.34k|        if constexpr (ranges::common_range<Range>) {
 1103|  3.34k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  3.34k|        }
 1105|  3.34k|        else {
 1106|  3.34k|            if (r.begin().stores_parent()) {
 1107|  3.34k|                return static_cast<size_t>(
 1108|  3.34k|                    r.begin().parent()->chars_available() -
 1109|  3.34k|                    r.begin().position());
 1110|  3.34k|            }
 1111|  3.34k|            return r.begin().contiguous_segment().size();
 1112|  3.34k|        }
 1113|  3.34k|    }
 1114|  3.34k|    else {
 1115|  3.34k|        return 0;
 1116|  3.34k|    }
 1117|  3.34k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  2.78k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.78k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 0, False: 2.78k]
  |  Branch (2245:29): [True: 2.78k, False: 0]
  ------------------
 2246|  2.78k|                return ch;
 2247|  2.78k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.78k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     24|{
 3258|     24|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 24]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     24|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 24]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     24|    return unexpected(parse_error::error);
 3268|     24|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     24|{
 2146|     24|    auto it = read_code_unit(range);
 2147|     24|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     24|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 2152|     24|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     24|        return unexpected(parse_error::error);
 2154|     24|    }
 2155|       |
 2156|      0|    return *it;
 2157|     24|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     24|{
 1846|     24|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     24|    return ranges::next(range.begin());
 1851|     24|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  5.60k|{
  950|  5.60k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  5.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.60k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  5.60k|    return eof_error::good;
  954|  5.60k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|   346k|{
  944|   346k|    return is_range_eof(r.begin(), r.end());
  945|   346k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    712|{
 3251|    712|    return read_matching_string_classic_nocase(range, "0x");
 3252|    712|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3360|  2.17k|{
 3361|  2.17k|    using char_type = detail::char_t<Range>;
 3362|       |
 3363|  2.17k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3363:19): [Folded - Ignored]
  ------------------
 3364|  2.17k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3365|  2.17k|            return unexpected_scan_error(
 3366|  2.17k|                scan_error::invalid_scanned_value,
 3367|  2.17k|                "Failed to parse integer: No digits found");
 3368|  2.17k|        }
 3369|  2.17k|        return range.end();
 3370|  2.17k|    }
 3371|  2.17k|    else {
 3372|  2.17k|        return read_while1_code_unit(range,
 3373|  2.17k|                                     [&](char_type ch) noexcept {
 3374|  2.17k|                                         return char_to_int(ch) < base;
 3375|  2.17k|                                     })
 3376|  2.17k|            .transform_error(map_parse_error_to_scan_error(
 3377|  2.17k|                scan_error::invalid_scanned_value,
 3378|  2.17k|                "Failed to parse integer: No digits found"));
 3379|  2.17k|    }
 3380|  2.17k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|  2.92k|{
 1996|  2.92k|    auto it = read_while_code_unit(range, pred);
 1997|  2.92k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 2.92k, False: 0]
  ------------------
 1998|  2.92k|        return unexpected(parse_error::error);
 1999|  2.92k|    }
 2000|      0|    return it;
 2001|  2.92k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|  2.92k|{
 1976|  2.92k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.92k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|  2.92k|{
 1957|  2.92k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.92k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.92k|    }
 1960|  2.92k|    else {
 1961|  2.92k|        auto first = range.begin();
 1962|  2.92k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 2.92k, False: 0]
  ------------------
 1963|  2.92k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.92k, False: 0]
  ------------------
 1964|  2.92k|                return first;
 1965|  2.92k|            }
 1966|  2.92k|        }
 1967|      0|        return first;
 1968|  2.92k|    }
 1969|  2.92k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|   512k|        {
 2781|   512k|            return !(y == x);
 2782|   512k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_:
  753|  2.17k|    {
  754|  2.17k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  2.17k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.17k|              cvref<T> obj = *get<T>(fn);
  745|  2.17k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.17k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.17k|              }
  748|  2.17k|              else {
  749|  2.17k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.17k|              }
  751|  2.17k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|  2.17k|    {
  684|  2.17k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.17k|            return static_cast<T*>(s.m_cp);
  686|  2.17k|        }
  687|  2.17k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.17k|            return static_cast<T*>(s.m_p);
  689|  2.17k|        }
  690|  2.17k|        else {
  691|  2.17k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.17k|        }
  693|  2.17k|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3373|  2.17k|                                     [&](char_type ch) noexcept {
 3374|  2.17k|                                         return char_to_int(ch) < base;
 3375|  2.17k|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_LPv0EEEPSP_:
  661|  2.17k|        {
  662|  2.17k|        }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1682|  3.19k|{
 1683|  3.19k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  3.19k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  3.19k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  3.19k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  3.19k|    }
 1688|  3.19k|    else {
 1689|  3.19k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  3.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  3.19k|    }
 1691|  3.19k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EELPv0EEEOT_:
 1536|  3.19k|    {
 1537|  3.19k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  3.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  3.19k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1620|  3.19k|    {
 1621|  3.19k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  3.19k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  3.19k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  3.19k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  3.19k|            m_storage.reset();
 1627|  3.19k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  3.19k|        }
 1629|  3.19k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  3.19k|                                          std::basic_string<CharT>>) {
 1631|  3.19k|            m_storage.emplace(SCN_FWD(range));
 1632|  3.19k|            m_view = string_view_type{*m_storage};
 1633|  3.19k|        }
 1634|  3.19k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  3.19k|                                          typename detail::basic_scan_buffer<
 1636|  3.19k|                                              value_t>::forward_iterator> &&
 1637|  3.19k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  3.19k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  3.19k|            auto end_seg = range.end().contiguous_segment();
 1640|  3.19k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  3.19k|                             detail::to_address(end_seg.end()))) {
 1642|  3.19k|                auto& str = m_storage.emplace();
 1643|  3.19k|                str.reserve(range.end().position() - range.begin().position());
 1644|  3.19k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  3.19k|                m_view = string_view_type{str};
 1646|  3.19k|                return;
 1647|  3.19k|            }
 1648|       |
 1649|  3.19k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  3.19k|                                                            end_seg.data());
 1651|  3.19k|            m_storage.reset();
 1652|  3.19k|        }
 1653|  3.19k|        else {
 1654|  3.19k|            auto& str = m_storage.emplace();
 1655|  3.19k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|  3.19k|                str.reserve(range.size());
 1657|  3.19k|            }
 1658|  3.19k|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|  3.19k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  3.19k|                          std::back_inserter(str));
 1661|  3.19k|            }
 1662|  3.19k|            else {
 1663|  3.19k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  3.19k|                     ++it) {
 1665|  3.19k|                    str.push_back(*it);
 1666|  3.19k|                }
 1667|  3.19k|            }
 1668|  3.19k|            m_view = string_view_type{str};
 1669|  3.19k|        }
 1670|  3.19k|    }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3390|     28|{
 3391|     28|    std::basic_string<CharT> output;
 3392|     28|    std::string thsep_indices;
 3393|     28|    auto it = range.begin();
 3394|     28|    bool digit_matched = false;
 3395|     28|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3395:12): [True: 28, False: 0]
  ------------------
 3396|     28|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3396:13): [True: 0, False: 28]
  ------------------
 3397|      0|            thsep_indices.push_back(
 3398|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3399|      0|        }
 3400|     28|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3400:18): [True: 28, False: 0]
  ------------------
 3401|     28|            break;
 3402|     28|        }
 3403|      0|        else {
 3404|      0|            output.push_back(*it);
 3405|      0|            digit_matched = true;
 3406|      0|        }
 3407|     28|    }
 3408|     28|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 3409|     28|        return unexpected_scan_error(
 3410|     28|            scan_error::invalid_scanned_value,
 3411|     28|            "Failed to parse integer: No digits found");
 3412|     28|    }
 3413|      0|    return std::tuple{it, output, thsep_indices};
 3414|     28|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|   890k|    {
 2413|   890k|        return m_current;
 2414|   890k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|   889k|    {
 2417|   889k|        return m_count;
 2418|   889k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5663|    774|    {
 5664|    774|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5664:13): [True: 684, False: 90]
  ------------------
 5665|    774|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5665:13): [True: 0, False: 90]
  ------------------
 5666|    684|            return read_default(range, value, loc);
 5667|    684|        }
 5668|       |
 5669|     90|        reader_impl_for_int<CharT> reader{};
 5670|     90|        signed char tmp_value{};
 5671|     90|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5672|     90|        value = static_cast<signed char>(value);
 5673|     90|        return ret;
 5674|    774|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5645|  2.05k|    {
 5646|  2.05k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.05k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5647|  2.05k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5647:23): [Folded - Ignored]
  ------------------
 5648|  2.05k|            return code_unit_reader<char>{}.read(range, value);
 5649|  2.05k|        }
 5650|  2.05k|        else {
 5651|  2.05k|            SCN_UNUSED(range);
 5652|  2.05k|            SCN_EXPECT(false);
 5653|  2.05k|            SCN_UNREACHABLE;
 5654|  2.05k|        }
 5655|  2.05k|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5564|  2.05k|    {
 5565|  2.05k|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3643|  2.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5566|  2.05k|        ch = *range.begin();
 5567|  2.05k|        return it;
 5568|  2.05k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  15.2k|{
 1846|  15.2k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.2k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  15.2k|    return ranges::next(range.begin());
 1851|  15.2k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  49.9k|{
  950|  49.9k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  49.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 49.9k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  49.9k|    return eof_error::good;
  954|  49.9k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  1.54M|{
  944|  1.54M|    return is_range_eof(r.begin(), r.end());
  945|  1.54M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  1.79M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.79M|    {
  937|  1.79M|        return begin == end;
  938|  1.79M|    }
  939|  1.79M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   100k|    {
  296|   100k|        ++x;
  297|   100k|        return x;
  298|   100k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|     90|    {
 3540|     90|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 90]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|     90|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|     90|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 90]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|     90|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 90]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|     90|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     90|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 90, False: 0]
  |  |  ------------------
  ------------------
 3566|     90|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 90]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|     90|                    parse_integer_digits_without_thsep(
 3568|     90|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|     90|                        prefix_result.parsed_base));
 3570|       |
 3571|     90|            auto buf = make_contiguous_buffer(
 3572|     90|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|     90|            SCN_TRY(result_it,
  ------------------
  |  | 3643|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 90, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     90|    }                                                  \
  |  |  |  | 3642|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|     90|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  6.49k|{
 3326|  6.49k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3643|  6.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  6.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  6.49k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  6.49k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  6.49k|        parse_integer_base_prefix(
 3331|  6.49k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  6.49k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 6.49k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it =
 3337|      0|                ranges::prev_backtrack(digits_begin_it, range.begin());
 3338|      0|        }
 3339|      0|        else {
 3340|      0|            parsed_zero = false;
 3341|      0|        }
 3342|      0|    }
 3343|  6.49k|    else {
 3344|  6.49k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3344:13): [True: 0, False: 6.49k]
  ------------------
 3345|  6.49k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3345:13): [True: 6.49k, False: 0]
  ------------------
 3346|  6.49k|            digits_begin_it = base_prefix_begin_it;
 3347|  6.49k|        }
 3348|  6.49k|    }
 3349|       |
 3350|  6.49k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3350:9): [True: 6.49k, False: 0]
  ------------------
 3351|  6.49k|        sign = sign_type::plus_sign;
 3352|  6.49k|    }
 3353|  6.49k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3354|  6.49k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3355|  6.49k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  8.67k|{
 3141|  8.67k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  8.67k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 8.67k, False: 0]
  ------------------
 3143|  8.67k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 8.67k, False: 0]
  ------------------
 3144|  8.67k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  8.67k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  8.67k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  8.67k|{
 2272|  8.67k|    auto it = read_code_unit(range);
 2273|  8.67k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  8.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.67k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  17.3k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 17.3k, False: 8.67k]
  ------------------
 2278|  17.3k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 17.3k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  17.3k|    }
 2282|       |
 2283|  8.67k|    return unexpected(parse_error::error);
 2284|  8.67k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  6.49k|{
 3293|  6.49k|    switch (base) {
 3294|     72|        case 2:
  ------------------
  |  Branch (3294:9): [True: 72, False: 6.42k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     72|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     72|                    false};
 3298|       |
 3299|     28|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 28, False: 6.46k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     28|            bool zero_parsed = false;
 3302|     28|            auto it = apply_opt(
 3303|     28|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     28|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|  2.10k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 2.10k, False: 4.38k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|  2.10k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|  2.10k|                    false};
 3311|       |
 3312|     98|        case 0:
  ------------------
  |  Branch (3312:9): [True: 98, False: 6.39k]
  ------------------
 3313|       |            // detect base
 3314|     98|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  4.19k|        default:
  ------------------
  |  Branch (3316:9): [True: 4.19k, False: 2.30k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  4.19k|            return {range.begin(), base, false};
 3319|  6.49k|    }
 3320|  6.49k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|  2.20k|{
 2291|  2.20k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 2.20k, False: 0]
  ------------------
 2292|  2.20k|        return range.begin();
 2293|  2.20k|    }
 2294|      0|    return *result;
 2295|  2.20k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|    170|{
 3244|    170|    return read_matching_string_classic_nocase(range, "0b");
 3245|    170|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  8.96k|{
 2231|  8.96k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  8.96k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  8.96k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  8.96k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 8.96k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  8.96k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 8.96k, False: 0]
  ------------------
 2239|  8.96k|            return unexpected(parse_error::error);
 2240|  8.96k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|  8.96k|    }
 2243|  8.96k|    else {
 2244|  8.96k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  8.96k|            if (ch < 'A' || ch > 'Z') {
 2246|  8.96k|                return ch;
 2247|  8.96k|            }
 2248|  8.96k|            return static_cast<char_type>(ch +
 2249|  8.96k|                                          static_cast<char_type>('a' - 'A'));
 2250|  8.96k|        };
 2251|       |
 2252|  8.96k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  8.96k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  8.96k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  8.96k|        if (SCN_UNLIKELY(!std::equal(
 2257|  8.96k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  8.96k|                    return ascii_tolower(a) ==
 2259|  8.96k|                           static_cast<detail::char_t<Range>>(b);
 2260|  8.96k|                }))) {
 2261|  8.96k|            return unexpected(parse_error::error);
 2262|  8.96k|        }
 2263|       |
 2264|  8.96k|        return it;
 2265|  8.96k|    }
 2266|  8.96k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|    126|{
 3258|    126|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 126]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|    126|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 126]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|    126|    return unexpected(parse_error::error);
 3268|    126|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  4.47k|{
 2146|  4.47k|    auto it = read_code_unit(range);
 2147|  4.47k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.47k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  4.47k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  4.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.47k, False: 0]
  |  |  ------------------
  ------------------
 2152|  4.47k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  4.47k|        return unexpected(parse_error::error);
 2154|  4.47k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  4.47k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|  2.20k|{
 3251|  2.20k|    return read_matching_string_classic_nocase(range, "0x");
 3252|  2.20k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     98|{
 3274|     98|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 98]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     98|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 98]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     98|    {
 3281|     98|        bool zero_parsed{false};
 3282|     98|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 98]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     98|    }
 3286|     98|    return {range.begin(), 10, false};
 3287|     98|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3360|  6.43k|{
 3361|  6.43k|    using char_type = detail::char_t<Range>;
 3362|       |
 3363|  6.43k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3363:19): [Folded - Ignored]
  ------------------
 3364|  6.43k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.43k]
  |  |  ------------------
  ------------------
 3365|      0|            return unexpected_scan_error(
 3366|      0|                scan_error::invalid_scanned_value,
 3367|      0|                "Failed to parse integer: No digits found");
 3368|      0|        }
 3369|  6.43k|        return range.end();
 3370|  6.43k|    }
 3371|  6.43k|    else {
 3372|  6.43k|        return read_while1_code_unit(range,
 3373|  6.43k|                                     [&](char_type ch) noexcept {
 3374|  6.43k|                                         return char_to_int(ch) < base;
 3375|  6.43k|                                     })
 3376|  6.43k|            .transform_error(map_parse_error_to_scan_error(
 3377|  6.43k|                scan_error::invalid_scanned_value,
 3378|  6.43k|                "Failed to parse integer: No digits found"));
 3379|  6.43k|    }
 3380|  6.43k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3390|     60|{
 3391|     60|    std::basic_string<CharT> output;
 3392|     60|    std::string thsep_indices;
 3393|     60|    auto it = range.begin();
 3394|     60|    bool digit_matched = false;
 3395|     60|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3395:12): [True: 60, False: 0]
  ------------------
 3396|     60|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3396:13): [True: 0, False: 60]
  ------------------
 3397|      0|            thsep_indices.push_back(
 3398|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3399|      0|        }
 3400|     60|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3400:18): [True: 60, False: 0]
  ------------------
 3401|     60|            break;
 3402|     60|        }
 3403|      0|        else {
 3404|      0|            output.push_back(*it);
 3405|      0|            digit_matched = true;
 3406|      0|        }
 3407|     60|    }
 3408|     60|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60, False: 0]
  |  |  ------------------
  ------------------
 3409|     60|        return unexpected_scan_error(
 3410|     60|            scan_error::invalid_scanned_value,
 3411|     60|            "Failed to parse integer: No digits found");
 3412|     60|    }
 3413|      0|    return std::tuple{it, output, thsep_indices};
 3414|     60|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  33.1k|{
 1683|  33.1k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  33.1k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  33.1k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  33.1k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  33.1k|    }
 1688|  33.1k|    else {
 1689|  33.1k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  33.1k|    }
 1691|  33.1k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  33.1k|    {
 1490|  33.1k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|   381k|    {
 1503|   381k|        return sv;
 1504|   381k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5951|  5.34k|{
 5952|  5.34k|    using char_type = detail::char_t<Range>;
 5953|  5.34k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5954|       |
 5955|  5.34k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5955:9): [True: 4.58k, False: 762]
  ------------------
 5956|  4.58k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5957|  4.58k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5958|       |
 5959|  4.58k|        if (max_width == 0) {
  ------------------
  |  Branch (5959:13): [True: 3.97k, False: 602]
  ------------------
 5960|  3.97k|            auto it = read_while_code_unit(range, pred);
 5961|       |
 5962|  3.97k|            if (want_skipped_width) {
  ------------------
  |  Branch (5962:17): [True: 302, False: 3.67k]
  ------------------
 5963|    302|                auto prefix_width =
 5964|    302|                    static_cast<std::ptrdiff_t>(
 5965|    302|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5966|    302|                    ranges::distance(range.begin(), it);
 5967|    302|                return result_type{it, prefix_width};
 5968|    302|            }
 5969|  3.67k|            return result_type{it, 0};
 5970|  3.97k|        }
 5971|       |
 5972|    602|        auto max_width_view = take_width(range, max_width);
 5973|    602|        auto w_it = read_while_code_unit(max_width_view, pred);
 5974|       |
 5975|    602|        if (want_skipped_width) {
  ------------------
  |  Branch (5975:13): [True: 602, False: 0]
  ------------------
 5976|    602|            return result_type{w_it.base(), max_width - w_it.count()};
 5977|    602|        }
 5978|      0|        return result_type{w_it.base(), 0};
 5979|    602|    }
 5980|       |
 5981|    762|    const auto fill_chars = fill.template get_code_units<char_type>();
 5982|    762|    if (max_width == 0) {
  ------------------
  |  Branch (5982:9): [True: 436, False: 326]
  ------------------
 5983|    436|        auto it = read_while_code_units(range, fill_chars);
 5984|       |
 5985|    436|        if (want_skipped_width) {
  ------------------
  |  Branch (5985:13): [True: 372, False: 64]
  ------------------
 5986|    372|            auto prefix_width =
 5987|    372|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5988|    372|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5989|    372|            return result_type{it, prefix_width};
 5990|    372|        }
 5991|     64|        return result_type{it, 0};
 5992|    436|    }
 5993|       |
 5994|    326|    auto max_width_view = take_width(range, max_width);
 5995|    326|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5996|       |
 5997|    326|    if (want_skipped_width) {
  ------------------
  |  Branch (5997:9): [True: 326, False: 0]
  ------------------
 5998|    326|        return result_type{w_it.base(), max_width - w_it.count()};
 5999|    326|    }
 6000|      0|    return result_type{w_it.base(), 0};
 6001|    326|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  4.45k|{
 1976|  4.45k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  4.45k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  5.10k|{
 1957|  5.10k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  5.10k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  5.10k|    }
 1960|  5.10k|    else {
 1961|  5.10k|        auto first = range.begin();
 1962|  5.10k|        for (; first != range.end(); ++first) {
 1963|  5.10k|            if (pred(*first)) {
 1964|  5.10k|                return first;
 1965|  5.10k|            }
 1966|  5.10k|        }
 1967|  5.10k|        return first;
 1968|  5.10k|    }
 1969|  5.10k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_:
  753|  4.58k|    {
  754|  4.58k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  4.85k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.85k|              cvref<T> obj = *get<T>(fn);
  745|  4.85k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.85k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.85k|              }
  748|  4.85k|              else {
  749|  4.85k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.85k|              }
  751|  4.85k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  4.85k|    {
  684|  4.85k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.85k|            return static_cast<T*>(s.m_cp);
  686|  4.85k|        }
  687|  4.85k|        else if constexpr (std::is_object_v<T>) {
  688|  4.85k|            return static_cast<T*>(s.m_p);
  689|  4.85k|        }
  690|  4.85k|        else {
  691|  4.85k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.85k|        }
  693|  4.85k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5957|  4.85k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSH_:
  666|  4.58k|        {
  667|  4.58k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    698|{
 1976|    698|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    698|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    758|{
 1957|    758|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    758|        return std::find_if(range.begin(), range.end(), pred);
 1959|    758|    }
 1960|    758|    else {
 1961|    758|        auto first = range.begin();
 1962|  1.82k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.76k, False: 60]
  ------------------
 1963|  1.76k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 698, False: 1.06k]
  ------------------
 1964|    698|                return first;
 1965|    698|            }
 1966|  1.76k|        }
 1967|     60|        return first;
 1968|    758|    }
 1969|    758|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|    436|{
 2037|    436|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    436|    auto it = range.begin();
 2040|    460|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 460, False: 0]
  ------------------
 2041|    460|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    460|                                           needle.size());
 2043|    460|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 0, False: 460]
  ------------------
 2044|      0|            return it;
 2045|      0|        }
 2046|    460|        static_assert(
 2047|    460|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    460|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 436, False: 24]
  ------------------
 2049|    436|            return it;
 2050|    436|        }
 2051|     24|        it = *r;
 2052|     24|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|    326|{
 2037|    326|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    326|    auto it = range.begin();
 2040|    392|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 380, False: 12]
  ------------------
 2041|    380|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    380|                                           needle.size());
 2043|    380|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 72, False: 308]
  ------------------
 2044|     72|            return it;
 2045|     72|        }
 2046|    308|        static_assert(
 2047|    308|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    308|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 242, False: 66]
  ------------------
 2049|    242|            return it;
 2050|    242|        }
 2051|     66|        it = *r;
 2052|     66|    }
 2053|     12|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     12|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     12|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|     12|    return it;
 2055|     12|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|  6.29k|{
 2951|  6.29k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 5.58k, False: 708]
  ------------------
 2952|  5.58k|        auto it = read_while_classic_space(range);
 2953|  5.58k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  5.58k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.58k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  5.58k|        return it;
 2959|  5.58k|    }
 2960|       |
 2961|    708|    return read_while_classic_space(range);
 2962|  6.29k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|  6.29k|{
 2117|  6.29k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  6.29k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  6.29k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  6.29k|        auto buf = make_contiguous_buffer(range);
 2121|  6.29k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  6.29k|        return ranges::next(range.begin(),
 2123|  6.29k|                            ranges::distance(buf.view().begin(), it));
 2124|  6.29k|    }
 2125|  6.29k|    else {
 2126|  6.29k|        auto it = range.begin();
 2127|       |
 2128|  6.29k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  6.29k|            auto seg = get_contiguous_beginning(range);
 2130|  6.29k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  6.29k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 6.29k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  6.29k|            ranges::advance(it, seg.size());
 2135|  6.29k|        }
 2136|       |
 2137|  6.29k|        return read_while_code_point(
 2138|  6.29k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  6.29k|    }
 2140|  6.29k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  8.36k|{
 1039|  8.36k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  8.36k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  8.36k|        return r;
 1042|  8.36k|    }
 1043|  8.36k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  8.36k|                           ranges::const_iterator_t<Range>,
 1045|  8.36k|                           typename detail::basic_scan_buffer<
 1046|  8.36k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  8.36k|        if constexpr (ranges::common_range<Range>) {
 1048|  8.36k|            auto seg = r.begin().contiguous_segment();
 1049|  8.36k|            auto dist =
 1050|  8.36k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  8.36k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  8.36k|        }
 1053|  8.36k|        else {
 1054|  8.36k|            return r.begin().contiguous_segment();
 1055|  8.36k|        }
 1056|  8.36k|    }
 1057|  8.36k|    else {
 1058|  8.36k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  8.36k|    }
 1060|  8.36k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|  6.68k|{
 2082|  6.68k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  6.68k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|  6.72k|{
 2061|  6.72k|    auto it = range.begin();
 2062|   222k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 222k, False: 36]
  ------------------
 2063|   222k|        const auto val =
 2064|   222k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   222k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   222k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 221k, False: 618]
  |  |  ------------------
  ------------------
 2066|   221k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   221k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   221k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 6.69k, False: 215k]
  ------------------
 2069|  6.69k|                return it;
 2070|  6.69k|            }
 2071|   221k|        }
 2072|   215k|        it = val.iterator;
 2073|   215k|    }
 2074|       |
 2075|     36|    return it;
 2076|  6.72k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|   341k|{
 1899|   341k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   341k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   341k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   341k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   341k|    auto it = range.begin();
 1903|   341k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   341k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.4k, False: 329k]
  |  |  ------------------
  ------------------
 1906|  11.4k|        ++it;
 1907|  11.4k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  11.4k|        return {it, {}};
 1909|  11.4k|    }
 1910|       |
 1911|   329k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 310k, False: 19.1k]
  ------------------
 1912|   310k|        ++it;
 1913|   310k|        return {it, string_type(1, *range.begin())};
 1914|   310k|    }
 1915|       |
 1916|  19.1k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  19.1k|    return {it, string_type{range.begin(), it}};
 1918|   329k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  11.4k|{
 1155|  11.4k|    auto it = input.begin();
 1156|   111k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 110k, False: 216]
  ------------------
 1157|   110k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 11.2k, False: 99.5k]
  ------------------
 1158|  11.2k|            break;
 1159|  11.2k|        }
 1160|   110k|    }
 1161|  11.4k|    return it;
 1162|  11.4k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  19.1k|    {
  283|  19.1k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  19.1k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  19.1k|    {
  227|  19.1k|        constexpr iter_difference_t<I> zero{0};
  228|  19.1k|        iter_difference_t<I> counter{0};
  229|       |
  230|  19.1k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 19.1k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  19.1k|        else {
  237|  60.4k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 41.3k, False: 19.0k]
  |  Branch (237:34): [True: 41.3k, False: 30]
  ------------------
  238|  41.3k|                ++i;
  239|  41.3k|                ++counter;
  240|  41.3k|            }
  241|  19.1k|        }
  242|       |
  243|  19.1k|        return counter;
  244|  19.1k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  6.29k|    {
  754|  6.29k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  6.29k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.29k|              cvref<T> obj = *get<T>(fn);
  745|  6.29k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.29k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.29k|              }
  748|  6.29k|              else {
  749|  6.29k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.29k|              }
  751|  6.29k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  6.29k|    {
  684|  6.29k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.29k|            return static_cast<T*>(s.m_cp);
  686|  6.29k|        }
  687|  6.29k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.29k|            return static_cast<T*>(s.m_p);
  689|  6.29k|        }
  690|  6.29k|        else {
  691|  6.29k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.29k|        }
  693|  6.29k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  6.29k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  6.29k|        {
  662|  6.29k|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  16.8k|{
 2951|  16.8k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 16.0k, False: 820]
  ------------------
 2952|  16.0k|        auto it = read_while_classic_space(range);
 2953|  16.0k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  16.0k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.0k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  16.0k|        return it;
 2959|  16.0k|    }
 2960|       |
 2961|    820|    return read_while_classic_space(range);
 2962|  16.8k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   163k|{
 2117|   163k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   163k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   163k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   163k|        auto buf = make_contiguous_buffer(range);
 2121|   163k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   163k|        return ranges::next(range.begin(),
 2123|   163k|                            ranges::distance(buf.view().begin(), it));
 2124|   163k|    }
 2125|   163k|    else {
 2126|   163k|        auto it = range.begin();
 2127|       |
 2128|   163k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|   163k|            auto seg = get_contiguous_beginning(range);
 2130|   163k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   163k|                seg_it != seg.end()) {
 2132|   163k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   163k|            }
 2134|   163k|            ranges::advance(it, seg.size());
 2135|   163k|        }
 2136|       |
 2137|   163k|        return read_while_code_point(
 2138|   163k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   163k|    }
 2140|   163k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   169k|{
 1683|   169k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   169k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   169k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   169k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   169k|    }
 1688|   169k|    else {
 1689|   169k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   169k|    }
 1691|   169k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   169k|    {
 1490|   169k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  21.6k|    {
 3040|  21.6k|        reader_error_handler eh{};
 3041|  21.6k|        get_derived().check_specs_impl(specs, eh);
 3042|  21.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  21.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.5k, False: 3.08k]
  |  |  ------------------
  ------------------
 3043|  18.5k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  18.5k|        }
 3045|  3.08k|        return {};
 3046|  21.6k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  21.6k|    {
 3051|  21.6k|        return static_cast<Derived&>(*this);
 3052|  21.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3485|  21.6k|    {
 3486|  21.6k|        detail::check_int_type_specs(specs, eh);
 3487|  21.6k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  5.82k|    {
 3035|  5.82k|        return true;
 3036|  5.82k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3539|    740|    {
 3540|    740|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    740|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    740|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    740|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    740|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 740]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    740|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    740|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    740|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    740|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 740]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    740|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 740]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    740|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    740|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 726, False: 14]
  |  |  ------------------
  ------------------
 3566|    726|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    726|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    726|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    726|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    726|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 726, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    726|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    726|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    726|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    726|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    726|    }                                                  \
  |  |  |  | 3642|    726|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|      0|                    parse_integer_digits_without_thsep(
 3568|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|      0|                        prefix_result.parsed_base));
 3570|       |
 3571|      0|            auto buf = make_contiguous_buffer(
 3572|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|      0|        }
 3581|       |
 3582|     14|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|     14|            localized_number_formatting_options<CharT>{loc};
 3587|     14|#endif
 3588|       |
 3589|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     14|    }                                                  \
  |  |  |  | 3642|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    804|    {
 3540|    804|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    804|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    804|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    804|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 804]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    804|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    804|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    804|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    804|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 804]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    804|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 804]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    804|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    804|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 774, False: 30]
  |  |  ------------------
  ------------------
 3566|    774|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    774|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    774|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    774|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    774|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 774]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    774|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    774|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    774|                    parse_integer_digits_without_thsep(
 3568|    774|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    774|                        prefix_result.parsed_base));
 3570|       |
 3571|    774|            auto buf = make_contiguous_buffer(
 3572|    774|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    774|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    774|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    774|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    774|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    774|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 774, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    774|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    774|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    774|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    774|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    774|    }                                                  \
  |  |  |  | 3642|    774|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    774|        }
 3581|       |
 3582|     30|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|     30|            localized_number_formatting_options<CharT>{loc};
 3587|     30|#endif
 3588|       |
 3589|     30|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|     30|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     30|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     30|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     30|    }                                                  \
  |  |  |  | 3642|     30|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3539|    740|    {
 3540|    740|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    740|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    740|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    740|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    740|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 740]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    740|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    740|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    740|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    740|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 740]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    740|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 740]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    740|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    740|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 726, False: 14]
  |  |  ------------------
  ------------------
 3566|    726|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    726|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    726|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    726|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    726|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 726, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    726|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    726|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    726|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    726|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    726|    }                                                  \
  |  |  |  | 3642|    726|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|      0|                    parse_integer_digits_without_thsep(
 3568|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|      0|                        prefix_result.parsed_base));
 3570|       |
 3571|      0|            auto buf = make_contiguous_buffer(
 3572|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|      0|        }
 3581|       |
 3582|     14|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|     14|            localized_number_formatting_options<CharT>{loc};
 3587|     14|#endif
 3588|       |
 3589|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     14|    }                                                  \
  |  |  |  | 3642|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    804|    {
 3540|    804|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    804|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    804|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    804|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 804]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    804|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    804|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    804|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    804|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 804]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    804|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 804]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    804|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    804|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 774, False: 30]
  |  |  ------------------
  ------------------
 3566|    774|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    774|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    774|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    774|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    774|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 774]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    774|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    774|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    774|                    parse_integer_digits_without_thsep(
 3568|    774|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    774|                        prefix_result.parsed_base));
 3570|       |
 3571|    774|            auto buf = make_contiguous_buffer(
 3572|    774|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    774|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    774|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    774|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    774|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    774|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 774, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    774|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    774|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    774|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    774|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    774|    }                                                  \
  |  |  |  | 3642|    774|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    774|        }
 3581|       |
 3582|     30|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|     30|            localized_number_formatting_options<CharT>{loc};
 3587|     30|#endif
 3588|       |
 3589|     30|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|     30|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     30|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     30|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     30|    }                                                  \
  |  |  |  | 3642|     30|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3539|    688|    {
 3540|    688|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    688|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    688|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    688|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    688|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 688]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    688|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    688|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    688|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    688|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 688]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    688|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 688]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    688|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    688|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 688, False: 0]
  |  |  ------------------
  ------------------
 3566|    688|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    688|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    688|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    688|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    688|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 688, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    688|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    688|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    688|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    688|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    688|    }                                                  \
  |  |  |  | 3642|    688|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|      0|                    parse_integer_digits_without_thsep(
 3568|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|      0|                        prefix_result.parsed_base));
 3570|       |
 3571|      0|            auto buf = make_contiguous_buffer(
 3572|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|      0|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|  2.06k|    {
 3540|  2.06k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|  2.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|  2.06k|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|  2.06k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 2.06k]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|  2.06k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 2.06k]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|  2.06k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  2.06k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.06k, False: 0]
  |  |  ------------------
  ------------------
 3566|  2.06k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|  2.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|  2.06k|                    parse_integer_digits_without_thsep(
 3568|  2.06k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|  2.06k|                        prefix_result.parsed_base));
 3570|       |
 3571|  2.06k|            auto buf = make_contiguous_buffer(
 3572|  2.06k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|  2.06k|            SCN_TRY(result_it,
  ------------------
  |  | 3643|  2.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.06k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.06k|    }                                                  \
  |  |  |  | 3642|  2.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|  2.06k|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  10.8k|    {
 3040|  10.8k|        reader_error_handler eh{};
 3041|  10.8k|        get_derived().check_specs_impl(specs, eh);
 3042|  10.8k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.26k, False: 1.56k]
  |  |  ------------------
  ------------------
 3043|  9.26k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.26k|        }
 3045|  1.56k|        return {};
 3046|  10.8k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  10.8k|    {
 3051|  10.8k|        return static_cast<Derived&>(*this);
 3052|  10.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4145|  10.8k|    {
 4146|  10.8k|        detail::check_float_type_specs(specs, eh);
 4147|  10.8k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  2.92k|    {
 3035|  2.92k|        return true;
 3036|  2.92k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4217|  1.56k|    {
 4218|  1.56k|        unsigned options{};
 4219|  1.56k|        if (specs.localized) {
  ------------------
  |  Branch (4219:13): [True: 48, False: 1.51k]
  ------------------
 4220|     48|            options |= float_reader_base::allow_thsep;
 4221|     48|        }
 4222|       |
 4223|  1.56k|        SCN_GCC_COMPAT_PUSH
 4224|  1.56k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4225|       |
 4226|  1.56k|        switch (specs.type) {
 4227|     74|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4227:13): [True: 74, False: 1.48k]
  ------------------
 4228|     74|                return options | float_reader_base::allow_fixed;
 4229|       |
 4230|     16|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4230:13): [True: 16, False: 1.54k]
  ------------------
 4231|     16|                return options | float_reader_base::allow_scientific;
 4232|       |
 4233|     50|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4233:13): [True: 50, False: 1.51k]
  ------------------
 4234|     50|                return options | float_reader_base::allow_hex;
 4235|       |
 4236|     18|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4236:13): [True: 18, False: 1.54k]
  ------------------
 4237|     18|                return options | float_reader_base::allow_scientific |
 4238|     18|                       float_reader_base::allow_fixed;
 4239|       |
 4240|  1.40k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4240:13): [True: 1.40k, False: 158]
  ------------------
 4241|  1.40k|                return options | float_reader_base::allow_scientific |
 4242|  1.40k|                       float_reader_base::allow_fixed |
 4243|  1.40k|                       float_reader_base::allow_hex;
 4244|       |
 4245|      0|            default:
  ------------------
  |  Branch (4245:13): [True: 0, False: 1.56k]
  ------------------
 4246|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4247|  1.56k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4248|  1.56k|        }
 4249|       |
 4250|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4251|  1.56k|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3660|  1.56k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  2.92k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  5.85k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4057|  2.10k|    {
 4058|  2.10k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4058:13): [True: 2.10k, False: 0]
  ------------------
 4059|  2.10k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4059:13): [True: 2.10k, False: 0]
  ------------------
 4060|  2.10k|            return;
 4061|  2.10k|        }
 4062|       |
 4063|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4064|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4064:13): [True: 0, False: 0]
  ------------------
 4065|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4065:27): [True: 0, False: 0]
  ------------------
 4066|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4066:21): [True: 0, False: 0]
  ------------------
 4067|      0|                    ch = CharT{'.'};
 4068|      0|                }
 4069|      0|            }
 4070|      0|        }
 4071|       |
 4072|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4072:13): [True: 0, False: 0]
  ------------------
 4073|      0|            return;
 4074|      0|        }
 4075|       |
 4076|      0|        auto first =
 4077|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4078|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4078:13): [True: 0, False: 0]
  ------------------
 4079|      0|            return;
 4080|      0|        }
 4081|       |
 4082|      0|        m_thsep_indices.push_back(
 4083|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4084|       |
 4085|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4085:31): [True: 0, False: 0]
  ------------------
 4086|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4086:17): [True: 0, False: 0]
  ------------------
 4087|      0|                *first++ = std::move(*it);
 4088|      0|            }
 4089|      0|            else {
 4090|      0|                m_thsep_indices.push_back(
 4091|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4092|      0|            }
 4093|      0|        }
 4094|       |
 4095|      0|        str.erase(first, str.end());
 4096|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|    508|    {
 1587|    508|        return m_storage.has_value();
 1588|    508|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|    254|    {
 1592|    254|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    254|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    254|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    254|        return *m_storage;
 1594|    254|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    744|    {
  763|    744|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    744|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    744|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3679|     14|    {
 3680|     14|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|     14|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     14|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 14]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|     14|        return read_source_impl(range);
 3686|     14|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3705|    744|    {
 3706|    744|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|    744|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    744|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    744|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    744|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 744]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    744|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    744|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|    744|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|    744|        auto it = sign_result.first;
 3709|    744|        m_sign = sign_result.second;
 3710|       |
 3711|    744|        auto digits_begin = it;
 3712|    744|        auto r = ranges::subrange{it, range.end()};
 3713|    744|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    744|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|    744|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3716|    744|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|    744|                SCN_TRY_ASSIGN(
 3718|    744|                    it,
 3719|    744|                    do_read_source_impl(
 3720|    744|                        r,
 3721|    744|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|    744|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|    744|            }
 3724|    744|            else {
 3725|    744|                auto cb = [&](const auto& rr)
 3726|    744|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|    744|                    auto res = read_all(rr);
 3728|    744|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|    744|                        return unexpected_scan_error(
 3730|    744|                            scan_error::invalid_scanned_value,
 3731|    744|                            "Invalid float value");
 3732|    744|                    }
 3733|    744|                    return res;
 3734|    744|                };
 3735|    744|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3736|    744|            }
 3737|    744|        }
 3738|    744|        else {
 3739|    744|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|    744|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    744|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    744|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 744, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    744|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    744|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    744|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    744|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    744|    }                                                  \
  |  | 3642|    744|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    744|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3740|      0|                it,
 3741|      0|                do_read_source_impl(
 3742|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|      0|        }
 3745|       |
 3746|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  |  Branch (3748:48): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 0, False: 0]
  ------------------
 3751|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|      0|        }
 3753|       |
 3754|      0|        handle_separators();
 3755|       |
 3756|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 0]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|      0|        return it;
 3769|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4000|    744|    {
 4001|    744|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|    744|        const bool allowed_nonhex =
 4003|    744|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|    744|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|    744|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 744, False: 0]
  |  Branch (4006:45): [True: 0, False: 744]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|    744|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 744]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|    744|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 744, False: 0]
  |  Branch (4015:45): [True: 0, False: 744]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|    744|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 744]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|    744|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 720, False: 24]
  |  Branch (4022:28): [True: 18, False: 702]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|     18|            auto it = range.begin();
 4026|       |
 4027|     18|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 0, False: 18]
  ------------------
 4028|      0|                m_kind = float_kind::hex_with_prefix;
 4029|      0|                it = *r;
 4030|      0|            }
 4031|     18|            else {
 4032|     18|                m_kind = float_kind::hex_without_prefix;
 4033|     18|            }
 4034|       |
 4035|     18|            return read_hex(ranges::subrange{it, range.end()});
 4036|     18|        }
 4037|    726|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 24, False: 702]
  |  Branch (4037:29): [True: 24, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|     24|            m_kind = float_kind::generic;
 4041|     24|            return read_regular_float(range);
 4042|     24|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|    702|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    702|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 702]
  |  |  ------------------
  ------------------
 4048|      0|            m_kind = float_kind::hex_with_prefix;
 4049|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4050|      0|        }
 4051|       |
 4052|    702|        m_kind = float_kind::generic;
 4053|    702|        return read_regular(range);
 4054|    702|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3811|    744|    {
 3812|    744|        auto it = range.begin();
 3813|    744|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 744, False: 0]
  ------------------
 3814|    744|            return unexpected(r.error());
 3815|    744|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3834|    744|    {
 3835|    744|        auto it = range.begin();
 3836|    744|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 744, False: 0]
  ------------------
 3837|    744|            return r.transform_error(map_parse_error_to_scan_error(
 3838|    744|                scan_error::invalid_scanned_value,
 3839|    744|                "Invalid floating-point NaN value"));
 3840|    744|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3804|    720|    {
 3805|    720|        return read_matching_string_classic_nocase(range, "0x");
 3806|    720|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3904|     18|    {
 3905|     18|        auto it = range.begin();
 3906|       |
 3907|     18|        std::ptrdiff_t digits_count = 0;
 3908|     18|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3909|     18|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 3910|     18|            return r.transform_error(map_parse_error_to_scan_error(
 3911|     18|                scan_error::invalid_scanned_value,
 3912|     18|                "Invalid hexadecimal floating-point value"));
 3913|     18|        }
 3914|      0|        else {
 3915|      0|            digits_count += ranges::distance(it, *r);
 3916|      0|            it = *r;
 3917|      0|        }
 3918|       |
 3919|      0|        m_integral_part_length = digits_count;
 3920|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3920:18): [True: 0, False: 0]
  ------------------
 3921|      0|                                             m_locale_options.decimal_point)) {
 3922|      0|            it = *r;
 3923|      0|        }
 3924|       |
 3925|      0|        if (auto r =
  ------------------
  |  Branch (3925:18): [True: 0, False: 0]
  ------------------
 3926|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3927|      0|            digits_count += ranges::distance(it, *r);
 3928|      0|            it = *r;
 3929|      0|        }
 3930|       |
 3931|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3932|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3933|      0|                                         "No significand digits in hexfloat");
 3934|      0|        }
 3935|       |
 3936|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3937|       |
 3938|      0|        return it;
 3939|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3789|     18|    {
 3790|     18|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  |  Branch (859:45): [True: 0, False: 18]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3791|     18|                         thsep_allowed)) {
 3792|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3793|      0|                return char_to_int(ch) < 16 ||
 3794|      0|                       ch == m_locale_options.thousands_sep;
 3795|      0|            });
 3796|      0|        }
 3797|       |
 3798|     18|        return read_while1_code_unit(
 3799|     18|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3800|     18|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|     18|    {
  754|     18|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|     18|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     18|              cvref<T> obj = *get<T>(fn);
  745|     18|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     18|                  obj(static_cast<decltype(args)>(args)...);
  747|     18|              }
  748|     18|              else {
  749|     18|                  return obj(static_cast<decltype(args)>(args)...);
  750|     18|              }
  751|     18|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|     18|    {
  684|     18|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     18|            return static_cast<T*>(s.m_cp);
  686|     18|        }
  687|     18|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     18|            return static_cast<T*>(s.m_p);
  689|     18|        }
  690|     18|        else {
  691|     18|            return reinterpret_cast<T*>(s.m_fp);
  692|     18|        }
  693|     18|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3799|     18|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|     18|        {
  662|     18|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3944|    726|    {
 3945|    726|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|    726|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 714, False: 12]
  |  Branch (3946:50): [True: 0, False: 714]
  ------------------
 3947|       |
 3948|    726|        auto it = ranges::begin(range);
 3949|    726|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|    726|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|    726|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    726|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 726, False: 0]
  |  |  ------------------
  ------------------
 3953|    726|            return r.transform_error(
 3954|    726|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|    726|                                              "Invalid floating-point value"));
 3956|    726|        }
 3957|      0|        else {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        m_integral_part_length = digits_count;
 3963|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 0]
  ------------------
 3964|      0|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|      0|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|      0|        auto beg_exp_it = it;
 3980|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 0, False: 0]
  ------------------
 3981|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|      0|        }
 3983|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 0, False: 0]
  |  Branch (3983:29): [True: 0, False: 0]
  ------------------
 3984|      0|            return unexpected_scan_error(
 3985|      0|                scan_error::invalid_scanned_value,
 3986|      0|                "No exponent given to scientific float");
 3987|      0|        }
 3988|       |
 3989|      0|        m_kind =
 3990|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 0, False: 0]
  ------------------
 3991|       |
 3992|      0|        return it;
 3993|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3774|    726|    {
 3775|    726|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    726|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 726]
  |  |  |  Branch (859:45): [True: 0, False: 726]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|    726|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|    726|        return read_while1_code_unit(
 3784|    726|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|    726|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|    726|    {
  754|    726|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|    726|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    726|              cvref<T> obj = *get<T>(fn);
  745|    726|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    726|                  obj(static_cast<decltype(args)>(args)...);
  747|    726|              }
  748|    726|              else {
  749|    726|                  return obj(static_cast<decltype(args)>(args)...);
  750|    726|              }
  751|    726|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    726|    {
  684|    726|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    726|            return static_cast<T*>(s.m_cp);
  686|    726|        }
  687|    726|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    726|            return static_cast<T*>(s.m_p);
  689|    726|        }
  690|    726|        else {
  691|    726|            return reinterpret_cast<T*>(s.m_fp);
  692|    726|        }
  693|    726|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3784|    726|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|    726|        {
  662|    726|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3665|    730|    {
 3666|    730|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    730|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 730]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|    730|        return read_source_impl(range);
 3672|    730|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  2.18k|    {
  763|  2.18k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.18k|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3679|     34|    {
 3680|     34|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|     34|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     34|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|     34|        return read_source_impl(range);
 3686|     34|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3705|  2.18k|    {
 3706|  2.18k|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|  2.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|  2.18k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|  2.18k|        auto it = sign_result.first;
 3709|  2.18k|        m_sign = sign_result.second;
 3710|       |
 3711|  2.18k|        auto digits_begin = it;
 3712|  2.18k|        auto r = ranges::subrange{it, range.end()};
 3713|  2.18k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.18k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|  2.18k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.18k]
  |  |  |  Branch (859:45): [True: 0, False: 2.18k]
  |  |  |  Branch (859:45): [True: 0, False: 2.18k]
  |  |  ------------------
  ------------------
 3716|  2.18k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3718|      0|                    it,
 3719|      0|                    do_read_source_impl(
 3720|      0|                        r,
 3721|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|      0|            }
 3724|  2.18k|            else {
 3725|  2.18k|                auto cb = [&](const auto& rr)
 3726|  2.18k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  2.18k|                    auto res = read_all(rr);
 3728|  2.18k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|  2.18k|                        return unexpected_scan_error(
 3730|  2.18k|                            scan_error::invalid_scanned_value,
 3731|  2.18k|                            "Invalid float value");
 3732|  2.18k|                    }
 3733|  2.18k|                    return res;
 3734|  2.18k|                };
 3735|  2.18k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3638|  2.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  2.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 84, False: 2.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     84|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     84|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     84|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     84|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     84|    }                                                  \
  |  | 3642|  2.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3736|  2.10k|            }
 3737|  2.18k|        }
 3738|  2.10k|        else {
 3739|  2.10k|            SCN_TRY_ASSIGN(
 3740|  2.10k|                it,
 3741|  2.10k|                do_read_source_impl(
 3742|  2.10k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|  2.10k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|  2.10k|        }
 3745|       |
 3746|  2.10k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|  2.10k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 2.10k, False: 0]
  |  Branch (3748:48): [True: 2.10k, False: 0]
  ------------------
 3749|  2.10k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 2.10k, False: 0]
  ------------------
 3750|  2.10k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 2.10k, False: 0]
  ------------------
 3751|  2.10k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|  2.10k|        }
 3753|       |
 3754|  2.10k|        handle_separators();
 3755|       |
 3756|  2.10k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 2.10k]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|  2.10k|        return it;
 3769|  2.10k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3811|  2.18k|    {
 3812|  2.18k|        auto it = range.begin();
 3813|  2.18k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 2.18k, False: 0]
  ------------------
 3814|  2.18k|            return unexpected(r.error());
 3815|  2.18k|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3834|  2.18k|    {
 3835|  2.18k|        auto it = range.begin();
 3836|  2.18k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 2.18k, False: 0]
  ------------------
 3837|  2.18k|            return r.transform_error(map_parse_error_to_scan_error(
 3838|  2.18k|                scan_error::invalid_scanned_value,
 3839|  2.18k|                "Invalid floating-point NaN value"));
 3840|  2.18k|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3804|  2.10k|    {
 3805|  2.10k|        return read_matching_string_classic_nocase(range, "0x");
 3806|  2.10k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     84|{
 1996|     84|    auto it = read_while_code_unit(range, pred);
 1997|     84|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 84, False: 0]
  ------------------
 1998|     84|        return unexpected(parse_error::error);
 1999|     84|    }
 2000|      0|    return it;
 2001|     84|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3944|     84|    {
 3945|     84|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|     84|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 22, False: 62]
  |  Branch (3946:50): [True: 16, False: 6]
  ------------------
 3947|       |
 3948|     84|        auto it = ranges::begin(range);
 3949|     84|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|     84|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|     84|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 0]
  |  |  ------------------
  ------------------
 3953|     84|            return r.transform_error(
 3954|     84|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|     84|                                              "Invalid floating-point value"));
 3956|     84|        }
 3957|      0|        else {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        m_integral_part_length = digits_count;
 3963|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 0]
  ------------------
 3964|      0|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|      0|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|      0|        auto beg_exp_it = it;
 3980|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 0, False: 0]
  ------------------
 3981|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|      0|        }
 3983|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 0, False: 0]
  |  Branch (3983:29): [True: 0, False: 0]
  ------------------
 3984|      0|            return unexpected_scan_error(
 3985|      0|                scan_error::invalid_scanned_value,
 3986|      0|                "No exponent given to scientific float");
 3987|      0|        }
 3988|       |
 3989|      0|        m_kind =
 3990|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 0, False: 0]
  ------------------
 3991|       |
 3992|      0|        return it;
 3993|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3774|     84|    {
 3775|     84|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 84]
  |  |  |  Branch (859:45): [True: 0, False: 84]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|     84|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|     84|        return read_while1_code_unit(
 3784|     84|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|     84|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|     84|    {
  754|     84|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|     84|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     84|              cvref<T> obj = *get<T>(fn);
  745|     84|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     84|                  obj(static_cast<decltype(args)>(args)...);
  747|     84|              }
  748|     84|              else {
  749|     84|                  return obj(static_cast<decltype(args)>(args)...);
  750|     84|              }
  751|     84|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     84|    {
  684|     84|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     84|            return static_cast<T*>(s.m_cp);
  686|     84|        }
  687|     84|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     84|            return static_cast<T*>(s.m_p);
  689|     84|        }
  690|     84|        else {
  691|     84|            return reinterpret_cast<T*>(s.m_fp);
  692|     84|        }
  693|     84|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3784|     84|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|     84|        {
  662|     84|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4000|  2.18k|    {
 4001|  2.18k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|  2.18k|        const bool allowed_nonhex =
 4003|  2.18k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|  2.18k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|  2.18k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 2.18k, False: 0]
  |  Branch (4006:45): [True: 0, False: 2.18k]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|  2.18k|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 2.18k]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|  2.18k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 2.18k, False: 0]
  |  Branch (4015:45): [True: 0, False: 2.18k]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|  2.18k|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 2.18k]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|  2.18k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 2.10k, False: 84]
  |  Branch (4022:28): [True: 32, False: 2.06k]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|     32|            auto it = range.begin();
 4026|       |
 4027|     32|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 0, False: 32]
  ------------------
 4028|      0|                m_kind = float_kind::hex_with_prefix;
 4029|      0|                it = *r;
 4030|      0|            }
 4031|     32|            else {
 4032|     32|                m_kind = float_kind::hex_without_prefix;
 4033|     32|            }
 4034|       |
 4035|     32|            return read_hex(ranges::subrange{it, range.end()});
 4036|     32|        }
 4037|  2.15k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 84, False: 2.06k]
  |  Branch (4037:29): [True: 84, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|     84|            m_kind = float_kind::generic;
 4041|     84|            return read_regular_float(range);
 4042|     84|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|  2.06k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  2.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.06k]
  |  |  ------------------
  ------------------
 4048|      0|            m_kind = float_kind::hex_with_prefix;
 4049|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4050|      0|        }
 4051|       |
 4052|  2.06k|        m_kind = float_kind::generic;
 4053|  2.06k|        return read_regular(range);
 4054|  2.06k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3726|  2.10k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  2.10k|                    auto res = read_all(rr);
 3728|  2.10k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  2.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.10k]
  |  |  ------------------
  ------------------
 3729|      0|                        return unexpected_scan_error(
 3730|      0|                            scan_error::invalid_scanned_value,
 3731|      0|                            "Invalid float value");
 3732|      0|                    }
 3733|  2.10k|                    return res;
 3734|  2.10k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  2.10k|{
 1839|  2.10k|    return ranges::next(range.begin(), range.end());
 1840|  2.10k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  2.10k|    {
  313|  2.10k|        ranges::advance(x, bound);
  314|  2.10k|        return x;
  315|  2.10k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  2.10k|    {
  275|  2.10k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  2.10k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  2.32k|    {
  190|  2.32k|        i = std::move(bound);
  191|  2.32k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|  2.10k|    {
 1577|  2.10k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.10k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  2.10k|    {
 1621|  2.10k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.10k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.10k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.10k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.10k|            m_storage.reset();
 1627|  2.10k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.10k|        }
 1629|  2.10k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  2.10k|                                          std::basic_string<CharT>>) {
 1631|  2.10k|            m_storage.emplace(SCN_FWD(range));
 1632|  2.10k|            m_view = string_view_type{*m_storage};
 1633|  2.10k|        }
 1634|  2.10k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.10k|                                          typename detail::basic_scan_buffer<
 1636|  2.10k|                                              value_t>::forward_iterator> &&
 1637|  2.10k|                           ranges::common_range<Range>) {
 1638|  2.10k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.10k|            auto end_seg = range.end().contiguous_segment();
 1640|  2.10k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.10k|                             detail::to_address(end_seg.end()))) {
 1642|  2.10k|                auto& str = m_storage.emplace();
 1643|  2.10k|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.10k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.10k|                m_view = string_view_type{str};
 1646|  2.10k|                return;
 1647|  2.10k|            }
 1648|       |
 1649|  2.10k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.10k|                                                            end_seg.data());
 1651|  2.10k|            m_storage.reset();
 1652|  2.10k|        }
 1653|  2.10k|        else {
 1654|  2.10k|            auto& str = m_storage.emplace();
 1655|  2.10k|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.10k|                str.reserve(range.size());
 1657|  2.10k|            }
 1658|  2.10k|            if constexpr (ranges::common_range<Range>) {
 1659|  2.10k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.10k|                          std::back_inserter(str));
 1661|  2.10k|            }
 1662|  2.10k|            else {
 1663|  2.10k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.10k|                     ++it) {
 1665|  2.10k|                    str.push_back(*it);
 1666|  2.10k|                }
 1667|  2.10k|            }
 1668|  2.10k|            m_view = string_view_type{str};
 1669|  2.10k|        }
 1670|  2.10k|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3665|  2.15k|    {
 3666|  2.15k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  2.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.15k]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|  2.15k|        return read_source_impl(range);
 3672|  2.15k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3691|  2.10k|    {
 3692|  2.10k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  2.10k|        const std::ptrdiff_t sign_len =
 3695|  2.10k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 0, False: 2.10k]
  ------------------
 3696|       |
 3697|  2.10k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  2.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.10k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.10k|    }                                                  \
  |  |  |  | 3642|  2.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  2.10k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4170|    744|    {
 4171|    744|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|    744|#if !SCN_DISABLE_LOCALE
 4174|    744|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 14, False: 730]
  ------------------
 4175|     14|            return read_impl<Range>(
 4176|     14|                range, rd,
 4177|     14|                [](float_reader<CharT>& r, auto&&... args) {
 4178|     14|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|     14|                },
 4180|     14|                value, loc);
 4181|     14|        }
 4182|    730|#endif
 4183|       |
 4184|    730|        return read_impl<Range>(
 4185|    730|            range, rd,
 4186|    730|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    730|                return r.read_source(SCN_FWD(args)...);
 4188|    730|            },
 4189|    730|            value);
 4190|    744|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|    744|    {
 4207|    744|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|    744|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    744|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 744, False: 0]
  |  |  ------------------
  ------------------
 4209|    744|            return unexpected(r.error());
 4210|    744|        }
 4211|       |
 4212|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|      0|        return ranges::next(range.begin(), n);
 4214|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|     14|    {
  754|     14|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|     14|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     14|              cvref<T> obj = *get<T>(fn);
  745|     14|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     14|                  obj(static_cast<decltype(args)>(args)...);
  747|     14|              }
  748|     14|              else {
  749|     14|                  return obj(static_cast<decltype(args)>(args)...);
  750|     14|              }
  751|     14|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     14|    {
  684|     14|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     14|            return static_cast<T*>(s.m_cp);
  686|     14|        }
  687|     14|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     14|            return static_cast<T*>(s.m_p);
  689|     14|        }
  690|     14|        else {
  691|     14|            return reinterpret_cast<T*>(s.m_fp);
  692|     14|        }
  693|     14|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4177|     14|                [](float_reader<CharT>& r, auto&&... args) {
 4178|     14|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|     14|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  661|     14|        {
  662|     14|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    730|    {
  754|    730|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    730|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    730|              cvref<T> obj = *get<T>(fn);
  745|    730|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    730|                  obj(static_cast<decltype(args)>(args)...);
  747|    730|              }
  748|    730|              else {
  749|    730|                  return obj(static_cast<decltype(args)>(args)...);
  750|    730|              }
  751|    730|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    730|    {
  684|    730|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    730|            return static_cast<T*>(s.m_cp);
  686|    730|        }
  687|    730|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    730|            return static_cast<T*>(s.m_p);
  689|    730|        }
  690|    730|        else {
  691|    730|            return reinterpret_cast<T*>(s.m_fp);
  692|    730|        }
  693|    730|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4186|    730|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    730|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    730|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|    730|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  661|    730|        {
  662|    730|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|    816|    {
 4171|    816|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|    816|#if !SCN_DISABLE_LOCALE
 4174|    816|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 34, False: 782]
  ------------------
 4175|     34|            return read_impl<Range>(
 4176|     34|                range, rd,
 4177|     34|                [](float_reader<CharT>& r, auto&&... args) {
 4178|     34|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|     34|                },
 4180|     34|                value, loc);
 4181|     34|        }
 4182|    782|#endif
 4183|       |
 4184|    782|        return read_impl<Range>(
 4185|    782|            range, rd,
 4186|    782|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    782|                return r.read_source(SCN_FWD(args)...);
 4188|    782|            },
 4189|    782|            value);
 4190|    816|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|  2.18k|    {
 4207|  2.18k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  2.18k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 2.10k]
  |  |  ------------------
  ------------------
 4209|     84|            return unexpected(r.error());
 4210|     84|        }
 4211|       |
 4212|  2.10k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  2.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.10k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.10k|    }                                                  \
  |  |  |  | 3642|  2.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|      0|        return ranges::next(range.begin(), n);
 4214|  2.10k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     34|    {
  684|     34|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     34|            return static_cast<T*>(s.m_cp);
  686|     34|        }
  687|     34|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     34|            return static_cast<T*>(s.m_p);
  689|     34|        }
  690|     34|        else {
  691|     34|            return reinterpret_cast<T*>(s.m_fp);
  692|     34|        }
  693|     34|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|     34|                [](float_reader<CharT>& r, auto&&... args) {
 4178|     34|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     34|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|     34|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    782|    {
  754|    782|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|    782|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    782|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    782|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|    782|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|    782|        {
  662|    782|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5809|  12.1k|{
 5810|  12.1k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|  12.1k|        return reader_impl_for_bool<CharT>{};
 5812|  12.1k|    }
 5813|  12.1k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|  12.1k|        return reader_impl_for_char<CharT>{};
 5815|  12.1k|    }
 5816|  12.1k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|  12.1k|        return reader_impl_for_wchar<CharT>{};
 5818|  12.1k|    }
 5819|  12.1k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|  12.1k|        return reader_impl_for_code_point<CharT>{};
 5821|  12.1k|    }
 5822|  12.1k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  12.1k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  12.1k|        return reader_impl_for_string<CharT>{};
 5825|  12.1k|    }
 5826|  12.1k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  12.1k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|  12.1k|        return reader_impl_for_string<CharT>{};
 5829|  12.1k|    }
 5830|  12.1k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|  12.1k|                       std::is_same_v<T, wregex_matches>) {
 5832|  12.1k|        return reader_impl_for_regex_matches<CharT>{};
 5833|  12.1k|    }
 5834|  12.1k|    else if constexpr (std::is_same_v<T, void*>) {
 5835|  12.1k|        return reader_impl_for_voidptr<CharT>{};
 5836|  12.1k|    }
 5837|  12.1k|    else if constexpr (std::is_floating_point_v<T>) {
 5838|  12.1k|        return reader_impl_for_float<CharT>{};
 5839|  12.1k|    }
 5840|  12.1k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|  12.1k|                       !std::is_same_v<T, wchar_t> &&
 5842|  12.1k|                       !std::is_same_v<T, char32_t> &&
 5843|  12.1k|                       !std::is_same_v<T, bool>) {
 5844|  12.1k|        return reader_impl_for_int<CharT>{};
 5845|  12.1k|    }
 5846|  12.1k|    else {
 5847|  12.1k|        return reader_impl_for_monostate<CharT>{};
 5848|  12.1k|    }
 5849|  12.1k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5206|  36.3k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  32.2k|    {
 3040|  32.2k|        reader_error_handler eh{};
 3041|  32.2k|        get_derived().check_specs_impl(specs, eh);
 3042|  32.2k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.20k, False: 31.0k]
  |  |  ------------------
  ------------------
 3043|  1.20k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  1.20k|        }
 3045|  31.0k|        return {};
 3046|  32.2k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  32.2k|    {
 3051|  32.2k|        return static_cast<Derived&>(*this);
 3052|  32.2k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5210|  32.2k|    {
 5211|  32.2k|        detail::check_string_type_specs(specs, eh);
 5212|       |
 5213|  32.2k|        SCN_GCC_PUSH
 5214|  32.2k|        SCN_GCC_IGNORE("-Wswitch")
 5215|  32.2k|        SCN_GCC_IGNORE("-Wswitch-default")
 5216|       |
 5217|  32.2k|        SCN_CLANG_PUSH
 5218|  32.2k|        SCN_CLANG_IGNORE("-Wswitch")
 5219|  32.2k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5220|       |
 5221|  32.2k|        switch (specs.type) {
  ------------------
  |  Branch (5221:17): [True: 834, False: 31.4k]
  ------------------
 5222|  4.11k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5222:13): [True: 4.11k, False: 28.1k]
  ------------------
 5223|  4.11k|                m_type = reader_type::word;
 5224|  4.11k|                break;
 5225|       |
 5226|    516|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5226:13): [True: 516, False: 31.7k]
  ------------------
 5227|    516|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5227:21): [True: 84, False: 432]
  ------------------
 5228|    516|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5228:21): [True: 138, False: 294]
  ------------------
 5229|    222|                    m_type = reader_type::custom_word;
 5230|    222|                }
 5231|    294|                else {
 5232|    294|                    m_type = reader_type::word;
 5233|    294|                }
 5234|    516|                break;
 5235|      0|            }
 5236|       |
 5237|    588|            case detail::presentation_type::character:
  ------------------
  |  Branch (5237:13): [True: 588, False: 31.6k]
  ------------------
 5238|    588|                m_type = reader_type::character;
 5239|    588|                break;
 5240|       |
 5241|  8.74k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5241:13): [True: 8.74k, False: 23.5k]
  ------------------
 5242|  8.74k|                m_type = reader_type::character_set;
 5243|  8.74k|                break;
 5244|       |
 5245|  15.2k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5245:13): [True: 15.2k, False: 16.9k]
  ------------------
 5246|  15.2k|                m_type = reader_type::regex;
 5247|  15.2k|                break;
 5248|       |
 5249|  2.18k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5249:13): [True: 2.18k, False: 30.0k]
  ------------------
 5250|  2.18k|                m_type = reader_type::regex_escaped;
 5251|  2.18k|                break;
 5252|  32.2k|        }
 5253|       |
 5254|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5255|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5256|  32.2k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5259|  43.6k|    {
 5260|  43.6k|        return m_type == reader_type::word;
 5261|  43.6k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  22.8k|{
 1132|  22.8k|    auto it = src.begin();
 1133|  2.57M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 2.55M, False: 17.6k]
  ------------------
 1134|  2.55M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  2.55M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 3.52k, False: 2.54M]
  ------------------
 1136|  3.52k|            return false;
 1137|  3.52k|        }
 1138|  2.54M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 282, False: 2.54M]
  ------------------
 1139|    282|            return false;
 1140|    282|        }
 1141|  2.54M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  2.54M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  2.54M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.34k, False: 2.54M]
  ------------------
 1144|  1.34k|            return false;
 1145|  1.34k|        }
 1146|  2.54M|        it += len;
 1147|  2.54M|    }
 1148|  17.6k|    return true;
 1149|  22.8k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    254|{
 2993|    254|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    254|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 254, False: 0]
  ------------------
 2995|    254|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    254|    static_cast<    \
  |  |  929|    254|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    254|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    254|    }
 3001|    254|    else {
 3002|    254|        return transcode_impl(source.view(), dest);
 3003|    254|    }
 3004|       |
 3005|    254|    return {};
 3006|    254|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5103|  8.74k|        {
 5104|  8.74k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5104:17): [True: 990, False: 7.75k]
  ------------------
 5105|    990|                return {};
 5106|    990|            }
 5107|       |
 5108|  7.75k|            auto charset_string = specs.charset_string<SourceCharT>();
 5109|  7.75k|            auto it = detail::to_address(charset_string.begin());
 5110|  7.75k|            auto set = detail::parse_presentation_set(
 5111|  7.75k|                it, detail::to_address(charset_string.end()), nonascii);
 5112|  7.75k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  7.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.75k]
  |  |  ------------------
  ------------------
 5113|      0|                return nonascii.err;
 5114|      0|            }
 5115|  7.75k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  7.75k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|  7.75k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  7.75k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5117|       |
 5118|  7.75k|            std::sort(nonascii.extra_ranges.begin(),
 5119|  7.75k|                      nonascii.extra_ranges.end());
 5120|  7.75k|            return {};
 5121|  7.75k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5138|  1.70M|        {
 5139|  1.70M|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5139:17): [True: 153k, False: 1.55M]
  ------------------
 5140|   153k|                return helper.is_char_set_in_extra_literals(cp);
 5141|   153k|            }
 5142|       |
 5143|  1.55M|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5144|  1.70M|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5086|   153k|        {
 5087|       |            // TODO: binary search?
 5088|   153k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5088:17): [True: 0, False: 153k]
  ------------------
 5089|      0|                return false;
 5090|      0|            }
 5091|       |
 5092|   153k|            const auto cp_val = static_cast<uint32_t>(cp);
 5093|   153k|            return std::find_if(
 5094|   153k|                       nonascii.extra_ranges.begin(),
 5095|   153k|                       nonascii.extra_ranges.end(),
 5096|   153k|                       [cp_val](const auto& pair) noexcept {
 5097|   153k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5098|   153k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5099|   153k|                       }) != nonascii.extra_ranges.end();
 5100|   153k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5096|  33.5M|                       [cp_val](const auto& pair) noexcept {
 5097|  33.5M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5097:35): [True: 33.5M, False: 16.0k]
  ------------------
 5098|  33.5M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5098:35): [True: 148k, False: 33.3M]
  ------------------
 5099|  33.5M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5076|  1.56M|        {
 5077|  1.56M|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5078|  1.56M|            const auto val =
 5079|  1.56M|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5080|  1.56M|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5081|  1.56M|                    (val % 8)) &
 5082|  1.56M|                   1u;
 5083|  1.56M|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5129|  16.8k|        {
 5130|  16.8k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5130:17): [True: 5.37k, False: 11.4k]
  ------------------
 5131|  5.37k|                return false;
 5132|  5.37k|            }
 5133|       |
 5134|  11.4k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5135|  16.8k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5073|  8.74k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5277|    980|    {
 5278|    980|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    980|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    980|        return read_impl(range, specs, value);
 5280|    980|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5295|    980|    {
 5296|    980|        SCN_CLANG_PUSH
 5297|    980|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    980|        switch (m_type) {
 5300|    692|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 692, False: 288]
  ------------------
 5301|    692|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 980]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|     72|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 72, False: 908]
  ------------------
 5308|     72|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|    198|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 198, False: 782]
  ------------------
 5311|    198|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|    198|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|     14|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 14, False: 966]
  ------------------
 5316|     14|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|     14|                    range, specs.charset_string<SourceCharT>(),
 5318|     14|                    specs.regexp_flags, value);
 5319|       |
 5320|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 4, False: 976]
  ------------------
 5321|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      4|                    range,
 5323|      4|                    get_unescaped_regex_pattern(
 5324|      4|                        specs.charset_string<SourceCharT>()),
 5325|      4|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 980]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    980|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    980|        }
 5332|       |
 5333|    980|        SCN_CLANG_POP
 5334|    980|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4820|    692|    {
 4821|    692|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|    692|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4752|    764|{
 4753|    764|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|    764|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|    764|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 630, False: 134]
  ------------------
 4757|    630|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    630|                                     "Invalid encoding in scanned string");
 4759|    630|    }
 4760|    134|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    134|    static_cast<    \
  |  |  929|    134|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    134|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    134|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 134]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    134|    return SCN_MOVE(result);
  ------------------
  |  |  928|    134|    static_cast<    \
  |  |  929|    134|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    134|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|  2.07k|{
 2088|  2.07k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.07k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.07k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.07k|        auto buf = make_contiguous_buffer(range);
 2092|  2.07k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.07k|        return ranges::next(range.begin(),
 2094|  2.07k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.07k|    }
 2096|  2.07k|    else {
 2097|  2.07k|        auto it = range.begin();
 2098|       |
 2099|  2.07k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  2.07k|            auto seg = get_contiguous_beginning(range);
 2101|  2.07k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.07k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 2.07k]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|  2.07k|            ranges::advance(it, seg.size());
 2106|  2.07k|        }
 2107|       |
 2108|  2.07k|        return read_until_code_point(
 2109|  2.07k|            ranges::subrange{it, range.end()},
 2110|  2.07k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.07k|    }
 2112|  2.07k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|  2.07k|{
 2061|  2.07k|    auto it = range.begin();
 2062|   120k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 118k, False: 1.54k]
  ------------------
 2063|   118k|        const auto val =
 2064|   118k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   118k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   118k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 107k, False: 10.8k]
  |  |  ------------------
  ------------------
 2066|   107k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   107k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   107k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 534, False: 107k]
  ------------------
 2069|    534|                return it;
 2070|    534|            }
 2071|   107k|        }
 2072|   118k|        it = val.iterator;
 2073|   118k|    }
 2074|       |
 2075|  1.54k|    return it;
 2076|  2.07k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  2.07k|    {
  754|  2.07k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|   107k|    {
  684|   107k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   107k|            return static_cast<T*>(s.m_cp);
  686|   107k|        }
  687|   107k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   107k|            return static_cast<T*>(s.m_p);
  689|   107k|        }
  690|   107k|        else {
  691|   107k|            return reinterpret_cast<T*>(s.m_fp);
  692|   107k|        }
  693|   107k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|   107k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  2.07k|        {
  662|  2.07k|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4947|     72|    {
 4948|     72|        return read_impl(
 4949|     72|            range,
 4950|     72|            [&](const auto& rng) {
 4951|     72|                return read_string_impl(rng, read_all(rng), value);
 4952|     72|            },
 4953|     72|            detail::priority_tag<1>{});
 4954|     72|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4974|     72|    {
 4975|     72|        return read_cb(range);
 4976|     72|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4950|     72|            [&](const auto& rng) {
 4951|     72|                return read_string_impl(rng, read_all(rng), value);
 4952|     72|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|    216|{
 1839|    216|    return ranges::next(range.begin(), range.end());
 1840|    216|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    216|    {
  313|    216|        ranges::advance(x, bound);
  314|    216|        return x;
  315|    216|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    216|    {
  275|    216|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    216|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    216|    {
  203|  11.8k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 11.6k, False: 216]
  ------------------
  204|  11.6k|            ++i;
  205|  11.6k|        }
  206|    216|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5048|    198|    {
 5049|    198|        auto it = read_source_impl(range, {specs});
 5050|    198|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 176]
  |  |  ------------------
  ------------------
 5051|     22|            return unexpected(it.error());
 5052|     22|        }
 5053|       |
 5054|    176|        return read_string_impl(range, *it, value);
 5055|    198|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5153|    594|    {
 5154|    594|        const bool is_inverted = helper.specs.charset_is_inverted;
 5155|    594|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5156|       |
 5157|    594|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    594|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 594]
  |  |  ------------------
  ------------------
 5158|      0|            return unexpected(e);
 5159|      0|        }
 5160|       |
 5161|    594|        read_source_callback cb_wrapper{helper};
 5162|       |
 5163|    594|        if (accepts_nonascii) {
  ------------------
  |  Branch (5163:13): [True: 438, False: 156]
  ------------------
 5164|    438|            const auto cb = [&](char32_t cp) {
 5165|    438|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5166|    438|            };
 5167|       |
 5168|    438|            if (is_inverted) {
  ------------------
  |  Branch (5168:17): [True: 48, False: 390]
  ------------------
 5169|     48|                auto it = read_until_code_point(range, cb);
 5170|     48|                return check_nonempty(it, range);
 5171|     48|            }
 5172|    390|            auto it = read_while_code_point(range, cb);
 5173|    390|            return check_nonempty(it, range);
 5174|    438|        }
 5175|       |
 5176|    156|        const auto cb = [&](SourceCharT ch) {
 5177|    156|            return cb_wrapper.on_ascii_only(ch);
 5178|    156|        };
 5179|       |
 5180|    156|        if (is_inverted) {
  ------------------
  |  Branch (5180:13): [True: 60, False: 96]
  ------------------
 5181|     60|            auto it = read_until_code_unit(range, cb);
 5182|     60|            return check_nonempty(it, range);
 5183|     60|        }
 5184|     96|        auto it = read_while_code_unit(range, cb);
 5185|     96|        return check_nonempty(it, range);
 5186|    156|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_:
  753|    438|    {
  754|    438|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   215k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   215k|              cvref<T> obj = *get<T>(fn);
  745|   215k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   215k|                  obj(static_cast<decltype(args)>(args)...);
  747|   215k|              }
  748|   215k|              else {
  749|   215k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   215k|              }
  751|   215k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   215k|    {
  684|   215k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   215k|            return static_cast<T*>(s.m_cp);
  686|   215k|        }
  687|   215k|        else if constexpr (std::is_object_v<T>) {
  688|   215k|            return static_cast<T*>(s.m_p);
  689|   215k|        }
  690|   215k|        else {
  691|   215k|            return reinterpret_cast<T*>(s.m_fp);
  692|   215k|        }
  693|   215k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5164|   215k|            const auto cb = [&](char32_t cp) {
 5165|   215k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5166|   215k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_LPv0EEEPKSL_:
  666|    438|        {
  667|    438|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5191|    594|    {
 5192|    594|        if (it == range.begin()) {
  ------------------
  |  Branch (5192:13): [True: 66, False: 528]
  ------------------
 5193|     66|            return unexpected_scan_error(
 5194|     66|                scan_error::invalid_scanned_value,
 5195|     66|                "No characters matched in [character set]");
 5196|     66|        }
 5197|       |
 5198|    528|        return it;
 5199|    594|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_:
  753|    156|    {
  754|    156|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  1.12k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.12k|              cvref<T> obj = *get<T>(fn);
  745|  1.12k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.12k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.12k|              }
  748|  1.12k|              else {
  749|  1.12k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.12k|              }
  751|  1.12k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  1.12k|    {
  684|  1.12k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.12k|            return static_cast<T*>(s.m_cp);
  686|  1.12k|        }
  687|  1.12k|        else if constexpr (std::is_object_v<T>) {
  688|  1.12k|            return static_cast<T*>(s.m_p);
  689|  1.12k|        }
  690|  1.12k|        else {
  691|  1.12k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.12k|        }
  693|  1.12k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5176|  1.12k|        const auto cb = [&](SourceCharT ch) {
 5177|  1.12k|            return cb_wrapper.on_ascii_only(ch);
 5178|  1.12k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_LPv0EEEPKSL_:
  666|    156|        {
  667|    156|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4752|    176|{
 4753|    176|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|    176|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|    176|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 56, False: 120]
  ------------------
 4757|     56|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|     56|                                     "Invalid encoding in scanned string");
 4759|     56|    }
 4760|    120|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    120|    static_cast<    \
  |  |  929|    120|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    120|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 120]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    120|    return SCN_MOVE(result);
  ------------------
  |  |  928|    120|    static_cast<    \
  |  |  929|    120|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    120|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4891|     18|    {
 4892|     18|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     18|    }                                                  \
  |  |  |  | 3642|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4893|      0|        return read_string_impl(range, it, value);
 4894|     18|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4913|     54|    {
 4914|     54|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|    108|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|     54|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4915:23): [Folded - Ignored]
  ------------------
 4916|     54|            return unexpected_scan_error(
 4917|     54|                scan_error::invalid_scanned_value,
 4918|     54|                "Regex backend doesn't support wide strings as input");
 4919|     54|        }
 4920|     54|        else {
 4921|     54|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4921:17): [True: 54, False: 0]
  ------------------
 4922|     54|                return unexpected_scan_error(
 4923|     54|                    scan_error::invalid_scanned_value,
 4924|     54|                    "Cannot use regex with a non-contiguous source "
 4925|     54|                    "range");
 4926|     54|            }
 4927|       |
 4928|      0|            auto input = get_as_contiguous(range);
 4929|      0|            SCN_TRY(it,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4930|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4931|      0|            return ranges::next(range.begin(),
 4932|      0|                                ranges::distance(input.begin(), it));
 4933|      0|        }
 4934|     54|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|     54|{
  959|     54|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|     54|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|     54|        return true;
  962|     54|    }
  963|     54|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|     54|                           ranges::const_iterator_t<Range>,
  965|     54|                           typename detail::basic_scan_buffer<
  966|     54|                               detail::char_t<Range>>::forward_iterator>) {
  967|     54|        auto beg = r.begin();
  968|     54|        if (!beg.stores_parent()) {
  969|     54|            return true;
  970|     54|        }
  971|     54|        return beg.parent()->is_contiguous();
  972|     54|    }
  973|     54|    else {
  974|     54|        return false;
  975|     54|    }
  976|     54|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5277|  9.36k|    {
 5278|  9.36k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  9.36k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|  9.36k|        return read_impl(range, specs, value);
 5280|  9.36k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5295|  9.36k|    {
 5296|  9.36k|        SCN_CLANG_PUSH
 5297|  9.36k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|  9.36k|        switch (m_type) {
 5300|    778|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 778, False: 8.59k]
  ------------------
 5301|    778|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|     74|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 74, False: 9.29k]
  ------------------
 5304|     74|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|     74|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 9.36k]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|  2.71k|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 2.71k, False: 6.65k]
  ------------------
 5311|  2.71k|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|  2.71k|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|  5.07k|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 5.07k, False: 4.29k]
  ------------------
 5316|  5.07k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|  5.07k|                    range, specs.charset_string<SourceCharT>(),
 5318|  5.07k|                    specs.regexp_flags, value);
 5319|       |
 5320|    724|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 724, False: 8.64k]
  ------------------
 5321|    724|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|    724|                    range,
 5323|    724|                    get_unescaped_regex_pattern(
 5324|    724|                        specs.charset_string<SourceCharT>()),
 5325|    724|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 9.36k]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|  9.36k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|  9.36k|        }
 5332|       |
 5333|  9.36k|        SCN_CLANG_POP
 5334|  9.36k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4820|  2.14k|    {
 4821|  2.14k|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|  2.14k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4752|  2.22k|{
 4753|  2.22k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  2.22k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  2.22k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 708, False: 1.51k]
  ------------------
 4757|    708|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    708|                                     "Invalid encoding in scanned string");
 4759|    708|    }
 4760|  1.51k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.51k|    static_cast<    \
  |  |  929|  1.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|  1.51k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.51k]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|  1.51k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.51k|    static_cast<    \
  |  |  929|  1.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|  1.51k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  4.16k|{
 3012|  4.16k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  4.16k|        dest.assign(source.view());
 3014|  4.16k|    }
 3015|  4.16k|    else {
 3016|  4.16k|        return transcode_impl(source.view(), dest);
 3017|  4.16k|    }
 3018|       |
 3019|  4.16k|    return {};
 3020|  4.16k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  6.43k|{
 2088|  6.43k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  6.43k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  6.43k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  6.43k|        auto buf = make_contiguous_buffer(range);
 2092|  6.43k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  6.43k|        return ranges::next(range.begin(),
 2094|  6.43k|                            ranges::distance(buf.view().begin(), it));
 2095|  6.43k|    }
 2096|  6.43k|    else {
 2097|  6.43k|        auto it = range.begin();
 2098|       |
 2099|  6.43k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  6.43k|            auto seg = get_contiguous_beginning(range);
 2101|  6.43k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  6.43k|                seg_it != seg.end()) {
 2103|  6.43k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  6.43k|            }
 2105|  6.43k|            ranges::advance(it, seg.size());
 2106|  6.43k|        }
 2107|       |
 2108|  6.43k|        return read_until_code_point(
 2109|  6.43k|            ranges::subrange{it, range.end()},
 2110|  6.43k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  6.43k|    }
 2112|  6.43k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4841|     74|    {
 4842|     74|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4842:13): [True: 70, False: 4]
  ------------------
 4843|     70|            return read_string_impl(
 4844|     70|                range,
 4845|     70|                read_until_code_unit(
 4846|     70|                    range,
 4847|     70|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4848|     70|                        SourceCharT ch) { return ch == until; }),
 4849|     70|                value);
 4850|     70|        }
 4851|      4|        return read_string_impl(
 4852|      4|            range,
 4853|      4|            read_until_code_units(
 4854|      4|                range, specs.fill.template get_code_units<SourceCharT>()),
 4855|      4|            value);
 4856|     74|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     70|    {
  754|     70|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  2.51k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.51k|              cvref<T> obj = *get<T>(fn);
  745|  2.51k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.51k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.51k|              }
  748|  2.51k|              else {
  749|  2.51k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.51k|              }
  751|  2.51k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|  2.51k|    {
  684|  2.51k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.51k|            return static_cast<T*>(s.m_cp);
  686|  2.51k|        }
  687|  2.51k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.51k|            return static_cast<T*>(s.m_p);
  689|  2.51k|        }
  690|  2.51k|        else {
  691|  2.51k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.51k|        }
  693|  2.51k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4848|  2.51k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     70|        {
  662|     70|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2006|     12|{
 2007|     12|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     12|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     12|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     12|                           needle.end());
 2012|     12|    }
 2013|     12|    else {
 2014|     12|        auto first = range.begin();
 2015|     12|        while (true) {
 2016|     12|            auto it = first;
 2017|     12|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|     12|                if (needle_it == needle.end()) {
 2019|     12|                    return first;
 2020|     12|                }
 2021|     12|                if (it == range.end()) {
 2022|     12|                    return it;
 2023|     12|                }
 2024|     12|                if (*it != *needle_it) {
 2025|     12|                    break;
 2026|     12|                }
 2027|     12|            }
 2028|     12|            ++first;
 2029|     12|        }
 2030|     12|    }
 2031|     12|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5048|  2.71k|    {
 5049|  2.71k|        auto it = read_source_impl(range, {specs});
 5050|  2.71k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 528, False: 2.19k]
  |  |  ------------------
  ------------------
 5051|    528|            return unexpected(it.error());
 5052|    528|        }
 5053|       |
 5054|  2.19k|        return read_string_impl(range, *it, value);
 5055|  2.71k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5153|  8.15k|    {
 5154|  8.15k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5155|  8.15k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5156|       |
 5157|  8.15k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.15k]
  |  |  ------------------
  ------------------
 5158|      0|            return unexpected(e);
 5159|      0|        }
 5160|       |
 5161|  8.15k|        read_source_callback cb_wrapper{helper};
 5162|       |
 5163|  8.15k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5163:13): [True: 7.32k, False: 834]
  ------------------
 5164|  7.32k|            const auto cb = [&](char32_t cp) {
 5165|  7.32k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5166|  7.32k|            };
 5167|       |
 5168|  7.32k|            if (is_inverted) {
  ------------------
  |  Branch (5168:17): [True: 1.93k, False: 5.38k]
  ------------------
 5169|  1.93k|                auto it = read_until_code_point(range, cb);
 5170|  1.93k|                return check_nonempty(it, range);
 5171|  1.93k|            }
 5172|  5.38k|            auto it = read_while_code_point(range, cb);
 5173|  5.38k|            return check_nonempty(it, range);
 5174|  7.32k|        }
 5175|       |
 5176|    834|        const auto cb = [&](SourceCharT ch) {
 5177|    834|            return cb_wrapper.on_ascii_only(ch);
 5178|    834|        };
 5179|       |
 5180|    834|        if (is_inverted) {
  ------------------
  |  Branch (5180:13): [True: 438, False: 396]
  ------------------
 5181|    438|            auto it = read_until_code_unit(range, cb);
 5182|    438|            return check_nonempty(it, range);
 5183|    438|        }
 5184|    396|        auto it = read_while_code_unit(range, cb);
 5185|    396|        return check_nonempty(it, range);
 5186|    834|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  7.32k|{
 2061|  7.32k|    auto it = range.begin();
 2062|  1.49M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.49M, False: 738]
  ------------------
 2063|  1.49M|        const auto val =
 2064|  1.49M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.49M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.49M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.49M, False: 2.45k]
  |  |  ------------------
  ------------------
 2066|  1.49M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.49M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.49M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 6.58k, False: 1.48M]
  ------------------
 2069|  6.58k|                return it;
 2070|  6.58k|            }
 2071|  1.49M|        }
 2072|  1.48M|        it = val.iterator;
 2073|  1.48M|    }
 2074|       |
 2075|    738|    return it;
 2076|  7.32k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  1.49M|{
 1899|  1.49M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.49M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.49M|    auto it = range.begin();
 1903|  1.49M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.49M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.45k, False: 1.49M]
  |  |  ------------------
  ------------------
 1906|  2.45k|        ++it;
 1907|  2.45k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  2.45k|        return {it, {}};
 1909|  2.45k|    }
 1910|       |
 1911|  1.49M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.34M, False: 143k]
  ------------------
 1912|  1.34M|        ++it;
 1913|  1.34M|        return {it, string_type(1, *range.begin())};
 1914|  1.34M|    }
 1915|       |
 1916|   143k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|   143k|    return {it, string_type{range.begin(), it}};
 1918|  1.49M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  2.45k|{
 1155|  2.45k|    auto it = input.begin();
 1156|  12.4k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 12.4k, False: 90]
  ------------------
 1157|  12.4k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 2.36k, False: 10.0k]
  ------------------
 1158|  2.36k|            break;
 1159|  2.36k|        }
 1160|  12.4k|    }
 1161|  2.45k|    return it;
 1162|  2.45k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|   143k|    {
  283|   143k|        return n - fn::impl_i_n_s(i, n, bound);
  284|   143k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|   143k|    {
  212|   143k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 228, False: 143k]
  ------------------
  213|    228|            auto dist = bound - i;
  214|    228|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|    228|            return dist;
  216|    228|        }
  217|   143k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|   143k|        return n;
  219|   143k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|   287k|    {
  132|   287k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 287k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   287k|        return t;
  136|   287k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|  1.49M|    {
 1890|  1.49M|        return !codepoint.empty();
 1891|  1.49M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  7.32k|    {
  754|  7.32k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|  1.49M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.49M|              cvref<T> obj = *get<T>(fn);
  745|  1.49M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.49M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.49M|              }
  748|  1.49M|              else {
  749|  1.49M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.49M|              }
  751|  1.49M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  1.49M|    {
  684|  1.49M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.49M|            return static_cast<T*>(s.m_cp);
  686|  1.49M|        }
  687|  1.49M|        else if constexpr (std::is_object_v<T>) {
  688|  1.49M|            return static_cast<T*>(s.m_p);
  689|  1.49M|        }
  690|  1.49M|        else {
  691|  1.49M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.49M|        }
  693|  1.49M|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5164|  1.49M|            const auto cb = [&](char32_t cp) {
 5165|  1.49M|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5166|  1.49M|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  7.32k|        {
  667|  7.32k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5191|  8.15k|    {
 5192|  8.15k|        if (it == range.begin()) {
  ------------------
  |  Branch (5192:13): [True: 1.58k, False: 6.57k]
  ------------------
 5193|  1.58k|            return unexpected_scan_error(
 5194|  1.58k|                scan_error::invalid_scanned_value,
 5195|  1.58k|                "No characters matched in [character set]");
 5196|  1.58k|        }
 5197|       |
 5198|  6.57k|        return it;
 5199|  8.15k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  5.38k|{
 2082|  5.38k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  5.38k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|    834|    {
  754|    834|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  15.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.6k|              cvref<T> obj = *get<T>(fn);
  745|  15.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  15.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.6k|              }
  748|  15.6k|              else {
  749|  15.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.6k|              }
  751|  15.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  15.6k|    {
  684|  15.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  15.6k|            return static_cast<T*>(s.m_cp);
  686|  15.6k|        }
  687|  15.6k|        else if constexpr (std::is_object_v<T>) {
  688|  15.6k|            return static_cast<T*>(s.m_p);
  689|  15.6k|        }
  690|  15.6k|        else {
  691|  15.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  15.6k|        }
  693|  15.6k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5176|  15.6k|        const auto cb = [&](SourceCharT ch) {
 5177|  15.6k|            return cb_wrapper.on_ascii_only(ch);
 5178|  15.6k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|    834|        {
  667|    834|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4752|  2.97k|{
 4753|  2.97k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  2.97k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  2.97k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 322, False: 2.65k]
  ------------------
 4757|    322|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    322|                                     "Invalid encoding in scanned string");
 4759|    322|    }
 4760|  2.65k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  2.65k|    static_cast<    \
  |  |  929|  2.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|  2.65k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.65k]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|  2.65k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  2.65k|    static_cast<    \
  |  |  929|  2.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|  2.65k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4891|  5.79k|    {
 4892|  5.79k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.01k, False: 786]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.01k|    }                                                  \
  |  |  |  | 3642|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    786|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4893|    786|        return read_string_impl(range, it, value);
 4894|  5.79k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4913|  17.3k|    {
 4914|  17.3k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  34.7k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  17.3k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4915:23): [Folded - Ignored]
  ------------------
 4916|  17.3k|            return unexpected_scan_error(
 4917|  17.3k|                scan_error::invalid_scanned_value,
 4918|  17.3k|                "Regex backend doesn't support wide strings as input");
 4919|  17.3k|        }
 4920|  17.3k|        else {
 4921|  17.3k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4921:17): [True: 0, False: 17.3k]
  ------------------
 4922|      0|                return unexpected_scan_error(
 4923|      0|                    scan_error::invalid_scanned_value,
 4924|      0|                    "Cannot use regex with a non-contiguous source "
 4925|      0|                    "range");
 4926|      0|            }
 4927|       |
 4928|  17.3k|            auto input = get_as_contiguous(range);
 4929|  17.3k|            SCN_TRY(it,
  ------------------
  |  | 3643|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.0k, False: 2.35k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  15.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  15.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  15.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  15.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  15.0k|    }                                                  \
  |  |  |  | 3642|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4930|  2.35k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4931|  2.35k|            return ranges::next(range.begin(),
 4932|  2.35k|                                ranges::distance(input.begin(), it));
 4933|  17.3k|        }
 4934|  17.3k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  17.3k|{
  959|  17.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  17.3k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  17.3k|        return true;
  962|  17.3k|    }
  963|  17.3k|    else if constexpr (std::is_same_v<
  964|  17.3k|                           ranges::const_iterator_t<Range>,
  965|  17.3k|                           typename detail::basic_scan_buffer<
  966|  17.3k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  17.3k|        auto beg = r.begin();
  968|  17.3k|        if (!beg.stores_parent()) {
  969|  17.3k|            return true;
  970|  17.3k|        }
  971|  17.3k|        return beg.parent()->is_contiguous();
  972|  17.3k|    }
  973|  17.3k|    else {
  974|  17.3k|        return false;
  975|  17.3k|    }
  976|  17.3k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  17.3k|{
 1065|  17.3k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  17.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  17.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  17.3k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  17.3k|        return r;
 1070|  17.3k|    }
 1071|  17.3k|    else if constexpr (std::is_same_v<
 1072|  17.3k|                           ranges::const_iterator_t<Range>,
 1073|  17.3k|                           typename detail::basic_scan_buffer<
 1074|  17.3k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  17.3k|        if constexpr (ranges::common_range<Range>) {
 1076|  17.3k|            return detail::make_string_view_from_pointers(
 1077|  17.3k|                r.begin().to_contiguous_segment_iterator(),
 1078|  17.3k|                r.end().to_contiguous_segment_iterator());
 1079|  17.3k|        }
 1080|  17.3k|        else {
 1081|  17.3k|            return r.begin().contiguous_segment();
 1082|  17.3k|        }
 1083|  17.3k|    }
 1084|  17.3k|    else {
 1085|  17.3k|        SCN_EXPECT(false);
 1086|  17.3k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  17.3k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  17.3k|    }
 1090|  17.3k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  17.3k|{
  981|  17.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  17.3k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  17.3k|        return true;
  984|  17.3k|    }
  985|  17.3k|    else if constexpr (std::is_same_v<
  986|  17.3k|                           ranges::const_iterator_t<Range>,
  987|  17.3k|                           typename detail::basic_scan_buffer<
  988|  17.3k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  17.3k|        auto beg = r.begin();
  990|  17.3k|        if (beg.contiguous_segment().empty()) {
  991|  17.3k|            return false;
  992|  17.3k|        }
  993|  17.3k|        if constexpr (ranges::common_range<Range>) {
  994|  17.3k|            return beg.contiguous_segment().end() ==
  995|  17.3k|                   ranges::end(r).contiguous_segment().end();
  996|  17.3k|        }
  997|  17.3k|        else {
  998|  17.3k|            if (beg.stores_parent()) {
  999|  17.3k|                return beg.contiguous_segment().end() ==
 1000|  17.3k|                       beg.parent()->current_view().end();
 1001|  17.3k|            }
 1002|  17.3k|            return true;
 1003|  17.3k|        }
 1004|  17.3k|    }
 1005|  17.3k|    else {
 1006|  17.3k|        return false;
 1007|  17.3k|    }
 1008|  17.3k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4346|  17.3k|{
 4347|  17.3k|    static_assert(ranges::contiguous_range<Input> &&
 4348|  17.3k|                  ranges::borrowed_range<Input> &&
 4349|  17.3k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4350|       |
 4351|  17.3k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4352|  17.3k|    std::basic_regex<CharT> re{};
 4353|  17.3k|    try {
 4354|  17.3k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3643|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4355|  17.3k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4356|  17.3k|                                     re_flags | std::regex_constants::nosubs};
 4357|  17.3k|    }
 4358|  17.3k|    catch (const std::regex_error& err) {
 4359|  10.6k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4360|  10.6k|                                     "Invalid regex");
 4361|  10.6k|    }
 4362|       |
 4363|  6.77k|    std::match_results<const CharT*> matches{};
 4364|  6.77k|    try {
 4365|  6.77k|        bool found = std::regex_search(input.data(),
 4366|  6.77k|                                       input.data() + input.size(), matches, re,
 4367|  6.77k|                                       std::regex_constants::match_continuous);
 4368|  6.77k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4368:13): [True: 4.41k, False: 2.35k]
  |  Branch (4368:23): [True: 0, False: 2.35k]
  ------------------
 4369|  4.12k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4370|  4.12k|                                         "Regular expression didn't match");
 4371|  4.12k|        }
 4372|  6.77k|    }
 4373|  6.77k|    catch (const std::regex_error& err) {
 4374|    288|        return unexpected_scan_error(scan_error::invalid_format_string,
 4375|    288|                                     "Regex matching failed with an error");
 4376|    288|    }
 4377|       |
 4378|  2.35k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4379|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4380|       |    auto re =
 4381|       |#if SCN_REGEX_BOOST_USE_ICU
 4382|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4383|       |                             make_regex_flags(flags) |
 4384|       |                                 boost::regex_constants::no_except |
 4385|       |                                 boost::regex_constants::nosubs);
 4386|       |#else
 4387|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4388|       |                                  make_regex_flags(flags) |
 4389|       |                                      boost::regex_constants::no_except |
 4390|       |                                      boost::regex_constants::nosubs};
 4391|       |#endif
 4392|       |    if (re.status() != 0) {
 4393|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4394|       |                                     "Invalid regex");
 4395|       |    }
 4396|       |
 4397|       |    boost::match_results<const CharT*> matches{};
 4398|       |    try {
 4399|       |        bool found =
 4400|       |#if SCN_REGEX_BOOST_USE_ICU
 4401|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4402|       |                                   matches, re,
 4403|       |                                   boost::regex_constants::match_continuous);
 4404|       |#else
 4405|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4406|       |                                matches, re,
 4407|       |                                boost::regex_constants::match_continuous);
 4408|       |#endif
 4409|       |        if (!found || matches.prefix().matched) {
 4410|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4411|       |                                         "Regular expression didn't match");
 4412|       |        }
 4413|       |    }
 4414|       |    catch (const std::runtime_error& err) {
 4415|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4416|       |                                     "Regex matching failed with an error");
 4417|       |    }
 4418|       |
 4419|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4420|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4421|       |    static_assert(std::is_same_v<CharT, char>);
 4422|       |    std::string flagged_pattern{};
 4423|       |    auto re = [&]() {
 4424|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4425|       |        opts.set_never_capture(true);
 4426|       |        if (flagstr.empty()) {
 4427|       |            return re2::RE2{pattern, opts};
 4428|       |        }
 4429|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4430|       |        flagged_pattern.append(flagstr);
 4431|       |        flagged_pattern.append(pattern);
 4432|       |        return re2::RE2{flagged_pattern, opts};
 4433|       |    }();
 4434|       |    if (!re.ok()) {
 4435|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4436|       |                                     "Failed to parse regular expression");
 4437|       |    }
 4438|       |
 4439|       |    auto new_input = detail::make_string_view_from_pointers(
 4440|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4441|       |    bool found = re2::RE2::Consume(&new_input, re);
 4442|       |    if (!found) {
 4443|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4444|       |                                     "Regular expression didn't match");
 4445|       |    }
 4446|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4447|       |#endif  // SCN_REGEX_BACKEND == ...
 4448|  6.77k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5809|  12.1k|{
 5810|  12.1k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|  12.1k|        return reader_impl_for_bool<CharT>{};
 5812|  12.1k|    }
 5813|  12.1k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|  12.1k|        return reader_impl_for_char<CharT>{};
 5815|  12.1k|    }
 5816|  12.1k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|  12.1k|        return reader_impl_for_wchar<CharT>{};
 5818|  12.1k|    }
 5819|  12.1k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|  12.1k|        return reader_impl_for_code_point<CharT>{};
 5821|  12.1k|    }
 5822|  12.1k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  12.1k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  12.1k|        return reader_impl_for_string<CharT>{};
 5825|  12.1k|    }
 5826|  12.1k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  12.1k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|  12.1k|        return reader_impl_for_string<CharT>{};
 5829|  12.1k|    }
 5830|  12.1k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|  12.1k|                       std::is_same_v<T, wregex_matches>) {
 5832|  12.1k|        return reader_impl_for_regex_matches<CharT>{};
 5833|  12.1k|    }
 5834|  12.1k|    else if constexpr (std::is_same_v<T, void*>) {
 5835|  12.1k|        return reader_impl_for_voidptr<CharT>{};
 5836|  12.1k|    }
 5837|  12.1k|    else if constexpr (std::is_floating_point_v<T>) {
 5838|  12.1k|        return reader_impl_for_float<CharT>{};
 5839|  12.1k|    }
 5840|  12.1k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|  12.1k|                       !std::is_same_v<T, wchar_t> &&
 5842|  12.1k|                       !std::is_same_v<T, char32_t> &&
 5843|  12.1k|                       !std::is_same_v<T, bool>) {
 5844|  12.1k|        return reader_impl_for_int<CharT>{};
 5845|  12.1k|    }
 5846|  12.1k|    else {
 5847|  12.1k|        return reader_impl_for_monostate<CharT>{};
 5848|  12.1k|    }
 5849|  12.1k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    254|{
 2993|    254|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    254|        if (source.stores_allocated_string()) {
 2995|    254|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    254|        }
 2997|    254|        else {
 2998|    254|            dest.assign(source.view());
 2999|    254|        }
 3000|    254|    }
 3001|    254|    else {
 3002|    254|        return transcode_impl(source.view(), dest);
 3003|    254|    }
 3004|       |
 3005|      0|    return {};
 3006|    254|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  4.42k|{
 2968|  4.42k|    dst.clear();
 2969|  4.42k|    transcode_valid_to_string(src, dst);
 2970|  4.42k|    return {};
 2971|  4.42k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  4.42k|{
 1403|  4.42k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  4.42k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  4.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  4.42k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  4.42k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1407:23): [Folded - Ignored]
  ------------------
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  4.42k|            std::u32string tmp;
 1410|  4.42k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  4.42k|            return transcode_to_string_impl_32to16<true>(
 1412|  4.42k|                std::u32string_view{tmp}, dest);
 1413|  4.42k|        }
 1414|  4.42k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1414:28): [Folded - Ignored]
  ------------------
 1415|  4.42k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  4.42k|        }
 1417|  4.42k|    }
 1418|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1420|      0|            std::u32string tmp;
 1421|      0|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|      0|            return transcode_to_string_impl_32to8<true>(
 1423|      0|                std::u32string_view{tmp}, dest);
 1424|      0|        }
 1425|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|      0|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|      0|        }
 1428|      0|    }
 1429|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1431|      0|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|      0|        }
 1433|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|      0|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|      0|        }
 1436|      0|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  4.42k|{
 1277|  4.42k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  4.42k|    auto it = src.begin();
 1280|   608k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 604k, False: 4.42k]
  ------------------
 1281|   604k|        auto res = get_next_code_point_valid(
 1282|   604k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   604k|                                                                 src.end()));
 1284|   604k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   604k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   604k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   604k|        dest.push_back(res.value);
 1286|   604k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   604k|    }
 1288|  4.42k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   604k|{
 1189|   604k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   604k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   604k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   604k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   604k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   604k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   604k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   604k|    return {input.begin() + len,
 1195|   604k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   604k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5277|    980|    {
 5278|    980|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    980|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    980|        return read_impl(range, specs, value);
 5280|    980|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5295|    980|    {
 5296|    980|        SCN_CLANG_PUSH
 5297|    980|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    980|        switch (m_type) {
 5300|    692|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 692, False: 288]
  ------------------
 5301|    692|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 980]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|     72|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 72, False: 908]
  ------------------
 5308|     72|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|    198|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 198, False: 782]
  ------------------
 5311|    198|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|    198|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|     14|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 14, False: 966]
  ------------------
 5316|     14|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|     14|                    range, specs.charset_string<SourceCharT>(),
 5318|     14|                    specs.regexp_flags, value);
 5319|       |
 5320|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 4, False: 976]
  ------------------
 5321|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      4|                    range,
 5323|      4|                    get_unescaped_regex_pattern(
 5324|      4|                        specs.charset_string<SourceCharT>()),
 5325|      4|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 980]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    980|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    980|        }
 5332|       |
 5333|    980|        SCN_CLANG_POP
 5334|    980|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4820|    692|    {
 4821|    692|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|    692|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4752|    764|{
 4753|    764|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|    764|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|    764|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 630, False: 134]
  ------------------
 4757|    630|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    630|                                     "Invalid encoding in scanned string");
 4759|    630|    }
 4760|    134|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    134|    static_cast<    \
  |  |  929|    134|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    134|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    134|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 134]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    134|    return SCN_MOVE(result);
  ------------------
  |  |  928|    134|    static_cast<    \
  |  |  929|    134|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    134|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4947|     72|    {
 4948|     72|        return read_impl(
 4949|     72|            range,
 4950|     72|            [&](const auto& rng) {
 4951|     72|                return read_string_impl(rng, read_all(rng), value);
 4952|     72|            },
 4953|     72|            detail::priority_tag<1>{});
 4954|     72|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4974|     72|    {
 4975|     72|        return read_cb(range);
 4976|     72|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4950|     72|            [&](const auto& rng) {
 4951|     72|                return read_string_impl(rng, read_all(rng), value);
 4952|     72|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5048|    198|    {
 5049|    198|        auto it = read_source_impl(range, {specs});
 5050|    198|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 176]
  |  |  ------------------
  ------------------
 5051|     22|            return unexpected(it.error());
 5052|     22|        }
 5053|       |
 5054|    176|        return read_string_impl(range, *it, value);
 5055|    198|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4752|    176|{
 4753|    176|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|    176|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|    176|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 56, False: 120]
  ------------------
 4757|     56|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|     56|                                     "Invalid encoding in scanned string");
 4759|     56|    }
 4760|    120|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    120|    static_cast<    \
  |  |  929|    120|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    120|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 120]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    120|    return SCN_MOVE(result);
  ------------------
  |  |  928|    120|    static_cast<    \
  |  |  929|    120|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    120|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4891|     18|    {
 4892|     18|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     18|    }                                                  \
  |  |  |  | 3642|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4893|      0|        return read_string_impl(range, it, value);
 4894|     18|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5277|  9.36k|    {
 5278|  9.36k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  9.36k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|  9.36k|        return read_impl(range, specs, value);
 5280|  9.36k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5295|  9.36k|    {
 5296|  9.36k|        SCN_CLANG_PUSH
 5297|  9.36k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|  9.36k|        switch (m_type) {
 5300|    778|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 778, False: 8.59k]
  ------------------
 5301|    778|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|     74|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 74, False: 9.29k]
  ------------------
 5304|     74|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|     74|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 9.36k]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|  2.71k|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 2.71k, False: 6.65k]
  ------------------
 5311|  2.71k|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|  2.71k|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|  5.07k|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 5.07k, False: 4.29k]
  ------------------
 5316|  5.07k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|  5.07k|                    range, specs.charset_string<SourceCharT>(),
 5318|  5.07k|                    specs.regexp_flags, value);
 5319|       |
 5320|    724|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 724, False: 8.64k]
  ------------------
 5321|    724|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|    724|                    range,
 5323|    724|                    get_unescaped_regex_pattern(
 5324|    724|                        specs.charset_string<SourceCharT>()),
 5325|    724|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 9.36k]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|  9.36k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|  9.36k|        }
 5332|       |
 5333|  9.36k|        SCN_CLANG_POP
 5334|  9.36k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4820|  2.14k|    {
 4821|  2.14k|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|  2.14k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4752|  2.22k|{
 4753|  2.22k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  2.22k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  2.22k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 708, False: 1.51k]
  ------------------
 4757|    708|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    708|                                     "Invalid encoding in scanned string");
 4759|    708|    }
 4760|  1.51k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.51k|    static_cast<    \
  |  |  929|  1.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|  1.51k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.51k]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|  1.51k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.51k|    static_cast<    \
  |  |  929|  1.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|  1.51k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  4.16k|{
 3012|  4.16k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  4.16k|        dest.assign(source.view());
 3014|  4.16k|    }
 3015|  4.16k|    else {
 3016|  4.16k|        return transcode_impl(source.view(), dest);
 3017|  4.16k|    }
 3018|       |
 3019|      0|    return {};
 3020|  4.16k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4841|     74|    {
 4842|     74|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4842:13): [True: 70, False: 4]
  ------------------
 4843|     70|            return read_string_impl(
 4844|     70|                range,
 4845|     70|                read_until_code_unit(
 4846|     70|                    range,
 4847|     70|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4848|     70|                        SourceCharT ch) { return ch == until; }),
 4849|     70|                value);
 4850|     70|        }
 4851|      4|        return read_string_impl(
 4852|      4|            range,
 4853|      4|            read_until_code_units(
 4854|      4|                range, specs.fill.template get_code_units<SourceCharT>()),
 4855|      4|            value);
 4856|     74|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     70|    {
  754|     70|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  2.51k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.51k|              cvref<T> obj = *get<T>(fn);
  745|  2.51k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.51k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.51k|              }
  748|  2.51k|              else {
  749|  2.51k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.51k|              }
  751|  2.51k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|  2.51k|    {
  684|  2.51k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.51k|            return static_cast<T*>(s.m_cp);
  686|  2.51k|        }
  687|  2.51k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.51k|            return static_cast<T*>(s.m_p);
  689|  2.51k|        }
  690|  2.51k|        else {
  691|  2.51k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.51k|        }
  693|  2.51k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4848|  2.51k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     70|        {
  662|     70|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5048|  2.71k|    {
 5049|  2.71k|        auto it = read_source_impl(range, {specs});
 5050|  2.71k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 528, False: 2.19k]
  |  |  ------------------
  ------------------
 5051|    528|            return unexpected(it.error());
 5052|    528|        }
 5053|       |
 5054|  2.19k|        return read_string_impl(range, *it, value);
 5055|  2.71k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4752|  2.97k|{
 4753|  2.97k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  2.97k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  2.97k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 322, False: 2.65k]
  ------------------
 4757|    322|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    322|                                     "Invalid encoding in scanned string");
 4759|    322|    }
 4760|  2.65k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  2.65k|    static_cast<    \
  |  |  929|  2.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|  2.65k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.65k]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|  2.65k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  2.65k|    static_cast<    \
  |  |  929|  2.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|  2.65k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4891|  5.79k|    {
 4892|  5.79k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.01k, False: 786]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.01k|    }                                                  \
  |  |  |  | 3642|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    786|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4893|    786|        return read_string_impl(range, it, value);
 4894|  5.79k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5809|  12.1k|{
 5810|  12.1k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|  12.1k|        return reader_impl_for_bool<CharT>{};
 5812|  12.1k|    }
 5813|  12.1k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|  12.1k|        return reader_impl_for_char<CharT>{};
 5815|  12.1k|    }
 5816|  12.1k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|  12.1k|        return reader_impl_for_wchar<CharT>{};
 5818|  12.1k|    }
 5819|  12.1k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|  12.1k|        return reader_impl_for_code_point<CharT>{};
 5821|  12.1k|    }
 5822|  12.1k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  12.1k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  12.1k|        return reader_impl_for_string<CharT>{};
 5825|  12.1k|    }
 5826|  12.1k|    else if constexpr (std::is_same_v<T, std::string> ||
 5827|  12.1k|                       std::is_same_v<T, std::wstring>) {
 5828|  12.1k|        return reader_impl_for_string<CharT>{};
 5829|  12.1k|    }
 5830|  12.1k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|  12.1k|                       std::is_same_v<T, wregex_matches>) {
 5832|  12.1k|        return reader_impl_for_regex_matches<CharT>{};
 5833|  12.1k|    }
 5834|  12.1k|    else if constexpr (std::is_same_v<T, void*>) {
 5835|  12.1k|        return reader_impl_for_voidptr<CharT>{};
 5836|  12.1k|    }
 5837|  12.1k|    else if constexpr (std::is_floating_point_v<T>) {
 5838|  12.1k|        return reader_impl_for_float<CharT>{};
 5839|  12.1k|    }
 5840|  12.1k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|  12.1k|                       !std::is_same_v<T, wchar_t> &&
 5842|  12.1k|                       !std::is_same_v<T, char32_t> &&
 5843|  12.1k|                       !std::is_same_v<T, bool>) {
 5844|  12.1k|        return reader_impl_for_int<CharT>{};
 5845|  12.1k|    }
 5846|  12.1k|    else {
 5847|  12.1k|        return reader_impl_for_monostate<CharT>{};
 5848|  12.1k|    }
 5849|  12.1k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5277|    980|    {
 5278|    980|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    980|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    980|        return read_impl(range, specs, value);
 5280|    980|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5295|    980|    {
 5296|    980|        SCN_CLANG_PUSH
 5297|    980|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    980|        switch (m_type) {
 5300|    692|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 692, False: 288]
  ------------------
 5301|    692|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 980]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|     72|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 72, False: 908]
  ------------------
 5308|     72|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|    198|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 198, False: 782]
  ------------------
 5311|    198|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|    198|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|     14|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 14, False: 966]
  ------------------
 5316|     14|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|     14|                    range, specs.charset_string<SourceCharT>(),
 5318|     14|                    specs.regexp_flags, value);
 5319|       |
 5320|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 4, False: 976]
  ------------------
 5321|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      4|                    range,
 5323|      4|                    get_unescaped_regex_pattern(
 5324|      4|                        specs.charset_string<SourceCharT>()),
 5325|      4|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 980]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    980|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    980|        }
 5332|       |
 5333|    980|        SCN_CLANG_POP
 5334|    980|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4827|    692|    {
 4828|    692|        return read_string_view_impl(range, read_until_classic_space(range),
 4829|    692|                                     value);
 4830|    692|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4773|    764|{
 4774|    764|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|    764|    auto src = [&]() {
 4777|    764|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|    764|            return make_contiguous_buffer(
 4779|    764|                ranges::subrange{range.begin().base(), result.base()});
 4780|    764|        }
 4781|    764|        else {
 4782|    764|            return make_contiguous_buffer(
 4783|    764|                ranges::subrange{range.begin(), result});
 4784|    764|        }
 4785|    764|    }();
 4786|    764|    using src_type = decltype(src);
 4787|       |
 4788|    764|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|    764|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|    764|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|    764|                                     "Cannot read a string_view from "
 4797|    764|                                     "this source range (would require "
 4798|    764|                                     "transcoding)");
 4799|    764|    }
 4800|    764|    else {
 4801|    764|        const auto view = src.view();
 4802|    764|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|    764|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 630, False: 134]
  ------------------
 4805|    630|            return unexpected_scan_error(
 4806|    630|                scan_error::invalid_scanned_value,
 4807|    630|                "Invalid encoding in scanned string_view");
 4808|    630|        }
 4809|       |
 4810|    134|        return SCN_MOVE(result);
  ------------------
  |  |  928|    134|    static_cast<    \
  |  |  929|    134|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|    764|    }
 4812|    764|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4776|    764|    auto src = [&]() {
 4777|    764|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|    764|            return make_contiguous_buffer(
 4779|    764|                ranges::subrange{range.begin().base(), result.base()});
 4780|    764|        }
 4781|    764|        else {
 4782|    764|            return make_contiguous_buffer(
 4783|    764|                ranges::subrange{range.begin(), result});
 4784|    764|        }
 4785|    764|    }();
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4959|     72|    {
 4960|     72|        return read_impl(
 4961|     72|            range,
 4962|     72|            [&](const auto& rng) {
 4963|     72|                return read_string_view_impl(rng, read_all(rng), value);
 4964|     72|            },
 4965|     72|            detail::priority_tag<1>{});
 4966|     72|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4974|     72|    {
 4975|     72|        return read_cb(range);
 4976|     72|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4962|     72|            [&](const auto& rng) {
 4963|     72|                return read_string_view_impl(rng, read_all(rng), value);
 4964|     72|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5062|    198|    {
 5063|    198|        auto it = read_source_impl(range, {specs});
 5064|    198|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 176]
  |  |  ------------------
  ------------------
 5065|     22|            return unexpected(it.error());
 5066|     22|        }
 5067|       |
 5068|    176|        return read_string_view_impl(range, *it, value);
 5069|    198|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4773|    176|{
 4774|    176|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|    176|    auto src = [&]() {
 4777|    176|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|    176|            return make_contiguous_buffer(
 4779|    176|                ranges::subrange{range.begin().base(), result.base()});
 4780|    176|        }
 4781|    176|        else {
 4782|    176|            return make_contiguous_buffer(
 4783|    176|                ranges::subrange{range.begin(), result});
 4784|    176|        }
 4785|    176|    }();
 4786|    176|    using src_type = decltype(src);
 4787|       |
 4788|    176|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|    176|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|    176|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|    176|                                     "Cannot read a string_view from "
 4797|    176|                                     "this source range (would require "
 4798|    176|                                     "transcoding)");
 4799|    176|    }
 4800|    176|    else {
 4801|    176|        const auto view = src.view();
 4802|    176|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|    176|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 56, False: 120]
  ------------------
 4805|     56|            return unexpected_scan_error(
 4806|     56|                scan_error::invalid_scanned_value,
 4807|     56|                "Invalid encoding in scanned string_view");
 4808|     56|        }
 4809|       |
 4810|    120|        return SCN_MOVE(result);
  ------------------
  |  |  928|    120|    static_cast<    \
  |  |  929|    120|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|    176|    }
 4812|    176|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4776|    176|    auto src = [&]() {
 4777|    176|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|    176|            return make_contiguous_buffer(
 4779|    176|                ranges::subrange{range.begin().base(), result.base()});
 4780|    176|        }
 4781|    176|        else {
 4782|    176|            return make_contiguous_buffer(
 4783|    176|                ranges::subrange{range.begin(), result});
 4784|    176|        }
 4785|    176|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4902|     18|    {
 4903|     18|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     18|    }                                                  \
  |  |  |  | 3642|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4904|      0|        return read_string_view_impl(range, it, value);
 4905|     18|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5277|  9.36k|    {
 5278|  9.36k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  9.36k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|  9.36k|        return read_impl(range, specs, value);
 5280|  9.36k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5295|  9.36k|    {
 5296|  9.36k|        SCN_CLANG_PUSH
 5297|  9.36k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|  9.36k|        switch (m_type) {
 5300|    778|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 778, False: 8.59k]
  ------------------
 5301|    778|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|     74|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 74, False: 9.29k]
  ------------------
 5304|     74|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|     74|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 9.36k]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|  2.71k|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 2.71k, False: 6.65k]
  ------------------
 5311|  2.71k|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|  2.71k|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|  5.07k|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 5.07k, False: 4.29k]
  ------------------
 5316|  5.07k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|  5.07k|                    range, specs.charset_string<SourceCharT>(),
 5318|  5.07k|                    specs.regexp_flags, value);
 5319|       |
 5320|    724|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 724, False: 8.64k]
  ------------------
 5321|    724|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|    724|                    range,
 5323|    724|                    get_unescaped_regex_pattern(
 5324|    724|                        specs.charset_string<SourceCharT>()),
 5325|    724|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 9.36k]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|  9.36k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|  9.36k|        }
 5332|       |
 5333|  9.36k|        SCN_CLANG_POP
 5334|  9.36k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4827|  2.14k|    {
 4828|  2.14k|        return read_string_view_impl(range, read_until_classic_space(range),
 4829|  2.14k|                                     value);
 4830|  2.14k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4773|  2.22k|{
 4774|  2.22k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|  2.22k|    auto src = [&]() {
 4777|  2.22k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|  2.22k|            return make_contiguous_buffer(
 4779|  2.22k|                ranges::subrange{range.begin().base(), result.base()});
 4780|  2.22k|        }
 4781|  2.22k|        else {
 4782|  2.22k|            return make_contiguous_buffer(
 4783|  2.22k|                ranges::subrange{range.begin(), result});
 4784|  2.22k|        }
 4785|  2.22k|    }();
 4786|  2.22k|    using src_type = decltype(src);
 4787|       |
 4788|  2.22k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|  2.22k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|  2.22k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|  2.22k|                                     "Cannot read a string_view from "
 4797|  2.22k|                                     "this source range (would require "
 4798|  2.22k|                                     "transcoding)");
 4799|  2.22k|    }
 4800|  2.22k|    else {
 4801|  2.22k|        const auto view = src.view();
 4802|  2.22k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|  2.22k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 708, False: 1.51k]
  ------------------
 4805|    708|            return unexpected_scan_error(
 4806|    708|                scan_error::invalid_scanned_value,
 4807|    708|                "Invalid encoding in scanned string_view");
 4808|    708|        }
 4809|       |
 4810|  1.51k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.51k|    static_cast<    \
  |  |  929|  1.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|  2.22k|    }
 4812|  2.22k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4776|  2.22k|    auto src = [&]() {
 4777|  2.22k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|  2.22k|            return make_contiguous_buffer(
 4779|  2.22k|                ranges::subrange{range.begin().base(), result.base()});
 4780|  2.22k|        }
 4781|  2.22k|        else {
 4782|  2.22k|            return make_contiguous_buffer(
 4783|  2.22k|                ranges::subrange{range.begin(), result});
 4784|  2.22k|        }
 4785|  2.22k|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4863|     74|    {
 4864|     74|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4864:13): [True: 70, False: 4]
  ------------------
 4865|     70|            return read_string_view_impl(
 4866|     70|                range,
 4867|     70|                read_until_code_unit(
 4868|     70|                    range,
 4869|     70|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4870|     70|                        SourceCharT ch) { return ch == until; }),
 4871|     70|                value);
 4872|     70|        }
 4873|      4|        return read_string_view_impl(
 4874|      4|            range,
 4875|      4|            read_until_code_units(
 4876|      4|                range, specs.fill.template get_code_units<SourceCharT>()),
 4877|      4|            value);
 4878|     74|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_:
  753|     70|    {
  754|     70|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES14_c:
  743|  2.51k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.51k|              cvref<T> obj = *get<T>(fn);
  745|  2.51k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.51k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.51k|              }
  748|  2.51k|              else {
  749|  2.51k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.51k|              }
  751|  2.51k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|  2.51k|    {
  684|  2.51k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.51k|            return static_cast<T*>(s.m_cp);
  686|  2.51k|        }
  687|  2.51k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.51k|            return static_cast<T*>(s.m_p);
  689|  2.51k|        }
  690|  2.51k|        else {
  691|  2.51k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.51k|        }
  693|  2.51k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4870|  2.51k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     70|        {
  662|     70|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5062|  2.71k|    {
 5063|  2.71k|        auto it = read_source_impl(range, {specs});
 5064|  2.71k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 528, False: 2.19k]
  |  |  ------------------
  ------------------
 5065|    528|            return unexpected(it.error());
 5066|    528|        }
 5067|       |
 5068|  2.19k|        return read_string_view_impl(range, *it, value);
 5069|  2.71k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4773|  2.97k|{
 4774|  2.97k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|  2.97k|    auto src = [&]() {
 4777|  2.97k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|  2.97k|            return make_contiguous_buffer(
 4779|  2.97k|                ranges::subrange{range.begin().base(), result.base()});
 4780|  2.97k|        }
 4781|  2.97k|        else {
 4782|  2.97k|            return make_contiguous_buffer(
 4783|  2.97k|                ranges::subrange{range.begin(), result});
 4784|  2.97k|        }
 4785|  2.97k|    }();
 4786|  2.97k|    using src_type = decltype(src);
 4787|       |
 4788|  2.97k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|  2.97k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|  2.97k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|  2.97k|                                     "Cannot read a string_view from "
 4797|  2.97k|                                     "this source range (would require "
 4798|  2.97k|                                     "transcoding)");
 4799|  2.97k|    }
 4800|  2.97k|    else {
 4801|  2.97k|        const auto view = src.view();
 4802|  2.97k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|  2.97k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 322, False: 2.65k]
  ------------------
 4805|    322|            return unexpected_scan_error(
 4806|    322|                scan_error::invalid_scanned_value,
 4807|    322|                "Invalid encoding in scanned string_view");
 4808|    322|        }
 4809|       |
 4810|  2.65k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  2.65k|    static_cast<    \
  |  |  929|  2.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|  2.97k|    }
 4812|  2.97k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4776|  2.97k|    auto src = [&]() {
 4777|  2.97k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|  2.97k|            return make_contiguous_buffer(
 4779|  2.97k|                ranges::subrange{range.begin().base(), result.base()});
 4780|  2.97k|        }
 4781|  2.97k|        else {
 4782|  2.97k|            return make_contiguous_buffer(
 4783|  2.97k|                ranges::subrange{range.begin(), result});
 4784|  2.97k|        }
 4785|  2.97k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4902|  5.79k|    {
 4903|  5.79k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.01k, False: 786]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.01k|    }                                                  \
  |  |  |  | 3642|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    786|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4904|    786|        return read_string_view_impl(range, it, value);
 4905|  5.79k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5624|    264|    {
 5625|    264|        reader_error_handler eh{};
 5626|    264|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5626:23): [Folded - Ignored]
  ------------------
 5627|    264|            detail::check_code_point_type_specs(specs, eh);
 5628|    264|        }
 5629|    264|        else {
 5630|    264|            detail::check_char_type_specs(specs, eh);
 5631|    264|        }
 5632|    264|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 240]
  |  |  ------------------
  ------------------
 5633|     24|            return {scan_error::invalid_format_string, eh.m_msg};
 5634|     24|        }
 5635|    240|        return {};
 5636|    264|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|    668|    {
  763|    668|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    668|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    668|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|    280|    {
  754|    280|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|    334|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    334|              cvref<T> obj = *get<T>(fn);
  745|    334|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    334|                  obj(static_cast<decltype(args)>(args)...);
  747|    334|              }
  748|    334|              else {
  749|    334|                  return obj(static_cast<decltype(args)>(args)...);
  750|    334|              }
  751|    334|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|    334|    {
  684|    334|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    334|            return static_cast<T*>(s.m_cp);
  686|    334|        }
  687|    334|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    334|            return static_cast<T*>(s.m_p);
  689|    334|        }
  690|    334|        else {
  691|    334|            return reinterpret_cast<T*>(s.m_fp);
  692|    334|        }
  693|    334|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|    280|        {
  662|    280|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5619|  1.15k|    {
 5620|  1.15k|        return false;
 5621|  1.15k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|     30|    {
 1780|     30|        auto stdloc = loc.get<std::locale>();
 1781|     30|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     30|        grouping = numpunct.grouping();
 1783|     30|        thousands_sep =
 1784|     30|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 30]
  ------------------
 1785|     30|        decimal_point = numpunct.decimal_point();
 1786|     30|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|     40|{
 1717|     40|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 40, False: 0]
  ------------------
 1718|     40|        return std::use_facet<Facet>(stdloc);
 1719|     40|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     40|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  1.47k|{
 2349|  1.47k|    size_t count{0};
 2350|  1.47k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  1.47k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  1.47k|    });
 2353|  1.47k|    return count;
 2354|  1.47k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  1.47k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  1.47k|    auto it = input.begin();
 1448|  3.27k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 1.79k, False: 1.47k]
  ------------------
 1449|  1.79k|        auto res = get_next_code_point(
 1450|  1.79k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  1.79k|        cb(res.value);
 1452|  1.79k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  1.79k|    }
 1454|  1.47k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   287k|{
 1169|   287k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   287k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   287k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   287k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   287k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 287k]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   287k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 287k]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   287k|    return {input.begin() + len,
 1181|   287k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   287k|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  1.47k|    {
  754|  1.47k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  1.79k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.79k|              cvref<T> obj = *get<T>(fn);
  745|  1.79k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.79k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.79k|              }
  748|  1.79k|              else {
  749|  1.79k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.79k|              }
  751|  1.79k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  1.79k|    {
  684|  1.79k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.79k|            return static_cast<T*>(s.m_cp);
  686|  1.79k|        }
  687|  1.79k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.79k|            return static_cast<T*>(s.m_p);
  689|  1.79k|        }
  690|  1.79k|        else {
  691|  1.79k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.79k|        }
  693|  1.79k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  1.79k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  1.79k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  1.79k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  1.47k|        {
  662|  1.47k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  1.84k|    {
 1582|  1.84k|        return m_view;
 1583|  1.84k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  1.85k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  5.58k|{
 1857|  5.58k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  5.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  5.58k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  5.58k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  5.58k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 74, False: 5.51k]
  ------------------
 1862|     74|            return unexpected(eof_error::eof);
 1863|     74|        }
 1864|       |
 1865|  5.51k|        return ranges::next(range.begin(), count);
 1866|  5.58k|    }
 1867|  5.58k|    else {
 1868|  5.58k|        auto it = range.begin();
 1869|  5.58k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  5.58k|            return ranges::next(it, count);
 1871|  5.58k|        }
 1872|       |
 1873|  5.58k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  5.58k|            if (it == range.end()) {
 1875|  5.58k|                return unexpected(eof_error::eof);
 1876|  5.58k|            }
 1877|  5.58k|        }
 1878|       |
 1879|  5.58k|        return it;
 1880|  5.58k|    }
 1881|  5.58k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  57.3k|{
 1899|  57.3k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  57.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  57.3k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  57.3k|    auto it = range.begin();
 1903|  57.3k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  57.3k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  57.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 57.3k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  57.3k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 57.3k, False: 0]
  ------------------
 1912|  57.3k|        ++it;
 1913|  57.3k|        return {it, string_type(1, *range.begin())};
 1914|  57.3k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  57.3k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  80.2k|{
  944|  80.2k|    return is_range_eof(r.begin(), r.end());
  945|  80.2k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   366k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   366k|    {
  937|   366k|        return begin == end;
  938|   366k|    }
  939|   366k|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    924|    {
  190|    924|        i = std::move(bound);
  191|    924|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  57.3k|    {
 1890|  57.3k|        return !codepoint.empty();
 1891|  57.3k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  22.9k|{
  950|  22.9k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.9k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  22.9k|    return eof_error::good;
  954|  22.9k|}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5699|    240|    {
 5700|    240|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5700:13): [True: 206, False: 34]
  ------------------
 5701|    240|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5701:13): [True: 0, False: 34]
  ------------------
 5702|    206|            return read_default(range, value, loc);
 5703|    206|        }
 5704|       |
 5705|     34|        reader_impl_for_int<CharT> reader{};
 5706|     34|        using integer_type =
 5707|     34|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5708|     34|        integer_type tmp_value{};
 5709|     34|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5710|     34|        value = static_cast<integer_type>(value);
 5711|     34|        return ret;
 5712|    240|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5683|    910|    {
 5684|    910|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    910|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5685|    910|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5685:23): [Folded - Ignored]
  ------------------
 5686|    910|            return code_point_reader<wchar_t>{}.read(range, value);
 5687|    910|        }
 5688|    910|        else {
 5689|    910|            return code_unit_reader<wchar_t>{}.read(range, value);
 5690|    910|        }
 5691|    910|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5564|    910|    {
 5565|    910|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3643|    910|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    910|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    910|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 910]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    910|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    910|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5566|    910|        ch = *range.begin();
 5567|    910|        return it;
 5568|    910|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.59k|{
 1846|  6.59k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.59k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.59k|    return ranges::next(range.begin());
 1851|  6.59k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   170k|    {
  296|   170k|        ++x;
  297|   170k|        return x;
  298|   170k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    284|    {
 3540|    284|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 284]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    284|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    284|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 284]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    284|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 284]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    284|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    284|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 274, False: 10]
  |  |  ------------------
  ------------------
 3566|    274|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    274|                    parse_integer_digits_without_thsep(
 3568|    274|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    274|                        prefix_result.parsed_base));
 3570|       |
 3571|    274|            auto buf = make_contiguous_buffer(
 3572|    274|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    274|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 274, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    274|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    274|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    274|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    274|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    274|    }                                                  \
  |  |  |  | 3642|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    274|        }
 3581|       |
 3582|     10|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|     10|            localized_number_formatting_options<CharT>{loc};
 3587|     10|#endif
 3588|       |
 3589|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     10|    }                                                  \
  |  |  |  | 3642|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.85k|{
 3326|  2.85k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3643|  2.85k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.85k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.85k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.85k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.85k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.85k|        parse_integer_base_prefix(
 3331|  2.85k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.85k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.85k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it =
 3337|      0|                ranges::prev_backtrack(digits_begin_it, range.begin());
 3338|      0|        }
 3339|      0|        else {
 3340|      0|            parsed_zero = false;
 3341|      0|        }
 3342|      0|    }
 3343|  2.85k|    else {
 3344|  2.85k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3344:13): [True: 0, False: 2.85k]
  ------------------
 3345|  2.85k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3345:13): [True: 2.85k, False: 0]
  ------------------
 3346|  2.85k|            digits_begin_it = base_prefix_begin_it;
 3347|  2.85k|        }
 3348|  2.85k|    }
 3349|       |
 3350|  2.85k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3350:9): [True: 2.85k, False: 0]
  ------------------
 3351|  2.85k|        sign = sign_type::plus_sign;
 3352|  2.85k|    }
 3353|  2.85k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3354|  2.85k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3355|  2.85k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.78k|{
 3141|  3.78k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.78k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.78k, False: 0]
  ------------------
 3143|  3.78k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.78k, False: 0]
  ------------------
 3144|  3.78k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.78k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.78k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.78k|{
 2272|  3.78k|    auto it = read_code_unit(range);
 2273|  3.78k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.78k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.56k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.56k, False: 3.78k]
  ------------------
 2278|  7.56k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.56k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.56k|    }
 2282|       |
 2283|  3.78k|    return unexpected(parse_error::error);
 2284|  3.78k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.85k|{
 3293|  2.85k|    switch (base) {
 3294|     48|        case 2:
  ------------------
  |  Branch (3294:9): [True: 48, False: 2.80k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     48|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     48|                    false};
 3298|       |
 3299|      0|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 0, False: 2.85k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|      0|            bool zero_parsed = false;
 3302|      0|            auto it = apply_opt(
 3303|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|      0|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    916|        case 16:
  ------------------
  |  Branch (3307:9): [True: 916, False: 1.93k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    916|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    916|                    false};
 3311|       |
 3312|      0|        case 0:
  ------------------
  |  Branch (3312:9): [True: 0, False: 2.85k]
  ------------------
 3313|       |            // detect base
 3314|      0|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.88k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.88k, False: 964]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.88k|            return {range.begin(), base, false};
 3319|  2.85k|    }
 3320|  2.85k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    964|{
 2291|    964|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 964, False: 0]
  ------------------
 2292|    964|        return range.begin();
 2293|    964|    }
 2294|      0|    return *result;
 2295|    964|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     48|{
 3244|     48|    return read_matching_string_classic_nocase(range, "0b");
 3245|     48|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.74k|{
 2231|  3.74k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.74k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.74k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.74k|        if (range.size() < str.size()) {
 2236|  3.74k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  3.74k|        }
 2238|  3.74k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  3.74k|            return unexpected(parse_error::error);
 2240|  3.74k|        }
 2241|  3.74k|        return ranges::next(range.begin(), str.size());
 2242|  3.74k|    }
 2243|  3.74k|    else {
 2244|  3.74k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.74k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.74k|                return ch;
 2247|  3.74k|            }
 2248|  3.74k|            return static_cast<char_type>(ch +
 2249|  3.74k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.74k|        };
 2251|       |
 2252|  3.74k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  3.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  3.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  3.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 3.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      4|    }                                                  \
  |  |  |  | 3642|  3.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  3.74k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.74k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.74k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.74k, False: 0]
  |  |  ------------------
  ------------------
 2257|  3.74k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.74k|                    return ascii_tolower(a) ==
 2259|  3.74k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.74k|                }))) {
 2261|  3.74k|            return unexpected(parse_error::error);
 2262|  3.74k|        }
 2263|       |
 2264|      0|        return it;
 2265|  3.74k|    }
 2266|  3.74k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  3.74k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.74k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 24, False: 3.71k]
  |  Branch (2245:29): [True: 3.71k, False: 0]
  ------------------
 2246|  3.74k|                return ch;
 2247|  3.74k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.74k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.90k|{
 2146|  1.90k|    auto it = read_code_unit(range);
 2147|  1.90k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.90k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.90k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.90k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.90k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.90k|        return unexpected(parse_error::error);
 2154|  1.90k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.90k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    916|{
 3251|    916|    return read_matching_string_classic_nocase(range, "0x");
 3252|    916|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3360|  2.83k|{
 3361|  2.83k|    using char_type = detail::char_t<Range>;
 3362|       |
 3363|  2.83k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3363:19): [Folded - Ignored]
  ------------------
 3364|  2.83k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.83k]
  |  |  ------------------
  ------------------
 3365|      0|            return unexpected_scan_error(
 3366|      0|                scan_error::invalid_scanned_value,
 3367|      0|                "Failed to parse integer: No digits found");
 3368|      0|        }
 3369|  2.83k|        return range.end();
 3370|  2.83k|    }
 3371|  2.83k|    else {
 3372|  2.83k|        return read_while1_code_unit(range,
 3373|  2.83k|                                     [&](char_type ch) noexcept {
 3374|  2.83k|                                         return char_to_int(ch) < base;
 3375|  2.83k|                                     })
 3376|  2.83k|            .transform_error(map_parse_error_to_scan_error(
 3377|  2.83k|                scan_error::invalid_scanned_value,
 3378|  2.83k|                "Failed to parse integer: No digits found"));
 3379|  2.83k|    }
 3380|  2.83k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3390|     20|{
 3391|     20|    std::basic_string<CharT> output;
 3392|     20|    std::string thsep_indices;
 3393|     20|    auto it = range.begin();
 3394|     20|    bool digit_matched = false;
 3395|     20|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3395:12): [True: 20, False: 0]
  ------------------
 3396|     20|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3396:13): [True: 0, False: 20]
  ------------------
 3397|      0|            thsep_indices.push_back(
 3398|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3399|      0|        }
 3400|     20|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3400:18): [True: 20, False: 0]
  ------------------
 3401|     20|            break;
 3402|     20|        }
 3403|      0|        else {
 3404|      0|            output.push_back(*it);
 3405|      0|            digit_matched = true;
 3406|      0|        }
 3407|     20|    }
 3408|     20|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3409|     20|        return unexpected_scan_error(
 3410|     20|            scan_error::invalid_scanned_value,
 3411|     20|            "Failed to parse integer: No digits found");
 3412|     20|    }
 3413|      0|    return std::tuple{it, output, thsep_indices};
 3414|     20|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  7.06k|{
 1683|  7.06k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  7.06k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  7.06k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  7.06k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  7.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  7.06k|    }
 1688|  7.06k|    else {
 1689|  7.06k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  7.06k|    }
 1691|  7.06k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  7.06k|    {
 1490|  7.06k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  7.86k|    {
 1503|  7.86k|        return sv;
 1504|  7.86k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5951|    276|{
 5952|    276|    using char_type = detail::char_t<Range>;
 5953|    276|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5954|       |
 5955|    276|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5955:9): [True: 276, False: 0]
  ------------------
 5956|    276|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5957|    276|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5958|       |
 5959|    276|        if (max_width == 0) {
  ------------------
  |  Branch (5959:13): [True: 276, False: 0]
  ------------------
 5960|    276|            auto it = read_while_code_unit(range, pred);
 5961|       |
 5962|    276|            if (want_skipped_width) {
  ------------------
  |  Branch (5962:17): [True: 0, False: 276]
  ------------------
 5963|      0|                auto prefix_width =
 5964|      0|                    static_cast<std::ptrdiff_t>(
 5965|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5966|      0|                    ranges::distance(range.begin(), it);
 5967|      0|                return result_type{it, prefix_width};
 5968|      0|            }
 5969|    276|            return result_type{it, 0};
 5970|    276|        }
 5971|       |
 5972|      0|        auto max_width_view = take_width(range, max_width);
 5973|      0|        auto w_it = read_while_code_unit(max_width_view, pred);
 5974|       |
 5975|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5975:13): [True: 0, False: 0]
  ------------------
 5976|      0|            return result_type{w_it.base(), max_width - w_it.count()};
 5977|      0|        }
 5978|      0|        return result_type{w_it.base(), 0};
 5979|      0|    }
 5980|       |
 5981|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5982|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5982:9): [True: 0, False: 0]
  ------------------
 5983|      0|        auto it = read_while_code_units(range, fill_chars);
 5984|       |
 5985|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5985:13): [True: 0, False: 0]
  ------------------
 5986|      0|            auto prefix_width =
 5987|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5988|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5989|      0|            return result_type{it, prefix_width};
 5990|      0|        }
 5991|      0|        return result_type{it, 0};
 5992|      0|    }
 5993|       |
 5994|      0|    auto max_width_view = take_width(range, max_width);
 5995|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5996|       |
 5997|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 0]
  ------------------
 5998|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5999|      0|    }
 6000|      0|    return result_type{w_it.base(), 0};
 6001|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|    280|{
 1976|    280|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    280|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|    280|{
 1957|    280|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    280|        return std::find_if(range.begin(), range.end(), pred);
 1959|    280|    }
 1960|    280|    else {
 1961|    280|        auto first = range.begin();
 1962|    280|        for (; first != range.end(); ++first) {
 1963|    280|            if (pred(*first)) {
 1964|    280|                return first;
 1965|    280|            }
 1966|    280|        }
 1967|    280|        return first;
 1968|    280|    }
 1969|    280|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_:
  753|    276|    {
  754|    276|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|    330|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    330|              cvref<T> obj = *get<T>(fn);
  745|    330|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    330|                  obj(static_cast<decltype(args)>(args)...);
  747|    330|              }
  748|    330|              else {
  749|    330|                  return obj(static_cast<decltype(args)>(args)...);
  750|    330|              }
  751|    330|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    330|    {
  684|    330|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    330|            return static_cast<T*>(s.m_cp);
  686|    330|        }
  687|    330|        else if constexpr (std::is_object_v<T>) {
  688|    330|            return static_cast<T*>(s.m_p);
  689|    330|        }
  690|    330|        else {
  691|    330|            return reinterpret_cast<T*>(s.m_fp);
  692|    330|        }
  693|    330|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5957|    330|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSH_:
  666|    276|        {
  667|    276|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  7.27k|{
 2951|  7.27k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 7.15k, False: 126]
  ------------------
 2952|  7.15k|        auto it = read_while_classic_space(range);
 2953|  7.15k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  7.15k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.15k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  7.15k|        return it;
 2959|  7.15k|    }
 2960|       |
 2961|    126|    return read_while_classic_space(range);
 2962|  7.27k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  8.97k|{
 2117|  8.97k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  8.97k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  8.97k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  8.97k|        auto buf = make_contiguous_buffer(range);
 2121|  8.97k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  8.97k|        return ranges::next(range.begin(),
 2123|  8.97k|                            ranges::distance(buf.view().begin(), it));
 2124|  8.97k|    }
 2125|  8.97k|    else {
 2126|  8.97k|        auto it = range.begin();
 2127|       |
 2128|  8.97k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  8.97k|            auto seg = get_contiguous_beginning(range);
 2130|  8.97k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  8.97k|                seg_it != seg.end()) {
 2132|  8.97k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  8.97k|            }
 2134|  8.97k|            ranges::advance(it, seg.size());
 2135|  8.97k|        }
 2136|       |
 2137|  8.97k|        return read_while_code_point(
 2138|  8.97k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  8.97k|    }
 2140|  8.97k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  8.97k|{
 2082|  8.97k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  8.97k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  11.7k|{
 2061|  11.7k|    auto it = range.begin();
 2062|  59.7k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 57.3k, False: 2.35k]
  ------------------
 2063|  57.3k|        const auto val =
 2064|  57.3k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  57.3k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  57.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 57.3k, False: 0]
  |  |  ------------------
  ------------------
 2066|  57.3k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  57.3k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  57.3k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 9.36k, False: 47.9k]
  ------------------
 2069|  9.36k|                return it;
 2070|  9.36k|            }
 2071|  57.3k|        }
 2072|  47.9k|        it = val.iterator;
 2073|  47.9k|    }
 2074|       |
 2075|  2.35k|    return it;
 2076|  11.7k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  8.97k|    {
  754|  8.97k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  10.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.4k|              cvref<T> obj = *get<T>(fn);
  745|  10.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  10.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  10.4k|              }
  748|  10.4k|              else {
  749|  10.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.4k|              }
  751|  10.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  10.4k|    {
  684|  10.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  10.4k|            return static_cast<T*>(s.m_cp);
  686|  10.4k|        }
  687|  10.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  10.4k|            return static_cast<T*>(s.m_p);
  689|  10.4k|        }
  690|  10.4k|        else {
  691|  10.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  10.4k|        }
  693|  10.4k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  10.4k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  8.97k|        {
  662|  8.97k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|    548|    {
 3040|    548|        reader_error_handler eh{};
 3041|    548|        get_derived().check_specs_impl(specs, eh);
 3042|    548|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    548|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48, False: 500]
  |  |  ------------------
  ------------------
 3043|     48|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|     48|        }
 3045|    500|        return {};
 3046|    548|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|    548|    {
 3051|    548|        return static_cast<Derived&>(*this);
 3052|    548|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3485|    548|    {
 3486|    548|        detail::check_int_type_specs(specs, eh);
 3487|    548|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|  1.90k|    {
 3035|  1.90k|        return true;
 3036|  1.90k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    250|    {
 3540|    250|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    250|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    250|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 250]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    250|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 250]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    250|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    250|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 240, False: 10]
  |  |  ------------------
  ------------------
 3566|    240|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 240]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    240|                    parse_integer_digits_without_thsep(
 3568|    240|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    240|                        prefix_result.parsed_base));
 3570|       |
 3571|    240|            auto buf = make_contiguous_buffer(
 3572|    240|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    240|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 240, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    240|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    240|    }                                                  \
  |  |  |  | 3642|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    240|        }
 3581|       |
 3582|     10|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|     10|            localized_number_formatting_options<CharT>{loc};
 3587|     10|#endif
 3588|       |
 3589|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     10|    }                                                  \
  |  |  |  | 3642|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    910|    {
 3540|    910|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    910|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    910|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    910|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 910]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    910|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    910|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    910|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    910|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 910]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    910|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 910]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    910|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    910|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 910, False: 0]
  |  |  ------------------
  ------------------
 3566|    910|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    910|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    910|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    910|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 910]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    910|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    910|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    910|                    parse_integer_digits_without_thsep(
 3568|    910|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    910|                        prefix_result.parsed_base));
 3570|       |
 3571|    910|            auto buf = make_contiguous_buffer(
 3572|    910|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    910|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    910|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    910|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    910|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 910, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    910|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    910|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    910|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    910|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    910|    }                                                  \
  |  |  |  | 3642|    910|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    910|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|    274|    {
 3040|    274|        reader_error_handler eh{};
 3041|    274|        get_derived().check_specs_impl(specs, eh);
 3042|    274|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 224]
  |  |  ------------------
  ------------------
 3043|     50|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|     50|        }
 3045|    224|        return {};
 3046|    274|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|    274|    {
 3051|    274|        return static_cast<Derived&>(*this);
 3052|    274|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4145|    274|    {
 4146|    274|        detail::check_float_type_specs(specs, eh);
 4147|    274|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|    928|    {
 3035|    928|        return true;
 3036|    928|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4217|    224|    {
 4218|    224|        unsigned options{};
 4219|    224|        if (specs.localized) {
  ------------------
  |  Branch (4219:13): [True: 10, False: 214]
  ------------------
 4220|     10|            options |= float_reader_base::allow_thsep;
 4221|     10|        }
 4222|       |
 4223|    224|        SCN_GCC_COMPAT_PUSH
 4224|    224|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4225|       |
 4226|    224|        switch (specs.type) {
 4227|      2|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4227:13): [True: 2, False: 222]
  ------------------
 4228|      2|                return options | float_reader_base::allow_fixed;
 4229|       |
 4230|      2|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4230:13): [True: 2, False: 222]
  ------------------
 4231|      2|                return options | float_reader_base::allow_scientific;
 4232|       |
 4233|      4|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4233:13): [True: 4, False: 220]
  ------------------
 4234|      4|                return options | float_reader_base::allow_hex;
 4235|       |
 4236|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4236:13): [True: 0, False: 224]
  ------------------
 4237|      0|                return options | float_reader_base::allow_scientific |
 4238|      0|                       float_reader_base::allow_fixed;
 4239|       |
 4240|    216|            case detail::presentation_type::none:
  ------------------
  |  Branch (4240:13): [True: 216, False: 8]
  ------------------
 4241|    216|                return options | float_reader_base::allow_scientific |
 4242|    216|                       float_reader_base::allow_fixed |
 4243|    216|                       float_reader_base::allow_hex;
 4244|       |
 4245|      0|            default:
  ------------------
  |  Branch (4245:13): [True: 0, False: 224]
  ------------------
 4246|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4247|    224|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4248|    224|        }
 4249|       |
 4250|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4251|    224|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3660|    224|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|    928|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.85k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4057|    924|    {
 4058|    924|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4058:13): [True: 924, False: 0]
  ------------------
 4059|    924|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4059:13): [True: 924, False: 0]
  ------------------
 4060|    924|            return;
 4061|    924|        }
 4062|       |
 4063|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4064|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4064:13): [True: 0, False: 0]
  ------------------
 4065|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4065:27): [True: 0, False: 0]
  ------------------
 4066|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4066:21): [True: 0, False: 0]
  ------------------
 4067|      0|                    ch = CharT{'.'};
 4068|      0|                }
 4069|      0|            }
 4070|      0|        }
 4071|       |
 4072|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4072:13): [True: 0, False: 0]
  ------------------
 4073|      0|            return;
 4074|      0|        }
 4075|       |
 4076|      0|        auto first =
 4077|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4078|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4078:13): [True: 0, False: 0]
  ------------------
 4079|      0|            return;
 4080|      0|        }
 4081|       |
 4082|      0|        m_thsep_indices.push_back(
 4083|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4084|       |
 4085|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4085:31): [True: 0, False: 0]
  ------------------
 4086|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4086:17): [True: 0, False: 0]
  ------------------
 4087|      0|                *first++ = std::move(*it);
 4088|      0|            }
 4089|      0|            else {
 4090|      0|                m_thsep_indices.push_back(
 4091|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4092|      0|            }
 4093|      0|        }
 4094|       |
 4095|      0|        str.erase(first, str.end());
 4096|      0|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    928|    {
  763|    928|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    928|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    928|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3679|     10|    {
 3680|     10|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|     10|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     10|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 10]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|     10|        return read_source_impl(range);
 3686|     10|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3705|    928|    {
 3706|    928|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|    928|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    928|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    928|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    928|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 928]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    928|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    928|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|    928|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|    928|        auto it = sign_result.first;
 3709|    928|        m_sign = sign_result.second;
 3710|       |
 3711|    928|        auto digits_begin = it;
 3712|    928|        auto r = ranges::subrange{it, range.end()};
 3713|    928|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    928|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|    928|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 928]
  |  |  |  Branch (859:45): [True: 0, False: 928]
  |  |  |  Branch (859:45): [True: 0, False: 928]
  |  |  ------------------
  ------------------
 3716|    928|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3718|      0|                    it,
 3719|      0|                    do_read_source_impl(
 3720|      0|                        r,
 3721|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|      0|            }
 3724|    928|            else {
 3725|    928|                auto cb = [&](const auto& rr)
 3726|    928|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|    928|                    auto res = read_all(rr);
 3728|    928|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|    928|                        return unexpected_scan_error(
 3730|    928|                            scan_error::invalid_scanned_value,
 3731|    928|                            "Invalid float value");
 3732|    928|                    }
 3733|    928|                    return res;
 3734|    928|                };
 3735|    928|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3638|    928|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    928|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    928|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4, False: 924]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      4|    }                                                  \
  |  | 3642|    928|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    928|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3736|    924|            }
 3737|    928|        }
 3738|    924|        else {
 3739|    924|            SCN_TRY_ASSIGN(
 3740|    924|                it,
 3741|    924|                do_read_source_impl(
 3742|    924|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|    924|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|    924|        }
 3745|       |
 3746|    924|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    924|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    924|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|    924|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 924, False: 0]
  |  Branch (3748:48): [True: 924, False: 0]
  ------------------
 3749|    924|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 924, False: 0]
  ------------------
 3750|    924|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 924, False: 0]
  ------------------
 3751|    924|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|    924|        }
 3753|       |
 3754|    924|        handle_separators();
 3755|       |
 3756|    924|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 924]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|    924|        return it;
 3769|    924|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3811|    928|    {
 3812|    928|        auto it = range.begin();
 3813|    928|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 928, False: 0]
  ------------------
 3814|    928|            return unexpected(r.error());
 3815|    928|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3834|    928|    {
 3835|    928|        auto it = range.begin();
 3836|    928|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 928, False: 0]
  ------------------
 3837|    928|            return r.transform_error(map_parse_error_to_scan_error(
 3838|    928|                scan_error::invalid_scanned_value,
 3839|    928|                "Invalid floating-point NaN value"));
 3840|    928|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3804|    924|    {
 3805|    924|        return read_matching_string_classic_nocase(range, "0x");
 3806|    924|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|      4|{
 1996|      4|    auto it = read_while_code_unit(range, pred);
 1997|      4|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 4, False: 0]
  ------------------
 1998|      4|        return unexpected(parse_error::error);
 1999|      4|    }
 2000|      0|    return it;
 2001|      4|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3944|      4|    {
 3945|      4|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|      4|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 2, False: 2]
  |  Branch (3946:50): [True: 2, False: 0]
  ------------------
 3947|       |
 3948|      4|        auto it = ranges::begin(range);
 3949|      4|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|      4|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|      4|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 3953|      4|            return r.transform_error(
 3954|      4|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|      4|                                              "Invalid floating-point value"));
 3956|      4|        }
 3957|      0|        else {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        m_integral_part_length = digits_count;
 3963|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 0]
  ------------------
 3964|      0|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|      0|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|      0|        auto beg_exp_it = it;
 3980|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 0, False: 0]
  ------------------
 3981|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|      0|        }
 3983|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 0, False: 0]
  |  Branch (3983:29): [True: 0, False: 0]
  ------------------
 3984|      0|            return unexpected_scan_error(
 3985|      0|                scan_error::invalid_scanned_value,
 3986|      0|                "No exponent given to scientific float");
 3987|      0|        }
 3988|       |
 3989|      0|        m_kind =
 3990|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 0, False: 0]
  ------------------
 3991|       |
 3992|      0|        return it;
 3993|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3774|      4|    {
 3775|      4|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|      4|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|      4|        return read_while1_code_unit(
 3784|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|      4|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|      4|    {
  754|      4|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      4|    {
  684|      4|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      4|            return static_cast<T*>(s.m_cp);
  686|      4|        }
  687|      4|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      4|            return static_cast<T*>(s.m_p);
  689|      4|        }
  690|      4|        else {
  691|      4|            return reinterpret_cast<T*>(s.m_fp);
  692|      4|        }
  693|      4|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3784|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|      4|        {
  662|      4|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4000|    928|    {
 4001|    928|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|    928|        const bool allowed_nonhex =
 4003|    928|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|    928|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|    928|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 928, False: 0]
  |  Branch (4006:45): [True: 0, False: 928]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|    928|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 928]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|    928|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 928, False: 0]
  |  Branch (4015:45): [True: 0, False: 928]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|    928|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 928]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|    928|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 924, False: 4]
  |  Branch (4022:28): [True: 4, False: 920]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|      4|            auto it = range.begin();
 4026|       |
 4027|      4|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 0, False: 4]
  ------------------
 4028|      0|                m_kind = float_kind::hex_with_prefix;
 4029|      0|                it = *r;
 4030|      0|            }
 4031|      4|            else {
 4032|      4|                m_kind = float_kind::hex_without_prefix;
 4033|      4|            }
 4034|       |
 4035|      4|            return read_hex(ranges::subrange{it, range.end()});
 4036|      4|        }
 4037|    924|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 4, False: 920]
  |  Branch (4037:29): [True: 4, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|      4|            m_kind = float_kind::generic;
 4041|      4|            return read_regular_float(range);
 4042|      4|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|    920|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    920|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 920]
  |  |  ------------------
  ------------------
 4048|      0|            m_kind = float_kind::hex_with_prefix;
 4049|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4050|      0|        }
 4051|       |
 4052|    920|        m_kind = float_kind::generic;
 4053|    920|        return read_regular(range);
 4054|    920|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3726|    924|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|    924|                    auto res = read_all(rr);
 3728|    924|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    924|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 924]
  |  |  ------------------
  ------------------
 3729|      0|                        return unexpected_scan_error(
 3730|      0|                            scan_error::invalid_scanned_value,
 3731|      0|                            "Invalid float value");
 3732|      0|                    }
 3733|    924|                    return res;
 3734|    924|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    924|{
 1839|    924|    return ranges::next(range.begin(), range.end());
 1840|    924|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    924|    {
  313|    924|        ranges::advance(x, bound);
  314|    924|        return x;
  315|    924|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    924|    {
  275|    924|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    924|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|    924|    {
 1577|    924|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    924|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    924|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|    924|    {
 1621|    924|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    924|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    924|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    924|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    924|            m_storage.reset();
 1627|    924|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    924|        }
 1629|    924|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    924|                                          std::basic_string<CharT>>) {
 1631|    924|            m_storage.emplace(SCN_FWD(range));
 1632|    924|            m_view = string_view_type{*m_storage};
 1633|    924|        }
 1634|    924|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    924|                                          typename detail::basic_scan_buffer<
 1636|    924|                                              value_t>::forward_iterator> &&
 1637|    924|                           ranges::common_range<Range>) {
 1638|    924|            auto beg_seg = range.begin().contiguous_segment();
 1639|    924|            auto end_seg = range.end().contiguous_segment();
 1640|    924|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    924|                             detail::to_address(end_seg.end()))) {
 1642|    924|                auto& str = m_storage.emplace();
 1643|    924|                str.reserve(range.end().position() - range.begin().position());
 1644|    924|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    924|                m_view = string_view_type{str};
 1646|    924|                return;
 1647|    924|            }
 1648|       |
 1649|    924|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    924|                                                            end_seg.data());
 1651|    924|            m_storage.reset();
 1652|    924|        }
 1653|    924|        else {
 1654|    924|            auto& str = m_storage.emplace();
 1655|    924|            if constexpr (ranges::sized_range<Range>) {
 1656|    924|                str.reserve(range.size());
 1657|    924|            }
 1658|    924|            if constexpr (ranges::common_range<Range>) {
 1659|    924|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    924|                          std::back_inserter(str));
 1661|    924|            }
 1662|    924|            else {
 1663|    924|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    924|                     ++it) {
 1665|    924|                    str.push_back(*it);
 1666|    924|                }
 1667|    924|            }
 1668|    924|            m_view = string_view_type{str};
 1669|    924|        }
 1670|    924|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3665|    918|    {
 3666|    918|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    918|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 918]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|    918|        return read_source_impl(range);
 3672|    918|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3691|    924|    {
 3692|    924|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    924|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    924|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|    924|        const std::ptrdiff_t sign_len =
 3695|    924|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 0, False: 924]
  ------------------
 3696|       |
 3697|    924|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|    924|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    924|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    924|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    924|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 924, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    924|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    924|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    924|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    924|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    924|    }                                                  \
  |  |  |  | 3642|    924|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|    924|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|    224|    {
 4171|    224|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|    224|#if !SCN_DISABLE_LOCALE
 4174|    224|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 10, False: 214]
  ------------------
 4175|     10|            return read_impl<Range>(
 4176|     10|                range, rd,
 4177|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4178|     10|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|     10|                },
 4180|     10|                value, loc);
 4181|     10|        }
 4182|    214|#endif
 4183|       |
 4184|    214|        return read_impl<Range>(
 4185|    214|            range, rd,
 4186|    214|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    214|                return r.read_source(SCN_FWD(args)...);
 4188|    214|            },
 4189|    214|            value);
 4190|    224|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|    928|    {
 4207|    928|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|    928|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    928|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4, False: 924]
  |  |  ------------------
  ------------------
 4209|      4|            return unexpected(r.error());
 4210|      4|        }
 4211|       |
 4212|    924|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|    924|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    924|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    924|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    924|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 924, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    924|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    924|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    924|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    924|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    924|    }                                                  \
  |  |  |  | 3642|    924|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|      0|        return ranges::next(range.begin(), n);
 4214|    924|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     10|    {
  684|     10|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     10|            return static_cast<T*>(s.m_cp);
  686|     10|        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     10|            return static_cast<T*>(s.m_p);
  689|     10|        }
  690|     10|        else {
  691|     10|            return reinterpret_cast<T*>(s.m_fp);
  692|     10|        }
  693|     10|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4178|     10|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|     10|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    214|    {
  754|    214|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    214|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    214|              cvref<T> obj = *get<T>(fn);
  745|    214|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    214|                  obj(static_cast<decltype(args)>(args)...);
  747|    214|              }
  748|    214|              else {
  749|    214|                  return obj(static_cast<decltype(args)>(args)...);
  750|    214|              }
  751|    214|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    214|    {
  684|    214|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    214|            return static_cast<T*>(s.m_cp);
  686|    214|        }
  687|    214|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    214|            return static_cast<T*>(s.m_p);
  689|    214|        }
  690|    214|        else {
  691|    214|            return reinterpret_cast<T*>(s.m_fp);
  692|    214|        }
  693|    214|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|    214|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    214|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    214|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|    214|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    214|        {
  662|    214|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5809|    968|{
 5810|    968|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|    968|        return reader_impl_for_bool<CharT>{};
 5812|    968|    }
 5813|    968|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|    968|        return reader_impl_for_char<CharT>{};
 5815|    968|    }
 5816|    968|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|    968|        return reader_impl_for_wchar<CharT>{};
 5818|    968|    }
 5819|    968|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|    968|        return reader_impl_for_code_point<CharT>{};
 5821|    968|    }
 5822|    968|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|    968|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|    968|        return reader_impl_for_string<CharT>{};
 5825|    968|    }
 5826|    968|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|    968|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|    968|        return reader_impl_for_string<CharT>{};
 5829|    968|    }
 5830|    968|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|    968|                       std::is_same_v<T, wregex_matches>) {
 5832|    968|        return reader_impl_for_regex_matches<CharT>{};
 5833|    968|    }
 5834|    968|    else if constexpr (std::is_same_v<T, void*>) {
 5835|    968|        return reader_impl_for_voidptr<CharT>{};
 5836|    968|    }
 5837|    968|    else if constexpr (std::is_floating_point_v<T>) {
 5838|    968|        return reader_impl_for_float<CharT>{};
 5839|    968|    }
 5840|    968|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|    968|                       !std::is_same_v<T, wchar_t> &&
 5842|    968|                       !std::is_same_v<T, char32_t> &&
 5843|    968|                       !std::is_same_v<T, bool>) {
 5844|    968|        return reader_impl_for_int<CharT>{};
 5845|    968|    }
 5846|    968|    else {
 5847|    968|        return reader_impl_for_monostate<CharT>{};
 5848|    968|    }
 5849|    968|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5206|  2.90k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|    792|    {
 3040|    792|        reader_error_handler eh{};
 3041|    792|        get_derived().check_specs_impl(specs, eh);
 3042|    792|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    792|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 168, False: 624]
  |  |  ------------------
  ------------------
 3043|    168|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    168|        }
 3045|    624|        return {};
 3046|    792|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|    792|    {
 3051|    792|        return static_cast<Derived&>(*this);
 3052|    792|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5210|    792|    {
 5211|    792|        detail::check_string_type_specs(specs, eh);
 5212|       |
 5213|    792|        SCN_GCC_PUSH
 5214|    792|        SCN_GCC_IGNORE("-Wswitch")
 5215|    792|        SCN_GCC_IGNORE("-Wswitch-default")
 5216|       |
 5217|    792|        SCN_CLANG_PUSH
 5218|    792|        SCN_CLANG_IGNORE("-Wswitch")
 5219|    792|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5220|       |
 5221|    792|        switch (specs.type) {
  ------------------
  |  Branch (5221:17): [True: 126, False: 666]
  ------------------
 5222|    618|            case detail::presentation_type::none:
  ------------------
  |  Branch (5222:13): [True: 618, False: 174]
  ------------------
 5223|    618|                m_type = reader_type::word;
 5224|    618|                break;
 5225|       |
 5226|      6|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5226:13): [True: 6, False: 786]
  ------------------
 5227|      6|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5227:21): [True: 0, False: 6]
  ------------------
 5228|      6|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5228:21): [True: 0, False: 6]
  ------------------
 5229|      0|                    m_type = reader_type::custom_word;
 5230|      0|                }
 5231|      6|                else {
 5232|      6|                    m_type = reader_type::word;
 5233|      6|                }
 5234|      6|                break;
 5235|      0|            }
 5236|       |
 5237|     42|            case detail::presentation_type::character:
  ------------------
  |  Branch (5237:13): [True: 42, False: 750]
  ------------------
 5238|     42|                m_type = reader_type::character;
 5239|     42|                break;
 5240|       |
 5241|      0|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5241:13): [True: 0, False: 792]
  ------------------
 5242|      0|                m_type = reader_type::character_set;
 5243|      0|                break;
 5244|       |
 5245|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5245:13): [True: 0, False: 792]
  ------------------
 5246|      0|                m_type = reader_type::regex;
 5247|      0|                break;
 5248|       |
 5249|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5249:13): [True: 0, False: 792]
  ------------------
 5250|      0|                m_type = reader_type::regex_escaped;
 5251|      0|                break;
 5252|    792|        }
 5253|       |
 5254|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5255|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5256|    792|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5259|  2.79k|    {
 5260|  2.79k|        return m_type == reader_type::word;
 5261|  2.79k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  3.13k|{
 1132|  3.13k|    auto it = src.begin();
 1133|  32.1k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 30.5k, False: 1.60k]
  ------------------
 1134|  30.5k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  30.5k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 30.5k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  30.5k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 30.5k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  30.5k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  30.5k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  30.5k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.53k, False: 28.9k]
  ------------------
 1144|  1.53k|            return false;
 1145|  1.53k|        }
 1146|  28.9k|        it += len;
 1147|  28.9k|    }
 1148|  1.60k|    return true;
 1149|  3.13k|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|    400|{
 2968|    400|    dst.clear();
 2969|    400|    transcode_valid_to_string(src, dst);
 2970|    400|    return {};
 2971|    400|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|    400|{
 1403|    400|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|    400|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|    400|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    400|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|    400|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|    400|        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|    400|            std::u32string tmp;
 1410|    400|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|    400|            return transcode_to_string_impl_32to16<true>(
 1412|    400|                std::u32string_view{tmp}, dest);
 1413|    400|        }
 1414|    400|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|    400|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|    400|        }
 1417|    400|    }
 1418|    400|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1418:24): [Folded - Ignored]
  ------------------
 1419|    400|        if constexpr (sizeof(DestCharT) == 1) {
 1420|    400|            std::u32string tmp;
 1421|    400|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|    400|            return transcode_to_string_impl_32to8<true>(
 1423|    400|                std::u32string_view{tmp}, dest);
 1424|    400|        }
 1425|    400|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|    400|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|    400|        }
 1428|    400|    }
 1429|    400|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1429:24): [Folded - Ignored]
  ------------------
 1430|    400|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1430:23): [Folded - Ignored]
  ------------------
 1431|    400|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|    400|        }
 1433|    400|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|    400|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|    400|        }
 1436|    400|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|    400|{
 1294|    400|    static_assert(sizeof(SourceCharT) == 4);
 1295|    400|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  4.40k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 4.40k, False: 400]
  ------------------
 1298|  4.40k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  4.40k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  4.40k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 3.01k, False: 1.38k]
  ------------------
 1306|  3.01k|            dest.push_back(static_cast<char>(cp));
 1307|  3.01k|        }
 1308|  1.38k|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 72, False: 1.31k]
  ------------------
 1309|     72|            dest.push_back(
 1310|     72|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|     72|            dest.push_back(
 1312|     72|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|     72|        }
 1314|  1.31k|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 586, False: 726]
  ------------------
 1315|    586|            dest.push_back(
 1316|    586|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|    586|            dest.push_back(static_cast<char>(
 1318|    586|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|    586|            dest.push_back(
 1320|    586|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|    586|        }
 1322|    726|        else {
 1323|    726|            dest.push_back(
 1324|    726|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    726|            dest.push_back(static_cast<char>(
 1326|    726|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    726|            dest.push_back(static_cast<char>(
 1328|    726|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    726|            dest.push_back(
 1330|    726|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    726|        }
 1332|  4.40k|    }
 1333|    400|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5277|    208|    {
 5278|    208|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    208|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    208|        return read_impl(range, specs, value);
 5280|    208|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5295|    208|    {
 5296|    208|        SCN_CLANG_PUSH
 5297|    208|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    208|        switch (m_type) {
 5300|    208|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 208, False: 0]
  ------------------
 5301|    208|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 208]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 208]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 0, False: 208]
  ------------------
 5311|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|      0|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      0|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 0, False: 208]
  ------------------
 5316|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      0|                    range, specs.charset_string<SourceCharT>(),
 5318|      0|                    specs.regexp_flags, value);
 5319|       |
 5320|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 0, False: 208]
  ------------------
 5321|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      0|                    range,
 5323|      0|                    get_unescaped_regex_pattern(
 5324|      0|                        specs.charset_string<SourceCharT>()),
 5325|      0|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 208]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    208|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    208|        }
 5332|       |
 5333|    208|        SCN_CLANG_POP
 5334|    208|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4820|    912|    {
 4821|    912|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|    912|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4752|    912|{
 4753|    912|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|    912|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|    912|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 512, False: 400]
  ------------------
 4757|    512|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    512|                                     "Invalid encoding in scanned string");
 4759|    512|    }
 4760|    400|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    400|    static_cast<    \
  |  |  929|    400|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    400|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    400|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 400]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    400|    return SCN_MOVE(result);
  ------------------
  |  |  928|    400|    static_cast<    \
  |  |  929|    400|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    400|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    400|{
 3012|    400|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    400|        dest.assign(source.view());
 3014|    400|    }
 3015|    400|    else {
 3016|    400|        return transcode_impl(source.view(), dest);
 3017|    400|    }
 3018|       |
 3019|      0|    return {};
 3020|    400|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.73k|{
 2088|  2.73k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.73k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.73k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.73k|        auto buf = make_contiguous_buffer(range);
 2092|  2.73k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.73k|        return ranges::next(range.begin(),
 2094|  2.73k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.73k|    }
 2096|  2.73k|    else {
 2097|  2.73k|        auto it = range.begin();
 2098|       |
 2099|  2.73k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  2.73k|            auto seg = get_contiguous_beginning(range);
 2101|  2.73k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.73k|                seg_it != seg.end()) {
 2103|  2.73k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.73k|            }
 2105|  2.73k|            ranges::advance(it, seg.size());
 2106|  2.73k|        }
 2107|       |
 2108|  2.73k|        return read_until_code_point(
 2109|  2.73k|            ranges::subrange{it, range.end()},
 2110|  2.73k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.73k|    }
 2112|  2.73k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  2.73k|    {
  754|  2.73k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  46.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.8k|              cvref<T> obj = *get<T>(fn);
  745|  46.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  46.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  46.8k|              }
  748|  46.8k|              else {
  749|  46.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.8k|              }
  751|  46.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  46.8k|    {
  684|  46.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  46.8k|            return static_cast<T*>(s.m_cp);
  686|  46.8k|        }
  687|  46.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  46.8k|            return static_cast<T*>(s.m_p);
  689|  46.8k|        }
  690|  46.8k|        else {
  691|  46.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  46.8k|        }
  693|  46.8k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  46.8k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  2.73k|        {
  662|  2.73k|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5809|    968|{
 5810|    968|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|    968|        return reader_impl_for_bool<CharT>{};
 5812|    968|    }
 5813|    968|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|    968|        return reader_impl_for_char<CharT>{};
 5815|    968|    }
 5816|    968|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|    968|        return reader_impl_for_wchar<CharT>{};
 5818|    968|    }
 5819|    968|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|    968|        return reader_impl_for_code_point<CharT>{};
 5821|    968|    }
 5822|    968|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|    968|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|    968|        return reader_impl_for_string<CharT>{};
 5825|    968|    }
 5826|    968|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|    968|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|    968|        return reader_impl_for_string<CharT>{};
 5829|    968|    }
 5830|    968|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|    968|                       std::is_same_v<T, wregex_matches>) {
 5832|    968|        return reader_impl_for_regex_matches<CharT>{};
 5833|    968|    }
 5834|    968|    else if constexpr (std::is_same_v<T, void*>) {
 5835|    968|        return reader_impl_for_voidptr<CharT>{};
 5836|    968|    }
 5837|    968|    else if constexpr (std::is_floating_point_v<T>) {
 5838|    968|        return reader_impl_for_float<CharT>{};
 5839|    968|    }
 5840|    968|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|    968|                       !std::is_same_v<T, wchar_t> &&
 5842|    968|                       !std::is_same_v<T, char32_t> &&
 5843|    968|                       !std::is_same_v<T, bool>) {
 5844|    968|        return reader_impl_for_int<CharT>{};
 5845|    968|    }
 5846|    968|    else {
 5847|    968|        return reader_impl_for_monostate<CharT>{};
 5848|    968|    }
 5849|    968|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5277|    208|    {
 5278|    208|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    208|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    208|        return read_impl(range, specs, value);
 5280|    208|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5295|    208|    {
 5296|    208|        SCN_CLANG_PUSH
 5297|    208|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    208|        switch (m_type) {
 5300|    208|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 208, False: 0]
  ------------------
 5301|    208|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 208]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 208]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 0, False: 208]
  ------------------
 5311|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|      0|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      0|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 0, False: 208]
  ------------------
 5316|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      0|                    range, specs.charset_string<SourceCharT>(),
 5318|      0|                    specs.regexp_flags, value);
 5319|       |
 5320|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 0, False: 208]
  ------------------
 5321|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      0|                    range,
 5323|      0|                    get_unescaped_regex_pattern(
 5324|      0|                        specs.charset_string<SourceCharT>()),
 5325|      0|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 208]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    208|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    208|        }
 5332|       |
 5333|    208|        SCN_CLANG_POP
 5334|    208|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4820|    912|    {
 4821|    912|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|    912|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4752|    912|{
 4753|    912|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|    912|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|    912|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 512, False: 400]
  ------------------
 4757|    512|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    512|                                     "Invalid encoding in scanned string");
 4759|    512|    }
 4760|    400|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    400|    static_cast<    \
  |  |  929|    400|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    400|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    400|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 400]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    400|    return SCN_MOVE(result);
  ------------------
  |  |  928|    400|    static_cast<    \
  |  |  929|    400|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    400|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    400|{
 3012|    400|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    400|        dest.assign(source.view());
 3014|    400|    }
 3015|    400|    else {
 3016|    400|        return transcode_impl(source.view(), dest);
 3017|    400|    }
 3018|       |
 3019|    400|    return {};
 3020|    400|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5809|    968|{
 5810|    968|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|    968|        return reader_impl_for_bool<CharT>{};
 5812|    968|    }
 5813|    968|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|    968|        return reader_impl_for_char<CharT>{};
 5815|    968|    }
 5816|    968|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|    968|        return reader_impl_for_wchar<CharT>{};
 5818|    968|    }
 5819|    968|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|    968|        return reader_impl_for_code_point<CharT>{};
 5821|    968|    }
 5822|    968|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|    968|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|    968|        return reader_impl_for_string<CharT>{};
 5825|    968|    }
 5826|    968|    else if constexpr (std::is_same_v<T, std::string> ||
 5827|    968|                       std::is_same_v<T, std::wstring>) {
 5828|    968|        return reader_impl_for_string<CharT>{};
 5829|    968|    }
 5830|    968|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|    968|                       std::is_same_v<T, wregex_matches>) {
 5832|    968|        return reader_impl_for_regex_matches<CharT>{};
 5833|    968|    }
 5834|    968|    else if constexpr (std::is_same_v<T, void*>) {
 5835|    968|        return reader_impl_for_voidptr<CharT>{};
 5836|    968|    }
 5837|    968|    else if constexpr (std::is_floating_point_v<T>) {
 5838|    968|        return reader_impl_for_float<CharT>{};
 5839|    968|    }
 5840|    968|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|    968|                       !std::is_same_v<T, wchar_t> &&
 5842|    968|                       !std::is_same_v<T, char32_t> &&
 5843|    968|                       !std::is_same_v<T, bool>) {
 5844|    968|        return reader_impl_for_int<CharT>{};
 5845|    968|    }
 5846|    968|    else {
 5847|    968|        return reader_impl_for_monostate<CharT>{};
 5848|    968|    }
 5849|    968|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5277|    208|    {
 5278|    208|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    208|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    208|        return read_impl(range, specs, value);
 5280|    208|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5295|    208|    {
 5296|    208|        SCN_CLANG_PUSH
 5297|    208|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    208|        switch (m_type) {
 5300|    208|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 208, False: 0]
  ------------------
 5301|    208|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 208]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 208]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 0, False: 208]
  ------------------
 5311|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|      0|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      0|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 0, False: 208]
  ------------------
 5316|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      0|                    range, specs.charset_string<SourceCharT>(),
 5318|      0|                    specs.regexp_flags, value);
 5319|       |
 5320|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 0, False: 208]
  ------------------
 5321|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      0|                    range,
 5323|      0|                    get_unescaped_regex_pattern(
 5324|      0|                        specs.charset_string<SourceCharT>()),
 5325|      0|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 208]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    208|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    208|        }
 5332|       |
 5333|    208|        SCN_CLANG_POP
 5334|    208|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4827|    912|    {
 4828|    912|        return read_string_view_impl(range, read_until_classic_space(range),
 4829|    912|                                     value);
 4830|    912|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4773|    912|{
 4774|    912|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|    912|    auto src = [&]() {
 4777|    912|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|    912|            return make_contiguous_buffer(
 4779|    912|                ranges::subrange{range.begin().base(), result.base()});
 4780|    912|        }
 4781|    912|        else {
 4782|    912|            return make_contiguous_buffer(
 4783|    912|                ranges::subrange{range.begin(), result});
 4784|    912|        }
 4785|    912|    }();
 4786|    912|    using src_type = decltype(src);
 4787|       |
 4788|    912|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|    912|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|    912|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|    912|                                     "Cannot read a string_view from "
 4797|    912|                                     "this source range (would require "
 4798|    912|                                     "transcoding)");
 4799|    912|    }
 4800|    912|    else {
 4801|    912|        const auto view = src.view();
 4802|    912|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|    912|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 512, False: 400]
  ------------------
 4805|    512|            return unexpected_scan_error(
 4806|    512|                scan_error::invalid_scanned_value,
 4807|    512|                "Invalid encoding in scanned string_view");
 4808|    512|        }
 4809|       |
 4810|    400|        return SCN_MOVE(result);
  ------------------
  |  |  928|    400|    static_cast<    \
  |  |  929|    400|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|    912|    }
 4812|    912|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4776|    912|    auto src = [&]() {
 4777|    912|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|    912|            return make_contiguous_buffer(
 4779|    912|                ranges::subrange{range.begin().base(), result.base()});
 4780|    912|        }
 4781|    912|        else {
 4782|    912|            return make_contiguous_buffer(
 4783|    912|                ranges::subrange{range.begin(), result});
 4784|    912|        }
 4785|    912|    }();
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4100|  2.10k|    {
 4101|  2.10k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 0, False: 2.10k]
  ------------------
 4102|      0|            return std::copysign(value, T{-1.0});
 4103|      0|        }
 4104|  2.10k|        return std::copysign(value, T{1.0});
 4105|  2.10k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4100|    924|    {
 4101|    924|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 0, False: 924]
  ------------------
 4102|      0|            return std::copysign(value, T{-1.0});
 4103|      0|        }
 4104|    924|        return std::copysign(value, T{1.0});
 4105|    924|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5795|  12.3k|{
 5796|  12.3k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.3k]
  |  |  ------------------
  ------------------
 5797|      0|        return unexpected(e);
 5798|      0|    }
 5799|       |
 5800|  12.3k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 1.36k, False: 10.9k]
  ------------------
 5801|  1.36k|        return range.begin();
 5802|  1.36k|    }
 5803|       |
 5804|  10.9k|    return skip_classic_whitespace(range);
 5805|  12.3k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5871|  1.36k|    {
 5872|  1.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  1.36k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  1.36k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  1.36k|            auto rd = make_reader<T, char_type>();
 5877|  1.36k|            return impl(rd, range, value);
 5878|  1.36k|        }
 5879|  1.36k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  1.36k|            auto rd = make_reader<T, char_type>();
 5881|  1.36k|            if (!is_segment_contiguous(range)) {
 5882|  1.36k|                return impl(rd, range, value);
 5883|  1.36k|            }
 5884|  1.36k|            auto crange = get_as_contiguous(range);
 5885|  1.36k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  1.36k|            return ranges::next(range.begin(),
 5887|  1.36k|                                ranges::distance(crange.begin(), it));
 5888|  1.36k|        }
 5889|  1.36k|        else {
 5890|  1.36k|            SCN_EXPECT(false);
 5891|  1.36k|            SCN_UNREACHABLE;
 5892|  1.36k|        }
 5893|  1.36k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  1.36k|    {
 5864|  1.36k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  1.36k|                        .transform_error(make_eof_scan_error));
 5866|  1.36k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  1.36k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3528|  1.36k|    {
 3529|  1.36k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.36k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3530|  1.36k|        return read_default_with_base(range, value, 10);
 3531|  1.36k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5871|  1.36k|    {
 5872|  1.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  1.36k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  1.36k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  1.36k|            auto rd = make_reader<T, char_type>();
 5877|  1.36k|            return impl(rd, range, value);
 5878|  1.36k|        }
 5879|  1.36k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  1.36k|            auto rd = make_reader<T, char_type>();
 5881|  1.36k|            if (!is_segment_contiguous(range)) {
 5882|  1.36k|                return impl(rd, range, value);
 5883|  1.36k|            }
 5884|  1.36k|            auto crange = get_as_contiguous(range);
 5885|  1.36k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  1.36k|            return ranges::next(range.begin(),
 5887|  1.36k|                                ranges::distance(crange.begin(), it));
 5888|  1.36k|        }
 5889|  1.36k|        else {
 5890|  1.36k|            SCN_EXPECT(false);
 5891|  1.36k|            SCN_UNREACHABLE;
 5892|  1.36k|        }
 5893|  1.36k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  1.36k|    {
 5864|  1.36k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  1.36k|                        .transform_error(make_eof_scan_error));
 5866|  1.36k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  1.36k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3528|  1.36k|    {
 3529|  1.36k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.36k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3530|  1.36k|        return read_default_with_base(range, value, 10);
 3531|  1.36k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5871|  1.36k|    {
 5872|  1.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  1.36k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  1.36k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  1.36k|            auto rd = make_reader<T, char_type>();
 5877|  1.36k|            return impl(rd, range, value);
 5878|  1.36k|        }
 5879|  1.36k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  1.36k|            auto rd = make_reader<T, char_type>();
 5881|  1.36k|            if (!is_segment_contiguous(range)) {
 5882|  1.36k|                return impl(rd, range, value);
 5883|  1.36k|            }
 5884|  1.36k|            auto crange = get_as_contiguous(range);
 5885|  1.36k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  1.36k|            return ranges::next(range.begin(),
 5887|  1.36k|                                ranges::distance(crange.begin(), it));
 5888|  1.36k|        }
 5889|  1.36k|        else {
 5890|  1.36k|            SCN_EXPECT(false);
 5891|  1.36k|            SCN_UNREACHABLE;
 5892|  1.36k|        }
 5893|  1.36k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5863|  1.36k|    {
 5864|  1.36k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  1.36k|                        .transform_error(make_eof_scan_error));
 5866|  1.36k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  1.36k|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5748|  2.74k|    {
 5749|  2.74k|        return true;
 5750|  2.74k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5765|  2.06k|    {
 5766|  2.06k|        detail::format_specs specs{};
 5767|  2.06k|        specs.type = detail::presentation_type::int_hex;
 5768|       |
 5769|  2.06k|        std::uintptr_t intvalue{};
 5770|  2.06k|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3643|  2.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.06k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.06k|    }                                                  \
  |  |  |  | 3642|  2.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5771|      0|                                                                intvalue, loc));
 5772|      0|        value = reinterpret_cast<void*>(intvalue);
 5773|      0|        return result;
 5774|  2.06k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5871|  1.36k|    {
 5872|  1.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  1.36k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  1.36k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  1.36k|            auto rd = make_reader<T, char_type>();
 5877|  1.36k|            return impl(rd, range, value);
 5878|  1.36k|        }
 5879|  1.36k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  1.36k|            auto rd = make_reader<T, char_type>();
 5881|  1.36k|            if (!is_segment_contiguous(range)) {
 5882|  1.36k|                return impl(rd, range, value);
 5883|  1.36k|            }
 5884|  1.36k|            auto crange = get_as_contiguous(range);
 5885|  1.36k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  1.36k|            return ranges::next(range.begin(),
 5887|  1.36k|                                ranges::distance(crange.begin(), it));
 5888|  1.36k|        }
 5889|  1.36k|        else {
 5890|  1.36k|            SCN_EXPECT(false);
 5891|  1.36k|            SCN_UNREACHABLE;
 5892|  1.36k|        }
 5893|  1.36k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  1.36k|    {
 5864|  1.36k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  1.36k|                        .transform_error(make_eof_scan_error));
 5866|  1.36k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  1.36k|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  3.09k|    {
 3035|  3.09k|        return true;
 3036|  3.09k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5504|  1.36k|    {
 5505|  1.36k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.36k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5506|       |
 5507|  1.36k|        return bool_reader<CharT>{}.read_classic(range, value);
 5508|  1.36k|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5349|  2.07k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5355|  2.31k|    {
 5356|  2.31k|        scan_error err{scan_error::invalid_scanned_value,
 5357|  2.31k|                       "Failed to read boolean"};
 5358|       |
 5359|  2.31k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5359:13): [True: 2.14k, False: 168]
  ------------------
 5360|  2.14k|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5360:22): [True: 0, False: 2.14k]
  ------------------
 5361|      0|                return *r;
 5362|      0|            }
 5363|  2.14k|            else {
 5364|  2.14k|                err = r.error();
 5365|  2.14k|            }
 5366|  2.14k|        }
 5367|       |
 5368|  2.31k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5368:13): [True: 2.22k, False: 90]
  ------------------
 5369|  2.22k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5369:22): [True: 0, False: 2.22k]
  ------------------
 5370|      0|                return *r;
 5371|      0|            }
 5372|  2.22k|            else {
 5373|  2.22k|                err = r.error();
 5374|  2.22k|            }
 5375|  2.22k|        }
 5376|       |
 5377|  2.31k|        return unexpected(err);
 5378|  2.31k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5384|  2.17k|    {
 5385|  2.17k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5385:18): [True: 0, False: 2.17k]
  ------------------
 5386|      0|            value = false;
 5387|      0|            return *r;
 5388|      0|        }
 5389|  2.17k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5389:18): [True: 0, False: 2.17k]
  ------------------
 5390|      0|            value = true;
 5391|      0|            return *r;
 5392|      0|        }
 5393|       |
 5394|  2.17k|        return unexpected_scan_error(
 5395|  2.17k|            scan_error::invalid_scanned_value,
 5396|  2.17k|            "Failed to read numeric boolean value: No match");
 5397|  2.17k|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5402|  2.22k|    {
 5403|  2.22k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5403:18): [True: 0, False: 2.22k]
  ------------------
 5404|      0|            value = true;
 5405|      0|            return *r;
 5406|      0|        }
 5407|  2.22k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5407:18): [True: 0, False: 2.22k]
  ------------------
 5408|      0|            value = false;
 5409|      0|            return *r;
 5410|      0|        }
 5411|       |
 5412|  2.22k|        return unexpected_scan_error(
 5413|  2.22k|            scan_error::invalid_scanned_value,
 5414|  2.22k|            "Failed to read textual boolean value: No match");
 5415|  2.22k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  4.44k|{
 2194|  4.44k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  4.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  4.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  4.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 170, False: 4.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    170|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    170|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    170|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    170|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    170|    }                                                  \
  |  |  |  | 3642|  4.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  4.27k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  4.27k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  4.27k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  4.27k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  4.27k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.27k, False: 0]
  |  |  ------------------
  ------------------
 2201|  4.27k|            return unexpected(parse_error::error);
 2202|  4.27k|        }
 2203|      0|        return it;
 2204|  4.27k|    }
 2205|  4.27k|    else {
 2206|  4.27k|        auto range_it = range.begin();
 2207|  4.27k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  4.27k|            if (SCN_UNLIKELY(*range_it !=
 2209|  4.27k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  4.27k|                return unexpected(parse_error::error);
 2211|  4.27k|            }
 2212|  4.27k|        }
 2213|  4.27k|        return it;
 2214|  4.27k|    }
 2215|  4.27k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5871|  1.36k|    {
 5872|  1.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  1.36k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  1.36k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  1.36k|            auto rd = make_reader<T, char_type>();
 5877|  1.36k|            return impl(rd, range, value);
 5878|  1.36k|        }
 5879|  1.36k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  1.36k|            auto rd = make_reader<T, char_type>();
 5881|  1.36k|            if (!is_segment_contiguous(range)) {
 5882|  1.36k|                return impl(rd, range, value);
 5883|  1.36k|            }
 5884|  1.36k|            auto crange = get_as_contiguous(range);
 5885|  1.36k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  1.36k|            return ranges::next(range.begin(),
 5887|  1.36k|                                ranges::distance(crange.begin(), it));
 5888|  1.36k|        }
 5889|  1.36k|        else {
 5890|  1.36k|            SCN_EXPECT(false);
 5891|  1.36k|            SCN_UNREACHABLE;
 5892|  1.36k|        }
 5893|  1.36k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  1.36k|    {
 5864|  1.36k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  1.36k|                        .transform_error(make_eof_scan_error));
 5866|  1.36k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  1.36k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3658|  1.36k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3644|  2.07k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5871|  1.36k|    {
 5872|  1.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  1.36k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  1.36k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  1.36k|            auto rd = make_reader<T, char_type>();
 5877|  1.36k|            return impl(rd, range, value);
 5878|  1.36k|        }
 5879|  1.36k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  1.36k|            auto rd = make_reader<T, char_type>();
 5881|  1.36k|            if (!is_segment_contiguous(range)) {
 5882|  1.36k|                return impl(rd, range, value);
 5883|  1.36k|            }
 5884|  1.36k|            auto crange = get_as_contiguous(range);
 5885|  1.36k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  1.36k|            return ranges::next(range.begin(),
 5887|  1.36k|                                ranges::distance(crange.begin(), it));
 5888|  1.36k|        }
 5889|  1.36k|        else {
 5890|  1.36k|            SCN_EXPECT(false);
 5891|  1.36k|            SCN_UNREACHABLE;
 5892|  1.36k|        }
 5893|  1.36k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  1.36k|    {
 5864|  1.36k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  1.36k|                        .transform_error(make_eof_scan_error));
 5866|  1.36k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  1.36k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|  1.36k|    {
 4153|  1.36k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.36k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  1.36k|        float_reader<CharT> rd{};
 4156|  1.36k|        return read_impl<Range>(
 4157|  1.36k|            range, rd,
 4158|  1.36k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  1.36k|                return r.read_source(SCN_FWD(args)...);
 4160|  1.36k|            },
 4161|  1.36k|            value);
 4162|  1.36k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  1.36k|    {
  754|  1.36k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  1.36k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.36k|              cvref<T> obj = *get<T>(fn);
  745|  1.36k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.36k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.36k|              }
  748|  1.36k|              else {
  749|  1.36k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.36k|              }
  751|  1.36k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  1.36k|    {
  684|  1.36k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.36k|            return static_cast<T*>(s.m_cp);
  686|  1.36k|        }
  687|  1.36k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.36k|            return static_cast<T*>(s.m_p);
  689|  1.36k|        }
  690|  1.36k|        else {
  691|  1.36k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.36k|        }
  693|  1.36k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|  1.36k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  1.36k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  1.36k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  1.36k|        {
  662|  1.36k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5871|  1.36k|    {
 5872|  1.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  1.36k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  1.36k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  1.36k|            auto rd = make_reader<T, char_type>();
 5877|  1.36k|            return impl(rd, range, value);
 5878|  1.36k|        }
 5879|  1.36k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  1.36k|            auto rd = make_reader<T, char_type>();
 5881|  1.36k|            if (!is_segment_contiguous(range)) {
 5882|  1.36k|                return impl(rd, range, value);
 5883|  1.36k|            }
 5884|  1.36k|            auto crange = get_as_contiguous(range);
 5885|  1.36k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  1.36k|            return ranges::next(range.begin(),
 5887|  1.36k|                                ranges::distance(crange.begin(), it));
 5888|  1.36k|        }
 5889|  1.36k|        else {
 5890|  1.36k|            SCN_EXPECT(false);
 5891|  1.36k|            SCN_UNREACHABLE;
 5892|  1.36k|        }
 5893|  1.36k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5863|  1.36k|    {
 5864|  1.36k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  1.36k|                        .transform_error(make_eof_scan_error));
 5866|  1.36k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  1.36k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5266|  1.36k|    {
 5267|  1.36k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.36k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|  1.36k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|  1.36k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5871|  1.36k|    {
 5872|  1.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  1.36k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  1.36k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  1.36k|            auto rd = make_reader<T, char_type>();
 5877|  1.36k|            return impl(rd, range, value);
 5878|  1.36k|        }
 5879|  1.36k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  1.36k|            auto rd = make_reader<T, char_type>();
 5881|  1.36k|            if (!is_segment_contiguous(range)) {
 5882|  1.36k|                return impl(rd, range, value);
 5883|  1.36k|            }
 5884|  1.36k|            auto crange = get_as_contiguous(range);
 5885|  1.36k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  1.36k|            return ranges::next(range.begin(),
 5887|  1.36k|                                ranges::distance(crange.begin(), it));
 5888|  1.36k|        }
 5889|  1.36k|        else {
 5890|  1.36k|            SCN_EXPECT(false);
 5891|  1.36k|            SCN_UNREACHABLE;
 5892|  1.36k|        }
 5893|  1.36k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5863|  1.36k|    {
 5864|  1.36k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  1.36k|                        .transform_error(make_eof_scan_error));
 5866|  1.36k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  1.36k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5266|  1.36k|    {
 5267|  1.36k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.36k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|  1.36k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|  1.36k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5871|  1.36k|    {
 5872|  1.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  1.36k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  1.36k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  1.36k|            auto rd = make_reader<T, char_type>();
 5877|  1.36k|            return impl(rd, range, value);
 5878|  1.36k|        }
 5879|  1.36k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  1.36k|            auto rd = make_reader<T, char_type>();
 5881|  1.36k|            if (!is_segment_contiguous(range)) {
 5882|  1.36k|                return impl(rd, range, value);
 5883|  1.36k|            }
 5884|  1.36k|            auto crange = get_as_contiguous(range);
 5885|  1.36k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  1.36k|            return ranges::next(range.begin(),
 5887|  1.36k|                                ranges::distance(crange.begin(), it));
 5888|  1.36k|        }
 5889|  1.36k|        else {
 5890|  1.36k|            SCN_EXPECT(false);
 5891|  1.36k|            SCN_UNREACHABLE;
 5892|  1.36k|        }
 5893|  1.36k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5863|  1.36k|    {
 5864|  1.36k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  1.36k|                        .transform_error(make_eof_scan_error));
 5866|  1.36k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  1.36k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5266|  1.36k|    {
 5267|  1.36k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.36k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|  1.36k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|  1.36k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   132k|    {
 2879|   132k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   637k|    {
 2883|   637k|        return m_current;
 2884|   637k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   747k|    {
 2888|   747k|        return m_range.end();
 2889|   747k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   241k|{
 1221|       |    // TODO: optimize
 1222|   241k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   241k|    auto res = get_next_code_point(str);
 1224|   241k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   241k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   246k|    {
 2903|   246k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   246k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   246k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   246k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   246k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 246k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   246k|        }
 2909|   246k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   246k|    static_cast<    \
  |  |  929|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   246k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   257k|    {
 2893|   257k|        return ranges::subrange{begin(), end()};
 2894|   257k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6037|  40.2k|    {
 6038|  40.2k|        const bool need_skipped_width =
 6039|  40.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 5.63k, False: 34.6k]
  |  Branch (6039:33): [True: 7.32k, False: 27.3k]
  ------------------
 6040|  40.2k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|  40.2k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 1.16k, False: 39.1k]
  ------------------
 6044|  40.2k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 3.58k, False: 35.5k]
  ------------------
 6045|  4.74k|            return skip_fill(rng, specs.precision, specs.fill,
 6046|  4.74k|                             need_skipped_width);
 6047|  4.74k|        }
 6048|  35.5k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 34.7k, False: 772]
  |  Branch (6048:56): [True: 10.6k, False: 24.1k]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|  10.6k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 5.58k, False: 5.08k]
  ------------------
 6052|  5.58k|                auto max_width_view = take_width(rng, specs.precision);
 6053|  5.58k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|  5.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  5.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  5.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 5.58k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  5.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|  5.58k|                                  .transform_error(make_eof_scan_error));
 6055|  5.58k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|  5.58k|            }
 6057|  10.1k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  5.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  5.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  5.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 5.08k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  5.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|  10.1k|                            make_eof_scan_error));
 6059|       |
 6060|  10.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 2.92k, False: 2.16k]
  ------------------
 6061|  2.92k|                return result_type{
 6062|  2.92k|                    it,
 6063|  2.92k|                    calculate_text_width(make_contiguous_buffer(
 6064|  2.92k|                                             ranges::subrange{rng.begin(), it})
 6065|  2.92k|                                             .view())};
 6066|  2.92k|            }
 6067|  2.16k|            return result_type{it, 0};
 6068|  10.1k|        }
 6069|       |
 6070|  24.8k|        return result_type{rng.begin(), 0};
 6071|  35.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6079|  9.90k|    {
 6080|  9.90k|        const bool need_skipped_width =
 6081|  9.90k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 1.34k, False: 8.56k]
  |  Branch (6081:33): [True: 1.41k, False: 7.14k]
  ------------------
 6082|  9.90k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  9.90k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 224, False: 9.68k]
  ------------------
 6085|  9.90k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 370, False: 9.31k]
  ------------------
 6086|    594|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|    594|                             specs.fill, need_skipped_width);
 6088|    594|        }
 6089|  9.31k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 8.80k, False: 508]
  ------------------
 6090|  9.31k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 8.21k, False: 588]
  ------------------
 6091|  9.31k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 890, False: 7.32k]
  |  Branch (6091:35): [True: 820, False: 70]
  ------------------
 6092|  8.21k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 838, False: 6.55k]
  ------------------
 6093|  7.39k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 708, False: 130]
  ------------------
 6094|  1.52k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 708, False: 820]
  ------------------
 6095|    708|                const auto initial_width =
 6096|    708|                    specs.precision - prefix_width - value_width;
 6097|    708|                auto max_width_view = take_width(rng, initial_width);
 6098|    708|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|    708|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    708|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    708|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 708]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    708|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    708|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|    708|                                  .transform_error(make_eof_scan_error));
 6100|    708|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|    708|            }
 6102|  1.64k|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|    820|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    820|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    820|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    820|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 820]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    820|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    820|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|  1.64k|                            make_eof_scan_error));
 6104|       |
 6105|  1.64k|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 820, False: 0]
  ------------------
 6106|    820|                return result_type{
 6107|    820|                    it,
 6108|    820|                    calculate_text_width(make_contiguous_buffer(
 6109|    820|                                             ranges::subrange{rng.begin(), it})
 6110|    820|                                             .view())};
 6111|    820|            }
 6112|      0|            return result_type{it, 0};
 6113|  1.64k|        }
 6114|  7.78k|        return result_type{rng.begin(), 0};
 6115|  9.31k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6178|  10.8k|    {
 6179|  10.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  10.8k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  10.8k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  10.8k|            auto rd = make_reader<T, char_type>();
 6184|  10.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.27k, False: 1.54k]
  |  |  ------------------
  ------------------
 6185|  9.27k|                return unexpected(e);
 6186|  9.27k|            }
 6187|       |
 6188|  1.54k|            return impl(rd, range, value);
 6189|  10.8k|        }
 6190|  10.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  10.8k|            auto rd = make_reader<T, char_type>();
 6192|  10.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  10.8k|                return unexpected(e);
 6194|  10.8k|            }
 6195|       |
 6196|  10.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  10.8k|                specs.width != 0) {
 6198|  10.8k|                return impl(rd, range, value);
 6199|  10.8k|            }
 6200|       |
 6201|  10.8k|            auto crange = get_as_contiguous(range);
 6202|  10.8k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  10.8k|            return ranges::next(range.begin(),
 6204|  10.8k|                                ranges::distance(crange.begin(), it));
 6205|  10.8k|        }
 6206|  10.8k|        else {
 6207|  10.8k|            SCN_EXPECT(false);
 6208|  10.8k|            SCN_UNREACHABLE;
 6209|  10.8k|        }
 6210|  10.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|  1.54k|    {
 6121|  1.54k|        const bool need_skipped_width =
 6122|  1.54k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 484, False: 1.06k]
  |  Branch (6122:33): [True: 740, False: 320]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  1.54k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  1.54k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.54k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.54k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.54k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.54k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  1.54k|        auto [it, prefix_width] = prefix_result;
 6127|  1.54k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  1.54k|        std::ptrdiff_t value_width = 0;
 6131|  1.54k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 740, False: 804]
  ------------------
 6132|    740|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 740]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    740|            const auto initial_width = specs.precision - prefix_width;
 6140|    740|            auto max_width_view =
 6141|    740|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    740|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    740|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    740|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    740|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    740|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 740, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    740|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    740|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    740|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    740|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    740|    }                                                  \
  |  |  |  | 3642|    740|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    804|        else {
 6147|    804|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    804|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    804|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 804, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    804|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    804|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    804|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    804|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    804|    }                                                  \
  |  | 3642|    804|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    804|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6178|  10.8k|    {
 6179|  10.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  10.8k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  10.8k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  10.8k|            auto rd = make_reader<T, char_type>();
 6184|  10.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.27k, False: 1.54k]
  |  |  ------------------
  ------------------
 6185|  9.27k|                return unexpected(e);
 6186|  9.27k|            }
 6187|       |
 6188|  1.54k|            return impl(rd, range, value);
 6189|  10.8k|        }
 6190|  10.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  10.8k|            auto rd = make_reader<T, char_type>();
 6192|  10.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  10.8k|                return unexpected(e);
 6194|  10.8k|            }
 6195|       |
 6196|  10.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  10.8k|                specs.width != 0) {
 6198|  10.8k|                return impl(rd, range, value);
 6199|  10.8k|            }
 6200|       |
 6201|  10.8k|            auto crange = get_as_contiguous(range);
 6202|  10.8k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  10.8k|            return ranges::next(range.begin(),
 6204|  10.8k|                                ranges::distance(crange.begin(), it));
 6205|  10.8k|        }
 6206|  10.8k|        else {
 6207|  10.8k|            SCN_EXPECT(false);
 6208|  10.8k|            SCN_UNREACHABLE;
 6209|  10.8k|        }
 6210|  10.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|  1.54k|    {
 6121|  1.54k|        const bool need_skipped_width =
 6122|  1.54k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 484, False: 1.06k]
  |  Branch (6122:33): [True: 740, False: 320]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  1.54k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  1.54k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.54k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.54k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.54k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.54k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  1.54k|        auto [it, prefix_width] = prefix_result;
 6127|  1.54k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  1.54k|        std::ptrdiff_t value_width = 0;
 6131|  1.54k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 740, False: 804]
  ------------------
 6132|    740|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 740]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    740|            const auto initial_width = specs.precision - prefix_width;
 6140|    740|            auto max_width_view =
 6141|    740|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    740|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    740|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    740|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    740|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    740|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 740, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    740|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    740|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    740|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    740|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    740|    }                                                  \
  |  |  |  | 3642|    740|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    804|        else {
 6147|    804|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    804|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    804|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 804, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    804|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    804|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    804|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    804|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    804|    }                                                  \
  |  | 3642|    804|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    804|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6178|  10.7k|    {
 6179|  10.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  10.7k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  10.7k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  10.7k|            auto rd = make_reader<T, char_type>();
 6184|  10.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.37k, False: 1.38k]
  |  |  ------------------
  ------------------
 6185|  9.37k|                return unexpected(e);
 6186|  9.37k|            }
 6187|       |
 6188|  1.38k|            return impl(rd, range, value);
 6189|  10.7k|        }
 6190|  10.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  10.7k|            auto rd = make_reader<T, char_type>();
 6192|  10.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  10.7k|                return unexpected(e);
 6194|  10.7k|            }
 6195|       |
 6196|  10.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  10.7k|                specs.width != 0) {
 6198|  10.7k|                return impl(rd, range, value);
 6199|  10.7k|            }
 6200|       |
 6201|  10.7k|            auto crange = get_as_contiguous(range);
 6202|  10.7k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  10.7k|            return ranges::next(range.begin(),
 6204|  10.7k|                                ranges::distance(crange.begin(), it));
 6205|  10.7k|        }
 6206|  10.7k|        else {
 6207|  10.7k|            SCN_EXPECT(false);
 6208|  10.7k|            SCN_UNREACHABLE;
 6209|  10.7k|        }
 6210|  10.7k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5753|  10.7k|    {
 5754|  10.7k|        reader_error_handler eh{};
 5755|  10.7k|        detail::check_pointer_type_specs(specs, eh);
 5756|  10.7k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.37k, False: 1.38k]
  |  |  ------------------
  ------------------
 5757|  9.37k|            return {scan_error::invalid_format_string, eh.m_msg};
 5758|  9.37k|        }
 5759|  1.38k|        return {};
 5760|  10.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6120|  1.38k|    {
 6121|  1.38k|        const bool need_skipped_width =
 6122|  1.38k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 460, False: 920]
  |  Branch (6122:33): [True: 688, False: 232]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  1.38k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  1.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.38k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  1.38k|        auto [it, prefix_width] = prefix_result;
 6127|  1.38k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  1.38k|        std::ptrdiff_t value_width = 0;
 6131|  1.38k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 688, False: 692]
  ------------------
 6132|    688|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 688]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    688|            const auto initial_width = specs.precision - prefix_width;
 6140|    688|            auto max_width_view =
 6141|    688|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    688|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    688|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    688|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    688|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    688|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 688, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    688|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    688|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    688|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    688|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    688|    }                                                  \
  |  |  |  | 3642|    688|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    692|        else {
 6147|    692|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    692|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    692|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    692|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 692, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    692|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    692|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    692|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    692|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    692|    }                                                  \
  |  | 3642|    692|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    692|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5782|    688|    {
 5783|    688|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    688|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5784|    688|        return read_default(range, value, loc);
 5785|    688|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5765|    688|    {
 5766|    688|        detail::format_specs specs{};
 5767|    688|        specs.type = detail::presentation_type::int_hex;
 5768|       |
 5769|    688|        std::uintptr_t intvalue{};
 5770|    688|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3643|    688|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    688|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    688|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    688|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 688, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    688|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    688|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    688|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    688|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    688|    }                                                  \
  |  |  |  | 3642|    688|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5771|      0|                                                                intvalue, loc));
 5772|      0|        value = reinterpret_cast<void*>(intvalue);
 5773|      0|        return result;
 5774|    688|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5782|    692|    {
 5783|    692|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    692|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5784|    692|        return read_default(range, value, loc);
 5785|    692|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6178|  10.8k|    {
 6179|  10.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  10.8k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  10.8k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  10.8k|            auto rd = make_reader<T, char_type>();
 6184|  10.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.09k, False: 1.72k]
  |  |  ------------------
  ------------------
 6185|  9.09k|                return unexpected(e);
 6186|  9.09k|            }
 6187|       |
 6188|  1.72k|            return impl(rd, range, value);
 6189|  10.8k|        }
 6190|  10.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  10.8k|            auto rd = make_reader<T, char_type>();
 6192|  10.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  10.8k|                return unexpected(e);
 6194|  10.8k|            }
 6195|       |
 6196|  10.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  10.8k|                specs.width != 0) {
 6198|  10.8k|                return impl(rd, range, value);
 6199|  10.8k|            }
 6200|       |
 6201|  10.8k|            auto crange = get_as_contiguous(range);
 6202|  10.8k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  10.8k|            return ranges::next(range.begin(),
 6204|  10.8k|                                ranges::distance(crange.begin(), it));
 6205|  10.8k|        }
 6206|  10.8k|        else {
 6207|  10.8k|            SCN_EXPECT(false);
 6208|  10.8k|            SCN_UNREACHABLE;
 6209|  10.8k|        }
 6210|  10.8k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  10.8k|    {
 3040|  10.8k|        reader_error_handler eh{};
 3041|  10.8k|        get_derived().check_specs_impl(specs, eh);
 3042|  10.8k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.09k, False: 1.72k]
  |  |  ------------------
  ------------------
 3043|  9.09k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.09k|        }
 3045|  1.72k|        return {};
 3046|  10.8k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  10.8k|    {
 3051|  10.8k|        return static_cast<Derived&>(*this);
 3052|  10.8k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5497|  10.8k|    {
 5498|  10.8k|        detail::check_bool_type_specs(specs, eh);
 5499|  10.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|  1.72k|    {
 6121|  1.72k|        const bool need_skipped_width =
 6122|  1.72k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 494, False: 1.23k]
  |  Branch (6122:33): [True: 746, False: 486]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  1.72k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  1.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  1.72k|        auto [it, prefix_width] = prefix_result;
 6127|  1.72k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  1.72k|        std::ptrdiff_t value_width = 0;
 6131|  1.72k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 746, False: 980]
  ------------------
 6132|    746|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 746]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    746|            const auto initial_width = specs.precision - prefix_width;
 6140|    746|            auto max_width_view =
 6141|    746|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    746|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    746|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    746|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    746|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 746, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    746|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    746|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    746|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    746|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    746|    }                                                  \
  |  |  |  | 3642|    746|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    980|        else {
 6147|    980|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    980|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    980|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    980|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 980, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    980|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    980|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    980|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    980|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    980|    }                                                  \
  |  | 3642|    980|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    980|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5516|    746|    {
 5517|    746|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5518|       |
 5519|    746|#if !SCN_DISABLE_LOCALE
 5520|    746|        if (specs.localized) {
  ------------------
  |  Branch (5520:13): [True: 16, False: 730]
  ------------------
 5521|     16|            return rd.read_localized(range, loc, value);
 5522|     16|        }
 5523|    730|#endif
 5524|       |
 5525|    730|        return rd.read_classic(range, value);
 5526|    746|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5529|  1.72k|    {
 5530|  1.72k|        SCN_GCC_COMPAT_PUSH
 5531|  1.72k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5532|       |
 5533|  1.72k|        switch (specs.type) {
 5534|    176|            case detail::presentation_type::string:
  ------------------
  |  Branch (5534:13): [True: 176, False: 1.55k]
  ------------------
 5535|    176|                return bool_reader_base::allow_text;
 5536|       |
 5537|     38|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5537:13): [True: 38, False: 1.68k]
  ------------------
 5538|     72|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5538:13): [True: 34, False: 1.69k]
  ------------------
 5539|    106|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5539:13): [True: 34, False: 1.69k]
  ------------------
 5540|    126|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5540:13): [True: 20, False: 1.70k]
  ------------------
 5541|    140|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5541:13): [True: 14, False: 1.71k]
  ------------------
 5542|    148|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5542:13): [True: 8, False: 1.71k]
  ------------------
 5543|    148|                return bool_reader_base::allow_numeric;
 5544|       |
 5545|  1.40k|            default:
  ------------------
  |  Branch (5545:13): [True: 1.40k, False: 324]
  ------------------
 5546|  1.40k|                return bool_reader_base::allow_text |
 5547|  1.40k|                       bool_reader_base::allow_numeric;
 5548|  1.72k|        }
 5549|       |
 5550|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5551|  1.72k|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5428|     16|    {
 5429|     16|        scan_error err{scan_error::invalid_scanned_value,
 5430|     16|                       "Failed to read boolean"};
 5431|       |
 5432|     16|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5432:13): [True: 16, False: 0]
  ------------------
 5433|     16|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5433:22): [True: 0, False: 16]
  ------------------
 5434|      0|                return *r;
 5435|      0|            }
 5436|     16|            else {
 5437|     16|                err = r.error();
 5438|     16|            }
 5439|     16|        }
 5440|       |
 5441|     16|        if (m_options & allow_text) {
  ------------------
  |  Branch (5441:13): [True: 14, False: 2]
  ------------------
 5442|     14|            auto stdloc = loc.get<std::locale>();
 5443|     14|            const auto& numpunct =
 5444|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5445|     14|            const auto truename = numpunct.truename();
 5446|     14|            const auto falsename = numpunct.falsename();
 5447|       |
 5448|     14|            if (auto r =
  ------------------
  |  Branch (5448:22): [True: 0, False: 14]
  ------------------
 5449|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5450|      0|                return *r;
 5451|      0|            }
 5452|     14|            else {
 5453|     14|                err = r.error();
 5454|     14|            }
 5455|     14|        }
 5456|       |
 5457|     16|        return unexpected(err);
 5458|     16|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5384|    742|    {
 5385|    742|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5385:18): [True: 0, False: 742]
  ------------------
 5386|      0|            value = false;
 5387|      0|            return *r;
 5388|      0|        }
 5389|    742|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5389:18): [True: 0, False: 742]
  ------------------
 5390|      0|            value = true;
 5391|      0|            return *r;
 5392|      0|        }
 5393|       |
 5394|    742|        return unexpected_scan_error(
 5395|    742|            scan_error::invalid_scanned_value,
 5396|    742|            "Failed to read numeric boolean value: No match");
 5397|    742|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|  1.48k|{
 2146|  1.48k|    auto it = read_code_unit(range);
 2147|  1.48k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.48k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.48k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.48k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.48k|        return unexpected(parse_error::error);
 2154|  1.48k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.48k|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5468|     14|    {
 5469|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5470|     14|        const auto shorter = std::pair{
 5471|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5471:13): [True: 14, False: 0]
  ------------------
 5472|     14|        const auto longer = std::pair{
 5473|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5473:13): [True: 0, False: 14]
  ------------------
 5474|       |
 5475|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5475:18): [True: 0, False: 14]
  ------------------
 5476|      0|            value = shorter.second;
 5477|      0|            return *r;
 5478|      0|        }
 5479|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5479:18): [True: 0, False: 14]
  ------------------
 5480|      0|            value = longer.second;
 5481|      0|            return *r;
 5482|      0|        }
 5483|       |
 5484|     14|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5485|     14|                                     "read_textual: No match");
 5486|     14|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     28|{
 2179|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 12]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     16|    }                                                  \
  |  |  |  | 3642|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     12|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     12|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     12|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     12|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 2185|     12|        return unexpected(parse_error::error);
 2186|     12|    }
 2187|      0|    return it;
 2188|     12|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|  1.41k|{
 1857|  1.41k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.41k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.41k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.41k|        if (sz < count) {
 1862|  1.41k|            return unexpected(eof_error::eof);
 1863|  1.41k|        }
 1864|       |
 1865|  1.41k|        return ranges::next(range.begin(), count);
 1866|  1.41k|    }
 1867|  1.41k|    else {
 1868|  1.41k|        auto it = range.begin();
 1869|  1.41k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 1.41k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  7.50k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 6.18k, False: 1.31k]
  ------------------
 1874|  6.18k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 94, False: 6.09k]
  ------------------
 1875|     94|                return unexpected(eof_error::eof);
 1876|     94|            }
 1877|  6.18k|        }
 1878|       |
 1879|  1.31k|        return it;
 1880|  1.41k|    }
 1881|  1.41k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|  1.41k|{
 1095|  1.41k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.41k|        return r.size();
 1097|  1.41k|    }
 1098|  1.41k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.41k|                           ranges::const_iterator_t<Range>,
 1100|  1.41k|                           typename detail::basic_scan_buffer<
 1101|  1.41k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.41k|        if constexpr (ranges::common_range<Range>) {
 1103|  1.41k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.41k|        }
 1105|  1.41k|        else {
 1106|  1.41k|            if (r.begin().stores_parent()) {
 1107|  1.41k|                return static_cast<size_t>(
 1108|  1.41k|                    r.begin().parent()->chars_available() -
 1109|  1.41k|                    r.begin().position());
 1110|  1.41k|            }
 1111|  1.41k|            return r.begin().contiguous_segment().size();
 1112|  1.41k|        }
 1113|  1.41k|    }
 1114|  1.41k|    else {
 1115|  1.41k|        return 0;
 1116|  1.41k|    }
 1117|  1.41k|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5355|    730|    {
 5356|    730|        scan_error err{scan_error::invalid_scanned_value,
 5357|    730|                       "Failed to read boolean"};
 5358|       |
 5359|    730|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5359:13): [True: 726, False: 4]
  ------------------
 5360|    726|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5360:22): [True: 0, False: 726]
  ------------------
 5361|      0|                return *r;
 5362|      0|            }
 5363|    726|            else {
 5364|    726|                err = r.error();
 5365|    726|            }
 5366|    726|        }
 5367|       |
 5368|    730|        if (m_options & allow_text) {
  ------------------
  |  Branch (5368:13): [True: 692, False: 38]
  ------------------
 5369|    692|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5369:22): [True: 0, False: 692]
  ------------------
 5370|      0|                return *r;
 5371|      0|            }
 5372|    692|            else {
 5373|    692|                err = r.error();
 5374|    692|            }
 5375|    692|        }
 5376|       |
 5377|    730|        return unexpected(err);
 5378|    730|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5402|    692|    {
 5403|    692|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5403:18): [True: 0, False: 692]
  ------------------
 5404|      0|            value = true;
 5405|      0|            return *r;
 5406|      0|        }
 5407|    692|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5407:18): [True: 0, False: 692]
  ------------------
 5408|      0|            value = false;
 5409|      0|            return *r;
 5410|      0|        }
 5411|       |
 5412|    692|        return unexpected_scan_error(
 5413|    692|            scan_error::invalid_scanned_value,
 5414|    692|            "Failed to read textual boolean value: No match");
 5415|    692|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|  1.38k|{
 2194|  1.38k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  1.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 78, False: 1.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     78|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     78|    }                                                  \
  |  |  |  | 3642|  1.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.30k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.30k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.30k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.30k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.30k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.30k, False: 0]
  |  |  ------------------
  ------------------
 2201|  1.30k|            return unexpected(parse_error::error);
 2202|  1.30k|        }
 2203|      0|        return it;
 2204|  1.30k|    }
 2205|  1.30k|    else {
 2206|  1.30k|        auto range_it = range.begin();
 2207|  1.30k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  1.30k|            if (SCN_UNLIKELY(*range_it !=
 2209|  1.30k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.30k|                return unexpected(parse_error::error);
 2211|  1.30k|            }
 2212|  1.30k|        }
 2213|  1.30k|        return it;
 2214|  1.30k|    }
 2215|  1.30k|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5516|    980|    {
 5517|    980|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5518|       |
 5519|    980|#if !SCN_DISABLE_LOCALE
 5520|    980|        if (specs.localized) {
  ------------------
  |  Branch (5520:13): [True: 38, False: 942]
  ------------------
 5521|     38|            return rd.read_localized(range, loc, value);
 5522|     38|        }
 5523|    942|#endif
 5524|       |
 5525|    942|        return rd.read_classic(range, value);
 5526|    980|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5428|     38|    {
 5429|     38|        scan_error err{scan_error::invalid_scanned_value,
 5430|     38|                       "Failed to read boolean"};
 5431|       |
 5432|     38|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5432:13): [True: 34, False: 4]
  ------------------
 5433|     34|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5433:22): [True: 0, False: 34]
  ------------------
 5434|      0|                return *r;
 5435|      0|            }
 5436|     34|            else {
 5437|     34|                err = r.error();
 5438|     34|            }
 5439|     34|        }
 5440|       |
 5441|     38|        if (m_options & allow_text) {
  ------------------
  |  Branch (5441:13): [True: 20, False: 18]
  ------------------
 5442|     20|            auto stdloc = loc.get<std::locale>();
 5443|     20|            const auto& numpunct =
 5444|     20|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5445|     20|            const auto truename = numpunct.truename();
 5446|     20|            const auto falsename = numpunct.falsename();
 5447|       |
 5448|     20|            if (auto r =
  ------------------
  |  Branch (5448:22): [True: 0, False: 20]
  ------------------
 5449|     20|                    read_textual_custom(range, value, truename, falsename)) {
 5450|      0|                return *r;
 5451|      0|            }
 5452|     20|            else {
 5453|     20|                err = r.error();
 5454|     20|            }
 5455|     20|        }
 5456|       |
 5457|     38|        return unexpected(err);
 5458|     38|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5468|     20|    {
 5469|     20|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5470|     20|        const auto shorter = std::pair{
 5471|     20|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5471:13): [True: 20, False: 0]
  ------------------
 5472|     20|        const auto longer = std::pair{
 5473|     20|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5473:13): [True: 0, False: 20]
  ------------------
 5474|       |
 5475|     20|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5475:18): [True: 0, False: 20]
  ------------------
 5476|      0|            value = shorter.second;
 5477|      0|            return *r;
 5478|      0|        }
 5479|     20|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5479:18): [True: 0, False: 20]
  ------------------
 5480|      0|            value = longer.second;
 5481|      0|            return *r;
 5482|      0|        }
 5483|       |
 5484|     20|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5485|     20|                                     "read_textual: No match");
 5486|     20|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     40|{
 2179|     40|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|     40|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     40|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     40|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      2|    }                                                  \
  |  |  |  | 3642|     40|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     38|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     38|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     38|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     38|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 2185|     38|        return unexpected(parse_error::error);
 2186|     38|    }
 2187|      0|    return it;
 2188|     38|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6178|  10.7k|    {
 6179|  10.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  10.7k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  10.7k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  10.7k|            auto rd = make_reader<T, char_type>();
 6184|  10.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.25k, False: 1.50k]
  |  |  ------------------
  ------------------
 6185|  9.25k|                return unexpected(e);
 6186|  9.25k|            }
 6187|       |
 6188|  1.50k|            return impl(rd, range, value);
 6189|  10.7k|        }
 6190|  10.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  10.7k|            auto rd = make_reader<T, char_type>();
 6192|  10.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  10.7k|                return unexpected(e);
 6194|  10.7k|            }
 6195|       |
 6196|  10.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  10.7k|                specs.width != 0) {
 6198|  10.7k|                return impl(rd, range, value);
 6199|  10.7k|            }
 6200|       |
 6201|  10.7k|            auto crange = get_as_contiguous(range);
 6202|  10.7k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  10.7k|            return ranges::next(range.begin(),
 6204|  10.7k|                                ranges::distance(crange.begin(), it));
 6205|  10.7k|        }
 6206|  10.7k|        else {
 6207|  10.7k|            SCN_EXPECT(false);
 6208|  10.7k|            SCN_UNREACHABLE;
 6209|  10.7k|        }
 6210|  10.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|  1.50k|    {
 6121|  1.50k|        const bool need_skipped_width =
 6122|  1.50k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 476, False: 1.02k]
  |  Branch (6122:33): [True: 726, False: 298]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  1.50k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  1.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.50k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  1.50k|        auto [it, prefix_width] = prefix_result;
 6127|  1.50k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  1.50k|        std::ptrdiff_t value_width = 0;
 6131|  1.50k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 726, False: 774]
  ------------------
 6132|    726|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 726]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    726|            const auto initial_width = specs.precision - prefix_width;
 6140|    726|            auto max_width_view =
 6141|    726|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    726|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    726|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    726|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    726|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    726|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38, False: 688]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     38|    }                                                  \
  |  |  |  | 3642|    726|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    688|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|    688|            it = w_it.base();
 6144|    688|            value_width = initial_width - w_it.count();
 6145|    688|        }
 6146|    774|        else {
 6147|    774|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    774|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    774|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    774|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 90, False: 684]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     90|    }                                                  \
  |  | 3642|    774|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    774|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|    684|                                             specs, value, loc));
 6149|       |
 6150|    684|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 454, False: 230]
  ------------------
 6151|    454|                value_width = calculate_text_width(
 6152|    454|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    454|                        .view());
 6154|    454|            }
 6155|    684|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  1.37k|        std::ptrdiff_t postfix_width = 0;
 6159|  1.37k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 1.37k, False: 0]
  ------------------
 6160|  1.37k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  1.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.37k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  1.37k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  1.37k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  1.37k|                                 value_width));
 6164|  1.37k|            std::tie(it, postfix_width) = postfix_result;
 6165|  1.37k|        }
 6166|       |
 6167|  1.37k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  1.37k|                                                 value_width, postfix_width);
 6169|  1.37k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 440, False: 932]
  ------------------
 6170|    440|            return unexpected(e);
 6171|    440|        }
 6172|       |
 6173|    932|        return it;
 6174|  1.37k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6178|  10.8k|    {
 6179|  10.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  10.8k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  10.8k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  10.8k|            auto rd = make_reader<T, char_type>();
 6184|  10.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.26k, False: 1.56k]
  |  |  ------------------
  ------------------
 6185|  9.26k|                return unexpected(e);
 6186|  9.26k|            }
 6187|       |
 6188|  1.56k|            return impl(rd, range, value);
 6189|  10.8k|        }
 6190|  10.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  10.8k|            auto rd = make_reader<T, char_type>();
 6192|  10.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  10.8k|                return unexpected(e);
 6194|  10.8k|            }
 6195|       |
 6196|  10.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  10.8k|                specs.width != 0) {
 6198|  10.8k|                return impl(rd, range, value);
 6199|  10.8k|            }
 6200|       |
 6201|  10.8k|            auto crange = get_as_contiguous(range);
 6202|  10.8k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  10.8k|            return ranges::next(range.begin(),
 6204|  10.8k|                                ranges::distance(crange.begin(), it));
 6205|  10.8k|        }
 6206|  10.8k|        else {
 6207|  10.8k|            SCN_EXPECT(false);
 6208|  10.8k|            SCN_UNREACHABLE;
 6209|  10.8k|        }
 6210|  10.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|  1.56k|    {
 6121|  1.56k|        const bool need_skipped_width =
 6122|  1.56k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 498, False: 1.06k]
  |  Branch (6122:33): [True: 744, False: 318]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  1.56k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  1.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  1.56k|        auto [it, prefix_width] = prefix_result;
 6127|  1.56k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  1.56k|        std::ptrdiff_t value_width = 0;
 6131|  1.56k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 744, False: 816]
  ------------------
 6132|    744|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 744]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    744|            const auto initial_width = specs.precision - prefix_width;
 6140|    744|            auto max_width_view =
 6141|    744|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    744|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    744|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    744|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    744|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    744|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 744, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    744|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    744|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    744|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    744|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    744|    }                                                  \
  |  |  |  | 3642|    744|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    816|        else {
 6147|    816|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    816|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    816|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    816|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 816, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    816|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    816|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    816|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    816|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    816|    }                                                  \
  |  | 3642|    816|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    816|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6178|  10.7k|    {
 6179|  10.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  10.7k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  10.7k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  10.7k|            auto rd = make_reader<T, char_type>();
 6184|  10.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 402, False: 10.3k]
  |  |  ------------------
  ------------------
 6185|    402|                return unexpected(e);
 6186|    402|            }
 6187|       |
 6188|  10.3k|            return impl(rd, range, value);
 6189|  10.7k|        }
 6190|  10.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  10.7k|            auto rd = make_reader<T, char_type>();
 6192|  10.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  10.7k|                return unexpected(e);
 6194|  10.7k|            }
 6195|       |
 6196|  10.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  10.7k|                specs.width != 0) {
 6198|  10.7k|                return impl(rd, range, value);
 6199|  10.7k|            }
 6200|       |
 6201|  10.7k|            auto crange = get_as_contiguous(range);
 6202|  10.7k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  10.7k|            return ranges::next(range.begin(),
 6204|  10.7k|                                ranges::distance(crange.begin(), it));
 6205|  10.7k|        }
 6206|  10.7k|        else {
 6207|  10.7k|            SCN_EXPECT(false);
 6208|  10.7k|            SCN_UNREACHABLE;
 6209|  10.7k|        }
 6210|  10.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6120|  10.3k|    {
 6121|  10.3k|        const bool need_skipped_width =
 6122|  10.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 914, False: 9.43k]
  |  Branch (6122:33): [True: 980, False: 8.45k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  10.3k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 10.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  10.3k|        auto [it, prefix_width] = prefix_result;
 6127|  10.3k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  10.3k|        std::ptrdiff_t value_width = 0;
 6131|  10.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 980, False: 9.36k]
  ------------------
 6132|    980|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 980]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    980|            const auto initial_width = specs.precision - prefix_width;
 6140|    980|            auto max_width_view =
 6141|    980|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    980|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    980|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    980|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    980|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    980|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 726, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    726|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    726|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    726|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    726|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    726|    }                                                  \
  |  |  |  | 3642|    980|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|    254|            it = w_it.base();
 6144|    254|            value_width = initial_width - w_it.count();
 6145|    254|        }
 6146|  9.36k|        else {
 6147|  9.36k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  9.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  9.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  9.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.13k, False: 3.23k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  6.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  6.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  6.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  6.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  6.13k|    }                                                  \
  |  | 3642|  9.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  9.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  3.23k|                                             specs, value, loc));
 6149|       |
 6150|  3.23k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 556, False: 2.67k]
  ------------------
 6151|    556|                value_width = calculate_text_width(
 6152|    556|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    556|                        .view());
 6154|    556|            }
 6155|  3.23k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  3.48k|        std::ptrdiff_t postfix_width = 0;
 6159|  3.48k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 2.84k, False: 644]
  ------------------
 6160|  2.84k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  2.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.84k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  2.84k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  2.84k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  2.84k|                                 value_width));
 6164|  2.84k|            std::tie(it, postfix_width) = postfix_result;
 6165|  2.84k|        }
 6166|       |
 6167|  3.48k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  3.48k|                                                 value_width, postfix_width);
 6169|  3.48k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 366, False: 3.12k]
  ------------------
 6170|    366|            return unexpected(e);
 6171|    366|        }
 6172|       |
 6173|  3.12k|        return it;
 6174|  3.48k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6178|  10.7k|    {
 6179|  10.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  10.7k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  10.7k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  10.7k|            auto rd = make_reader<T, char_type>();
 6184|  10.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 402, False: 10.3k]
  |  |  ------------------
  ------------------
 6185|    402|                return unexpected(e);
 6186|    402|            }
 6187|       |
 6188|  10.3k|            return impl(rd, range, value);
 6189|  10.7k|        }
 6190|  10.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  10.7k|            auto rd = make_reader<T, char_type>();
 6192|  10.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  10.7k|                return unexpected(e);
 6194|  10.7k|            }
 6195|       |
 6196|  10.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  10.7k|                specs.width != 0) {
 6198|  10.7k|                return impl(rd, range, value);
 6199|  10.7k|            }
 6200|       |
 6201|  10.7k|            auto crange = get_as_contiguous(range);
 6202|  10.7k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  10.7k|            return ranges::next(range.begin(),
 6204|  10.7k|                                ranges::distance(crange.begin(), it));
 6205|  10.7k|        }
 6206|  10.7k|        else {
 6207|  10.7k|            SCN_EXPECT(false);
 6208|  10.7k|            SCN_UNREACHABLE;
 6209|  10.7k|        }
 6210|  10.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6120|  10.3k|    {
 6121|  10.3k|        const bool need_skipped_width =
 6122|  10.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 914, False: 9.43k]
  |  Branch (6122:33): [True: 980, False: 8.45k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  10.3k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 10.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  10.3k|        auto [it, prefix_width] = prefix_result;
 6127|  10.3k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  10.3k|        std::ptrdiff_t value_width = 0;
 6131|  10.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 980, False: 9.36k]
  ------------------
 6132|    980|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 980]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    980|            const auto initial_width = specs.precision - prefix_width;
 6140|    980|            auto max_width_view =
 6141|    980|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    980|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    980|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    980|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    980|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    980|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 726, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    726|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    726|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    726|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    726|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    726|    }                                                  \
  |  |  |  | 3642|    980|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|    254|            it = w_it.base();
 6144|    254|            value_width = initial_width - w_it.count();
 6145|    254|        }
 6146|  9.36k|        else {
 6147|  9.36k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  9.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  9.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  9.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.13k, False: 3.23k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  6.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  6.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  6.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  6.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  6.13k|    }                                                  \
  |  | 3642|  9.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  9.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  3.23k|                                             specs, value, loc));
 6149|       |
 6150|  3.23k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 556, False: 2.67k]
  ------------------
 6151|    556|                value_width = calculate_text_width(
 6152|    556|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    556|                        .view());
 6154|    556|            }
 6155|  3.23k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  3.48k|        std::ptrdiff_t postfix_width = 0;
 6159|  3.48k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 2.84k, False: 644]
  ------------------
 6160|  2.84k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  2.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.84k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  2.84k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  2.84k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  2.84k|                                 value_width));
 6164|  2.84k|            std::tie(it, postfix_width) = postfix_result;
 6165|  2.84k|        }
 6166|       |
 6167|  3.48k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  3.48k|                                                 value_width, postfix_width);
 6169|  3.48k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 366, False: 3.12k]
  ------------------
 6170|    366|            return unexpected(e);
 6171|    366|        }
 6172|       |
 6173|  3.12k|        return it;
 6174|  3.48k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6178|  10.7k|    {
 6179|  10.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  10.7k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  10.7k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  10.7k|            auto rd = make_reader<T, char_type>();
 6184|  10.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 402, False: 10.3k]
  |  |  ------------------
  ------------------
 6185|    402|                return unexpected(e);
 6186|    402|            }
 6187|       |
 6188|  10.3k|            return impl(rd, range, value);
 6189|  10.7k|        }
 6190|  10.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  10.7k|            auto rd = make_reader<T, char_type>();
 6192|  10.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  10.7k|                return unexpected(e);
 6194|  10.7k|            }
 6195|       |
 6196|  10.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  10.7k|                specs.width != 0) {
 6198|  10.7k|                return impl(rd, range, value);
 6199|  10.7k|            }
 6200|       |
 6201|  10.7k|            auto crange = get_as_contiguous(range);
 6202|  10.7k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  10.7k|            return ranges::next(range.begin(),
 6204|  10.7k|                                ranges::distance(crange.begin(), it));
 6205|  10.7k|        }
 6206|  10.7k|        else {
 6207|  10.7k|            SCN_EXPECT(false);
 6208|  10.7k|            SCN_UNREACHABLE;
 6209|  10.7k|        }
 6210|  10.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6120|  10.3k|    {
 6121|  10.3k|        const bool need_skipped_width =
 6122|  10.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 914, False: 9.43k]
  |  Branch (6122:33): [True: 980, False: 8.45k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  10.3k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 10.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  10.3k|        auto [it, prefix_width] = prefix_result;
 6127|  10.3k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  10.3k|        std::ptrdiff_t value_width = 0;
 6131|  10.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 980, False: 9.36k]
  ------------------
 6132|    980|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 980]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    980|            const auto initial_width = specs.precision - prefix_width;
 6140|    980|            auto max_width_view =
 6141|    980|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    980|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    980|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    980|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    980|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    980|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 726, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    726|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    726|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    726|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    726|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    726|    }                                                  \
  |  |  |  | 3642|    980|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|    254|            it = w_it.base();
 6144|    254|            value_width = initial_width - w_it.count();
 6145|    254|        }
 6146|  9.36k|        else {
 6147|  9.36k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  9.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  9.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  9.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.13k, False: 3.23k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  6.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  6.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  6.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  6.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  6.13k|    }                                                  \
  |  | 3642|  9.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  9.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  3.23k|                                             specs, value, loc));
 6149|       |
 6150|  3.23k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 556, False: 2.67k]
  ------------------
 6151|    556|                value_width = calculate_text_width(
 6152|    556|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    556|                        .view());
 6154|    556|            }
 6155|  3.23k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  3.48k|        std::ptrdiff_t postfix_width = 0;
 6159|  3.48k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 2.84k, False: 644]
  ------------------
 6160|  2.84k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  2.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.84k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  2.84k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  2.84k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  2.84k|                                 value_width));
 6164|  2.84k|            std::tie(it, postfix_width) = postfix_result;
 6165|  2.84k|        }
 6166|       |
 6167|  3.48k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  3.48k|                                                 value_width, postfix_width);
 6169|  3.48k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 366, False: 3.12k]
  ------------------
 6170|    366|            return unexpected(e);
 6171|    366|        }
 6172|       |
 6173|  3.12k|        return it;
 6174|  3.48k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5795|  6.33k|{
 5796|  6.33k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.33k]
  |  |  ------------------
  ------------------
 5797|      0|        return unexpected(e);
 5798|      0|    }
 5799|       |
 5800|  6.33k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 704, False: 5.63k]
  ------------------
 5801|    704|        return range.begin();
 5802|    704|    }
 5803|       |
 5804|  5.63k|    return skip_classic_whitespace(range);
 5805|  6.33k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5871|    704|    {
 5872|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    704|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    704|                          basic_contiguous_scan_context<char_type>>) {
 5876|    704|            auto rd = make_reader<T, char_type>();
 5877|    704|            return impl(rd, range, value);
 5878|    704|        }
 5879|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    704|            auto rd = make_reader<T, char_type>();
 5881|    704|            if (!is_segment_contiguous(range)) {
 5882|    704|                return impl(rd, range, value);
 5883|    704|            }
 5884|    704|            auto crange = get_as_contiguous(range);
 5885|    704|            SCN_TRY(it, impl(rd, crange, value));
 5886|    704|            return ranges::next(range.begin(),
 5887|    704|                                ranges::distance(crange.begin(), it));
 5888|    704|        }
 5889|    704|        else {
 5890|    704|            SCN_EXPECT(false);
 5891|    704|            SCN_UNREACHABLE;
 5892|    704|        }
 5893|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    704|    {
 5864|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    704|                        .transform_error(make_eof_scan_error));
 5866|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    704|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3528|    704|    {
 3529|    704|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    704|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3530|    704|        return read_default_with_base(range, value, 10);
 3531|    704|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3492|    704|    {
 3493|    704|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3643|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3494|    704|                                   .transform_error(make_eof_scan_error));
 3495|       |
 3496|    704|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3496:23): [Folded - Ignored]
  ------------------
 3497|    704|            if (prefix_result.sign == sign_type::minus_sign) {
 3498|    704|                return unexpected_scan_error(
 3499|    704|                    scan_error::invalid_scanned_value,
 3500|    704|                    "Unexpected '-' sign when parsing an "
 3501|    704|                    "unsigned value");
 3502|    704|            }
 3503|    704|        }
 3504|       |
 3505|    704|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3505:13): [True: 0, False: 704]
  ------------------
 3506|      0|            value = T{0};
 3507|      0|            return std::next(prefix_result.iterator);
 3508|      0|        }
 3509|       |
 3510|  1.40k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3511|  1.40k|                parse_integer_digits_without_thsep(
 3512|  1.40k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3513|  1.40k|                    prefix_result.parsed_base));
 3514|       |
 3515|  1.40k|        auto buf = make_contiguous_buffer(
 3516|  1.40k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3517|  1.40k|        SCN_TRY(result_it,
  ------------------
  |  | 3643|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 704, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    704|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    704|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    704|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    704|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    704|    }                                                  \
  |  |  |  | 3642|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3518|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3519|      0|                                    prefix_result.parsed_base));
 3520|       |
 3521|      0|        return ranges::next(prefix_result.iterator,
 3522|      0|                            ranges::distance(buf.view().begin(), result_it));
 3523|  1.40k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5871|    704|    {
 5872|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    704|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    704|                          basic_contiguous_scan_context<char_type>>) {
 5876|    704|            auto rd = make_reader<T, char_type>();
 5877|    704|            return impl(rd, range, value);
 5878|    704|        }
 5879|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    704|            auto rd = make_reader<T, char_type>();
 5881|    704|            if (!is_segment_contiguous(range)) {
 5882|    704|                return impl(rd, range, value);
 5883|    704|            }
 5884|    704|            auto crange = get_as_contiguous(range);
 5885|    704|            SCN_TRY(it, impl(rd, crange, value));
 5886|    704|            return ranges::next(range.begin(),
 5887|    704|                                ranges::distance(crange.begin(), it));
 5888|    704|        }
 5889|    704|        else {
 5890|    704|            SCN_EXPECT(false);
 5891|    704|            SCN_UNREACHABLE;
 5892|    704|        }
 5893|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    704|    {
 5864|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    704|                        .transform_error(make_eof_scan_error));
 5866|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    704|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3528|    704|    {
 3529|    704|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    704|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3530|    704|        return read_default_with_base(range, value, 10);
 3531|    704|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3492|    704|    {
 3493|    704|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3643|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3494|    704|                                   .transform_error(make_eof_scan_error));
 3495|       |
 3496|    704|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3496:23): [Folded - Ignored]
  ------------------
 3497|    704|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3497:17): [True: 0, False: 704]
  ------------------
 3498|      0|                return unexpected_scan_error(
 3499|      0|                    scan_error::invalid_scanned_value,
 3500|      0|                    "Unexpected '-' sign when parsing an "
 3501|      0|                    "unsigned value");
 3502|      0|            }
 3503|    704|        }
 3504|       |
 3505|    704|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3505:13): [True: 0, False: 704]
  ------------------
 3506|      0|            value = T{0};
 3507|      0|            return std::next(prefix_result.iterator);
 3508|      0|        }
 3509|       |
 3510|  1.40k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3511|  1.40k|                parse_integer_digits_without_thsep(
 3512|  1.40k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3513|  1.40k|                    prefix_result.parsed_base));
 3514|       |
 3515|  1.40k|        auto buf = make_contiguous_buffer(
 3516|  1.40k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3517|  1.40k|        SCN_TRY(result_it,
  ------------------
  |  | 3643|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 704, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    704|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    704|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    704|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    704|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    704|    }                                                  \
  |  |  |  | 3642|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3518|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3519|      0|                                    prefix_result.parsed_base));
 3520|       |
 3521|      0|        return ranges::next(prefix_result.iterator,
 3522|      0|                            ranges::distance(buf.view().begin(), result_it));
 3523|  1.40k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5871|    704|    {
 5872|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    704|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    704|                          basic_contiguous_scan_context<char_type>>) {
 5876|    704|            auto rd = make_reader<T, char_type>();
 5877|    704|            return impl(rd, range, value);
 5878|    704|        }
 5879|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    704|            auto rd = make_reader<T, char_type>();
 5881|    704|            if (!is_segment_contiguous(range)) {
 5882|    704|                return impl(rd, range, value);
 5883|    704|            }
 5884|    704|            auto crange = get_as_contiguous(range);
 5885|    704|            SCN_TRY(it, impl(rd, crange, value));
 5886|    704|            return ranges::next(range.begin(),
 5887|    704|                                ranges::distance(crange.begin(), it));
 5888|    704|        }
 5889|    704|        else {
 5890|    704|            SCN_EXPECT(false);
 5891|    704|            SCN_UNREACHABLE;
 5892|    704|        }
 5893|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5863|    704|    {
 5864|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    704|                        .transform_error(make_eof_scan_error));
 5866|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    704|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5748|    910|    {
 5749|    910|        return true;
 5750|    910|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5765|    910|    {
 5766|    910|        detail::format_specs specs{};
 5767|    910|        specs.type = detail::presentation_type::int_hex;
 5768|       |
 5769|    910|        std::uintptr_t intvalue{};
 5770|    910|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3643|    910|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    910|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    910|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 910, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    910|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    910|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    910|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    910|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    910|    }                                                  \
  |  |  |  | 3642|    910|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5771|      0|                                                                intvalue, loc));
 5772|      0|        value = reinterpret_cast<void*>(intvalue);
 5773|      0|        return result;
 5774|    910|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5871|    704|    {
 5872|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    704|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    704|                          basic_contiguous_scan_context<char_type>>) {
 5876|    704|            auto rd = make_reader<T, char_type>();
 5877|    704|            return impl(rd, range, value);
 5878|    704|        }
 5879|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    704|            auto rd = make_reader<T, char_type>();
 5881|    704|            if (!is_segment_contiguous(range)) {
 5882|    704|                return impl(rd, range, value);
 5883|    704|            }
 5884|    704|            auto crange = get_as_contiguous(range);
 5885|    704|            SCN_TRY(it, impl(rd, crange, value));
 5886|    704|            return ranges::next(range.begin(),
 5887|    704|                                ranges::distance(crange.begin(), it));
 5888|    704|        }
 5889|    704|        else {
 5890|    704|            SCN_EXPECT(false);
 5891|    704|            SCN_UNREACHABLE;
 5892|    704|        }
 5893|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    704|    {
 5864|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    704|                        .transform_error(make_eof_scan_error));
 5866|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    704|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|    956|    {
 3035|    956|        return true;
 3036|    956|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5504|    704|    {
 5505|    704|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    704|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5506|       |
 5507|    704|        return bool_reader<CharT>{}.read_classic(range, value);
 5508|    704|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5355|    946|    {
 5356|    946|        scan_error err{scan_error::invalid_scanned_value,
 5357|    946|                       "Failed to read boolean"};
 5358|       |
 5359|    946|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5359:13): [True: 944, False: 2]
  ------------------
 5360|    944|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5360:22): [True: 0, False: 944]
  ------------------
 5361|      0|                return *r;
 5362|      0|            }
 5363|    944|            else {
 5364|    944|                err = r.error();
 5365|    944|            }
 5366|    944|        }
 5367|       |
 5368|    946|        if (m_options & allow_text) {
  ------------------
  |  Branch (5368:13): [True: 912, False: 34]
  ------------------
 5369|    912|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5369:22): [True: 0, False: 912]
  ------------------
 5370|      0|                return *r;
 5371|      0|            }
 5372|    912|            else {
 5373|    912|                err = r.error();
 5374|    912|            }
 5375|    912|        }
 5376|       |
 5377|    946|        return unexpected(err);
 5378|    946|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5384|    954|    {
 5385|    954|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5385:18): [True: 0, False: 954]
  ------------------
 5386|      0|            value = false;
 5387|      0|            return *r;
 5388|      0|        }
 5389|    954|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5389:18): [True: 0, False: 954]
  ------------------
 5390|      0|            value = true;
 5391|      0|            return *r;
 5392|      0|        }
 5393|       |
 5394|    954|        return unexpected_scan_error(
 5395|    954|            scan_error::invalid_scanned_value,
 5396|    954|            "Failed to read numeric boolean value: No match");
 5397|    954|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5402|    912|    {
 5403|    912|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5403:18): [True: 0, False: 912]
  ------------------
 5404|      0|            value = true;
 5405|      0|            return *r;
 5406|      0|        }
 5407|    912|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5407:18): [True: 0, False: 912]
  ------------------
 5408|      0|            value = false;
 5409|      0|            return *r;
 5410|      0|        }
 5411|       |
 5412|    912|        return unexpected_scan_error(
 5413|    912|            scan_error::invalid_scanned_value,
 5414|    912|            "Failed to read textual boolean value: No match");
 5415|    912|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  1.82k|{
 2194|  1.82k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  1.82k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.82k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.82k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 70, False: 1.75k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     70|    }                                                  \
  |  |  |  | 3642|  1.82k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.75k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.75k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.75k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.75k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.75k|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|  1.75k|            return unexpected(parse_error::error);
 2202|  1.75k|        }
 2203|  1.75k|        return it;
 2204|  1.75k|    }
 2205|  1.75k|    else {
 2206|  1.75k|        auto range_it = range.begin();
 2207|  1.75k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 1.75k, False: 0]
  ------------------
 2208|  1.75k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  1.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.75k, False: 0]
  |  |  ------------------
  ------------------
 2209|  1.75k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.75k|                return unexpected(parse_error::error);
 2211|  1.75k|            }
 2212|  1.75k|        }
 2213|      0|        return it;
 2214|  1.75k|    }
 2215|  1.75k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5871|    704|    {
 5872|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    704|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    704|                          basic_contiguous_scan_context<char_type>>) {
 5876|    704|            auto rd = make_reader<T, char_type>();
 5877|    704|            return impl(rd, range, value);
 5878|    704|        }
 5879|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    704|            auto rd = make_reader<T, char_type>();
 5881|    704|            if (!is_segment_contiguous(range)) {
 5882|    704|                return impl(rd, range, value);
 5883|    704|            }
 5884|    704|            auto crange = get_as_contiguous(range);
 5885|    704|            SCN_TRY(it, impl(rd, crange, value));
 5886|    704|            return ranges::next(range.begin(),
 5887|    704|                                ranges::distance(crange.begin(), it));
 5888|    704|        }
 5889|    704|        else {
 5890|    704|            SCN_EXPECT(false);
 5891|    704|            SCN_UNREACHABLE;
 5892|    704|        }
 5893|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    704|    {
 5864|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    704|                        .transform_error(make_eof_scan_error));
 5866|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    704|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3658|    704|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5871|    704|    {
 5872|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    704|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    704|                          basic_contiguous_scan_context<char_type>>) {
 5876|    704|            auto rd = make_reader<T, char_type>();
 5877|    704|            return impl(rd, range, value);
 5878|    704|        }
 5879|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    704|            auto rd = make_reader<T, char_type>();
 5881|    704|            if (!is_segment_contiguous(range)) {
 5882|    704|                return impl(rd, range, value);
 5883|    704|            }
 5884|    704|            auto crange = get_as_contiguous(range);
 5885|    704|            SCN_TRY(it, impl(rd, crange, value));
 5886|    704|            return ranges::next(range.begin(),
 5887|    704|                                ranges::distance(crange.begin(), it));
 5888|    704|        }
 5889|    704|        else {
 5890|    704|            SCN_EXPECT(false);
 5891|    704|            SCN_UNREACHABLE;
 5892|    704|        }
 5893|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    704|    {
 5864|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    704|                        .transform_error(make_eof_scan_error));
 5866|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    704|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|    704|    {
 4153|    704|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    704|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|    704|        float_reader<CharT> rd{};
 4156|    704|        return read_impl<Range>(
 4157|    704|            range, rd,
 4158|    704|            [](float_reader<CharT>& r, auto&&... args) {
 4159|    704|                return r.read_source(SCN_FWD(args)...);
 4160|    704|            },
 4161|    704|            value);
 4162|    704|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    704|    {
  754|    704|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    704|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    704|              cvref<T> obj = *get<T>(fn);
  745|    704|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    704|                  obj(static_cast<decltype(args)>(args)...);
  747|    704|              }
  748|    704|              else {
  749|    704|                  return obj(static_cast<decltype(args)>(args)...);
  750|    704|              }
  751|    704|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    704|    {
  684|    704|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    704|            return static_cast<T*>(s.m_cp);
  686|    704|        }
  687|    704|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    704|            return static_cast<T*>(s.m_p);
  689|    704|        }
  690|    704|        else {
  691|    704|            return reinterpret_cast<T*>(s.m_fp);
  692|    704|        }
  693|    704|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|    704|            [](float_reader<CharT>& r, auto&&... args) {
 4159|    704|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|    704|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    704|        {
  662|    704|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5871|    704|    {
 5872|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    704|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    704|                          basic_contiguous_scan_context<char_type>>) {
 5876|    704|            auto rd = make_reader<T, char_type>();
 5877|    704|            return impl(rd, range, value);
 5878|    704|        }
 5879|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    704|            auto rd = make_reader<T, char_type>();
 5881|    704|            if (!is_segment_contiguous(range)) {
 5882|    704|                return impl(rd, range, value);
 5883|    704|            }
 5884|    704|            auto crange = get_as_contiguous(range);
 5885|    704|            SCN_TRY(it, impl(rd, crange, value));
 5886|    704|            return ranges::next(range.begin(),
 5887|    704|                                ranges::distance(crange.begin(), it));
 5888|    704|        }
 5889|    704|        else {
 5890|    704|            SCN_EXPECT(false);
 5891|    704|            SCN_UNREACHABLE;
 5892|    704|        }
 5893|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5863|    704|    {
 5864|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    704|                        .transform_error(make_eof_scan_error));
 5866|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    704|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5266|    704|    {
 5267|    704|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    704|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|    704|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5871|    704|    {
 5872|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    704|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    704|                          basic_contiguous_scan_context<char_type>>) {
 5876|    704|            auto rd = make_reader<T, char_type>();
 5877|    704|            return impl(rd, range, value);
 5878|    704|        }
 5879|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    704|            auto rd = make_reader<T, char_type>();
 5881|    704|            if (!is_segment_contiguous(range)) {
 5882|    704|                return impl(rd, range, value);
 5883|    704|            }
 5884|    704|            auto crange = get_as_contiguous(range);
 5885|    704|            SCN_TRY(it, impl(rd, crange, value));
 5886|    704|            return ranges::next(range.begin(),
 5887|    704|                                ranges::distance(crange.begin(), it));
 5888|    704|        }
 5889|    704|        else {
 5890|    704|            SCN_EXPECT(false);
 5891|    704|            SCN_UNREACHABLE;
 5892|    704|        }
 5893|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5863|    704|    {
 5864|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    704|                        .transform_error(make_eof_scan_error));
 5866|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    704|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5266|    704|    {
 5267|    704|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    704|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|    704|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5871|    704|    {
 5872|    704|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    704|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    704|                          basic_contiguous_scan_context<char_type>>) {
 5876|    704|            auto rd = make_reader<T, char_type>();
 5877|    704|            return impl(rd, range, value);
 5878|    704|        }
 5879|    704|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    704|            auto rd = make_reader<T, char_type>();
 5881|    704|            if (!is_segment_contiguous(range)) {
 5882|    704|                return impl(rd, range, value);
 5883|    704|            }
 5884|    704|            auto crange = get_as_contiguous(range);
 5885|    704|            SCN_TRY(it, impl(rd, crange, value));
 5886|    704|            return ranges::next(range.begin(),
 5887|    704|                                ranges::distance(crange.begin(), it));
 5888|    704|        }
 5889|    704|        else {
 5890|    704|            SCN_EXPECT(false);
 5891|    704|            SCN_UNREACHABLE;
 5892|    704|        }
 5893|    704|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5863|    704|    {
 5864|    704|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    704|                        .transform_error(make_eof_scan_error));
 5866|    704|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    704|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5266|    704|    {
 5267|    704|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    704|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|    704|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|    704|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   264k|    {
 2879|   264k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   562k|    {
 2883|   562k|        return m_current;
 2884|   562k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   465k|    {
 2888|   465k|        return m_range.end();
 2889|   465k|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   285k|{
 1221|       |    // TODO: optimize
 1222|   285k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   285k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   285k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   285k|    auto res = get_next_code_point(str);
 1224|   285k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   285k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   167k|    {
 2903|   167k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   167k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   167k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 167k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   167k|        }
 2909|   167k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   167k|    static_cast<    \
  |  |  929|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   167k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  12.0k|    {
 2893|  12.0k|        return ranges::subrange{begin(), end()};
 2894|  12.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6037|  2.04k|    {
 6038|  2.04k|        const bool need_skipped_width =
 6039|  2.04k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 1.15k, False: 894]
  |  Branch (6039:33): [True: 0, False: 894]
  ------------------
 6040|  2.04k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|  2.04k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 0, False: 2.04k]
  ------------------
 6044|  2.04k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 234, False: 1.81k]
  ------------------
 6045|    234|            return skip_fill(rng, specs.precision, specs.fill,
 6046|    234|                             need_skipped_width);
 6047|    234|        }
 6048|  1.81k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 1.72k, False: 90]
  |  Branch (6048:56): [True: 1.51k, False: 204]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|  1.51k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 1.51k]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|  3.03k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  1.51k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.51k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.51k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.51k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.51k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|  3.03k|                            make_eof_scan_error));
 6059|       |
 6060|  3.03k|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 1.02k, False: 494]
  ------------------
 6061|  1.02k|                return result_type{
 6062|  1.02k|                    it,
 6063|  1.02k|                    calculate_text_width(make_contiguous_buffer(
 6064|  1.02k|                                             ranges::subrange{rng.begin(), it})
 6065|  1.02k|                                             .view())};
 6066|  1.02k|            }
 6067|    494|            return result_type{it, 0};
 6068|  3.03k|        }
 6069|       |
 6070|    294|        return result_type{rng.begin(), 0};
 6071|  1.81k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6079|    260|    {
 6080|    260|        const bool need_skipped_width =
 6081|    260|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 146, False: 114]
  |  Branch (6081:33): [True: 0, False: 114]
  ------------------
 6082|    260|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|    260|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 10, False: 250]
  ------------------
 6085|    260|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 32, False: 218]
  ------------------
 6086|     42|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|     42|                             specs.fill, need_skipped_width);
 6088|     42|        }
 6089|    218|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 218, False: 0]
  ------------------
 6090|    218|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 170, False: 48]
  ------------------
 6091|    218|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 128, False: 42]
  |  Branch (6091:35): [True: 126, False: 2]
  ------------------
 6092|    170|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 44]
  ------------------
 6093|    126|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|    126|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 126]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|    252|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|    252|                            make_eof_scan_error));
 6104|       |
 6105|    252|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 126, False: 0]
  ------------------
 6106|    126|                return result_type{
 6107|    126|                    it,
 6108|    126|                    calculate_text_width(make_contiguous_buffer(
 6109|    126|                                             ranges::subrange{rng.begin(), it})
 6110|    126|                                             .view())};
 6111|    126|            }
 6112|      0|            return result_type{it, 0};
 6113|    252|        }
 6114|     92|        return result_type{rng.begin(), 0};
 6115|    218|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6178|    274|    {
 6179|    274|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    274|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    274|                          basic_contiguous_scan_context<char_type>>) {
 6183|    274|            auto rd = make_reader<T, char_type>();
 6184|    274|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 250]
  |  |  ------------------
  ------------------
 6185|     24|                return unexpected(e);
 6186|     24|            }
 6187|       |
 6188|    250|            return impl(rd, range, value);
 6189|    274|        }
 6190|    274|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    274|            auto rd = make_reader<T, char_type>();
 6192|    274|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    274|                return unexpected(e);
 6194|    274|            }
 6195|       |
 6196|    274|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    274|                specs.width != 0) {
 6198|    274|                return impl(rd, range, value);
 6199|    274|            }
 6200|       |
 6201|    274|            auto crange = get_as_contiguous(range);
 6202|    274|            SCN_TRY(it, impl(rd, crange, value));
 6203|    274|            return ranges::next(range.begin(),
 6204|    274|                                ranges::distance(crange.begin(), it));
 6205|    274|        }
 6206|    274|        else {
 6207|    274|            SCN_EXPECT(false);
 6208|    274|            SCN_UNREACHABLE;
 6209|    274|        }
 6210|    274|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    250|    {
 6121|    250|        const bool need_skipped_width =
 6122|    250|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 128, False: 122]
  |  Branch (6122:33): [True: 0, False: 122]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    250|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    250|        auto [it, prefix_width] = prefix_result;
 6127|    250|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    250|        std::ptrdiff_t value_width = 0;
 6131|    250|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 250]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    250|        else {
 6147|    250|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 250, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    250|    }                                                  \
  |  | 3642|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6178|    274|    {
 6179|    274|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    274|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    274|                          basic_contiguous_scan_context<char_type>>) {
 6183|    274|            auto rd = make_reader<T, char_type>();
 6184|    274|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 250]
  |  |  ------------------
  ------------------
 6185|     24|                return unexpected(e);
 6186|     24|            }
 6187|       |
 6188|    250|            return impl(rd, range, value);
 6189|    274|        }
 6190|    274|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    274|            auto rd = make_reader<T, char_type>();
 6192|    274|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    274|                return unexpected(e);
 6194|    274|            }
 6195|       |
 6196|    274|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    274|                specs.width != 0) {
 6198|    274|                return impl(rd, range, value);
 6199|    274|            }
 6200|       |
 6201|    274|            auto crange = get_as_contiguous(range);
 6202|    274|            SCN_TRY(it, impl(rd, crange, value));
 6203|    274|            return ranges::next(range.begin(),
 6204|    274|                                ranges::distance(crange.begin(), it));
 6205|    274|        }
 6206|    274|        else {
 6207|    274|            SCN_EXPECT(false);
 6208|    274|            SCN_UNREACHABLE;
 6209|    274|        }
 6210|    274|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    250|    {
 6121|    250|        const bool need_skipped_width =
 6122|    250|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 128, False: 122]
  |  Branch (6122:33): [True: 0, False: 122]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    250|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    250|        auto [it, prefix_width] = prefix_result;
 6127|    250|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    250|        std::ptrdiff_t value_width = 0;
 6131|    250|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 250]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    250|        else {
 6147|    250|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 250, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    250|    }                                                  \
  |  | 3642|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6178|    264|    {
 6179|    264|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    264|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    264|                          basic_contiguous_scan_context<char_type>>) {
 6183|    264|            auto rd = make_reader<T, char_type>();
 6184|    264|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 206]
  |  |  ------------------
  ------------------
 6185|     58|                return unexpected(e);
 6186|     58|            }
 6187|       |
 6188|    206|            return impl(rd, range, value);
 6189|    264|        }
 6190|    264|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    264|            auto rd = make_reader<T, char_type>();
 6192|    264|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    264|                return unexpected(e);
 6194|    264|            }
 6195|       |
 6196|    264|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    264|                specs.width != 0) {
 6198|    264|                return impl(rd, range, value);
 6199|    264|            }
 6200|       |
 6201|    264|            auto crange = get_as_contiguous(range);
 6202|    264|            SCN_TRY(it, impl(rd, crange, value));
 6203|    264|            return ranges::next(range.begin(),
 6204|    264|                                ranges::distance(crange.begin(), it));
 6205|    264|        }
 6206|    264|        else {
 6207|    264|            SCN_EXPECT(false);
 6208|    264|            SCN_UNREACHABLE;
 6209|    264|        }
 6210|    264|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5753|    264|    {
 5754|    264|        reader_error_handler eh{};
 5755|    264|        detail::check_pointer_type_specs(specs, eh);
 5756|    264|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 206]
  |  |  ------------------
  ------------------
 5757|     58|            return {scan_error::invalid_format_string, eh.m_msg};
 5758|     58|        }
 5759|    206|        return {};
 5760|    264|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6120|    206|    {
 6121|    206|        const bool need_skipped_width =
 6122|    206|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 128, False: 78]
  |  Branch (6122:33): [True: 0, False: 78]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    206|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    206|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    206|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    206|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    206|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 206]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    206|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    206|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    206|        auto [it, prefix_width] = prefix_result;
 6127|    206|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    206|        std::ptrdiff_t value_width = 0;
 6131|    206|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 206]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    206|        else {
 6147|    206|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    206|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    206|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    206|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 206, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    206|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    206|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    206|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    206|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    206|    }                                                  \
  |  | 3642|    206|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    206|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5782|    206|    {
 5783|    206|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    206|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5784|    206|        return read_default(range, value, loc);
 5785|    206|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6178|    274|    {
 6179|    274|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    274|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    274|                          basic_contiguous_scan_context<char_type>>) {
 6183|    274|            auto rd = make_reader<T, char_type>();
 6184|    274|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 252]
  |  |  ------------------
  ------------------
 6185|     22|                return unexpected(e);
 6186|     22|            }
 6187|       |
 6188|    252|            return impl(rd, range, value);
 6189|    274|        }
 6190|    274|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    274|            auto rd = make_reader<T, char_type>();
 6192|    274|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    274|                return unexpected(e);
 6194|    274|            }
 6195|       |
 6196|    274|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    274|                specs.width != 0) {
 6198|    274|                return impl(rd, range, value);
 6199|    274|            }
 6200|       |
 6201|    274|            auto crange = get_as_contiguous(range);
 6202|    274|            SCN_TRY(it, impl(rd, crange, value));
 6203|    274|            return ranges::next(range.begin(),
 6204|    274|                                ranges::distance(crange.begin(), it));
 6205|    274|        }
 6206|    274|        else {
 6207|    274|            SCN_EXPECT(false);
 6208|    274|            SCN_UNREACHABLE;
 6209|    274|        }
 6210|    274|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|    274|    {
 3040|    274|        reader_error_handler eh{};
 3041|    274|        get_derived().check_specs_impl(specs, eh);
 3042|    274|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 252]
  |  |  ------------------
  ------------------
 3043|     22|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|     22|        }
 3045|    252|        return {};
 3046|    274|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|    274|    {
 3051|    274|        return static_cast<Derived&>(*this);
 3052|    274|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5497|    274|    {
 5498|    274|        detail::check_bool_type_specs(specs, eh);
 5499|    274|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    252|    {
 6121|    252|        const bool need_skipped_width =
 6122|    252|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 128, False: 124]
  |  Branch (6122:33): [True: 0, False: 124]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    252|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    252|        auto [it, prefix_width] = prefix_result;
 6127|    252|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    252|        std::ptrdiff_t value_width = 0;
 6131|    252|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 252]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    252|        else {
 6147|    252|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 252, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    252|    }                                                  \
  |  | 3642|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5529|    252|    {
 5530|    252|        SCN_GCC_COMPAT_PUSH
 5531|    252|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5532|       |
 5533|    252|        switch (specs.type) {
 5534|      2|            case detail::presentation_type::string:
  ------------------
  |  Branch (5534:13): [True: 2, False: 250]
  ------------------
 5535|      2|                return bool_reader_base::allow_text;
 5536|       |
 5537|      0|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5537:13): [True: 0, False: 252]
  ------------------
 5538|     16|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5538:13): [True: 16, False: 236]
  ------------------
 5539|     18|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5539:13): [True: 2, False: 250]
  ------------------
 5540|     20|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5540:13): [True: 2, False: 250]
  ------------------
 5541|     20|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5541:13): [True: 0, False: 252]
  ------------------
 5542|     34|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5542:13): [True: 14, False: 238]
  ------------------
 5543|     34|                return bool_reader_base::allow_numeric;
 5544|       |
 5545|    216|            default:
  ------------------
  |  Branch (5545:13): [True: 216, False: 36]
  ------------------
 5546|    216|                return bool_reader_base::allow_text |
 5547|    216|                       bool_reader_base::allow_numeric;
 5548|    252|        }
 5549|       |
 5550|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5551|    252|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5516|    252|    {
 5517|    252|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5518|       |
 5519|    252|#if !SCN_DISABLE_LOCALE
 5520|    252|        if (specs.localized) {
  ------------------
  |  Branch (5520:13): [True: 10, False: 242]
  ------------------
 5521|     10|            return rd.read_localized(range, loc, value);
 5522|     10|        }
 5523|    242|#endif
 5524|       |
 5525|    242|        return rd.read_classic(range, value);
 5526|    252|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5428|     10|    {
 5429|     10|        scan_error err{scan_error::invalid_scanned_value,
 5430|     10|                       "Failed to read boolean"};
 5431|       |
 5432|     10|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5432:13): [True: 10, False: 0]
  ------------------
 5433|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5433:22): [True: 0, False: 10]
  ------------------
 5434|      0|                return *r;
 5435|      0|            }
 5436|     10|            else {
 5437|     10|                err = r.error();
 5438|     10|            }
 5439|     10|        }
 5440|       |
 5441|     10|        if (m_options & allow_text) {
  ------------------
  |  Branch (5441:13): [True: 10, False: 0]
  ------------------
 5442|     10|            auto stdloc = loc.get<std::locale>();
 5443|     10|            const auto& numpunct =
 5444|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5445|     10|            const auto truename = numpunct.truename();
 5446|     10|            const auto falsename = numpunct.falsename();
 5447|       |
 5448|     10|            if (auto r =
  ------------------
  |  Branch (5448:22): [True: 0, False: 10]
  ------------------
 5449|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5450|      0|                return *r;
 5451|      0|            }
 5452|     10|            else {
 5453|     10|                err = r.error();
 5454|     10|            }
 5455|     10|        }
 5456|       |
 5457|     10|        return unexpected(err);
 5458|     10|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5468|     10|    {
 5469|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5470|     10|        const auto shorter = std::pair{
 5471|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5471:13): [True: 10, False: 0]
  ------------------
 5472|     10|        const auto longer = std::pair{
 5473|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5473:13): [True: 0, False: 10]
  ------------------
 5474|       |
 5475|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5475:18): [True: 0, False: 10]
  ------------------
 5476|      0|            value = shorter.second;
 5477|      0|            return *r;
 5478|      0|        }
 5479|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5479:18): [True: 0, False: 10]
  ------------------
 5480|      0|            value = longer.second;
 5481|      0|            return *r;
 5482|      0|        }
 5483|       |
 5484|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5485|     10|                                     "read_textual: No match");
 5486|     10|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     20|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     20|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     20|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     20|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 2185|     20|        return unexpected(parse_error::error);
 2186|     20|    }
 2187|      0|    return it;
 2188|     20|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6178|    264|    {
 6179|    264|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    264|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    264|                          basic_contiguous_scan_context<char_type>>) {
 6183|    264|            auto rd = make_reader<T, char_type>();
 6184|    264|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 240]
  |  |  ------------------
  ------------------
 6185|     24|                return unexpected(e);
 6186|     24|            }
 6187|       |
 6188|    240|            return impl(rd, range, value);
 6189|    264|        }
 6190|    264|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    264|            auto rd = make_reader<T, char_type>();
 6192|    264|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    264|                return unexpected(e);
 6194|    264|            }
 6195|       |
 6196|    264|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    264|                specs.width != 0) {
 6198|    264|                return impl(rd, range, value);
 6199|    264|            }
 6200|       |
 6201|    264|            auto crange = get_as_contiguous(range);
 6202|    264|            SCN_TRY(it, impl(rd, crange, value));
 6203|    264|            return ranges::next(range.begin(),
 6204|    264|                                ranges::distance(crange.begin(), it));
 6205|    264|        }
 6206|    264|        else {
 6207|    264|            SCN_EXPECT(false);
 6208|    264|            SCN_UNREACHABLE;
 6209|    264|        }
 6210|    264|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    240|    {
 6121|    240|        const bool need_skipped_width =
 6122|    240|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 128, False: 112]
  |  Branch (6122:33): [True: 0, False: 112]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    240|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 240]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    240|        auto [it, prefix_width] = prefix_result;
 6127|    240|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    240|        std::ptrdiff_t value_width = 0;
 6131|    240|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 240]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    240|        else {
 6147|    240|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 34, False: 206]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     34|    }                                                  \
  |  | 3642|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|    206|                                             specs, value, loc));
 6149|       |
 6150|    206|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 128, False: 78]
  ------------------
 6151|    128|                value_width = calculate_text_width(
 6152|    128|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    128|                        .view());
 6154|    128|            }
 6155|    206|        }
 6156|       |
 6157|       |        // Read postfix
 6158|    206|        std::ptrdiff_t postfix_width = 0;
 6159|    206|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 206, False: 0]
  ------------------
 6160|    206|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|    206|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    206|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    206|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    206|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 206]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    206|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    206|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|    206|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|    206|                                 rd.skip_ws_before_read(), prefix_width,
 6163|    206|                                 value_width));
 6164|    206|            std::tie(it, postfix_width) = postfix_result;
 6165|    206|        }
 6166|       |
 6167|    206|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|    206|                                                 value_width, postfix_width);
 6169|    206|            !e) {
  ------------------
  |  Branch (6169:13): [True: 126, False: 80]
  ------------------
 6170|    126|            return unexpected(e);
 6171|    126|        }
 6172|       |
 6173|     80|        return it;
 6174|    206|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6178|    274|    {
 6179|    274|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    274|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    274|                          basic_contiguous_scan_context<char_type>>) {
 6183|    274|            auto rd = make_reader<T, char_type>();
 6184|    274|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 224]
  |  |  ------------------
  ------------------
 6185|     50|                return unexpected(e);
 6186|     50|            }
 6187|       |
 6188|    224|            return impl(rd, range, value);
 6189|    274|        }
 6190|    274|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    274|            auto rd = make_reader<T, char_type>();
 6192|    274|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    274|                return unexpected(e);
 6194|    274|            }
 6195|       |
 6196|    274|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    274|                specs.width != 0) {
 6198|    274|                return impl(rd, range, value);
 6199|    274|            }
 6200|       |
 6201|    274|            auto crange = get_as_contiguous(range);
 6202|    274|            SCN_TRY(it, impl(rd, crange, value));
 6203|    274|            return ranges::next(range.begin(),
 6204|    274|                                ranges::distance(crange.begin(), it));
 6205|    274|        }
 6206|    274|        else {
 6207|    274|            SCN_EXPECT(false);
 6208|    274|            SCN_UNREACHABLE;
 6209|    274|        }
 6210|    274|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    224|    {
 6121|    224|        const bool need_skipped_width =
 6122|    224|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 128, False: 96]
  |  Branch (6122:33): [True: 0, False: 96]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    224|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    224|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    224|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    224|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 224]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    224|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    224|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    224|        auto [it, prefix_width] = prefix_result;
 6127|    224|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    224|        std::ptrdiff_t value_width = 0;
 6131|    224|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 224]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    224|        else {
 6147|    224|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    224|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    224|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 224, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    224|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    224|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    224|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    224|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    224|    }                                                  \
  |  | 3642|    224|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    224|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6178|    264|    {
 6179|    264|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    264|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    264|                          basic_contiguous_scan_context<char_type>>) {
 6183|    264|            auto rd = make_reader<T, char_type>();
 6184|    264|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56, False: 208]
  |  |  ------------------
  ------------------
 6185|     56|                return unexpected(e);
 6186|     56|            }
 6187|       |
 6188|    208|            return impl(rd, range, value);
 6189|    264|        }
 6190|    264|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    264|            auto rd = make_reader<T, char_type>();
 6192|    264|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    264|                return unexpected(e);
 6194|    264|            }
 6195|       |
 6196|    264|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    264|                specs.width != 0) {
 6198|    264|                return impl(rd, range, value);
 6199|    264|            }
 6200|       |
 6201|    264|            auto crange = get_as_contiguous(range);
 6202|    264|            SCN_TRY(it, impl(rd, crange, value));
 6203|    264|            return ranges::next(range.begin(),
 6204|    264|                                ranges::distance(crange.begin(), it));
 6205|    264|        }
 6206|    264|        else {
 6207|    264|            SCN_EXPECT(false);
 6208|    264|            SCN_UNREACHABLE;
 6209|    264|        }
 6210|    264|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6120|    208|    {
 6121|    208|        const bool need_skipped_width =
 6122|    208|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 128, False: 80]
  |  Branch (6122:33): [True: 0, False: 80]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    208|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    208|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    208|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    208|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 208]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    208|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    208|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    208|        auto [it, prefix_width] = prefix_result;
 6127|    208|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    208|        std::ptrdiff_t value_width = 0;
 6131|    208|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 208]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    208|        else {
 6147|    208|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    208|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    208|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 118, False: 90]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    118|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    118|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    118|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    118|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    118|    }                                                  \
  |  | 3642|    208|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    208|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|     90|                                             specs, value, loc));
 6149|       |
 6150|     90|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 66, False: 24]
  ------------------
 6151|     66|                value_width = calculate_text_width(
 6152|     66|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|     66|                        .view());
 6154|     66|            }
 6155|     90|        }
 6156|       |
 6157|       |        // Read postfix
 6158|     90|        std::ptrdiff_t postfix_width = 0;
 6159|     90|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 18, False: 72]
  ------------------
 6160|     18|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|     18|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|     18|                                 rd.skip_ws_before_read(), prefix_width,
 6163|     18|                                 value_width));
 6164|     18|            std::tie(it, postfix_width) = postfix_result;
 6165|     18|        }
 6166|       |
 6167|     90|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|     90|                                                 value_width, postfix_width);
 6169|     90|            !e) {
  ------------------
  |  Branch (6169:13): [True: 16, False: 74]
  ------------------
 6170|     16|            return unexpected(e);
 6171|     16|        }
 6172|       |
 6173|     74|        return it;
 6174|     90|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6178|    264|    {
 6179|    264|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    264|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    264|                          basic_contiguous_scan_context<char_type>>) {
 6183|    264|            auto rd = make_reader<T, char_type>();
 6184|    264|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56, False: 208]
  |  |  ------------------
  ------------------
 6185|     56|                return unexpected(e);
 6186|     56|            }
 6187|       |
 6188|    208|            return impl(rd, range, value);
 6189|    264|        }
 6190|    264|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    264|            auto rd = make_reader<T, char_type>();
 6192|    264|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    264|                return unexpected(e);
 6194|    264|            }
 6195|       |
 6196|    264|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    264|                specs.width != 0) {
 6198|    264|                return impl(rd, range, value);
 6199|    264|            }
 6200|       |
 6201|    264|            auto crange = get_as_contiguous(range);
 6202|    264|            SCN_TRY(it, impl(rd, crange, value));
 6203|    264|            return ranges::next(range.begin(),
 6204|    264|                                ranges::distance(crange.begin(), it));
 6205|    264|        }
 6206|    264|        else {
 6207|    264|            SCN_EXPECT(false);
 6208|    264|            SCN_UNREACHABLE;
 6209|    264|        }
 6210|    264|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6120|    208|    {
 6121|    208|        const bool need_skipped_width =
 6122|    208|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 128, False: 80]
  |  Branch (6122:33): [True: 0, False: 80]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    208|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    208|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    208|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    208|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 208]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    208|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    208|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    208|        auto [it, prefix_width] = prefix_result;
 6127|    208|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    208|        std::ptrdiff_t value_width = 0;
 6131|    208|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 208]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    208|        else {
 6147|    208|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    208|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    208|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 118, False: 90]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    118|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    118|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    118|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    118|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    118|    }                                                  \
  |  | 3642|    208|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    208|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|     90|                                             specs, value, loc));
 6149|       |
 6150|     90|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 66, False: 24]
  ------------------
 6151|     66|                value_width = calculate_text_width(
 6152|     66|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|     66|                        .view());
 6154|     66|            }
 6155|     90|        }
 6156|       |
 6157|       |        // Read postfix
 6158|     90|        std::ptrdiff_t postfix_width = 0;
 6159|     90|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 18, False: 72]
  ------------------
 6160|     18|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|     18|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|     18|                                 rd.skip_ws_before_read(), prefix_width,
 6163|     18|                                 value_width));
 6164|     18|            std::tie(it, postfix_width) = postfix_result;
 6165|     18|        }
 6166|       |
 6167|     90|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|     90|                                                 value_width, postfix_width);
 6169|     90|            !e) {
  ------------------
  |  Branch (6169:13): [True: 16, False: 74]
  ------------------
 6170|     16|            return unexpected(e);
 6171|     16|        }
 6172|       |
 6173|     74|        return it;
 6174|     90|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6178|    264|    {
 6179|    264|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    264|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    264|                          basic_contiguous_scan_context<char_type>>) {
 6183|    264|            auto rd = make_reader<T, char_type>();
 6184|    264|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56, False: 208]
  |  |  ------------------
  ------------------
 6185|     56|                return unexpected(e);
 6186|     56|            }
 6187|       |
 6188|    208|            return impl(rd, range, value);
 6189|    264|        }
 6190|    264|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    264|            auto rd = make_reader<T, char_type>();
 6192|    264|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    264|                return unexpected(e);
 6194|    264|            }
 6195|       |
 6196|    264|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    264|                specs.width != 0) {
 6198|    264|                return impl(rd, range, value);
 6199|    264|            }
 6200|       |
 6201|    264|            auto crange = get_as_contiguous(range);
 6202|    264|            SCN_TRY(it, impl(rd, crange, value));
 6203|    264|            return ranges::next(range.begin(),
 6204|    264|                                ranges::distance(crange.begin(), it));
 6205|    264|        }
 6206|    264|        else {
 6207|    264|            SCN_EXPECT(false);
 6208|    264|            SCN_UNREACHABLE;
 6209|    264|        }
 6210|    264|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6120|    208|    {
 6121|    208|        const bool need_skipped_width =
 6122|    208|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 128, False: 80]
  |  Branch (6122:33): [True: 0, False: 80]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    208|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    208|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    208|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    208|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 208]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    208|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    208|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    208|        auto [it, prefix_width] = prefix_result;
 6127|    208|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    208|        std::ptrdiff_t value_width = 0;
 6131|    208|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 208]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    208|        else {
 6147|    208|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    208|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    208|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 118, False: 90]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    118|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    118|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    118|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    118|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    118|    }                                                  \
  |  | 3642|    208|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    208|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|     90|                                             specs, value, loc));
 6149|       |
 6150|     90|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 66, False: 24]
  ------------------
 6151|     66|                value_width = calculate_text_width(
 6152|     66|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|     66|                        .view());
 6154|     66|            }
 6155|     90|        }
 6156|       |
 6157|       |        // Read postfix
 6158|     90|        std::ptrdiff_t postfix_width = 0;
 6159|     90|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 18, False: 72]
  ------------------
 6160|     18|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|     18|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|     18|                                 rd.skip_ws_before_read(), prefix_width,
 6163|     18|                                 value_width));
 6164|     18|            std::tie(it, postfix_width) = postfix_result;
 6165|     18|        }
 6166|       |
 6167|     90|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|     90|                                                 value_width, postfix_width);
 6169|     90|            !e) {
  ------------------
  |  Branch (6169:13): [True: 16, False: 74]
  ------------------
 6170|     16|            return unexpected(e);
 6171|     16|        }
 6172|       |
 6173|     74|        return it;
 6174|     90|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3492|  1.36k|    {
 3493|  1.36k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3643|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3494|  1.36k|                                   .transform_error(make_eof_scan_error));
 3495|       |
 3496|  1.36k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3496:23): [Folded - Ignored]
  ------------------
 3497|  1.36k|            if (prefix_result.sign == sign_type::minus_sign) {
 3498|  1.36k|                return unexpected_scan_error(
 3499|  1.36k|                    scan_error::invalid_scanned_value,
 3500|  1.36k|                    "Unexpected '-' sign when parsing an "
 3501|  1.36k|                    "unsigned value");
 3502|  1.36k|            }
 3503|  1.36k|        }
 3504|       |
 3505|  1.36k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3505:13): [True: 0, False: 1.36k]
  ------------------
 3506|      0|            value = T{0};
 3507|      0|            return std::next(prefix_result.iterator);
 3508|      0|        }
 3509|       |
 3510|  2.73k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3511|  2.73k|                parse_integer_digits_without_thsep(
 3512|  2.73k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3513|  2.73k|                    prefix_result.parsed_base));
 3514|       |
 3515|  2.73k|        auto buf = make_contiguous_buffer(
 3516|  2.73k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3517|  2.73k|        SCN_TRY(result_it,
  ------------------
  |  | 3643|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.36k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.36k|    }                                                  \
  |  |  |  | 3642|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3518|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3519|      0|                                    prefix_result.parsed_base));
 3520|       |
 3521|      0|        return ranges::next(prefix_result.iterator,
 3522|      0|                            ranges::distance(buf.view().begin(), result_it));
 3523|  2.73k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3492|  1.36k|    {
 3493|  1.36k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3643|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3494|  1.36k|                                   .transform_error(make_eof_scan_error));
 3495|       |
 3496|  1.36k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3496:23): [Folded - Ignored]
  ------------------
 3497|  1.36k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3497:17): [True: 0, False: 1.36k]
  ------------------
 3498|      0|                return unexpected_scan_error(
 3499|      0|                    scan_error::invalid_scanned_value,
 3500|      0|                    "Unexpected '-' sign when parsing an "
 3501|      0|                    "unsigned value");
 3502|      0|            }
 3503|  1.36k|        }
 3504|       |
 3505|  1.36k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3505:13): [True: 0, False: 1.36k]
  ------------------
 3506|      0|            value = T{0};
 3507|      0|            return std::next(prefix_result.iterator);
 3508|      0|        }
 3509|       |
 3510|  2.73k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3511|  2.73k|                parse_integer_digits_without_thsep(
 3512|  2.73k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3513|  2.73k|                    prefix_result.parsed_base));
 3514|       |
 3515|  2.73k|        auto buf = make_contiguous_buffer(
 3516|  2.73k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3517|  2.73k|        SCN_TRY(result_it,
  ------------------
  |  | 3643|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.36k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.36k|    }                                                  \
  |  |  |  | 3642|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3518|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3519|      0|                                    prefix_result.parsed_base));
 3520|       |
 3521|      0|        return ranges::next(prefix_result.iterator,
 3522|      0|                            ranges::distance(buf.view().begin(), result_it));
 3523|  2.73k|    }

LLVMFuzzerTestOneInput:
   68|  7.34k|{
   69|  7.34k|    scn::fuzz::run(data, size);
   70|  7.34k|    return 0;
   71|  7.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  7.34k|{
   52|  7.34k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 7.34k]
  |  Branch (52:35): [True: 0, False: 7.34k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  7.34k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  7.34k|    run_for_source(sv);
   59|  7.34k|    run_for_source(wsv_reinterpret);
   60|  7.34k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 7.34k, False: 0]
  ------------------
   61|  7.34k|        run_for_source(wsv_transcode);
   62|  7.34k|    }
   63|  7.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  7.34k|{
   37|  7.34k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  7.34k|    run_for_type<char_type>(source);
   40|  7.34k|    run_for_type<int>(source);
   41|  7.34k|    run_for_type<unsigned>(source);
   42|  7.34k|    run_for_type<double>(source);
   43|  7.34k|    run_for_type<bool>(source);
   44|  7.34k|    run_for_type<void*>(source);
   45|  7.34k|    run_for_type<std::string>(source);
   46|  7.34k|    run_for_type<std::wstring>(source);
   47|  7.34k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  7.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  7.34k|{
   25|  7.34k|    {
   26|  7.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.34k|    }
   28|  7.34k|    {
   29|  7.34k|        auto _ =
   30|  7.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.34k|    }
   32|  7.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  7.34k|{
   25|  7.34k|    {
   26|  7.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.34k|    }
   28|  7.34k|    {
   29|  7.34k|        auto _ =
   30|  7.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.34k|    }
   32|  7.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  7.34k|{
   25|  7.34k|    {
   26|  7.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.34k|    }
   28|  7.34k|    {
   29|  7.34k|        auto _ =
   30|  7.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.34k|    }
   32|  7.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  7.34k|{
   25|  7.34k|    {
   26|  7.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.34k|    }
   28|  7.34k|    {
   29|  7.34k|        auto _ =
   30|  7.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.34k|    }
   32|  7.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  7.34k|{
   25|  7.34k|    {
   26|  7.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.34k|    }
   28|  7.34k|    {
   29|  7.34k|        auto _ =
   30|  7.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.34k|    }
   32|  7.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  7.34k|{
   25|  7.34k|    {
   26|  7.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.34k|    }
   28|  7.34k|    {
   29|  7.34k|        auto _ =
   30|  7.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.34k|    }
   32|  7.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  7.34k|{
   25|  7.34k|    {
   26|  7.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.34k|    }
   28|  7.34k|    {
   29|  7.34k|        auto _ =
   30|  7.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.34k|    }
   32|  7.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  7.34k|{
   25|  7.34k|    {
   26|  7.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.34k|    }
   28|  7.34k|    {
   29|  7.34k|        auto _ =
   30|  7.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.34k|    }
   32|  7.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  7.34k|{
   25|  7.34k|    {
   26|  7.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.34k|    }
   28|  7.34k|    {
   29|  7.34k|        auto _ =
   30|  7.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.34k|    }
   32|  7.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  14.6k|{
   37|  14.6k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  14.6k|    run_for_type<char_type>(source);
   40|  14.6k|    run_for_type<int>(source);
   41|  14.6k|    run_for_type<unsigned>(source);
   42|  14.6k|    run_for_type<double>(source);
   43|  14.6k|    run_for_type<bool>(source);
   44|  14.6k|    run_for_type<void*>(source);
   45|  14.6k|    run_for_type<std::string>(source);
   46|  14.6k|    run_for_type<std::wstring>(source);
   47|  14.6k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  14.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  14.6k|{
   25|  14.6k|    {
   26|  14.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.6k|    }
   28|  14.6k|    {
   29|  14.6k|        auto _ =
   30|  14.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.6k|    }
   32|  14.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  14.6k|{
   25|  14.6k|    {
   26|  14.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.6k|    }
   28|  14.6k|    {
   29|  14.6k|        auto _ =
   30|  14.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.6k|    }
   32|  14.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  14.6k|{
   25|  14.6k|    {
   26|  14.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.6k|    }
   28|  14.6k|    {
   29|  14.6k|        auto _ =
   30|  14.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.6k|    }
   32|  14.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  14.6k|{
   25|  14.6k|    {
   26|  14.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.6k|    }
   28|  14.6k|    {
   29|  14.6k|        auto _ =
   30|  14.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.6k|    }
   32|  14.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  14.6k|{
   25|  14.6k|    {
   26|  14.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.6k|    }
   28|  14.6k|    {
   29|  14.6k|        auto _ =
   30|  14.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.6k|    }
   32|  14.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  14.6k|{
   25|  14.6k|    {
   26|  14.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.6k|    }
   28|  14.6k|    {
   29|  14.6k|        auto _ =
   30|  14.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.6k|    }
   32|  14.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  14.6k|{
   25|  14.6k|    {
   26|  14.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.6k|    }
   28|  14.6k|    {
   29|  14.6k|        auto _ =
   30|  14.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.6k|    }
   32|  14.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  14.6k|{
   25|  14.6k|    {
   26|  14.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.6k|    }
   28|  14.6k|    {
   29|  14.6k|        auto _ =
   30|  14.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.6k|    }
   32|  14.6k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  14.6k|{
   25|  14.6k|    {
   26|  14.6k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.6k|    }
   28|  14.6k|    {
   29|  14.6k|        auto _ =
   30|  14.6k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.6k|    }
   32|  14.6k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  7.34k|{
   52|  7.34k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  7.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  7.34k|    string_buffer.resize(size);
   56|  7.34k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  7.34k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  7.34k|    const auto wsv_reinterpret_size =
   61|  7.34k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 100, False: 7.24k]
  ------------------
   62|  7.34k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  7.34k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  7.34k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  7.34k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  7.34k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  7.34k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  7.34k|}

